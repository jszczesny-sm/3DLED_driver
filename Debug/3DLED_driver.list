
3DLED_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b318  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e0  0800b4b8  0800b4b8  0001b4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc98  0800bc98  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc98  0800bc98  0001bc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bca0  0800bca0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bca0  0800bca0  0001bca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bca4  0800bca4  0001bca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800bca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e0c  20000088  0800bd30  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e94  0800bd30  00021e94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016901  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032a6  00000000  00000000  000369b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  00039c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  0003b058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019983  00000000  00000000  0003c2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000193b2  00000000  00000000  00055c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009327d  00000000  00000000  0006f02d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001022aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cbc  00000000  00000000  001022fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b4a0 	.word	0x0800b4a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	0800b4a0 	.word	0x0800b4a0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	f5ad 4dc7 	sub.w	sp, sp, #25472	; 0x6380
 800059a:	b091      	sub	sp, #68	; 0x44
 800059c:	af02      	add	r7, sp, #8
    /* USER CODE BEGIN 1 */

    // Layers configuration
    Layer0.timer = &htim1;
 800059e:	4bbf      	ldr	r3, [pc, #764]	; (800089c <main+0x308>)
 80005a0:	4abf      	ldr	r2, [pc, #764]	; (80008a0 <main+0x30c>)
 80005a2:	601a      	str	r2, [r3, #0]
    Layer0.dma = &hdma_tim1_ch1;
 80005a4:	4bbd      	ldr	r3, [pc, #756]	; (800089c <main+0x308>)
 80005a6:	4abf      	ldr	r2, [pc, #764]	; (80008a4 <main+0x310>)
 80005a8:	605a      	str	r2, [r3, #4]
    Layer0.channel = TIM_CHANNEL_1;
 80005aa:	4bbc      	ldr	r3, [pc, #752]	; (800089c <main+0x308>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	721a      	strb	r2, [r3, #8]

    Layer1.timer = &htim2;
 80005b0:	4bbd      	ldr	r3, [pc, #756]	; (80008a8 <main+0x314>)
 80005b2:	4abe      	ldr	r2, [pc, #760]	; (80008ac <main+0x318>)
 80005b4:	601a      	str	r2, [r3, #0]
    Layer1.dma = &hdma_tim2_ch1;
 80005b6:	4bbc      	ldr	r3, [pc, #752]	; (80008a8 <main+0x314>)
 80005b8:	4abd      	ldr	r2, [pc, #756]	; (80008b0 <main+0x31c>)
 80005ba:	605a      	str	r2, [r3, #4]
    Layer1.channel = TIM_CHANNEL_1;
 80005bc:	4bba      	ldr	r3, [pc, #744]	; (80008a8 <main+0x314>)
 80005be:	2200      	movs	r2, #0
 80005c0:	721a      	strb	r2, [r3, #8]

    Layer2.timer = &htim3;
 80005c2:	4bbc      	ldr	r3, [pc, #752]	; (80008b4 <main+0x320>)
 80005c4:	4abc      	ldr	r2, [pc, #752]	; (80008b8 <main+0x324>)
 80005c6:	601a      	str	r2, [r3, #0]
    Layer2.dma = &hdma_tim3_ch1_trig;
 80005c8:	4bba      	ldr	r3, [pc, #744]	; (80008b4 <main+0x320>)
 80005ca:	4abc      	ldr	r2, [pc, #752]	; (80008bc <main+0x328>)
 80005cc:	605a      	str	r2, [r3, #4]
    Layer2.channel = TIM_CHANNEL_1;
 80005ce:	4bb9      	ldr	r3, [pc, #740]	; (80008b4 <main+0x320>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	721a      	strb	r2, [r3, #8]

    Layer3.timer = &htim4;
 80005d4:	4bba      	ldr	r3, [pc, #744]	; (80008c0 <main+0x32c>)
 80005d6:	4abb      	ldr	r2, [pc, #748]	; (80008c4 <main+0x330>)
 80005d8:	601a      	str	r2, [r3, #0]
    Layer3.dma = &hdma_tim4_ch1;
 80005da:	4bb9      	ldr	r3, [pc, #740]	; (80008c0 <main+0x32c>)
 80005dc:	4aba      	ldr	r2, [pc, #744]	; (80008c8 <main+0x334>)
 80005de:	605a      	str	r2, [r3, #4]
    Layer3.channel = TIM_CHANNEL_1;
 80005e0:	4bb7      	ldr	r3, [pc, #732]	; (80008c0 <main+0x32c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	721a      	strb	r2, [r3, #8]

    Layer4.timer = &htim5;
 80005e6:	4bb9      	ldr	r3, [pc, #740]	; (80008cc <main+0x338>)
 80005e8:	4ab9      	ldr	r2, [pc, #740]	; (80008d0 <main+0x33c>)
 80005ea:	601a      	str	r2, [r3, #0]
    Layer4.dma = &hdma_tim5_ch1;
 80005ec:	4bb7      	ldr	r3, [pc, #732]	; (80008cc <main+0x338>)
 80005ee:	4ab9      	ldr	r2, [pc, #740]	; (80008d4 <main+0x340>)
 80005f0:	605a      	str	r2, [r3, #4]
    Layer4.channel = TIM_CHANNEL_1;
 80005f2:	4bb6      	ldr	r3, [pc, #728]	; (80008cc <main+0x338>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	721a      	strb	r2, [r3, #8]

    Layers *layers_array[5];
    layers_array[0] = &Layer0;
 80005f8:	4ba8      	ldr	r3, [pc, #672]	; (800089c <main+0x308>)
 80005fa:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 80005fe:	f102 0218 	add.w	r2, r2, #24
 8000602:	6013      	str	r3, [r2, #0]
    layers_array[1] = &Layer1;
 8000604:	4ba8      	ldr	r3, [pc, #672]	; (80008a8 <main+0x314>)
 8000606:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 800060a:	f102 021c 	add.w	r2, r2, #28
 800060e:	6013      	str	r3, [r2, #0]
    layers_array[2] = &Layer2;
 8000610:	4ba8      	ldr	r3, [pc, #672]	; (80008b4 <main+0x320>)
 8000612:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 8000616:	f102 0220 	add.w	r2, r2, #32
 800061a:	6013      	str	r3, [r2, #0]
    layers_array[3] = &Layer3;
 800061c:	4ba8      	ldr	r3, [pc, #672]	; (80008c0 <main+0x32c>)
 800061e:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 8000622:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8000626:	6013      	str	r3, [r2, #0]
    layers_array[4] = &Layer4;
 8000628:	4ba8      	ldr	r3, [pc, #672]	; (80008cc <main+0x338>)
 800062a:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 800062e:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8000632:	6013      	str	r3, [r2, #0]
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000634:	f002 fe18 	bl	8003268 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000638:	f000 fa42 	bl	8000ac0 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800063c:	f000 fe08 	bl	8001250 <MX_GPIO_Init>
    MX_DMA_Init();
 8000640:	f000 fdb8 	bl	80011b4 <MX_DMA_Init>
    MX_TIM1_Init();
 8000644:	f000 fb14 	bl	8000c70 <MX_TIM1_Init>
    MX_TIM5_Init();
 8000648:	f000 fd14 	bl	8001074 <MX_TIM5_Init>
    MX_FATFS_Init();
 800064c:	f006 fa96 	bl	8006b7c <MX_FATFS_Init>
    MX_SPI1_Init();
 8000650:	f000 faa2 	bl	8000b98 <MX_SPI1_Init>
    MX_USART2_UART_Init();
 8000654:	f000 fd84 	bl	8001160 <MX_USART2_UART_Init>
    MX_SPI3_Init();
 8000658:	f000 fad4 	bl	8000c04 <MX_SPI3_Init>
    MX_TIM3_Init();
 800065c:	f000 fc1e 	bl	8000e9c <MX_TIM3_Init>
    MX_TIM4_Init();
 8000660:	f000 fc92 	bl	8000f88 <MX_TIM4_Init>
    MX_TIM2_Init();
 8000664:	f000 fba4 	bl	8000db0 <MX_TIM2_Init>
    /* USER CODE BEGIN 2 */

    // GPIO configuration
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000668:	2007      	movs	r0, #7
 800066a:	f002 ff8a 	bl	8003582 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800066e:	2008      	movs	r0, #8
 8000670:	f002 ff87 	bl	8003582 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000674:	2009      	movs	r0, #9
 8000676:	f002 ff84 	bl	8003582 <HAL_NVIC_EnableIRQ>

    // LCD initialization
    PCD8544_Init(0x24);
 800067a:	2024      	movs	r0, #36	; 0x24
 800067c:	f002 f94e 	bl	800291c <PCD8544_Init>
    PCD8544_GotoXY(8, 21);
 8000680:	2115      	movs	r1, #21
 8000682:	2008      	movs	r0, #8
 8000684:	f002 fada 	bl	8002c3c <PCD8544_GotoXY>
    PCD8544_Puts("3D_LED_CUBE", PCD8544_Pixel_Set, PCD8544_FontSize_5x7);
 8000688:	2200      	movs	r2, #0
 800068a:	2101      	movs	r1, #1
 800068c:	4892      	ldr	r0, [pc, #584]	; (80008d8 <main+0x344>)
 800068e:	f002 fb97 	bl	8002dc0 <PCD8544_Puts>
    PCD8544_Refresh();
 8000692:	f002 fa35 	bl	8002b00 <PCD8544_Refresh>
    HAL_Delay(2000);
 8000696:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800069a:	f002 fe57 	bl	800334c <HAL_Delay>

    // SD Card initialization
    uint8_t walk_array[32][256][3] = { 0 };
 800069e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80006a2:	3b20      	subs	r3, #32
 80006a4:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f009 fdca 	bl	800a244 <memset>
    ret_status result = STATUS_NULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 80006b6:	f102 022d 	add.w	r2, r2, #45	; 0x2d
 80006ba:	7013      	strb	r3, [r2, #0]
    result = sd_card_init();
 80006bc:	f001 f8ec 	bl	8001898 <sd_card_init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 80006c6:	f102 022d 	add.w	r2, r2, #45	; 0x2d
 80006ca:	7013      	strb	r3, [r2, #0]
    if (STATUS_OK != result) {
 80006cc:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 80006d0:	f103 032d 	add.w	r3, r3, #45	; 0x2d
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d000      	beq.n	80006dc <main+0x148>
//        lcd_clear();
//        lcd_draw_text(0, 0,
//                "Error!!! problem with mount SD card. Try re-attach card and press RESET button",0);
//        lcd_copy();
        while (1)
 80006da:	e7fe      	b.n	80006da <main+0x146>
            ;
    }

    char path[256];

    strcpy(path, "0:/");
 80006dc:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80006e0:	3b20      	subs	r3, #32
 80006e2:	4a7e      	ldr	r2, [pc, #504]	; (80008dc <main+0x348>)
 80006e4:	601a      	str	r2, [r3, #0]
    myprintf("Starting scan dir\n");
 80006e6:	487e      	ldr	r0, [pc, #504]	; (80008e0 <main+0x34c>)
 80006e8:	f001 f8b0 	bl	800184c <myprintf>
    result = sd_card_scan_file((char*) path, (char*) buffor_dirs, &size_dirs);
 80006ec:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80006f0:	3b20      	subs	r3, #32
 80006f2:	4a7c      	ldr	r2, [pc, #496]	; (80008e4 <main+0x350>)
 80006f4:	497c      	ldr	r1, [pc, #496]	; (80008e8 <main+0x354>)
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 f92e 	bl	8001958 <sd_card_scan_file>
 80006fc:	4603      	mov	r3, r0
 80006fe:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 8000702:	f102 022d 	add.w	r2, r2, #45	; 0x2d
 8000706:	7013      	strb	r3, [r2, #0]
    if (STATUS_OK != result) {
 8000708:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 800070c:	f103 032d 	add.w	r3, r3, #45	; 0x2d
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d002      	beq.n	800071c <main+0x188>
//        lcd_clear();
//        lcd_draw_text(0, 0,
//                "Error!!!      problem with scan file in SD card        Press RESET button",0);
//        lcd_copy();
        sd_card_close();
 8000716:	f001 f9a9 	bl	8001a6c <sd_card_close>
        while (1)
 800071a:	e7fe      	b.n	800071a <main+0x186>
            ;
    }

    while (1) {
        HAL_Delay(500);
 800071c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000720:	f002 fe14 	bl	800334c <HAL_Delay>
        handleMenu();
 8000724:	f000 fe48 	bl	80013b8 <handleMenu>
        if (playState)
 8000728:	4b70      	ldr	r3, [pc, #448]	; (80008ec <main+0x358>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d100      	bne.n	8000732 <main+0x19e>
        HAL_Delay(500);
 8000730:	e7f4      	b.n	800071c <main+0x188>
            break;
 8000732:	bf00      	nop
    }

    myprintf("Starting read data\n");
 8000734:	486e      	ldr	r0, [pc, #440]	; (80008f0 <main+0x35c>)
 8000736:	f001 f889 	bl	800184c <myprintf>
    struct layers_struct layers_config[5];
    result = sd_card_read_data("0:/WALKIN~1", (uint8_t*) walk_array,
 800073a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800073e:	3a34      	subs	r2, #52	; 0x34
 8000740:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8000744:	3b20      	subs	r3, #32
 8000746:	4619      	mov	r1, r3
 8000748:	486a      	ldr	r0, [pc, #424]	; (80008f4 <main+0x360>)
 800074a:	f001 f9a5 	bl	8001a98 <sd_card_read_data>
 800074e:	4603      	mov	r3, r0
 8000750:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 8000754:	f102 022d 	add.w	r2, r2, #45	; 0x2d
 8000758:	7013      	strb	r3, [r2, #0]
            (struct layers_struct*) layers_config);

    sd_card_close();
 800075a:	f001 f987 	bl	8001a6c <sd_card_close>

    if (STATUS_OK != result) {
 800075e:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 8000762:	f103 032d 	add.w	r3, r3, #45	; 0x2d
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d000      	beq.n	800076e <main+0x1da>
//        lcd_clear();
//        lcd_draw_text(0, 0,
//                "Error!!!      problem with read data from SD card        Press RESET button",0);
//        lcd_copy();
        while (1)
 800076c:	e7fe      	b.n	800076c <main+0x1d8>
            ;
    }
    PCD8544_GotoXY(20, 38);
 800076e:	2126      	movs	r1, #38	; 0x26
 8000770:	2014      	movs	r0, #20
 8000772:	f002 fa63 	bl	8002c3c <PCD8544_GotoXY>
    PCD8544_Puts("Playing...", PCD8544_Pixel_Set, PCD8544_FontSize_5x7);
 8000776:	2200      	movs	r2, #0
 8000778:	2101      	movs	r1, #1
 800077a:	485f      	ldr	r0, [pc, #380]	; (80008f8 <main+0x364>)
 800077c:	f002 fb20 	bl	8002dc0 <PCD8544_Puts>
    PCD8544_Refresh();
 8000780:	f002 f9be 	bl	8002b00 <PCD8544_Refresh>
//    for (size_t j = 0; j < 10; j++){
//        myprintf("\nIMAGE_%d:\n", j);
//        for (size_t i = 0; i < 4; i++)
//            myprintf("{%d, %d, %d},", walk_array[j][i][0], walk_array[j][i][1], walk_array[j][i][2]);
//    }
    uint8_t odd = 1;
 8000784:	2301      	movs	r3, #1
 8000786:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 800078a:	f102 0237 	add.w	r2, r2, #55	; 0x37
 800078e:	7013      	strb	r3, [r2, #0]
    uint8_t index = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 8000796:	f102 0236 	add.w	r2, r2, #54	; 0x36
 800079a:	7013      	strb	r3, [r2, #0]
    uint8_t counter = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 80007a2:	f102 0235 	add.w	r2, r2, #53	; 0x35
 80007a6:	7013      	strb	r3, [r2, #0]
    uint8_t number_of_animation = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 80007ae:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80007b2:	7013      	strb	r3, [r2, #0]
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */


            for (uint16_t layer_index = 0; layer_index < 5; layer_index++) {
 80007b4:	2300      	movs	r3, #0
 80007b6:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 80007ba:	f102 0232 	add.w	r2, r2, #50	; 0x32
 80007be:	8013      	strh	r3, [r2, #0]
 80007c0:	e158      	b.n	8000a74 <main+0x4e0>
                for (uint8_t x = 0; x < layers_config[layer_index].count; x++) {
 80007c2:	2300      	movs	r3, #0
 80007c4:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 80007c8:	f102 0231 	add.w	r2, r2, #49	; 0x31
 80007cc:	7013      	strb	r3, [r2, #0]
 80007ce:	e11e      	b.n	8000a0e <main+0x47a>
                    if (layers_config[layer_index].values[x] == number_of_animation) {
 80007d0:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 80007d4:	f103 0332 	add.w	r3, r3, #50	; 0x32
 80007d8:	881a      	ldrh	r2, [r3, #0]
 80007da:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 80007de:	f103 0331 	add.w	r3, r3, #49	; 0x31
 80007e2:	7818      	ldrb	r0, [r3, #0]
 80007e4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80007e8:	f5a3 716d 	sub.w	r1, r3, #948	; 0x3b4
 80007ec:	4613      	mov	r3, r2
 80007ee:	015b      	lsls	r3, r3, #5
 80007f0:	4413      	add	r3, r2
 80007f2:	4403      	add	r3, r0
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	440b      	add	r3, r1
 80007f8:	685a      	ldr	r2, [r3, #4]
 80007fa:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 80007fe:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	429a      	cmp	r2, r3
 8000806:	f040 80f7 	bne.w	80009f8 <main+0x464>
                        for (uint16_t i = 0; i < 256; i++) {
 800080a:	2300      	movs	r3, #0
 800080c:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 8000810:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 8000814:	8013      	strh	r3, [r2, #0]
 8000816:	e0e7      	b.n	80009e8 <main+0x454>
                            if (i % 16 == 0) {
 8000818:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 800081c:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	f003 030f 	and.w	r3, r3, #15
 8000826:	b29b      	uxth	r3, r3
 8000828:	2b00      	cmp	r3, #0
 800082a:	d116      	bne.n	800085a <main+0x2c6>
                                odd ^= 1;
 800082c:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 8000830:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	f083 0301 	eor.w	r3, r3, #1
 800083a:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 800083e:	f102 0237 	add.w	r2, r2, #55	; 0x37
 8000842:	7013      	strb	r3, [r2, #0]
                                counter++;
 8000844:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 8000848:	f103 0335 	add.w	r3, r3, #53	; 0x35
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	3301      	adds	r3, #1
 8000850:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 8000854:	f102 0235 	add.w	r2, r2, #53	; 0x35
 8000858:	7013      	strb	r3, [r2, #0]
                            }
                            if (odd) {
 800085a:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 800085e:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d049      	beq.n	80008fc <main+0x368>
                                index = (counter * 16 - 1) - (i % 16);
 8000868:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 800086c:	f103 0335 	add.w	r3, r3, #53	; 0x35
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	011b      	lsls	r3, r3, #4
 8000874:	b2da      	uxtb	r2, r3
 8000876:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 800087a:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	f003 030f 	and.w	r3, r3, #15
 8000886:	b2db      	uxtb	r3, r3
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	b2db      	uxtb	r3, r3
 800088c:	3b01      	subs	r3, #1
 800088e:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 8000892:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8000896:	7013      	strb	r3, [r2, #0]
 8000898:	e03a      	b.n	8000910 <main+0x37c>
 800089a:	bf00      	nop
 800089c:	20000588 	.word	0x20000588
 80008a0:	20000154 	.word	0x20000154
 80008a4:	200002bc 	.word	0x200002bc
 80008a8:	200008f8 	.word	0x200008f8
 80008ac:	2000019c 	.word	0x2000019c
 80008b0:	2000031c 	.word	0x2000031c
 80008b4:	20000c68 	.word	0x20000c68
 80008b8:	200001e4 	.word	0x200001e4
 80008bc:	2000037c 	.word	0x2000037c
 80008c0:	20000fd8 	.word	0x20000fd8
 80008c4:	2000022c 	.word	0x2000022c
 80008c8:	200003dc 	.word	0x200003dc
 80008cc:	20001348 	.word	0x20001348
 80008d0:	20000274 	.word	0x20000274
 80008d4:	2000043c 	.word	0x2000043c
 80008d8:	0800b4b8 	.word	0x0800b4b8
 80008dc:	002f3a30 	.word	0x002f3a30
 80008e0:	0800b4c4 	.word	0x0800b4c4
 80008e4:	20000584 	.word	0x20000584
 80008e8:	200004e4 	.word	0x200004e4
 80008ec:	20000586 	.word	0x20000586
 80008f0:	0800b4d8 	.word	0x0800b4d8
 80008f4:	0800b4ec 	.word	0x0800b4ec
 80008f8:	0800b4f8 	.word	0x0800b4f8
                            } else {
                                index = i;
 80008fc:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 8000900:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 800090a:	f102 0236 	add.w	r2, r2, #54	; 0x36
 800090e:	7013      	strb	r3, [r2, #0]
                            }
                            led_set_RGB(layers_array[layer_index], i,
 8000910:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 8000914:	f103 0332 	add.w	r3, r3, #50	; 0x32
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	f503 43c7 	add.w	r3, r3, #25472	; 0x6380
 8000920:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000924:	443b      	add	r3, r7
 8000926:	f853 0c20 	ldr.w	r0, [r3, #-32]
 800092a:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 800092e:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	b2dc      	uxtb	r4, r3
 8000936:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 800093a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800093e:	7819      	ldrb	r1, [r3, #0]
 8000940:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 8000944:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 800094e:	4615      	mov	r5, r2
 8000950:	461a      	mov	r2, r3
 8000952:	0052      	lsls	r2, r2, #1
 8000954:	441a      	add	r2, r3
 8000956:	460b      	mov	r3, r1
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	440b      	add	r3, r1
 800095c:	021b      	lsls	r3, r3, #8
 800095e:	4413      	add	r3, r2
 8000960:	442b      	add	r3, r5
 8000962:	3b20      	subs	r3, #32
 8000964:	781d      	ldrb	r5, [r3, #0]
 8000966:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 800096a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800096e:	7819      	ldrb	r1, [r3, #0]
 8000970:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 8000974:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 800097e:	4616      	mov	r6, r2
 8000980:	461a      	mov	r2, r3
 8000982:	0052      	lsls	r2, r2, #1
 8000984:	441a      	add	r2, r3
 8000986:	460b      	mov	r3, r1
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	440b      	add	r3, r1
 800098c:	021b      	lsls	r3, r3, #8
 800098e:	4413      	add	r3, r2
 8000990:	4433      	add	r3, r6
 8000992:	3b1f      	subs	r3, #31
 8000994:	781e      	ldrb	r6, [r3, #0]
 8000996:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 800099a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800099e:	7819      	ldrb	r1, [r3, #0]
 80009a0:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 80009a4:	f103 0336 	add.w	r3, r3, #54	; 0x36
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 80009ae:	4694      	mov	ip, r2
 80009b0:	461a      	mov	r2, r3
 80009b2:	0052      	lsls	r2, r2, #1
 80009b4:	441a      	add	r2, r3
 80009b6:	460b      	mov	r3, r1
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	440b      	add	r3, r1
 80009bc:	021b      	lsls	r3, r3, #8
 80009be:	4413      	add	r3, r2
 80009c0:	4463      	add	r3, ip
 80009c2:	3b1e      	subs	r3, #30
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	4633      	mov	r3, r6
 80009ca:	462a      	mov	r2, r5
 80009cc:	4621      	mov	r1, r4
 80009ce:	f002 fb1c 	bl	800300a <led_set_RGB>
                        for (uint16_t i = 0; i < 256; i++) {
 80009d2:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 80009d6:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 80009e2:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 80009e6:	8013      	strh	r3, [r2, #0]
 80009e8:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 80009ec:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	2bff      	cmp	r3, #255	; 0xff
 80009f4:	f67f af10 	bls.w	8000818 <main+0x284>
                for (uint8_t x = 0; x < layers_config[layer_index].count; x++) {
 80009f8:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 80009fc:	f103 0331 	add.w	r3, r3, #49	; 0x31
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	3301      	adds	r3, #1
 8000a04:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 8000a08:	f102 0231 	add.w	r2, r2, #49	; 0x31
 8000a0c:	7013      	strb	r3, [r2, #0]
 8000a0e:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 8000a12:	f103 0331 	add.w	r3, r3, #49	; 0x31
 8000a16:	7819      	ldrb	r1, [r3, #0]
 8000a18:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 8000a1c:	f103 0332 	add.w	r3, r3, #50	; 0x32
 8000a20:	881a      	ldrh	r2, [r3, #0]
 8000a22:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8000a26:	f5a3 706d 	sub.w	r0, r3, #948	; 0x3b4
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	015b      	lsls	r3, r3, #5
 8000a2e:	4413      	add	r3, r2
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	4403      	add	r3, r0
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4299      	cmp	r1, r3
 8000a38:	f6ff aeca 	blt.w	80007d0 <main+0x23c>
                                walk_array[number_of_animation][index][1],
                                walk_array[number_of_animation][index][2]);
                    }
                }
            }
            led_render(&layers_array[layer_index]);
 8000a3c:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 8000a40:	f103 0332 	add.w	r3, r3, #50	; 0x32
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 8000a4a:	f102 0218 	add.w	r2, r2, #24
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	4413      	add	r3, r2
 8000a52:	4618      	mov	r0, r3
 8000a54:	f002 fb10 	bl	8003078 <led_render>
            HAL_Delay(10);
 8000a58:	200a      	movs	r0, #10
 8000a5a:	f002 fc77 	bl	800334c <HAL_Delay>
            for (uint16_t layer_index = 0; layer_index < 5; layer_index++) {
 8000a5e:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 8000a62:	f103 0332 	add.w	r3, r3, #50	; 0x32
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 8000a6e:	f102 0232 	add.w	r2, r2, #50	; 0x32
 8000a72:	8013      	strh	r3, [r2, #0]
 8000a74:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 8000a78:	f103 0332 	add.w	r3, r3, #50	; 0x32
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	f67f ae9f 	bls.w	80007c2 <main+0x22e>
        }
        if (++number_of_animation == 10)
 8000a84:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 8000a88:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 8000a94:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000a98:	7013      	strb	r3, [r2, #0]
 8000a9a:	f507 43c7 	add.w	r3, r7, #25472	; 0x6380
 8000a9e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b0a      	cmp	r3, #10
 8000aa6:	d105      	bne.n	8000ab4 <main+0x520>
            number_of_animation = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f507 42c7 	add.w	r2, r7, #25472	; 0x6380
 8000aae:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000ab2:	7013      	strb	r3, [r2, #0]

        HAL_Delay(500);
 8000ab4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab8:	f002 fc48 	bl	800334c <HAL_Delay>
            for (uint16_t layer_index = 0; layer_index < 5; layer_index++) {
 8000abc:	e67a      	b.n	80007b4 <main+0x220>
 8000abe:	bf00      	nop

08000ac0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b094      	sub	sp, #80	; 0x50
 8000ac4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ac6:	f107 0320 	add.w	r3, r7, #32
 8000aca:	2230      	movs	r2, #48	; 0x30
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f009 fbb8 	bl	800a244 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	4b29      	ldr	r3, [pc, #164]	; (8000b90 <SystemClock_Config+0xd0>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	4a28      	ldr	r2, [pc, #160]	; (8000b90 <SystemClock_Config+0xd0>)
 8000aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af2:	6413      	str	r3, [r2, #64]	; 0x40
 8000af4:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <SystemClock_Config+0xd0>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b00:	2300      	movs	r3, #0
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <SystemClock_Config+0xd4>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b0c:	4a21      	ldr	r2, [pc, #132]	; (8000b94 <SystemClock_Config+0xd4>)
 8000b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <SystemClock_Config+0xd4>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b20:	2302      	movs	r3, #2
 8000b22:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b24:	2301      	movs	r3, #1
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b28:	2310      	movs	r3, #16
 8000b2a:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b30:	2300      	movs	r3, #0
 8000b32:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8000b34:	2308      	movs	r3, #8
 8000b36:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 84;
 8000b38:	2354      	movs	r3, #84	; 0x54
 8000b3a:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 3;
 8000b40:	2303      	movs	r3, #3
 8000b42:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b44:	f107 0320 	add.w	r3, r7, #32
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f003 fa7d 	bl	8004048 <HAL_RCC_OscConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x98>
        Error_Handler();
 8000b54:	f000 fe74 	bl	8001840 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b58:	230f      	movs	r3, #15
 8000b5a:	60fb      	str	r3, [r7, #12]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b68:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6e:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	2102      	movs	r1, #2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f003 fcde 	bl	8004538 <HAL_RCC_ClockConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0xc6>
        Error_Handler();
 8000b82:	f000 fe5d 	bl	8001840 <Error_Handler>
    }
}
 8000b86:	bf00      	nop
 8000b88:	3750      	adds	r7, #80	; 0x50
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40007000 	.word	0x40007000

08000b98 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000b9e:	4a18      	ldr	r2, [pc, #96]	; (8000c00 <MX_SPI1_Init+0x68>)
 8000ba0:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000ba4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ba8:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc8:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bcc:	2238      	movs	r2, #56	; 0x38
 8000bce:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bdc:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000be4:	220a      	movs	r2, #10
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <MX_SPI1_Init+0x64>)
 8000bea:	f003 fec5 	bl	8004978 <HAL_SPI_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_SPI1_Init+0x60>
        Error_Handler();
 8000bf4:	f000 fe24 	bl	8001840 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200000a4 	.word	0x200000a4
 8000c00:	40013000 	.word	0x40013000

08000c04 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI3_Init 1 */

    /* USER CODE END SPI3_Init 1 */
    /* SPI3 parameter configuration*/
    hspi3.Instance = SPI3;
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c0a:	4a18      	ldr	r2, [pc, #96]	; (8000c6c <MX_SPI3_Init+0x68>)
 8000c0c:	601a      	str	r2, [r3, #0]
    hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c0e:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c14:	605a      	str	r2, [r3, #4]
    hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c16:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
    hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
    hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
    hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	615a      	str	r2, [r3, #20]
    hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c34:	619a      	str	r2, [r3, #24]
    hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c38:	2228      	movs	r2, #40	; 0x28
 8000c3a:	61da      	str	r2, [r3, #28]
    hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	621a      	str	r2, [r3, #32]
    hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	625a      	str	r2, [r3, #36]	; 0x24
    hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c48:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi3.Init.CRCPolynomial = 10;
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c50:	220a      	movs	r2, #10
 8000c52:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <MX_SPI3_Init+0x64>)
 8000c56:	f003 fe8f 	bl	8004978 <HAL_SPI_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_SPI3_Init+0x60>
        Error_Handler();
 8000c60:	f000 fdee 	bl	8001840 <Error_Handler>
    }
    /* USER CODE BEGIN SPI3_Init 2 */

    /* USER CODE END SPI3_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200000fc 	.word	0x200000fc
 8000c6c:	40003c00 	.word	0x40003c00

08000c70 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b096      	sub	sp, #88	; 0x58
 8000c74:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000c76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]
 8000c9e:	615a      	str	r2, [r3, #20]
 8000ca0:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2220      	movs	r2, #32
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f009 facb 	bl	800a244 <memset>

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 8000cae:	4b3e      	ldr	r3, [pc, #248]	; (8000da8 <MX_TIM1_Init+0x138>)
 8000cb0:	4a3e      	ldr	r2, [pc, #248]	; (8000dac <MX_TIM1_Init+0x13c>)
 8000cb2:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 0;
 8000cb4:	4b3c      	ldr	r3, [pc, #240]	; (8000da8 <MX_TIM1_Init+0x138>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cba:	4b3b      	ldr	r3, [pc, #236]	; (8000da8 <MX_TIM1_Init+0x138>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 104;
 8000cc0:	4b39      	ldr	r3, [pc, #228]	; (8000da8 <MX_TIM1_Init+0x138>)
 8000cc2:	2268      	movs	r2, #104	; 0x68
 8000cc4:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc6:	4b38      	ldr	r3, [pc, #224]	; (8000da8 <MX_TIM1_Init+0x138>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 8000ccc:	4b36      	ldr	r3, [pc, #216]	; (8000da8 <MX_TIM1_Init+0x138>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd2:	4b35      	ldr	r3, [pc, #212]	; (8000da8 <MX_TIM1_Init+0x138>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000cd8:	4833      	ldr	r0, [pc, #204]	; (8000da8 <MX_TIM1_Init+0x138>)
 8000cda:	f004 fa7f 	bl	80051dc <HAL_TIM_Base_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM1_Init+0x78>
        Error_Handler();
 8000ce4:	f000 fdac 	bl	8001840 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cec:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000cee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	482c      	ldr	r0, [pc, #176]	; (8000da8 <MX_TIM1_Init+0x138>)
 8000cf6:	f004 fe51 	bl	800599c <HAL_TIM_ConfigClockSource>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM1_Init+0x94>
        Error_Handler();
 8000d00:	f000 fd9e 	bl	8001840 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000d04:	4828      	ldr	r0, [pc, #160]	; (8000da8 <MX_TIM1_Init+0x138>)
 8000d06:	f004 fab8 	bl	800527a <HAL_TIM_PWM_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM1_Init+0xa4>
        Error_Handler();
 8000d10:	f000 fd96 	bl	8001840 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d14:	2300      	movs	r3, #0
 8000d16:	643b      	str	r3, [r7, #64]	; 0x40
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000d1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d20:	4619      	mov	r1, r3
 8000d22:	4821      	ldr	r0, [pc, #132]	; (8000da8 <MX_TIM1_Init+0x138>)
 8000d24:	f005 faa8 	bl	8006278 <HAL_TIMEx_MasterConfigSynchronization>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM1_Init+0xc2>
            != HAL_OK) {
        Error_Handler();
 8000d2e:	f000 fd87 	bl	8001840 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d32:	2360      	movs	r3, #96	; 0x60
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
    sConfigOC.Pulse = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	637b      	str	r3, [r7, #52]	; 0x34
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d46:	2300      	movs	r3, #0
 8000d48:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d52:	2200      	movs	r2, #0
 8000d54:	4619      	mov	r1, r3
 8000d56:	4814      	ldr	r0, [pc, #80]	; (8000da8 <MX_TIM1_Init+0x138>)
 8000d58:	f004 fd5e 	bl	8005818 <HAL_TIM_PWM_ConfigChannel>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM1_Init+0xf6>
            != HAL_OK) {
        Error_Handler();
 8000d62:	f000 fd6d 	bl	8001840 <Error_Handler>
    }
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.DeadTime = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d7e:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	623b      	str	r3, [r7, #32]
    if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	4619      	mov	r1, r3
 8000d88:	4807      	ldr	r0, [pc, #28]	; (8000da8 <MX_TIM1_Init+0x138>)
 8000d8a:	f005 fae3 	bl	8006354 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM1_Init+0x128>
            != HAL_OK) {
        Error_Handler();
 8000d94:	f000 fd54 	bl	8001840 <Error_Handler>
    }
    /* USER CODE BEGIN TIM1_Init 2 */

    /* USER CODE END TIM1_Init 2 */
    HAL_TIM_MspPostInit(&htim1);
 8000d98:	4803      	ldr	r0, [pc, #12]	; (8000da8 <MX_TIM1_Init+0x138>)
 8000d9a:	f001 fb19 	bl	80023d0 <HAL_TIM_MspPostInit>

}
 8000d9e:	bf00      	nop
 8000da0:	3758      	adds	r7, #88	; 0x58
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000154 	.word	0x20000154
 8000dac:	40010000 	.word	0x40010000

08000db0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08e      	sub	sp, #56	; 0x38
 8000db4:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000dc4:	f107 0320 	add.w	r3, r7, #32
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
 8000ddc:	615a      	str	r2, [r3, #20]
 8000dde:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8000de0:	4b2d      	ldr	r3, [pc, #180]	; (8000e98 <MX_TIM2_Init+0xe8>)
 8000de2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000de6:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 0;
 8000de8:	4b2b      	ldr	r3, [pc, #172]	; (8000e98 <MX_TIM2_Init+0xe8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dee:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <MX_TIM2_Init+0xe8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 4294967295;
 8000df4:	4b28      	ldr	r3, [pc, #160]	; (8000e98 <MX_TIM2_Init+0xe8>)
 8000df6:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfa:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfc:	4b26      	ldr	r3, [pc, #152]	; (8000e98 <MX_TIM2_Init+0xe8>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e02:	4b25      	ldr	r3, [pc, #148]	; (8000e98 <MX_TIM2_Init+0xe8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000e08:	4823      	ldr	r0, [pc, #140]	; (8000e98 <MX_TIM2_Init+0xe8>)
 8000e0a:	f004 f9e7 	bl	80051dc <HAL_TIM_Base_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM2_Init+0x68>
        Error_Handler();
 8000e14:	f000 fd14 	bl	8001840 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000e1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e22:	4619      	mov	r1, r3
 8000e24:	481c      	ldr	r0, [pc, #112]	; (8000e98 <MX_TIM2_Init+0xe8>)
 8000e26:	f004 fdb9 	bl	800599c <HAL_TIM_ConfigClockSource>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM2_Init+0x84>
        Error_Handler();
 8000e30:	f000 fd06 	bl	8001840 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000e34:	4818      	ldr	r0, [pc, #96]	; (8000e98 <MX_TIM2_Init+0xe8>)
 8000e36:	f004 fa20 	bl	800527a <HAL_TIM_PWM_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM2_Init+0x94>
        Error_Handler();
 8000e40:	f000 fcfe 	bl	8001840 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000e4c:	f107 0320 	add.w	r3, r7, #32
 8000e50:	4619      	mov	r1, r3
 8000e52:	4811      	ldr	r0, [pc, #68]	; (8000e98 <MX_TIM2_Init+0xe8>)
 8000e54:	f005 fa10 	bl	8006278 <HAL_TIMEx_MasterConfigSynchronization>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM2_Init+0xb2>
            != HAL_OK) {
        Error_Handler();
 8000e5e:	f000 fcef 	bl	8001840 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e62:	2360      	movs	r3, #96	; 0x60
 8000e64:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2200      	movs	r2, #0
 8000e76:	4619      	mov	r1, r3
 8000e78:	4807      	ldr	r0, [pc, #28]	; (8000e98 <MX_TIM2_Init+0xe8>)
 8000e7a:	f004 fccd 	bl	8005818 <HAL_TIM_PWM_ConfigChannel>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM2_Init+0xd8>
            != HAL_OK) {
        Error_Handler();
 8000e84:	f000 fcdc 	bl	8001840 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
    HAL_TIM_MspPostInit(&htim2);
 8000e88:	4803      	ldr	r0, [pc, #12]	; (8000e98 <MX_TIM2_Init+0xe8>)
 8000e8a:	f001 faa1 	bl	80023d0 <HAL_TIM_MspPostInit>

}
 8000e8e:	bf00      	nop
 8000e90:	3738      	adds	r7, #56	; 0x38
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	2000019c 	.word	0x2000019c

08000e9c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08e      	sub	sp, #56	; 0x38
 8000ea0:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000ea2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000eb0:	f107 0320 	add.w	r3, r7, #32
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
 8000ec8:	615a      	str	r2, [r3, #20]
 8000eca:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8000ecc:	4b2c      	ldr	r3, [pc, #176]	; (8000f80 <MX_TIM3_Init+0xe4>)
 8000ece:	4a2d      	ldr	r2, [pc, #180]	; (8000f84 <MX_TIM3_Init+0xe8>)
 8000ed0:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 0;
 8000ed2:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <MX_TIM3_Init+0xe4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed8:	4b29      	ldr	r3, [pc, #164]	; (8000f80 <MX_TIM3_Init+0xe4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 104;
 8000ede:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <MX_TIM3_Init+0xe4>)
 8000ee0:	2268      	movs	r2, #104	; 0x68
 8000ee2:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee4:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <MX_TIM3_Init+0xe4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eea:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <MX_TIM3_Init+0xe4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000ef0:	4823      	ldr	r0, [pc, #140]	; (8000f80 <MX_TIM3_Init+0xe4>)
 8000ef2:	f004 f973 	bl	80051dc <HAL_TIM_Base_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM3_Init+0x64>
        Error_Handler();
 8000efc:	f000 fca0 	bl	8001840 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000f06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	481c      	ldr	r0, [pc, #112]	; (8000f80 <MX_TIM3_Init+0xe4>)
 8000f0e:	f004 fd45 	bl	800599c <HAL_TIM_ConfigClockSource>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM3_Init+0x80>
        Error_Handler();
 8000f18:	f000 fc92 	bl	8001840 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000f1c:	4818      	ldr	r0, [pc, #96]	; (8000f80 <MX_TIM3_Init+0xe4>)
 8000f1e:	f004 f9ac 	bl	800527a <HAL_TIM_PWM_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM3_Init+0x90>
        Error_Handler();
 8000f28:	f000 fc8a 	bl	8001840 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000f34:	f107 0320 	add.w	r3, r7, #32
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4811      	ldr	r0, [pc, #68]	; (8000f80 <MX_TIM3_Init+0xe4>)
 8000f3c:	f005 f99c 	bl	8006278 <HAL_TIMEx_MasterConfigSynchronization>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM3_Init+0xae>
            != HAL_OK) {
        Error_Handler();
 8000f46:	f000 fc7b 	bl	8001840 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f4a:	2360      	movs	r3, #96	; 0x60
 8000f4c:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4807      	ldr	r0, [pc, #28]	; (8000f80 <MX_TIM3_Init+0xe4>)
 8000f62:	f004 fc59 	bl	8005818 <HAL_TIM_PWM_ConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM3_Init+0xd4>
            != HAL_OK) {
        Error_Handler();
 8000f6c:	f000 fc68 	bl	8001840 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
    HAL_TIM_MspPostInit(&htim3);
 8000f70:	4803      	ldr	r0, [pc, #12]	; (8000f80 <MX_TIM3_Init+0xe4>)
 8000f72:	f001 fa2d 	bl	80023d0 <HAL_TIM_MspPostInit>

}
 8000f76:	bf00      	nop
 8000f78:	3738      	adds	r7, #56	; 0x38
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200001e4 	.word	0x200001e4
 8000f84:	40000400 	.word	0x40000400

08000f88 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08e      	sub	sp, #56	; 0x38
 8000f8c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM4_Init 0 */

    /* USER CODE END TIM4_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000f8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000f9c:	f107 0320 	add.w	r3, r7, #32
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
 8000fb4:	615a      	str	r2, [r3, #20]
 8000fb6:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM4_Init 1 */

    /* USER CODE END TIM4_Init 1 */
    htim4.Instance = TIM4;
 8000fb8:	4b2c      	ldr	r3, [pc, #176]	; (800106c <MX_TIM4_Init+0xe4>)
 8000fba:	4a2d      	ldr	r2, [pc, #180]	; (8001070 <MX_TIM4_Init+0xe8>)
 8000fbc:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = 0;
 8000fbe:	4b2b      	ldr	r3, [pc, #172]	; (800106c <MX_TIM4_Init+0xe4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc4:	4b29      	ldr	r3, [pc, #164]	; (800106c <MX_TIM4_Init+0xe4>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = 104;
 8000fca:	4b28      	ldr	r3, [pc, #160]	; (800106c <MX_TIM4_Init+0xe4>)
 8000fcc:	2268      	movs	r2, #104	; 0x68
 8000fce:	60da      	str	r2, [r3, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd0:	4b26      	ldr	r3, [pc, #152]	; (800106c <MX_TIM4_Init+0xe4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd6:	4b25      	ldr	r3, [pc, #148]	; (800106c <MX_TIM4_Init+0xe4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8000fdc:	4823      	ldr	r0, [pc, #140]	; (800106c <MX_TIM4_Init+0xe4>)
 8000fde:	f004 f8fd 	bl	80051dc <HAL_TIM_Base_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM4_Init+0x64>
        Error_Handler();
 8000fe8:	f000 fc2a 	bl	8001840 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8000ff2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	481c      	ldr	r0, [pc, #112]	; (800106c <MX_TIM4_Init+0xe4>)
 8000ffa:	f004 fccf 	bl	800599c <HAL_TIM_ConfigClockSource>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM4_Init+0x80>
        Error_Handler();
 8001004:	f000 fc1c 	bl	8001840 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8001008:	4818      	ldr	r0, [pc, #96]	; (800106c <MX_TIM4_Init+0xe4>)
 800100a:	f004 f936 	bl	800527a <HAL_TIM_PWM_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM4_Init+0x90>
        Error_Handler();
 8001014:	f000 fc14 	bl	8001840 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001018:	2300      	movs	r3, #0
 800101a:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001020:	f107 0320 	add.w	r3, r7, #32
 8001024:	4619      	mov	r1, r3
 8001026:	4811      	ldr	r0, [pc, #68]	; (800106c <MX_TIM4_Init+0xe4>)
 8001028:	f005 f926 	bl	8006278 <HAL_TIMEx_MasterConfigSynchronization>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM4_Init+0xae>
            != HAL_OK) {
        Error_Handler();
 8001032:	f000 fc05 	bl	8001840 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001036:	2360      	movs	r3, #96	; 0x60
 8001038:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2200      	movs	r2, #0
 800104a:	4619      	mov	r1, r3
 800104c:	4807      	ldr	r0, [pc, #28]	; (800106c <MX_TIM4_Init+0xe4>)
 800104e:	f004 fbe3 	bl	8005818 <HAL_TIM_PWM_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM4_Init+0xd4>
            != HAL_OK) {
        Error_Handler();
 8001058:	f000 fbf2 	bl	8001840 <Error_Handler>
    }
    /* USER CODE BEGIN TIM4_Init 2 */

    /* USER CODE END TIM4_Init 2 */
    HAL_TIM_MspPostInit(&htim4);
 800105c:	4803      	ldr	r0, [pc, #12]	; (800106c <MX_TIM4_Init+0xe4>)
 800105e:	f001 f9b7 	bl	80023d0 <HAL_TIM_MspPostInit>

}
 8001062:	bf00      	nop
 8001064:	3738      	adds	r7, #56	; 0x38
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000022c 	.word	0x2000022c
 8001070:	40000800 	.word	0x40000800

08001074 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b08e      	sub	sp, #56	; 0x38
 8001078:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM5_Init 0 */

    /* USER CODE END TIM5_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800107a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001088:	f107 0320 	add.w	r3, r7, #32
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
 80010a0:	615a      	str	r2, [r3, #20]
 80010a2:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM5_Init 1 */

    /* USER CODE END TIM5_Init 1 */
    htim5.Instance = TIM5;
 80010a4:	4b2c      	ldr	r3, [pc, #176]	; (8001158 <MX_TIM5_Init+0xe4>)
 80010a6:	4a2d      	ldr	r2, [pc, #180]	; (800115c <MX_TIM5_Init+0xe8>)
 80010a8:	601a      	str	r2, [r3, #0]
    htim5.Init.Prescaler = 0;
 80010aa:	4b2b      	ldr	r3, [pc, #172]	; (8001158 <MX_TIM5_Init+0xe4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	605a      	str	r2, [r3, #4]
    htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b0:	4b29      	ldr	r3, [pc, #164]	; (8001158 <MX_TIM5_Init+0xe4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
    htim5.Init.Period = 104;
 80010b6:	4b28      	ldr	r3, [pc, #160]	; (8001158 <MX_TIM5_Init+0xe4>)
 80010b8:	2268      	movs	r2, #104	; 0x68
 80010ba:	60da      	str	r2, [r3, #12]
    htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010bc:	4b26      	ldr	r3, [pc, #152]	; (8001158 <MX_TIM5_Init+0xe4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
    htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c2:	4b25      	ldr	r3, [pc, #148]	; (8001158 <MX_TIM5_Init+0xe4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 80010c8:	4823      	ldr	r0, [pc, #140]	; (8001158 <MX_TIM5_Init+0xe4>)
 80010ca:	f004 f887 	bl	80051dc <HAL_TIM_Base_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM5_Init+0x64>
        Error_Handler();
 80010d4:	f000 fbb4 	bl	8001840 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 80010de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e2:	4619      	mov	r1, r3
 80010e4:	481c      	ldr	r0, [pc, #112]	; (8001158 <MX_TIM5_Init+0xe4>)
 80010e6:	f004 fc59 	bl	800599c <HAL_TIM_ConfigClockSource>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM5_Init+0x80>
        Error_Handler();
 80010f0:	f000 fba6 	bl	8001840 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 80010f4:	4818      	ldr	r0, [pc, #96]	; (8001158 <MX_TIM5_Init+0xe4>)
 80010f6:	f004 f8c0 	bl	800527a <HAL_TIM_PWM_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM5_Init+0x90>
        Error_Handler();
 8001100:	f000 fb9e 	bl	8001840 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 800110c:	f107 0320 	add.w	r3, r7, #32
 8001110:	4619      	mov	r1, r3
 8001112:	4811      	ldr	r0, [pc, #68]	; (8001158 <MX_TIM5_Init+0xe4>)
 8001114:	f005 f8b0 	bl	8006278 <HAL_TIMEx_MasterConfigSynchronization>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM5_Init+0xae>
            != HAL_OK) {
        Error_Handler();
 800111e:	f000 fb8f 	bl	8001840 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001122:	2360      	movs	r3, #96	; 0x60
 8001124:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	2200      	movs	r2, #0
 8001136:	4619      	mov	r1, r3
 8001138:	4807      	ldr	r0, [pc, #28]	; (8001158 <MX_TIM5_Init+0xe4>)
 800113a:	f004 fb6d 	bl	8005818 <HAL_TIM_PWM_ConfigChannel>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM5_Init+0xd4>
            != HAL_OK) {
        Error_Handler();
 8001144:	f000 fb7c 	bl	8001840 <Error_Handler>
    }
    /* USER CODE BEGIN TIM5_Init 2 */

    /* USER CODE END TIM5_Init 2 */
    HAL_TIM_MspPostInit(&htim5);
 8001148:	4803      	ldr	r0, [pc, #12]	; (8001158 <MX_TIM5_Init+0xe4>)
 800114a:	f001 f941 	bl	80023d0 <HAL_TIM_MspPostInit>

}
 800114e:	bf00      	nop
 8001150:	3738      	adds	r7, #56	; 0x38
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000274 	.word	0x20000274
 800115c:	40000c00 	.word	0x40000c00

08001160 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001166:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <MX_USART2_UART_Init+0x50>)
 8001168:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 800116c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001170:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_USART2_UART_Init+0x4c>)
 8001198:	f005 f92e 	bl	80063f8 <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART2_UART_Init+0x46>
        Error_Handler();
 80011a2:	f000 fb4d 	bl	8001840 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000049c 	.word	0x2000049c
 80011b0:	40004400 	.word	0x40004400

080011b4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA2_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	4b23      	ldr	r3, [pc, #140]	; (800124c <MX_DMA_Init+0x98>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a22      	ldr	r2, [pc, #136]	; (800124c <MX_DMA_Init+0x98>)
 80011c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b20      	ldr	r3, [pc, #128]	; (800124c <MX_DMA_Init+0x98>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_DMA1_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <MX_DMA_Init+0x98>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a1b      	ldr	r2, [pc, #108]	; (800124c <MX_DMA_Init+0x98>)
 80011e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <MX_DMA_Init+0x98>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]

    /* DMA interrupt init */
    /* DMA1_Stream0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	200b      	movs	r0, #11
 80011f8:	f002 f9a7 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011fc:	200b      	movs	r0, #11
 80011fe:	f002 f9c0 	bl	8003582 <HAL_NVIC_EnableIRQ>
    /* DMA1_Stream2_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	200d      	movs	r0, #13
 8001208:	f002 f99f 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800120c:	200d      	movs	r0, #13
 800120e:	f002 f9b8 	bl	8003582 <HAL_NVIC_EnableIRQ>
    /* DMA1_Stream4_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	200f      	movs	r0, #15
 8001218:	f002 f997 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800121c:	200f      	movs	r0, #15
 800121e:	f002 f9b0 	bl	8003582 <HAL_NVIC_EnableIRQ>
    /* DMA1_Stream5_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	2010      	movs	r0, #16
 8001228:	f002 f98f 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800122c:	2010      	movs	r0, #16
 800122e:	f002 f9a8 	bl	8003582 <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream1_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2039      	movs	r0, #57	; 0x39
 8001238:	f002 f987 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800123c:	2039      	movs	r0, #57	; 0x39
 800123e:	f002 f9a0 	bl	8003582 <HAL_NVIC_EnableIRQ>

}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800

08001250 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <MX_GPIO_Init+0x110>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a3c      	ldr	r2, [pc, #240]	; (8001360 <MX_GPIO_Init+0x110>)
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b3a      	ldr	r3, [pc, #232]	; (8001360 <MX_GPIO_Init+0x110>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	4b36      	ldr	r3, [pc, #216]	; (8001360 <MX_GPIO_Init+0x110>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a35      	ldr	r2, [pc, #212]	; (8001360 <MX_GPIO_Init+0x110>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b33      	ldr	r3, [pc, #204]	; (8001360 <MX_GPIO_Init+0x110>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <MX_GPIO_Init+0x110>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a2e      	ldr	r2, [pc, #184]	; (8001360 <MX_GPIO_Init+0x110>)
 80012a8:	f043 0302 	orr.w	r3, r3, #2
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b2c      	ldr	r3, [pc, #176]	; (8001360 <MX_GPIO_Init+0x110>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, LCD_BL_Pin | SD_CS_Pin | LCD_CE_Pin,
 80012ba:	2200      	movs	r2, #0
 80012bc:	f240 6102 	movw	r1, #1538	; 0x602
 80012c0:	4828      	ldr	r0, [pc, #160]	; (8001364 <MX_GPIO_Init+0x114>)
 80012c2:	f002 fe8f 	bl	8003fe4 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin | LCD_DC_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80012cc:	4826      	ldr	r0, [pc, #152]	; (8001368 <MX_GPIO_Init+0x118>)
 80012ce:	f002 fe89 	bl	8003fe4 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : BUTTON_UP_Pin BUTTON_MID_Pin BUTTON_DOWN_Pin */
    GPIO_InitStruct.Pin = BUTTON_UP_Pin | BUTTON_MID_Pin | BUTTON_DOWN_Pin;
 80012d2:	230e      	movs	r3, #14
 80012d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012dc:	2302      	movs	r3, #2
 80012de:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	4619      	mov	r1, r3
 80012e6:	4821      	ldr	r0, [pc, #132]	; (800136c <MX_GPIO_Init+0x11c>)
 80012e8:	f002 fcf8 	bl	8003cdc <HAL_GPIO_Init>

    /*Configure GPIO pins : LCD_BL_Pin SD_CS_Pin LCD_CE_Pin */
    GPIO_InitStruct.Pin = LCD_BL_Pin | SD_CS_Pin | LCD_CE_Pin;
 80012ec:	f240 6302 	movw	r3, #1538	; 0x602
 80012f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	4619      	mov	r1, r3
 8001304:	4817      	ldr	r0, [pc, #92]	; (8001364 <MX_GPIO_Init+0x114>)
 8001306:	f002 fce9 	bl	8003cdc <HAL_GPIO_Init>

    /*Configure GPIO pins : LCD_RST_Pin LCD_DC_Pin */
    GPIO_InitStruct.Pin = LCD_RST_Pin | LCD_DC_Pin;
 800130a:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800130e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001310:	2301      	movs	r3, #1
 8001312:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	4619      	mov	r1, r3
 8001322:	4811      	ldr	r0, [pc, #68]	; (8001368 <MX_GPIO_Init+0x118>)
 8001324:	f002 fcda 	bl	8003cdc <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001328:	2200      	movs	r2, #0
 800132a:	2100      	movs	r1, #0
 800132c:	2007      	movs	r0, #7
 800132e:	f002 f90c 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001332:	2007      	movs	r0, #7
 8001334:	f002 f925 	bl	8003582 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	2008      	movs	r0, #8
 800133e:	f002 f904 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001342:	2008      	movs	r0, #8
 8001344:	f002 f91d 	bl	8003582 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001348:	2200      	movs	r2, #0
 800134a:	2100      	movs	r1, #0
 800134c:	2009      	movs	r0, #9
 800134e:	f002 f8fc 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001352:	2009      	movs	r0, #9
 8001354:	f002 f915 	bl	8003582 <HAL_NVIC_EnableIRQ>

}
 8001358:	bf00      	nop
 800135a:	3720      	adds	r7, #32
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40023800 	.word	0x40023800
 8001364:	40020000 	.word	0x40020000
 8001368:	40020400 	.word	0x40020400
 800136c:	40020800 	.word	0x40020800

08001370 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin) {
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	2b08      	cmp	r3, #8
 800137e:	d006      	beq.n	800138e <HAL_GPIO_EXTI_Callback+0x1e>
 8001380:	2b08      	cmp	r3, #8
 8001382:	dc10      	bgt.n	80013a6 <HAL_GPIO_EXTI_Callback+0x36>
 8001384:	2b02      	cmp	r3, #2
 8001386:	d00a      	beq.n	800139e <HAL_GPIO_EXTI_Callback+0x2e>
 8001388:	2b04      	cmp	r3, #4
 800138a:	d004      	beq.n	8001396 <HAL_GPIO_EXTI_Callback+0x26>
    case BUTTON_UP_Pin:
        button_event = BUTTON_UP;
        break;
    }

}
 800138c:	e00b      	b.n	80013a6 <HAL_GPIO_EXTI_Callback+0x36>
        button_event = BUTTON_DOWN;
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <HAL_GPIO_EXTI_Callback+0x44>)
 8001390:	2203      	movs	r2, #3
 8001392:	701a      	strb	r2, [r3, #0]
        break;
 8001394:	e007      	b.n	80013a6 <HAL_GPIO_EXTI_Callback+0x36>
        button_event = BUTTON_MID;
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <HAL_GPIO_EXTI_Callback+0x44>)
 8001398:	2202      	movs	r2, #2
 800139a:	701a      	strb	r2, [r3, #0]
        break;
 800139c:	e003      	b.n	80013a6 <HAL_GPIO_EXTI_Callback+0x36>
        button_event = BUTTON_UP;
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_GPIO_EXTI_Callback+0x44>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]
        break;
 80013a4:	bf00      	nop
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	200004e0 	.word	0x200004e0

080013b8 <handleMenu>:

void handleMenu(void) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af02      	add	r7, sp, #8
    switch (button_event) {
 80013be:	4b47      	ldr	r3, [pc, #284]	; (80014dc <handleMenu+0x124>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d82c      	bhi.n	8001422 <handleMenu+0x6a>
 80013c8:	a201      	add	r2, pc, #4	; (adr r2, 80013d0 <handleMenu+0x18>)
 80013ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ce:	bf00      	nop
 80013d0:	08001423 	.word	0x08001423
 80013d4:	0800140d 	.word	0x0800140d
 80013d8:	080013fd 	.word	0x080013fd
 80013dc:	080013e1 	.word	0x080013e1
    case BUTTON_NULL:
        break;
    case BUTTON_DOWN:
        if ((selected + 1) < size_dirs)
 80013e0:	4b3f      	ldr	r3, [pc, #252]	; (80014e0 <handleMenu+0x128>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	3301      	adds	r3, #1
 80013e6:	4a3f      	ldr	r2, [pc, #252]	; (80014e4 <handleMenu+0x12c>)
 80013e8:	7812      	ldrb	r2, [r2, #0]
 80013ea:	4293      	cmp	r3, r2
 80013ec:	da1b      	bge.n	8001426 <handleMenu+0x6e>
            selected++;
 80013ee:	4b3c      	ldr	r3, [pc, #240]	; (80014e0 <handleMenu+0x128>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	3301      	adds	r3, #1
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4b3a      	ldr	r3, [pc, #232]	; (80014e0 <handleMenu+0x128>)
 80013f8:	701a      	strb	r2, [r3, #0]
        break;
 80013fa:	e014      	b.n	8001426 <handleMenu+0x6e>
    case BUTTON_MID:
        playState ^= 1;
 80013fc:	4b3a      	ldr	r3, [pc, #232]	; (80014e8 <handleMenu+0x130>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	f083 0301 	eor.w	r3, r3, #1
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4b38      	ldr	r3, [pc, #224]	; (80014e8 <handleMenu+0x130>)
 8001408:	701a      	strb	r2, [r3, #0]
        break;
 800140a:	e00f      	b.n	800142c <handleMenu+0x74>
    case BUTTON_UP:
        if (0 < selected)
 800140c:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <handleMenu+0x128>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00a      	beq.n	800142a <handleMenu+0x72>
            selected--;
 8001414:	4b32      	ldr	r3, [pc, #200]	; (80014e0 <handleMenu+0x128>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	3b01      	subs	r3, #1
 800141a:	b2da      	uxtb	r2, r3
 800141c:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <handleMenu+0x128>)
 800141e:	701a      	strb	r2, [r3, #0]
        break;
 8001420:	e003      	b.n	800142a <handleMenu+0x72>
    default:
        break;
 8001422:	bf00      	nop
 8001424:	e002      	b.n	800142c <handleMenu+0x74>
        break;
 8001426:	bf00      	nop
 8001428:	e000      	b.n	800142c <handleMenu+0x74>
        break;
 800142a:	bf00      	nop
    }

    PCD8544_Clear();
 800142c:	f001 fb36 	bl	8002a9c <PCD8544_Clear>

    for (int i = 0; i < size_dirs; i++) {
 8001430:	2300      	movs	r3, #0
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	e046      	b.n	80014c4 <handleMenu+0x10c>
        if (i == selected) {
 8001436:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <handleMenu+0x128>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4293      	cmp	r3, r2
 8001440:	d128      	bne.n	8001494 <handleMenu+0xdc>
            PCD8544_DrawFilledRectangle(0, i * 9, 84, i * 9 + 9,
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	461a      	mov	r2, r3
 8001448:	00d2      	lsls	r2, r2, #3
 800144a:	4413      	add	r3, r2
 800144c:	b2d9      	uxtb	r1, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3301      	adds	r3, #1
 8001452:	b2db      	uxtb	r3, r3
 8001454:	461a      	mov	r2, r3
 8001456:	00d2      	lsls	r2, r2, #3
 8001458:	4413      	add	r3, r2
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2201      	movs	r2, #1
 800145e:	9200      	str	r2, [sp, #0]
 8001460:	2254      	movs	r2, #84	; 0x54
 8001462:	2000      	movs	r0, #0
 8001464:	f001 fd98 	bl	8002f98 <PCD8544_DrawFilledRectangle>
                    PCD8544_Pixel_Set);
            PCD8544_GotoXY(4, i * 9 + 1);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	461a      	mov	r2, r3
 800146e:	00d2      	lsls	r2, r2, #3
 8001470:	4413      	add	r3, r2
 8001472:	b2db      	uxtb	r3, r3
 8001474:	3301      	adds	r3, #1
 8001476:	b2db      	uxtb	r3, r3
 8001478:	4619      	mov	r1, r3
 800147a:	2004      	movs	r0, #4
 800147c:	f001 fbde 	bl	8002c3c <PCD8544_GotoXY>
            PCD8544_Puts(buffor_dirs[i], PCD8544_Pixel_Clear,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	011b      	lsls	r3, r3, #4
 8001484:	4a19      	ldr	r2, [pc, #100]	; (80014ec <handleMenu+0x134>)
 8001486:	4413      	add	r3, r2
 8001488:	2200      	movs	r2, #0
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f001 fc97 	bl	8002dc0 <PCD8544_Puts>
 8001492:	e014      	b.n	80014be <handleMenu+0x106>
                    PCD8544_FontSize_5x7);
        } else {
            PCD8544_GotoXY(4, i * 9 + 1);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	00d2      	lsls	r2, r2, #3
 800149c:	4413      	add	r3, r2
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	3301      	adds	r3, #1
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	4619      	mov	r1, r3
 80014a6:	2004      	movs	r0, #4
 80014a8:	f001 fbc8 	bl	8002c3c <PCD8544_GotoXY>
            PCD8544_Puts(buffor_dirs[i], PCD8544_Pixel_Clear,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	011b      	lsls	r3, r3, #4
 80014b0:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <handleMenu+0x134>)
 80014b2:	4413      	add	r3, r2
 80014b4:	2200      	movs	r2, #0
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f001 fc81 	bl	8002dc0 <PCD8544_Puts>
    for (int i = 0; i < size_dirs; i++) {
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3301      	adds	r3, #1
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <handleMenu+0x12c>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4293      	cmp	r3, r2
 80014ce:	dbb2      	blt.n	8001436 <handleMenu+0x7e>
                    PCD8544_FontSize_5x7);
        }
    }
    PCD8544_Refresh();
 80014d0:	f001 fb16 	bl	8002b00 <PCD8544_Refresh>
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200004e0 	.word	0x200004e0
 80014e0:	20000585 	.word	0x20000585
 80014e4:	20000584 	.word	0x20000584
 80014e8:	20000586 	.word	0x20000586
 80014ec:	200004e4 	.word	0x200004e4

080014f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

    return (((uint32_t) r + m) << 16) | (((uint32_t) g + m) << 8)
            | ((uint32_t) b + m);
}

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 80014f0:	b480      	push	{r7}
 80014f2:	b087      	sub	sp, #28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

    Layers *layer;

    if (htim == &htim1) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a5a      	ldr	r2, [pc, #360]	; (8001664 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x174>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d102      	bne.n	8001506 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
        layer = &Layer0;
 8001500:	4b59      	ldr	r3, [pc, #356]	; (8001668 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x178>)
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	e01b      	b.n	800153e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x4e>
    } else if (htim == &htim2) {
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a58      	ldr	r2, [pc, #352]	; (800166c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x17c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d102      	bne.n	8001514 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x24>
        layer = &Layer1;
 800150e:	4b58      	ldr	r3, [pc, #352]	; (8001670 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x180>)
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	e014      	b.n	800153e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x4e>
    } else if (htim == &htim3) {
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a57      	ldr	r2, [pc, #348]	; (8001674 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x184>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d102      	bne.n	8001522 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x32>
        layer = &Layer2;
 800151c:	4b56      	ldr	r3, [pc, #344]	; (8001678 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x188>)
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	e00d      	b.n	800153e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x4e>
    } else if (htim == &htim4) {
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a55      	ldr	r2, [pc, #340]	; (800167c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x18c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d102      	bne.n	8001530 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x40>
        layer = &Layer3;
 800152a:	4b55      	ldr	r3, [pc, #340]	; (8001680 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x190>)
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	e006      	b.n	800153e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x4e>
    } else if (htim == &htim5) {
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a54      	ldr	r2, [pc, #336]	; (8001684 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x194>)
 8001534:	4293      	cmp	r3, r2
 8001536:	f040 808f 	bne.w	8001658 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x168>
        layer = &Layer4;
 800153a:	4b53      	ldr	r3, [pc, #332]	; (8001688 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x198>)
 800153c:	617b      	str	r3, [r7, #20]
    } else
        return;

    // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
    if (layer->wr_buf_p < NUM_PIXELS) {
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8001544:	2bff      	cmp	r3, #255	; 0xff
 8001546:	d868      	bhi.n	800161a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x12a>
        // We're in. Fill the even buffer
        for (uint_fast8_t i = 0; i < 8; ++i) {
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	e05a      	b.n	8001604 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x114>
            layer->wr_buf[i] =
            PWM_LO << (((layer->rgb_arr[3 * layer->wr_buf_p] << i) & 0x80) > 0);
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 8001554:	4613      	mov	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4413      	add	r3, r2
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	4413      	add	r3, r2
 800155e:	7a5b      	ldrb	r3, [r3, #9]
 8001560:	461a      	mov	r2, r3
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	f003 0380 	and.w	r3, r3, #128	; 0x80
            layer->wr_buf[i] =
 800156c:	2b00      	cmp	r3, #0
 800156e:	dd01      	ble.n	8001574 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x84>
 8001570:	2142      	movs	r1, #66	; 0x42
 8001572:	e000      	b.n	8001576 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x86>
 8001574:	2121      	movs	r1, #33	; 0x21
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4413      	add	r3, r2
 8001582:	460a      	mov	r2, r1
 8001584:	805a      	strh	r2, [r3, #2]
            layer->wr_buf[i + 8] = PWM_LO
                    << (((layer->rgb_arr[3 * layer->wr_buf_p + 1] << i) & 0x80)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 800158c:	4613      	mov	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4413      	add	r3, r2
 8001592:	3301      	adds	r3, #1
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	4413      	add	r3, r2
 8001598:	7a5b      	ldrb	r3, [r3, #9]
 800159a:	461a      	mov	r2, r3
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
            layer->wr_buf[i + 8] = PWM_LO
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	dd01      	ble.n	80015ae <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xbe>
 80015aa:	2142      	movs	r1, #66	; 0x42
 80015ac:	e000      	b.n	80015b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc0>
 80015ae:	2121      	movs	r1, #33	; 0x21
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	3308      	adds	r3, #8
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	4413      	add	r3, r2
 80015be:	460a      	mov	r2, r1
 80015c0:	805a      	strh	r2, [r3, #2]
                            > 0);
            layer->wr_buf[i + 16] = PWM_LO
                    << (((layer->rgb_arr[3 * layer->wr_buf_p + 2] << i) & 0x80)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 80015c8:	4613      	mov	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	3302      	adds	r3, #2
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	4413      	add	r3, r2
 80015d4:	7a5b      	ldrb	r3, [r3, #9]
 80015d6:	461a      	mov	r2, r3
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	f003 0380 	and.w	r3, r3, #128	; 0x80
            layer->wr_buf[i + 16] = PWM_LO
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	dd01      	ble.n	80015ea <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfa>
 80015e6:	2142      	movs	r1, #66	; 0x42
 80015e8:	e000      	b.n	80015ec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>
 80015ea:	2121      	movs	r1, #33	; 0x21
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	3310      	adds	r3, #16
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	460a      	mov	r2, r1
 80015fc:	805a      	strh	r2, [r3, #2]
        for (uint_fast8_t i = 0; i < 8; ++i) {
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	3301      	adds	r3, #1
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	2b07      	cmp	r3, #7
 8001608:	d9a1      	bls.n	800154e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x5e>
                            > 0);
        }
        layer->wr_buf_p++;
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8001610:	1c5a      	adds	r2, r3, #1
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 8001618:	e01f      	b.n	800165a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16a>
    } else if (layer->wr_buf_p < NUM_PIXELS + 2) {
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8001620:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8001624:	d219      	bcs.n	800165a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16a>
        // Last two transfers are resets.
        //                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
        // First half reset zero fill
        for (uint8_t i = 0; i < WR_BUF_LEN / 2; ++i)
 8001626:	2300      	movs	r3, #0
 8001628:	73fb      	strb	r3, [r7, #15]
 800162a:	e00a      	b.n	8001642 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x152>
            layer->wr_buf[i] = 0;
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4413      	add	r3, r2
 8001638:	2200      	movs	r2, #0
 800163a:	805a      	strh	r2, [r3, #2]
        for (uint8_t i = 0; i < WR_BUF_LEN / 2; ++i)
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	3301      	adds	r3, #1
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	2b17      	cmp	r3, #23
 8001646:	d9f1      	bls.n	800162c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x13c>
        layer->wr_buf_p++;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 8001656:	e000      	b.n	800165a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16a>
        return;
 8001658:	bf00      	nop
    }
}
 800165a:	371c      	adds	r7, #28
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	20000154 	.word	0x20000154
 8001668:	20000588 	.word	0x20000588
 800166c:	2000019c 	.word	0x2000019c
 8001670:	200008f8 	.word	0x200008f8
 8001674:	200001e4 	.word	0x200001e4
 8001678:	20000c68 	.word	0x20000c68
 800167c:	2000022c 	.word	0x2000022c
 8001680:	20000fd8 	.word	0x20000fd8
 8001684:	20000274 	.word	0x20000274
 8001688:	20001348 	.word	0x20001348

0800168c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

    Layers *layer;

    if (htim == &htim1) {
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a60      	ldr	r2, [pc, #384]	; (8001818 <HAL_TIM_PWM_PulseFinishedCallback+0x18c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d102      	bne.n	80016a2 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
        layer = &Layer0;
 800169c:	4b5f      	ldr	r3, [pc, #380]	; (800181c <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	e01b      	b.n	80016da <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
    } else if (htim == &htim2) {
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a5e      	ldr	r2, [pc, #376]	; (8001820 <HAL_TIM_PWM_PulseFinishedCallback+0x194>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d102      	bne.n	80016b0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>
        layer = &Layer1;
 80016aa:	4b5e      	ldr	r3, [pc, #376]	; (8001824 <HAL_TIM_PWM_PulseFinishedCallback+0x198>)
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	e014      	b.n	80016da <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
    } else if (htim == &htim3) {
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a5d      	ldr	r2, [pc, #372]	; (8001828 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d102      	bne.n	80016be <HAL_TIM_PWM_PulseFinishedCallback+0x32>
        layer = &Layer2;
 80016b8:	4b5c      	ldr	r3, [pc, #368]	; (800182c <HAL_TIM_PWM_PulseFinishedCallback+0x1a0>)
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	e00d      	b.n	80016da <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
    } else if (htim == &htim4) {
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a5b      	ldr	r2, [pc, #364]	; (8001830 <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d102      	bne.n	80016cc <HAL_TIM_PWM_PulseFinishedCallback+0x40>
        layer = &Layer3;
 80016c6:	4b5b      	ldr	r3, [pc, #364]	; (8001834 <HAL_TIM_PWM_PulseFinishedCallback+0x1a8>)
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	e006      	b.n	80016da <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
    } else if (htim == &htim5) {
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a5a      	ldr	r2, [pc, #360]	; (8001838 <HAL_TIM_PWM_PulseFinishedCallback+0x1ac>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	f040 809d 	bne.w	8001810 <HAL_TIM_PWM_PulseFinishedCallback+0x184>
        layer = &Layer4;
 80016d6:	4b59      	ldr	r3, [pc, #356]	; (800183c <HAL_TIM_PWM_PulseFinishedCallback+0x1b0>)
 80016d8:	617b      	str	r3, [r7, #20]
    } else
        return;

    // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
    if (layer->wr_buf_p < NUM_PIXELS) {
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 80016e0:	2bff      	cmp	r3, #255	; 0xff
 80016e2:	d869      	bhi.n	80017b8 <HAL_TIM_PWM_PulseFinishedCallback+0x12c>
        // We're in. Fill the odd buffer
        for (uint_fast8_t i = 0; i < 8; ++i) {
 80016e4:	2300      	movs	r3, #0
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	e05b      	b.n	80017a2 <HAL_TIM_PWM_PulseFinishedCallback+0x116>
            layer->wr_buf[i + 24] =
            PWM_LO << (((layer->rgb_arr[3 * layer->wr_buf_p] << i) & 0x80) > 0);
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 80016f0:	4613      	mov	r3, r2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4413      	add	r3, r2
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	4413      	add	r3, r2
 80016fa:	7a5b      	ldrb	r3, [r3, #9]
 80016fc:	461a      	mov	r2, r3
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	f003 0380 	and.w	r3, r3, #128	; 0x80
            layer->wr_buf[i + 24] =
 8001708:	2b00      	cmp	r3, #0
 800170a:	dd01      	ble.n	8001710 <HAL_TIM_PWM_PulseFinishedCallback+0x84>
 800170c:	2142      	movs	r1, #66	; 0x42
 800170e:	e000      	b.n	8001712 <HAL_TIM_PWM_PulseFinishedCallback+0x86>
 8001710:	2121      	movs	r1, #33	; 0x21
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	3318      	adds	r3, #24
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	460a      	mov	r2, r1
 8001722:	805a      	strh	r2, [r3, #2]
            layer->wr_buf[i + 32] = PWM_LO
                    << (((layer->rgb_arr[3 * layer->wr_buf_p + 1] << i) & 0x80)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	3301      	adds	r3, #1
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	4413      	add	r3, r2
 8001736:	7a5b      	ldrb	r3, [r3, #9]
 8001738:	461a      	mov	r2, r3
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	f003 0380 	and.w	r3, r3, #128	; 0x80
            layer->wr_buf[i + 32] = PWM_LO
 8001744:	2b00      	cmp	r3, #0
 8001746:	dd01      	ble.n	800174c <HAL_TIM_PWM_PulseFinishedCallback+0xc0>
 8001748:	2142      	movs	r1, #66	; 0x42
 800174a:	e000      	b.n	800174e <HAL_TIM_PWM_PulseFinishedCallback+0xc2>
 800174c:	2121      	movs	r1, #33	; 0x21
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	3320      	adds	r3, #32
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4413      	add	r3, r2
 800175c:	460a      	mov	r2, r1
 800175e:	805a      	strh	r2, [r3, #2]
                            > 0);
            layer->wr_buf[i + 40] = PWM_LO
                    << (((layer->rgb_arr[3 * layer->wr_buf_p + 2] << i) & 0x80)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	3302      	adds	r3, #2
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	4413      	add	r3, r2
 8001772:	7a5b      	ldrb	r3, [r3, #9]
 8001774:	461a      	mov	r2, r3
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	f003 0380 	and.w	r3, r3, #128	; 0x80
            layer->wr_buf[i + 40] = PWM_LO
 8001780:	2b00      	cmp	r3, #0
 8001782:	dd01      	ble.n	8001788 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>
 8001784:	2142      	movs	r1, #66	; 0x42
 8001786:	e000      	b.n	800178a <HAL_TIM_PWM_PulseFinishedCallback+0xfe>
 8001788:	2121      	movs	r1, #33	; 0x21
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	3328      	adds	r3, #40	; 0x28
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	4413      	add	r3, r2
 8001798:	460a      	mov	r2, r1
 800179a:	805a      	strh	r2, [r3, #2]
        for (uint_fast8_t i = 0; i < 8; ++i) {
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	3301      	adds	r3, #1
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	2b07      	cmp	r3, #7
 80017a6:	d9a0      	bls.n	80016ea <HAL_TIM_PWM_PulseFinishedCallback+0x5e>
                            > 0);
        }

        layer->wr_buf_p++;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 80017b6:	e02c      	b.n	8001812 <HAL_TIM_PWM_PulseFinishedCallback+0x186>

    } else if (layer->wr_buf_p < NUM_PIXELS + 2) {
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 80017be:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 80017c2:	d218      	bcs.n	80017f6 <HAL_TIM_PWM_PulseFinishedCallback+0x16a>
        // Second half reset zero fill
        for (uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i)
 80017c4:	2318      	movs	r3, #24
 80017c6:	73fb      	strb	r3, [r7, #15]
 80017c8:	e00a      	b.n	80017e0 <HAL_TIM_PWM_PulseFinishedCallback+0x154>
            layer->wr_buf[i] = 0;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	2200      	movs	r2, #0
 80017d8:	805a      	strh	r2, [r3, #2]
        for (uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i)
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	3301      	adds	r3, #1
 80017de:	73fb      	strb	r3, [r7, #15]
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	2b2f      	cmp	r3, #47	; 0x2f
 80017e4:	d9f1      	bls.n	80017ca <HAL_TIM_PWM_PulseFinishedCallback+0x13e>
        ++layer->wr_buf_p;
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 80017ec:	1c5a      	adds	r2, r3, #1
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 80017f4:	e00d      	b.n	8001812 <HAL_TIM_PWM_PulseFinishedCallback+0x186>
    } else {
        // We're done. Lean back and until next time!
        layer->wr_buf_p = 0;
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
        HAL_TIM_PWM_Stop_DMA(layer->timer, layer->channel);
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	7a1b      	ldrb	r3, [r3, #8]
 8001806:	4619      	mov	r1, r3
 8001808:	4610      	mov	r0, r2
 800180a:	f003 ff3f 	bl	800568c <HAL_TIM_PWM_Stop_DMA>
 800180e:	e000      	b.n	8001812 <HAL_TIM_PWM_PulseFinishedCallback+0x186>
        return;
 8001810:	bf00      	nop
    }
}
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000154 	.word	0x20000154
 800181c:	20000588 	.word	0x20000588
 8001820:	2000019c 	.word	0x2000019c
 8001824:	200008f8 	.word	0x200008f8
 8001828:	200001e4 	.word	0x200001e4
 800182c:	20000c68 	.word	0x20000c68
 8001830:	2000022c 	.word	0x2000022c
 8001834:	20000fd8 	.word	0x20000fd8
 8001838:	20000274 	.word	0x20000274
 800183c:	20001348 	.word	0x20001348

08001840 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001844:	b672      	cpsid	i
}
 8001846:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8001848:	e7fe      	b.n	8001848 <Error_Handler+0x8>
	...

0800184c <myprintf>:
#include "fatfs.h"

extern SPI_HandleTypeDef hspi1;
extern UART_HandleTypeDef huart2;

void myprintf(const char *fmt, ...) {
 800184c:	b40f      	push	{r0, r1, r2, r3}
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
    static char buffer[256];
    va_list args;
    va_start(args, fmt);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	603b      	str	r3, [r7, #0]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001862:	480b      	ldr	r0, [pc, #44]	; (8001890 <myprintf+0x44>)
 8001864:	f008 fe44 	bl	800a4f0 <vsniprintf>
    va_end(args);

    int len = strlen(buffer);
 8001868:	4809      	ldr	r0, [pc, #36]	; (8001890 <myprintf+0x44>)
 800186a:	f7fe fcb9 	bl	80001e0 <strlen>
 800186e:	4603      	mov	r3, r0
 8001870:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) buffer, len, -1);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	b29a      	uxth	r2, r3
 8001876:	f04f 33ff 	mov.w	r3, #4294967295
 800187a:	4905      	ldr	r1, [pc, #20]	; (8001890 <myprintf+0x44>)
 800187c:	4805      	ldr	r0, [pc, #20]	; (8001894 <myprintf+0x48>)
 800187e:	f004 fe08 	bl	8006492 <HAL_UART_Transmit>

}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800188c:	b004      	add	sp, #16
 800188e:	4770      	bx	lr
 8001890:	20001b1c 	.word	0x20001b1c
 8001894:	2000049c 	.word	0x2000049c

08001898 <sd_card_init>:
//some variables for FatFs
FATFS FatFs; 	//Fatfs handle
FIL fil; 		//File handle
FRESULT fres; //Result after operations

ret_status sd_card_init(void) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
    myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 800189e:	4827      	ldr	r0, [pc, #156]	; (800193c <sd_card_init+0xa4>)
 80018a0:	f7ff ffd4 	bl	800184c <myprintf>

    HAL_Delay(1000); //a short delay is important to let the SD card settle
 80018a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018a8:	f001 fd50 	bl	800334c <HAL_Delay>

    fres = f_mount(&FatFs, "", 1); //1=mount now
 80018ac:	2201      	movs	r2, #1
 80018ae:	4924      	ldr	r1, [pc, #144]	; (8001940 <sd_card_init+0xa8>)
 80018b0:	4824      	ldr	r0, [pc, #144]	; (8001944 <sd_card_init+0xac>)
 80018b2:	f007 fcaf 	bl	8009214 <f_mount>
 80018b6:	4603      	mov	r3, r0
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b23      	ldr	r3, [pc, #140]	; (8001948 <sd_card_init+0xb0>)
 80018bc:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 80018be:	4b22      	ldr	r3, [pc, #136]	; (8001948 <sd_card_init+0xb0>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d007      	beq.n	80018d6 <sd_card_init+0x3e>
        myprintf("f_mount error (%i)\r\n", fres);
 80018c6:	4b20      	ldr	r3, [pc, #128]	; (8001948 <sd_card_init+0xb0>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	4619      	mov	r1, r3
 80018cc:	481f      	ldr	r0, [pc, #124]	; (800194c <sd_card_init+0xb4>)
 80018ce:	f7ff ffbd 	bl	800184c <myprintf>
        return STATUS_ERROR;
 80018d2:	2302      	movs	r3, #2
 80018d4:	e02d      	b.n	8001932 <sd_card_init+0x9a>
    }
    DWORD free_clusters, free_sectors, total_sectors;

    FATFS *getFreeFs;

    fres = f_getfree("", &free_clusters, &getFreeFs);
 80018d6:	463a      	mov	r2, r7
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	4619      	mov	r1, r3
 80018dc:	4818      	ldr	r0, [pc, #96]	; (8001940 <sd_card_init+0xa8>)
 80018de:	f008 fb63 	bl	8009fa8 <f_getfree>
 80018e2:	4603      	mov	r3, r0
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b18      	ldr	r3, [pc, #96]	; (8001948 <sd_card_init+0xb0>)
 80018e8:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <sd_card_init+0xb0>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d007      	beq.n	8001902 <sd_card_init+0x6a>
        myprintf("f_getfree error (%i)\r\n", fres);
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <sd_card_init+0xb0>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	4619      	mov	r1, r3
 80018f8:	4815      	ldr	r0, [pc, #84]	; (8001950 <sd_card_init+0xb8>)
 80018fa:	f7ff ffa7 	bl	800184c <myprintf>

        return STATUS_ERROR;
 80018fe:	2302      	movs	r3, #2
 8001900:	e017      	b.n	8001932 <sd_card_init+0x9a>
    }

    //Formula comes from ChaN's documentation
    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	3b02      	subs	r3, #2
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	8952      	ldrh	r2, [r2, #10]
 800190c:	fb02 f303 	mul.w	r3, r2, r3
 8001910:	60fb      	str	r3, [r7, #12]
    free_sectors = free_clusters * getFreeFs->csize;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	895b      	ldrh	r3, [r3, #10]
 8001916:	461a      	mov	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	fb02 f303 	mul.w	r3, r2, r3
 800191e:	60bb      	str	r3, [r7, #8]

    myprintf(
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	0859      	lsrs	r1, r3, #1
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	085b      	lsrs	r3, r3, #1
 8001928:	461a      	mov	r2, r3
 800192a:	480a      	ldr	r0, [pc, #40]	; (8001954 <sd_card_init+0xbc>)
 800192c:	f7ff ff8e 	bl	800184c <myprintf>
//	} else {
//		myprintf("f_write error (%i)\r\n", fres);
//	}
//

    return STATUS_OK;
 8001930:	2301      	movs	r3, #1
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	0800b504 	.word	0x0800b504
 8001940:	0800b524 	.word	0x0800b524
 8001944:	200016b8 	.word	0x200016b8
 8001948:	20001b18 	.word	0x20001b18
 800194c:	0800b528 	.word	0x0800b528
 8001950:	0800b540 	.word	0x0800b540
 8001954:	0800b558 	.word	0x0800b558

08001958 <sd_card_scan_file>:

ret_status sd_card_scan_file(char *path, char* buffor_dirs, uint8_t* size_dirs) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b092      	sub	sp, #72	; 0x48
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]

    FRESULT res;
    DIR dir;
    UINT i;
    static FILINFO fno;
    res = f_opendir(&dir, path); /* Open the directory */
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	68f9      	ldr	r1, [r7, #12]
 800196a:	4618      	mov	r0, r3
 800196c:	f008 fa46 	bl	8009dfc <f_opendir>
 8001970:	4603      	mov	r3, r0
 8001972:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (res == FR_OK) {
 8001976:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800197a:	2b00      	cmp	r3, #0
 800197c:	d15f      	bne.n	8001a3e <sd_card_scan_file+0xe6>
        while (1) {
            res = f_readdir(&dir, &fno); /* Read a directory item */
 800197e:	f107 0310 	add.w	r3, r7, #16
 8001982:	4934      	ldr	r1, [pc, #208]	; (8001a54 <sd_card_scan_file+0xfc>)
 8001984:	4618      	mov	r0, r3
 8001986:	f008 fad2 	bl	8009f2e <f_readdir>
 800198a:	4603      	mov	r3, r0
 800198c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            if (res != FR_OK || fno.fname[0] == 0)
 8001990:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001994:	2b00      	cmp	r3, #0
 8001996:	d14b      	bne.n	8001a30 <sd_card_scan_file+0xd8>
 8001998:	4b2e      	ldr	r3, [pc, #184]	; (8001a54 <sd_card_scan_file+0xfc>)
 800199a:	7a5b      	ldrb	r3, [r3, #9]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d047      	beq.n	8001a30 <sd_card_scan_file+0xd8>
                break; /* Break on error or end of dir */
            if (fno.fattrib & AM_DIR && !(fno.fattrib & AM_HID)
 80019a0:	4b2c      	ldr	r3, [pc, #176]	; (8001a54 <sd_card_scan_file+0xfc>)
 80019a2:	7a1b      	ldrb	r3, [r3, #8]
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d03a      	beq.n	8001a22 <sd_card_scan_file+0xca>
 80019ac:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <sd_card_scan_file+0xfc>)
 80019ae:	7a1b      	ldrb	r3, [r3, #8]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d134      	bne.n	8001a22 <sd_card_scan_file+0xca>
                    && !(fno.fattrib & AM_SYS)) { /* It is a directory */
 80019b8:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <sd_card_scan_file+0xfc>)
 80019ba:	7a1b      	ldrb	r3, [r3, #8]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d12e      	bne.n	8001a22 <sd_card_scan_file+0xca>
                i = strlen(path);
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f7fe fc0b 	bl	80001e0 <strlen>
 80019ca:	6438      	str	r0, [r7, #64]	; 0x40
                sprintf(&path[i], "/%s", fno.fname);
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019d0:	4413      	add	r3, r2
 80019d2:	4a21      	ldr	r2, [pc, #132]	; (8001a58 <sd_card_scan_file+0x100>)
 80019d4:	4921      	ldr	r1, [pc, #132]	; (8001a5c <sd_card_scan_file+0x104>)
 80019d6:	4618      	mov	r0, r3
 80019d8:	f008 fcb2 	bl	800a340 <siprintf>
                sprintf((char*)(buffor_dirs + (*size_dirs)*16), "%s", path);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	461a      	mov	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4413      	add	r3, r2
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	491d      	ldr	r1, [pc, #116]	; (8001a60 <sd_card_scan_file+0x108>)
 80019ec:	4618      	mov	r0, r3
 80019ee:	f008 fca7 	bl	800a340 <siprintf>
                (*size_dirs)++;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	3301      	adds	r3, #1
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	701a      	strb	r2, [r3, #0]
                res = sd_card_scan_file(path, NULL, NULL); /* Enter the directory */
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f7ff ffa8 	bl	8001958 <sd_card_scan_file>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if (res != FR_OK)
 8001a0e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10b      	bne.n	8001a2e <sd_card_scan_file+0xd6>
                    break;
                path[i] = 0;
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a1a:	4413      	add	r3, r2
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
 8001a20:	e004      	b.n	8001a2c <sd_card_scan_file+0xd4>
            } else { /* It is a file. */
                myprintf("%s/%s\r\n", path, fno.fname);
 8001a22:	4a0d      	ldr	r2, [pc, #52]	; (8001a58 <sd_card_scan_file+0x100>)
 8001a24:	68f9      	ldr	r1, [r7, #12]
 8001a26:	480f      	ldr	r0, [pc, #60]	; (8001a64 <sd_card_scan_file+0x10c>)
 8001a28:	f7ff ff10 	bl	800184c <myprintf>
            res = f_readdir(&dir, &fno); /* Read a directory item */
 8001a2c:	e7a7      	b.n	800197e <sd_card_scan_file+0x26>
                    break;
 8001a2e:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8001a30:	f107 0310 	add.w	r3, r7, #16
 8001a34:	4618      	mov	r0, r3
 8001a36:	f008 fa54 	bl	8009ee2 <f_closedir>
    }
    else {
        myprintf("Error!!! Scanning dir error: %d\n", res);
        return STATUS_ERROR;
    }
    return STATUS_OK;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e006      	b.n	8001a4c <sd_card_scan_file+0xf4>
        myprintf("Error!!! Scanning dir error: %d\n", res);
 8001a3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a42:	4619      	mov	r1, r3
 8001a44:	4808      	ldr	r0, [pc, #32]	; (8001a68 <sd_card_scan_file+0x110>)
 8001a46:	f7ff ff01 	bl	800184c <myprintf>
        return STATUS_ERROR;
 8001a4a:	2302      	movs	r3, #2
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3748      	adds	r7, #72	; 0x48
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20001c1c 	.word	0x20001c1c
 8001a58:	20001c25 	.word	0x20001c25
 8001a5c:	0800b5a0 	.word	0x0800b5a0
 8001a60:	0800b5a4 	.word	0x0800b5a4
 8001a64:	0800b5a8 	.word	0x0800b5a8
 8001a68:	0800b5b0 	.word	0x0800b5b0

08001a6c <sd_card_close>:

ret_status sd_card_close(void) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
    f_close(&fil);
 8001a70:	4806      	ldr	r0, [pc, #24]	; (8001a8c <sd_card_close+0x20>)
 8001a72:	f007 ff90 	bl	8009996 <f_close>
    f_mount(NULL, "", 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	4905      	ldr	r1, [pc, #20]	; (8001a90 <sd_card_close+0x24>)
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f007 fbca 	bl	8009214 <f_mount>
    myprintf("\r\nSD card is UNMOUNTED\r\n");
 8001a80:	4804      	ldr	r0, [pc, #16]	; (8001a94 <sd_card_close+0x28>)
 8001a82:	f7ff fee3 	bl	800184c <myprintf>
    return STATUS_ERROR;
 8001a86:	2302      	movs	r3, #2
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200018e8 	.word	0x200018e8
 8001a90:	0800b524 	.word	0x0800b524
 8001a94:	0800b5d4 	.word	0x0800b5d4

08001a98 <sd_card_read_data>:

ret_status sd_card_read_data(char *path, uint8_t *data, struct layers_struct *layers) {
 8001a98:	b590      	push	{r4, r7, lr}
 8001a9a:	f5ad 7d31 	sub.w	sp, sp, #708	; 0x2c4
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001aa4:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001aa8:	6018      	str	r0, [r3, #0]
 8001aaa:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001aae:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8001ab2:	6019      	str	r1, [r3, #0]
 8001ab4:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001ab8:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8001abc:	601a      	str	r2, [r3, #0]


    FIL file;
    UINT br;
    char name[20] = { 0 };
 8001abe:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001ac2:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	3304      	adds	r3, #4
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]

    // #### READING CONGFIGURATION
    sprintf((char*)name, "%s//%s", (char*)path, "CONFIG~1.txt");
 8001ad6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001ada:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 8001ade:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001ae2:	4bc6      	ldr	r3, [pc, #792]	; (8001dfc <sd_card_read_data+0x364>)
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	49c6      	ldr	r1, [pc, #792]	; (8001e00 <sd_card_read_data+0x368>)
 8001ae8:	f008 fc2a 	bl	800a340 <siprintf>
    myprintf("start reading file: %s\r\n", name);
 8001aec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001af0:	4619      	mov	r1, r3
 8001af2:	48c4      	ldr	r0, [pc, #784]	; (8001e04 <sd_card_read_data+0x36c>)
 8001af4:	f7ff feaa 	bl	800184c <myprintf>
    fres = f_open(&file, name, FA_READ);
 8001af8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001afc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b00:	2201      	movs	r2, #1
 8001b02:	4618      	mov	r0, r3
 8001b04:	f007 fbcc 	bl	80092a0 <f_open>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4bbe      	ldr	r3, [pc, #760]	; (8001e08 <sd_card_read_data+0x370>)
 8001b0e:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 8001b10:	4bbd      	ldr	r3, [pc, #756]	; (8001e08 <sd_card_read_data+0x370>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d007      	beq.n	8001b28 <sd_card_read_data+0x90>
        myprintf("f_open error (%i)\r\n", fres);
 8001b18:	4bbb      	ldr	r3, [pc, #748]	; (8001e08 <sd_card_read_data+0x370>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	48bb      	ldr	r0, [pc, #748]	; (8001e0c <sd_card_read_data+0x374>)
 8001b20:	f7ff fe94 	bl	800184c <myprintf>
        return STATUS_ERROR;
 8001b24:	2302      	movs	r3, #2
 8001b26:	e21c      	b.n	8001f62 <sd_card_read_data+0x4ca>
    }

    UINT num = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc

    uint8_t isComment = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f887 32bb 	strb.w	r3, [r7, #699]	; 0x2bb
    char ch;
    TCHAR buffer[32] = {0};
 8001b34:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001b38:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	3304      	adds	r3, #4
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
 8001b4c:	611a      	str	r2, [r3, #16]
 8001b4e:	615a      	str	r2, [r3, #20]
 8001b50:	619a      	str	r2, [r3, #24]
    while(!f_eof(&file)){
 8001b52:	e0db      	b.n	8001d0c <sd_card_read_data+0x274>
        fres = f_read(&file, &ch, 1, &br);
 8001b54:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b58:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8001b5c:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001b60:	2201      	movs	r2, #1
 8001b62:	f007 fd5b 	bl	800961c <f_read>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4ba7      	ldr	r3, [pc, #668]	; (8001e08 <sd_card_read_data+0x370>)
 8001b6c:	701a      	strb	r2, [r3, #0]
        if (fres != FR_OK) {
 8001b6e:	4ba6      	ldr	r3, [pc, #664]	; (8001e08 <sd_card_read_data+0x370>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d007      	beq.n	8001b86 <sd_card_read_data+0xee>
            myprintf("f_read error (%i)\r\n", fres);
 8001b76:	4ba4      	ldr	r3, [pc, #656]	; (8001e08 <sd_card_read_data+0x370>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	48a4      	ldr	r0, [pc, #656]	; (8001e10 <sd_card_read_data+0x378>)
 8001b7e:	f7ff fe65 	bl	800184c <myprintf>
            return STATUS_ERROR;
 8001b82:	2302      	movs	r3, #2
 8001b84:	e1ed      	b.n	8001f62 <sd_card_read_data+0x4ca>
        }

        if('\n' == ch){
 8001b86:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001b8a:	f2a3 2369 	subw	r3, r3, #617	; 0x269
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b0a      	cmp	r3, #10
 8001b92:	d105      	bne.n	8001ba0 <sd_card_read_data+0x108>
            isComment = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f887 32bb 	strb.w	r3, [r7, #699]	; 0x2bb
            printf("end of line\n");
 8001b9a:	489e      	ldr	r0, [pc, #632]	; (8001e14 <sd_card_read_data+0x37c>)
 8001b9c:	f008 fbc8 	bl	800a330 <puts>
        }
        if(isComment) continue;
 8001ba0:	f897 32bb 	ldrb.w	r3, [r7, #699]	; 0x2bb
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d000      	beq.n	8001baa <sd_card_read_data+0x112>
 8001ba8:	e0b0      	b.n	8001d0c <sd_card_read_data+0x274>
        if('#' == ch){
 8001baa:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001bae:	f2a3 2369 	subw	r3, r3, #617	; 0x269
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b23      	cmp	r3, #35	; 0x23
 8001bb6:	d103      	bne.n	8001bc0 <sd_card_read_data+0x128>
            isComment = 1;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	f887 32bb 	strb.w	r3, [r7, #699]	; 0x2bb
            continue;
 8001bbe:	e0a5      	b.n	8001d0c <sd_card_read_data+0x274>
        }

        if('L' == ch){
 8001bc0:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001bc4:	f2a3 2369 	subw	r3, r3, #617	; 0x269
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b4c      	cmp	r3, #76	; 0x4c
 8001bcc:	f040 809e 	bne.w	8001d0c <sd_card_read_data+0x274>
            uint8_t length = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f887 32ba 	strb.w	r3, [r7, #698]	; 0x2ba
            char c = 0;
 8001bd6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001bda:	f2a3 238d 	subw	r3, r3, #653	; 0x28d
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
            while(';' != c){
 8001be2:	e01d      	b.n	8001c20 <sd_card_read_data+0x188>
                length++;
 8001be4:	f897 32ba 	ldrb.w	r3, [r7, #698]	; 0x2ba
 8001be8:	3301      	adds	r3, #1
 8001bea:	f887 32ba 	strb.w	r3, [r7, #698]	; 0x2ba
                fres = f_read(&file, &c, 1, &br);
 8001bee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bf2:	f107 0133 	add.w	r1, r7, #51	; 0x33
 8001bf6:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f007 fd0e 	bl	800961c <f_read>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461a      	mov	r2, r3
 8001c04:	4b80      	ldr	r3, [pc, #512]	; (8001e08 <sd_card_read_data+0x370>)
 8001c06:	701a      	strb	r2, [r3, #0]
                if (fres != FR_OK) {
 8001c08:	4b7f      	ldr	r3, [pc, #508]	; (8001e08 <sd_card_read_data+0x370>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d007      	beq.n	8001c20 <sd_card_read_data+0x188>
                    myprintf("f_read error (%i)\r\n", fres);
 8001c10:	4b7d      	ldr	r3, [pc, #500]	; (8001e08 <sd_card_read_data+0x370>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	4619      	mov	r1, r3
 8001c16:	487e      	ldr	r0, [pc, #504]	; (8001e10 <sd_card_read_data+0x378>)
 8001c18:	f7ff fe18 	bl	800184c <myprintf>
                    return STATUS_ERROR;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e1a0      	b.n	8001f62 <sd_card_read_data+0x4ca>
            while(';' != c){
 8001c20:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001c24:	f2a3 238d 	subw	r3, r3, #653	; 0x28d
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b3b      	cmp	r3, #59	; 0x3b
 8001c2c:	d1da      	bne.n	8001be4 <sd_card_read_data+0x14c>
                }
            }
            f_lseek(&file, f_tell(&file)-length);
 8001c2e:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001c32:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001c36:	699a      	ldr	r2, [r3, #24]
 8001c38:	f897 32ba 	ldrb.w	r3, [r7, #698]	; 0x2ba
 8001c3c:	1ad2      	subs	r2, r2, r3
 8001c3e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f007 fed0 	bl	80099ea <f_lseek>
            fres = f_read(&file, &buffer, length, &br);
 8001c4a:	f897 22ba 	ldrb.w	r2, [r7, #698]	; 0x2ba
 8001c4e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c52:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001c56:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001c5a:	f007 fcdf 	bl	800961c <f_read>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b69      	ldr	r3, [pc, #420]	; (8001e08 <sd_card_read_data+0x370>)
 8001c64:	701a      	strb	r2, [r3, #0]
            if (fres != FR_OK) {
 8001c66:	4b68      	ldr	r3, [pc, #416]	; (8001e08 <sd_card_read_data+0x370>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <sd_card_read_data+0x1e6>
                myprintf("f_read error (%i)\r\n", fres);
 8001c6e:	4b66      	ldr	r3, [pc, #408]	; (8001e08 <sd_card_read_data+0x370>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	4619      	mov	r1, r3
 8001c74:	4866      	ldr	r0, [pc, #408]	; (8001e10 <sd_card_read_data+0x378>)
 8001c76:	f7ff fde9 	bl	800184c <myprintf>
                return STATUS_ERROR;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e171      	b.n	8001f62 <sd_card_read_data+0x4ca>
            }
            int i = 7;
 8001c7e:	2307      	movs	r3, #7
 8001c80:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
            int count = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
            while(length > i){
 8001c8a:	e024      	b.n	8001cd6 <sd_card_read_data+0x23e>
                layers[num].values[count] = atoi(&buffer[i]);
 8001c8c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001c90:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8001c94:	18d1      	adds	r1, r2, r3
 8001c96:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	015b      	lsls	r3, r3, #5
 8001c9e:	4413      	add	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001ca8:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	189c      	adds	r4, r3, r2
 8001cb0:	4608      	mov	r0, r1
 8001cb2:	f008 fa8a 	bl	800a1ca <atoi>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4423      	add	r3, r4
 8001cc0:	605a      	str	r2, [r3, #4]
                i+=2;
 8001cc2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8001cc6:	3302      	adds	r3, #2
 8001cc8:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
                count++;
 8001ccc:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
            while(length > i){
 8001cd6:	f897 32ba 	ldrb.w	r3, [r7, #698]	; 0x2ba
 8001cda:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	dbd4      	blt.n	8001c8c <sd_card_read_data+0x1f4>
            }
            layers[num].count = count;
 8001ce2:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	015b      	lsls	r3, r3, #5
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	461a      	mov	r2, r3
 8001cf0:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001cf4:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8001d00:	601a      	str	r2, [r3, #0]
            num++;
 8001d02:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8001d06:	3301      	adds	r3, #1
 8001d08:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
    while(!f_eof(&file)){
 8001d0c:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001d10:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001d14:	699a      	ldr	r2, [r3, #24]
 8001d16:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001d1a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	f47f af17 	bne.w	8001b54 <sd_card_read_data+0xbc>
        }

    }
    f_close(&file);
 8001d26:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f007 fe33 	bl	8009996 <f_close>

    // #### READING FILES
//    myprintf("Reading files with animation\r\n");
    for (uint8_t image = 0; image < 10; image++) {
 8001d30:	2300      	movs	r3, #0
 8001d32:	f887 32af 	strb.w	r3, [r7, #687]	; 0x2af
 8001d36:	e10e      	b.n	8001f56 <sd_card_read_data+0x4be>
        char name[20] = { 0 };
 8001d38:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001d3c:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	3304      	adds	r3, #4
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
        sprintf((char*)name, "%s//%d.txt", (char*)path, image);
 8001d50:	f897 32af 	ldrb.w	r3, [r7, #687]	; 0x2af
 8001d54:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8001d58:	f5a2 722d 	sub.w	r2, r2, #692	; 0x2b4
 8001d5c:	f107 001c 	add.w	r0, r7, #28
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	492d      	ldr	r1, [pc, #180]	; (8001e18 <sd_card_read_data+0x380>)
 8001d64:	f008 faec 	bl	800a340 <siprintf>

		fres = f_open(&file, name, FA_READ);
 8001d68:	f107 011c 	add.w	r1, r7, #28
 8001d6c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d70:	2201      	movs	r2, #1
 8001d72:	4618      	mov	r0, r3
 8001d74:	f007 fa94 	bl	80092a0 <f_open>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <sd_card_read_data+0x370>)
 8001d7e:	701a      	strb	r2, [r3, #0]
		if (fres != FR_OK) {
 8001d80:	4b21      	ldr	r3, [pc, #132]	; (8001e08 <sd_card_read_data+0x370>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d007      	beq.n	8001d98 <sd_card_read_data+0x300>
			myprintf("f_open error (%i)\r\n", fres);
 8001d88:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <sd_card_read_data+0x370>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	481f      	ldr	r0, [pc, #124]	; (8001e0c <sd_card_read_data+0x374>)
 8001d90:	f7ff fd5c 	bl	800184c <myprintf>
			return STATUS_ERROR;
 8001d94:	2302      	movs	r3, #2
 8001d96:	e0e4      	b.n	8001f62 <sd_card_read_data+0x4ca>
		}

        UINT num = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
        int i = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
        int j = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
        while(i < 256){
 8001daa:	e0bf      	b.n	8001f2c <sd_card_read_data+0x494>
            num = 1;
 8001dac:	2301      	movs	r3, #1
 8001dae:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
            TCHAR c[2] = {0};
 8001db2:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001db6:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8001dba:	2200      	movs	r2, #0
 8001dbc:	801a      	strh	r2, [r3, #0]
            TCHAR string[4] = {0};
 8001dbe:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001dc2:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]

            fres = f_read(&file, c, 1, &br);
 8001dca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001dce:	f107 0118 	add.w	r1, r7, #24
 8001dd2:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f007 fc20 	bl	800961c <f_read>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	461a      	mov	r2, r3
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <sd_card_read_data+0x370>)
 8001de2:	701a      	strb	r2, [r3, #0]
            if (fres != FR_OK) {
 8001de4:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <sd_card_read_data+0x370>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d035      	beq.n	8001e58 <sd_card_read_data+0x3c0>
                myprintf("f_read error (%i)\r\n", fres);
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <sd_card_read_data+0x370>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	4619      	mov	r1, r3
 8001df2:	4807      	ldr	r0, [pc, #28]	; (8001e10 <sd_card_read_data+0x378>)
 8001df4:	f7ff fd2a 	bl	800184c <myprintf>
                return STATUS_ERROR;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e0b2      	b.n	8001f62 <sd_card_read_data+0x4ca>
 8001dfc:	0800b5f0 	.word	0x0800b5f0
 8001e00:	0800b600 	.word	0x0800b600
 8001e04:	0800b608 	.word	0x0800b608
 8001e08:	20001b18 	.word	0x20001b18
 8001e0c:	0800b624 	.word	0x0800b624
 8001e10:	0800b638 	.word	0x0800b638
 8001e14:	0800b64c 	.word	0x0800b64c
 8001e18:	0800b658 	.word	0x0800b658
            }
            while(',' != c[0]){
                num++;
 8001e1c:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8001e20:	3301      	adds	r3, #1
 8001e22:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
                fres = f_read(&file, c, 1, &br);
 8001e26:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e2a:	f107 0118 	add.w	r1, r7, #24
 8001e2e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001e32:	2201      	movs	r2, #1
 8001e34:	f007 fbf2 	bl	800961c <f_read>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	4b4b      	ldr	r3, [pc, #300]	; (8001f6c <sd_card_read_data+0x4d4>)
 8001e3e:	701a      	strb	r2, [r3, #0]
                if (fres != FR_OK) {
 8001e40:	4b4a      	ldr	r3, [pc, #296]	; (8001f6c <sd_card_read_data+0x4d4>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d007      	beq.n	8001e58 <sd_card_read_data+0x3c0>
                    myprintf("f_read error (%i)\r\n", fres);
 8001e48:	4b48      	ldr	r3, [pc, #288]	; (8001f6c <sd_card_read_data+0x4d4>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4848      	ldr	r0, [pc, #288]	; (8001f70 <sd_card_read_data+0x4d8>)
 8001e50:	f7ff fcfc 	bl	800184c <myprintf>
                    return STATUS_ERROR;
 8001e54:	2302      	movs	r3, #2
 8001e56:	e068      	b.n	8001f2a <sd_card_read_data+0x492>
            while(',' != c[0]){
 8001e58:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001e5c:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b2c      	cmp	r3, #44	; 0x2c
 8001e64:	d1da      	bne.n	8001e1c <sd_card_read_data+0x384>
                }
            }
            f_lseek(&file, f_tell(&file)-num);
 8001e66:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001e6a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001e6e:	699a      	ldr	r2, [r3, #24]
 8001e70:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8001e74:	1ad2      	subs	r2, r2, r3
 8001e76:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f007 fdb4 	bl	80099ea <f_lseek>
            fres = f_read(&file, string, num-1, &br);
 8001e82:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8001e86:	1e5a      	subs	r2, r3, #1
 8001e88:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e8c:	f107 0114 	add.w	r1, r7, #20
 8001e90:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001e94:	f007 fbc2 	bl	800961c <f_read>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4b33      	ldr	r3, [pc, #204]	; (8001f6c <sd_card_read_data+0x4d4>)
 8001e9e:	701a      	strb	r2, [r3, #0]
            if (fres != FR_OK) {
 8001ea0:	4b32      	ldr	r3, [pc, #200]	; (8001f6c <sd_card_read_data+0x4d4>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d007      	beq.n	8001eb8 <sd_card_read_data+0x420>
                myprintf("f_read error (%i)\r\n", fres);
 8001ea8:	4b30      	ldr	r3, [pc, #192]	; (8001f6c <sd_card_read_data+0x4d4>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	4830      	ldr	r0, [pc, #192]	; (8001f70 <sd_card_read_data+0x4d8>)
 8001eb0:	f7ff fccc 	bl	800184c <myprintf>
                return STATUS_ERROR;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e038      	b.n	8001f2a <sd_card_read_data+0x492>
            }
            f_lseek(&file, f_tell(&file)+1);
 8001eb8:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001ebc:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ec8:	4611      	mov	r1, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f007 fd8d 	bl	80099ea <f_lseek>
            *(data + image*256*3 + i*3 + j++) = atoi(string);
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f008 f978 	bl	800a1ca <atoi>
 8001eda:	f897 22af 	ldrb.w	r2, [r7, #687]	; 0x2af
 8001ede:	4613      	mov	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	4413      	add	r3, r2
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	18ca      	adds	r2, r1, r3
 8001ef4:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001ef8:	1c59      	adds	r1, r3, #1
 8001efa:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 8001efe:	4413      	add	r3, r2
 8001f00:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8001f04:	f5a2 722e 	sub.w	r2, r2, #696	; 0x2b8
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	b2c2      	uxtb	r2, r0
 8001f0e:	701a      	strb	r2, [r3, #0]
            if(j>2){
 8001f10:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	dd09      	ble.n	8001f2c <sd_card_read_data+0x494>
                j = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
                i++;
 8001f1e:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8001f22:	3301      	adds	r3, #1
 8001f24:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8001f28:	e000      	b.n	8001f2c <sd_card_read_data+0x494>
			return STATUS_ERROR;
 8001f2a:	e01a      	b.n	8001f62 <sd_card_read_data+0x4ca>
        while(i < 256){
 8001f2c:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8001f30:	2bff      	cmp	r3, #255	; 0xff
 8001f32:	f77f af3b 	ble.w	8001dac <sd_card_read_data+0x314>
            }
        }
        f_close(&file);
 8001f36:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f007 fd2b 	bl	8009996 <f_close>
        myprintf("Reading file %s is completed successfully\n", name);
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	4619      	mov	r1, r3
 8001f46:	480b      	ldr	r0, [pc, #44]	; (8001f74 <sd_card_read_data+0x4dc>)
 8001f48:	f7ff fc80 	bl	800184c <myprintf>
    for (uint8_t image = 0; image < 10; image++) {
 8001f4c:	f897 32af 	ldrb.w	r3, [r7, #687]	; 0x2af
 8001f50:	3301      	adds	r3, #1
 8001f52:	f887 32af 	strb.w	r3, [r7, #687]	; 0x2af
 8001f56:	f897 32af 	ldrb.w	r3, [r7, #687]	; 0x2af
 8001f5a:	2b09      	cmp	r3, #9
 8001f5c:	f67f aeec 	bls.w	8001d38 <sd_card_read_data+0x2a0>
    }
    return STATUS_OK;
 8001f60:	2301      	movs	r3, #1
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	f507 7731 	add.w	r7, r7, #708	; 0x2c4
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd90      	pop	{r4, r7, pc}
 8001f6c:	20001b18 	.word	0x20001b18
 8001f70:	0800b638 	.word	0x0800b638
 8001f74:	0800b664 	.word	0x0800b664

08001f78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <HAL_MspInit+0x4c>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	4a0f      	ldr	r2, [pc, #60]	; (8001fc4 <HAL_MspInit+0x4c>)
 8001f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8e:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <HAL_MspInit+0x4c>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	603b      	str	r3, [r7, #0]
 8001f9e:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <HAL_MspInit+0x4c>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	4a08      	ldr	r2, [pc, #32]	; (8001fc4 <HAL_MspInit+0x4c>)
 8001fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_MspInit+0x4c>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800

08001fc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08c      	sub	sp, #48	; 0x30
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a32      	ldr	r2, [pc, #200]	; (80020b0 <HAL_SPI_MspInit+0xe8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d12c      	bne.n	8002044 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <HAL_SPI_MspInit+0xec>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	4a30      	ldr	r2, [pc, #192]	; (80020b4 <HAL_SPI_MspInit+0xec>)
 8001ff4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffa:	4b2e      	ldr	r3, [pc, #184]	; (80020b4 <HAL_SPI_MspInit+0xec>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002002:	61bb      	str	r3, [r7, #24]
 8002004:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	4b2a      	ldr	r3, [pc, #168]	; (80020b4 <HAL_SPI_MspInit+0xec>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	4a29      	ldr	r2, [pc, #164]	; (80020b4 <HAL_SPI_MspInit+0xec>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	6313      	str	r3, [r2, #48]	; 0x30
 8002016:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <HAL_SPI_MspInit+0xec>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002022:	23e0      	movs	r3, #224	; 0xe0
 8002024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002032:	2305      	movs	r3, #5
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002036:	f107 031c 	add.w	r3, r7, #28
 800203a:	4619      	mov	r1, r3
 800203c:	481e      	ldr	r0, [pc, #120]	; (80020b8 <HAL_SPI_MspInit+0xf0>)
 800203e:	f001 fe4d 	bl	8003cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002042:	e030      	b.n	80020a6 <HAL_SPI_MspInit+0xde>
  else if(hspi->Instance==SPI3)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <HAL_SPI_MspInit+0xf4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d12b      	bne.n	80020a6 <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <HAL_SPI_MspInit+0xec>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	4a17      	ldr	r2, [pc, #92]	; (80020b4 <HAL_SPI_MspInit+0xec>)
 8002058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800205c:	6413      	str	r3, [r2, #64]	; 0x40
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <HAL_SPI_MspInit+0xec>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <HAL_SPI_MspInit+0xec>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a10      	ldr	r2, [pc, #64]	; (80020b4 <HAL_SPI_MspInit+0xec>)
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_SPI_MspInit+0xec>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_CLK_Pin|LCD_DIN_Pin;
 8002086:	2328      	movs	r3, #40	; 0x28
 8002088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002092:	2303      	movs	r3, #3
 8002094:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002096:	2306      	movs	r3, #6
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209a:	f107 031c 	add.w	r3, r7, #28
 800209e:	4619      	mov	r1, r3
 80020a0:	4807      	ldr	r0, [pc, #28]	; (80020c0 <HAL_SPI_MspInit+0xf8>)
 80020a2:	f001 fe1b 	bl	8003cdc <HAL_GPIO_Init>
}
 80020a6:	bf00      	nop
 80020a8:	3730      	adds	r7, #48	; 0x30
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40013000 	.word	0x40013000
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40020000 	.word	0x40020000
 80020bc:	40003c00 	.word	0x40003c00
 80020c0:	40020400 	.word	0x40020400

080020c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a8b      	ldr	r2, [pc, #556]	; (8002300 <HAL_TIM_Base_MspInit+0x23c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d13f      	bne.n	8002156 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	4b8a      	ldr	r3, [pc, #552]	; (8002304 <HAL_TIM_Base_MspInit+0x240>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	4a89      	ldr	r2, [pc, #548]	; (8002304 <HAL_TIM_Base_MspInit+0x240>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6453      	str	r3, [r2, #68]	; 0x44
 80020e6:	4b87      	ldr	r3, [pc, #540]	; (8002304 <HAL_TIM_Base_MspInit+0x240>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	61fb      	str	r3, [r7, #28]
 80020f0:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80020f2:	4b85      	ldr	r3, [pc, #532]	; (8002308 <HAL_TIM_Base_MspInit+0x244>)
 80020f4:	4a85      	ldr	r2, [pc, #532]	; (800230c <HAL_TIM_Base_MspInit+0x248>)
 80020f6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80020f8:	4b83      	ldr	r3, [pc, #524]	; (8002308 <HAL_TIM_Base_MspInit+0x244>)
 80020fa:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80020fe:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002100:	4b81      	ldr	r3, [pc, #516]	; (8002308 <HAL_TIM_Base_MspInit+0x244>)
 8002102:	2240      	movs	r2, #64	; 0x40
 8002104:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002106:	4b80      	ldr	r3, [pc, #512]	; (8002308 <HAL_TIM_Base_MspInit+0x244>)
 8002108:	2200      	movs	r2, #0
 800210a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800210c:	4b7e      	ldr	r3, [pc, #504]	; (8002308 <HAL_TIM_Base_MspInit+0x244>)
 800210e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002112:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002114:	4b7c      	ldr	r3, [pc, #496]	; (8002308 <HAL_TIM_Base_MspInit+0x244>)
 8002116:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800211a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800211c:	4b7a      	ldr	r3, [pc, #488]	; (8002308 <HAL_TIM_Base_MspInit+0x244>)
 800211e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002122:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8002124:	4b78      	ldr	r3, [pc, #480]	; (8002308 <HAL_TIM_Base_MspInit+0x244>)
 8002126:	f44f 7280 	mov.w	r2, #256	; 0x100
 800212a:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800212c:	4b76      	ldr	r3, [pc, #472]	; (8002308 <HAL_TIM_Base_MspInit+0x244>)
 800212e:	2200      	movs	r2, #0
 8002130:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002132:	4b75      	ldr	r3, [pc, #468]	; (8002308 <HAL_TIM_Base_MspInit+0x244>)
 8002134:	2200      	movs	r2, #0
 8002136:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002138:	4873      	ldr	r0, [pc, #460]	; (8002308 <HAL_TIM_Base_MspInit+0x244>)
 800213a:	f001 fa3d 	bl	80035b8 <HAL_DMA_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8002144:	f7ff fb7c 	bl	8001840 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a6f      	ldr	r2, [pc, #444]	; (8002308 <HAL_TIM_Base_MspInit+0x244>)
 800214c:	625a      	str	r2, [r3, #36]	; 0x24
 800214e:	4a6e      	ldr	r2, [pc, #440]	; (8002308 <HAL_TIM_Base_MspInit+0x244>)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002154:	e130      	b.n	80023b8 <HAL_TIM_Base_MspInit+0x2f4>
  else if(htim_base->Instance==TIM2)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800215e:	d13f      	bne.n	80021e0 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002160:	2300      	movs	r3, #0
 8002162:	61bb      	str	r3, [r7, #24]
 8002164:	4b67      	ldr	r3, [pc, #412]	; (8002304 <HAL_TIM_Base_MspInit+0x240>)
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	4a66      	ldr	r2, [pc, #408]	; (8002304 <HAL_TIM_Base_MspInit+0x240>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6413      	str	r3, [r2, #64]	; 0x40
 8002170:	4b64      	ldr	r3, [pc, #400]	; (8002304 <HAL_TIM_Base_MspInit+0x240>)
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	61bb      	str	r3, [r7, #24]
 800217a:	69bb      	ldr	r3, [r7, #24]
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 800217c:	4b64      	ldr	r3, [pc, #400]	; (8002310 <HAL_TIM_Base_MspInit+0x24c>)
 800217e:	4a65      	ldr	r2, [pc, #404]	; (8002314 <HAL_TIM_Base_MspInit+0x250>)
 8002180:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002182:	4b63      	ldr	r3, [pc, #396]	; (8002310 <HAL_TIM_Base_MspInit+0x24c>)
 8002184:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002188:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800218a:	4b61      	ldr	r3, [pc, #388]	; (8002310 <HAL_TIM_Base_MspInit+0x24c>)
 800218c:	2240      	movs	r2, #64	; 0x40
 800218e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002190:	4b5f      	ldr	r3, [pc, #380]	; (8002310 <HAL_TIM_Base_MspInit+0x24c>)
 8002192:	2200      	movs	r2, #0
 8002194:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002196:	4b5e      	ldr	r3, [pc, #376]	; (8002310 <HAL_TIM_Base_MspInit+0x24c>)
 8002198:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800219c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800219e:	4b5c      	ldr	r3, [pc, #368]	; (8002310 <HAL_TIM_Base_MspInit+0x24c>)
 80021a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021a4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021a6:	4b5a      	ldr	r3, [pc, #360]	; (8002310 <HAL_TIM_Base_MspInit+0x24c>)
 80021a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021ac:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80021ae:	4b58      	ldr	r3, [pc, #352]	; (8002310 <HAL_TIM_Base_MspInit+0x24c>)
 80021b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021b4:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80021b6:	4b56      	ldr	r3, [pc, #344]	; (8002310 <HAL_TIM_Base_MspInit+0x24c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021bc:	4b54      	ldr	r3, [pc, #336]	; (8002310 <HAL_TIM_Base_MspInit+0x24c>)
 80021be:	2200      	movs	r2, #0
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80021c2:	4853      	ldr	r0, [pc, #332]	; (8002310 <HAL_TIM_Base_MspInit+0x24c>)
 80021c4:	f001 f9f8 	bl	80035b8 <HAL_DMA_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_TIM_Base_MspInit+0x10e>
      Error_Handler();
 80021ce:	f7ff fb37 	bl	8001840 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4e      	ldr	r2, [pc, #312]	; (8002310 <HAL_TIM_Base_MspInit+0x24c>)
 80021d6:	625a      	str	r2, [r3, #36]	; 0x24
 80021d8:	4a4d      	ldr	r2, [pc, #308]	; (8002310 <HAL_TIM_Base_MspInit+0x24c>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80021de:	e0eb      	b.n	80023b8 <HAL_TIM_Base_MspInit+0x2f4>
  else if(htim_base->Instance==TIM3)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a4c      	ldr	r2, [pc, #304]	; (8002318 <HAL_TIM_Base_MspInit+0x254>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d145      	bne.n	8002276 <HAL_TIM_Base_MspInit+0x1b2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	4b45      	ldr	r3, [pc, #276]	; (8002304 <HAL_TIM_Base_MspInit+0x240>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	4a44      	ldr	r2, [pc, #272]	; (8002304 <HAL_TIM_Base_MspInit+0x240>)
 80021f4:	f043 0302 	orr.w	r3, r3, #2
 80021f8:	6413      	str	r3, [r2, #64]	; 0x40
 80021fa:	4b42      	ldr	r3, [pc, #264]	; (8002304 <HAL_TIM_Base_MspInit+0x240>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	697b      	ldr	r3, [r7, #20]
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8002206:	4b45      	ldr	r3, [pc, #276]	; (800231c <HAL_TIM_Base_MspInit+0x258>)
 8002208:	4a45      	ldr	r2, [pc, #276]	; (8002320 <HAL_TIM_Base_MspInit+0x25c>)
 800220a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 800220c:	4b43      	ldr	r3, [pc, #268]	; (800231c <HAL_TIM_Base_MspInit+0x258>)
 800220e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002212:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002214:	4b41      	ldr	r3, [pc, #260]	; (800231c <HAL_TIM_Base_MspInit+0x258>)
 8002216:	2240      	movs	r2, #64	; 0x40
 8002218:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800221a:	4b40      	ldr	r3, [pc, #256]	; (800231c <HAL_TIM_Base_MspInit+0x258>)
 800221c:	2200      	movs	r2, #0
 800221e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002220:	4b3e      	ldr	r3, [pc, #248]	; (800231c <HAL_TIM_Base_MspInit+0x258>)
 8002222:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002226:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002228:	4b3c      	ldr	r3, [pc, #240]	; (800231c <HAL_TIM_Base_MspInit+0x258>)
 800222a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800222e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002230:	4b3a      	ldr	r3, [pc, #232]	; (800231c <HAL_TIM_Base_MspInit+0x258>)
 8002232:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002236:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8002238:	4b38      	ldr	r3, [pc, #224]	; (800231c <HAL_TIM_Base_MspInit+0x258>)
 800223a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800223e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8002240:	4b36      	ldr	r3, [pc, #216]	; (800231c <HAL_TIM_Base_MspInit+0x258>)
 8002242:	2200      	movs	r2, #0
 8002244:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002246:	4b35      	ldr	r3, [pc, #212]	; (800231c <HAL_TIM_Base_MspInit+0x258>)
 8002248:	2200      	movs	r2, #0
 800224a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800224c:	4833      	ldr	r0, [pc, #204]	; (800231c <HAL_TIM_Base_MspInit+0x258>)
 800224e:	f001 f9b3 	bl	80035b8 <HAL_DMA_Init>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <HAL_TIM_Base_MspInit+0x198>
      Error_Handler();
 8002258:	f7ff faf2 	bl	8001840 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a2f      	ldr	r2, [pc, #188]	; (800231c <HAL_TIM_Base_MspInit+0x258>)
 8002260:	625a      	str	r2, [r3, #36]	; 0x24
 8002262:	4a2e      	ldr	r2, [pc, #184]	; (800231c <HAL_TIM_Base_MspInit+0x258>)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a2c      	ldr	r2, [pc, #176]	; (800231c <HAL_TIM_Base_MspInit+0x258>)
 800226c:	639a      	str	r2, [r3, #56]	; 0x38
 800226e:	4a2b      	ldr	r2, [pc, #172]	; (800231c <HAL_TIM_Base_MspInit+0x258>)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002274:	e0a0      	b.n	80023b8 <HAL_TIM_Base_MspInit+0x2f4>
  else if(htim_base->Instance==TIM4)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a2a      	ldr	r2, [pc, #168]	; (8002324 <HAL_TIM_Base_MspInit+0x260>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d157      	bne.n	8002330 <HAL_TIM_Base_MspInit+0x26c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002280:	2300      	movs	r3, #0
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	4b1f      	ldr	r3, [pc, #124]	; (8002304 <HAL_TIM_Base_MspInit+0x240>)
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	4a1e      	ldr	r2, [pc, #120]	; (8002304 <HAL_TIM_Base_MspInit+0x240>)
 800228a:	f043 0304 	orr.w	r3, r3, #4
 800228e:	6413      	str	r3, [r2, #64]	; 0x40
 8002290:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <HAL_TIM_Base_MspInit+0x240>)
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	693b      	ldr	r3, [r7, #16]
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 800229c:	4b22      	ldr	r3, [pc, #136]	; (8002328 <HAL_TIM_Base_MspInit+0x264>)
 800229e:	4a23      	ldr	r2, [pc, #140]	; (800232c <HAL_TIM_Base_MspInit+0x268>)
 80022a0:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 80022a2:	4b21      	ldr	r3, [pc, #132]	; (8002328 <HAL_TIM_Base_MspInit+0x264>)
 80022a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022a8:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022aa:	4b1f      	ldr	r3, [pc, #124]	; (8002328 <HAL_TIM_Base_MspInit+0x264>)
 80022ac:	2240      	movs	r2, #64	; 0x40
 80022ae:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022b0:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_TIM_Base_MspInit+0x264>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80022b6:	4b1c      	ldr	r3, [pc, #112]	; (8002328 <HAL_TIM_Base_MspInit+0x264>)
 80022b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022bc:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022be:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <HAL_TIM_Base_MspInit+0x264>)
 80022c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022c4:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022c6:	4b18      	ldr	r3, [pc, #96]	; (8002328 <HAL_TIM_Base_MspInit+0x264>)
 80022c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022cc:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 80022ce:	4b16      	ldr	r3, [pc, #88]	; (8002328 <HAL_TIM_Base_MspInit+0x264>)
 80022d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022d4:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80022d6:	4b14      	ldr	r3, [pc, #80]	; (8002328 <HAL_TIM_Base_MspInit+0x264>)
 80022d8:	2200      	movs	r2, #0
 80022da:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022dc:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_TIM_Base_MspInit+0x264>)
 80022de:	2200      	movs	r2, #0
 80022e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80022e2:	4811      	ldr	r0, [pc, #68]	; (8002328 <HAL_TIM_Base_MspInit+0x264>)
 80022e4:	f001 f968 	bl	80035b8 <HAL_DMA_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_TIM_Base_MspInit+0x22e>
      Error_Handler();
 80022ee:	f7ff faa7 	bl	8001840 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a0c      	ldr	r2, [pc, #48]	; (8002328 <HAL_TIM_Base_MspInit+0x264>)
 80022f6:	625a      	str	r2, [r3, #36]	; 0x24
 80022f8:	4a0b      	ldr	r2, [pc, #44]	; (8002328 <HAL_TIM_Base_MspInit+0x264>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80022fe:	e05b      	b.n	80023b8 <HAL_TIM_Base_MspInit+0x2f4>
 8002300:	40010000 	.word	0x40010000
 8002304:	40023800 	.word	0x40023800
 8002308:	200002bc 	.word	0x200002bc
 800230c:	40026428 	.word	0x40026428
 8002310:	2000031c 	.word	0x2000031c
 8002314:	40026088 	.word	0x40026088
 8002318:	40000400 	.word	0x40000400
 800231c:	2000037c 	.word	0x2000037c
 8002320:	40026070 	.word	0x40026070
 8002324:	40000800 	.word	0x40000800
 8002328:	200003dc 	.word	0x200003dc
 800232c:	40026010 	.word	0x40026010
  else if(htim_base->Instance==TIM5)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a22      	ldr	r2, [pc, #136]	; (80023c0 <HAL_TIM_Base_MspInit+0x2fc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d13e      	bne.n	80023b8 <HAL_TIM_Base_MspInit+0x2f4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <HAL_TIM_Base_MspInit+0x300>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	4a20      	ldr	r2, [pc, #128]	; (80023c4 <HAL_TIM_Base_MspInit+0x300>)
 8002344:	f043 0308 	orr.w	r3, r3, #8
 8002348:	6413      	str	r3, [r2, #64]	; 0x40
 800234a:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <HAL_TIM_Base_MspInit+0x300>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8002356:	4b1c      	ldr	r3, [pc, #112]	; (80023c8 <HAL_TIM_Base_MspInit+0x304>)
 8002358:	4a1c      	ldr	r2, [pc, #112]	; (80023cc <HAL_TIM_Base_MspInit+0x308>)
 800235a:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 800235c:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <HAL_TIM_Base_MspInit+0x304>)
 800235e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002362:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002364:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <HAL_TIM_Base_MspInit+0x304>)
 8002366:	2240      	movs	r2, #64	; 0x40
 8002368:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <HAL_TIM_Base_MspInit+0x304>)
 800236c:	2200      	movs	r2, #0
 800236e:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002370:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <HAL_TIM_Base_MspInit+0x304>)
 8002372:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002376:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <HAL_TIM_Base_MspInit+0x304>)
 800237a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800237e:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <HAL_TIM_Base_MspInit+0x304>)
 8002382:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002386:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_CIRCULAR;
 8002388:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <HAL_TIM_Base_MspInit+0x304>)
 800238a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800238e:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002390:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <HAL_TIM_Base_MspInit+0x304>)
 8002392:	2200      	movs	r2, #0
 8002394:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <HAL_TIM_Base_MspInit+0x304>)
 8002398:	2200      	movs	r2, #0
 800239a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 800239c:	480a      	ldr	r0, [pc, #40]	; (80023c8 <HAL_TIM_Base_MspInit+0x304>)
 800239e:	f001 f90b 	bl	80035b8 <HAL_DMA_Init>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_TIM_Base_MspInit+0x2e8>
      Error_Handler();
 80023a8:	f7ff fa4a 	bl	8001840 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a06      	ldr	r2, [pc, #24]	; (80023c8 <HAL_TIM_Base_MspInit+0x304>)
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24
 80023b2:	4a05      	ldr	r2, [pc, #20]	; (80023c8 <HAL_TIM_Base_MspInit+0x304>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80023b8:	bf00      	nop
 80023ba:	3720      	adds	r7, #32
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40000c00 	.word	0x40000c00
 80023c4:	40023800 	.word	0x40023800
 80023c8:	2000043c 	.word	0x2000043c
 80023cc:	40026040 	.word	0x40026040

080023d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08c      	sub	sp, #48	; 0x30
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	f107 031c 	add.w	r3, r7, #28
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a5b      	ldr	r2, [pc, #364]	; (800255c <HAL_TIM_MspPostInit+0x18c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d11f      	bne.n	8002432 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	4b5a      	ldr	r3, [pc, #360]	; (8002560 <HAL_TIM_MspPostInit+0x190>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a59      	ldr	r2, [pc, #356]	; (8002560 <HAL_TIM_MspPostInit+0x190>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b57      	ldr	r3, [pc, #348]	; (8002560 <HAL_TIM_MspPostInit+0x190>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	61bb      	str	r3, [r7, #24]
 800240c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800240e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241c:	2300      	movs	r3, #0
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002420:	2301      	movs	r3, #1
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002424:	f107 031c 	add.w	r3, r7, #28
 8002428:	4619      	mov	r1, r3
 800242a:	484e      	ldr	r0, [pc, #312]	; (8002564 <HAL_TIM_MspPostInit+0x194>)
 800242c:	f001 fc56 	bl	8003cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002430:	e08f      	b.n	8002552 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM2)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800243a:	d11f      	bne.n	800247c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	4b47      	ldr	r3, [pc, #284]	; (8002560 <HAL_TIM_MspPostInit+0x190>)
 8002442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002444:	4a46      	ldr	r2, [pc, #280]	; (8002560 <HAL_TIM_MspPostInit+0x190>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6313      	str	r3, [r2, #48]	; 0x30
 800244c:	4b44      	ldr	r3, [pc, #272]	; (8002560 <HAL_TIM_MspPostInit+0x190>)
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002458:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800245c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245e:	2302      	movs	r3, #2
 8002460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002466:	2300      	movs	r3, #0
 8002468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800246a:	2301      	movs	r3, #1
 800246c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246e:	f107 031c 	add.w	r3, r7, #28
 8002472:	4619      	mov	r1, r3
 8002474:	483b      	ldr	r0, [pc, #236]	; (8002564 <HAL_TIM_MspPostInit+0x194>)
 8002476:	f001 fc31 	bl	8003cdc <HAL_GPIO_Init>
}
 800247a:	e06a      	b.n	8002552 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM3)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a39      	ldr	r2, [pc, #228]	; (8002568 <HAL_TIM_MspPostInit+0x198>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d11e      	bne.n	80024c4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	4b35      	ldr	r3, [pc, #212]	; (8002560 <HAL_TIM_MspPostInit+0x190>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	4a34      	ldr	r2, [pc, #208]	; (8002560 <HAL_TIM_MspPostInit+0x190>)
 8002490:	f043 0304 	orr.w	r3, r3, #4
 8002494:	6313      	str	r3, [r2, #48]	; 0x30
 8002496:	4b32      	ldr	r3, [pc, #200]	; (8002560 <HAL_TIM_MspPostInit+0x190>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024a2:	2340      	movs	r3, #64	; 0x40
 80024a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ae:	2300      	movs	r3, #0
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024b2:	2302      	movs	r3, #2
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024b6:	f107 031c 	add.w	r3, r7, #28
 80024ba:	4619      	mov	r1, r3
 80024bc:	482b      	ldr	r0, [pc, #172]	; (800256c <HAL_TIM_MspPostInit+0x19c>)
 80024be:	f001 fc0d 	bl	8003cdc <HAL_GPIO_Init>
}
 80024c2:	e046      	b.n	8002552 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM4)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a29      	ldr	r2, [pc, #164]	; (8002570 <HAL_TIM_MspPostInit+0x1a0>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d11e      	bne.n	800250c <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	4b23      	ldr	r3, [pc, #140]	; (8002560 <HAL_TIM_MspPostInit+0x190>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a22      	ldr	r2, [pc, #136]	; (8002560 <HAL_TIM_MspPostInit+0x190>)
 80024d8:	f043 0302 	orr.w	r3, r3, #2
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b20      	ldr	r3, [pc, #128]	; (8002560 <HAL_TIM_MspPostInit+0x190>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024ea:	2340      	movs	r3, #64	; 0x40
 80024ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f6:	2300      	movs	r3, #0
 80024f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024fa:	2302      	movs	r3, #2
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fe:	f107 031c 	add.w	r3, r7, #28
 8002502:	4619      	mov	r1, r3
 8002504:	481b      	ldr	r0, [pc, #108]	; (8002574 <HAL_TIM_MspPostInit+0x1a4>)
 8002506:	f001 fbe9 	bl	8003cdc <HAL_GPIO_Init>
}
 800250a:	e022      	b.n	8002552 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM5)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a19      	ldr	r2, [pc, #100]	; (8002578 <HAL_TIM_MspPostInit+0x1a8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d11d      	bne.n	8002552 <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <HAL_TIM_MspPostInit+0x190>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a10      	ldr	r2, [pc, #64]	; (8002560 <HAL_TIM_MspPostInit+0x190>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <HAL_TIM_MspPostInit+0x190>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002532:	2301      	movs	r3, #1
 8002534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253e:	2300      	movs	r3, #0
 8002540:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002542:	2302      	movs	r3, #2
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002546:	f107 031c 	add.w	r3, r7, #28
 800254a:	4619      	mov	r1, r3
 800254c:	4805      	ldr	r0, [pc, #20]	; (8002564 <HAL_TIM_MspPostInit+0x194>)
 800254e:	f001 fbc5 	bl	8003cdc <HAL_GPIO_Init>
}
 8002552:	bf00      	nop
 8002554:	3730      	adds	r7, #48	; 0x30
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40010000 	.word	0x40010000
 8002560:	40023800 	.word	0x40023800
 8002564:	40020000 	.word	0x40020000
 8002568:	40000400 	.word	0x40000400
 800256c:	40020800 	.word	0x40020800
 8002570:	40000800 	.word	0x40000800
 8002574:	40020400 	.word	0x40020400
 8002578:	40000c00 	.word	0x40000c00

0800257c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08a      	sub	sp, #40	; 0x28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a19      	ldr	r2, [pc, #100]	; (8002600 <HAL_UART_MspInit+0x84>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d12b      	bne.n	80025f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	4b18      	ldr	r3, [pc, #96]	; (8002604 <HAL_UART_MspInit+0x88>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	4a17      	ldr	r2, [pc, #92]	; (8002604 <HAL_UART_MspInit+0x88>)
 80025a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ac:	6413      	str	r3, [r2, #64]	; 0x40
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <HAL_UART_MspInit+0x88>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <HAL_UART_MspInit+0x88>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4a10      	ldr	r2, [pc, #64]	; (8002604 <HAL_UART_MspInit+0x88>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <HAL_UART_MspInit+0x88>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025d6:	230c      	movs	r3, #12
 80025d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025da:	2302      	movs	r3, #2
 80025dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e2:	2303      	movs	r3, #3
 80025e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025e6:	2307      	movs	r3, #7
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ea:	f107 0314 	add.w	r3, r7, #20
 80025ee:	4619      	mov	r1, r3
 80025f0:	4805      	ldr	r0, [pc, #20]	; (8002608 <HAL_UART_MspInit+0x8c>)
 80025f2:	f001 fb73 	bl	8003cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025f6:	bf00      	nop
 80025f8:	3728      	adds	r7, #40	; 0x28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40004400 	.word	0x40004400
 8002604:	40023800 	.word	0x40023800
 8002608:	40020000 	.word	0x40020000

0800260c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002610:	e7fe      	b.n	8002610 <NMI_Handler+0x4>

08002612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002616:	e7fe      	b.n	8002616 <HardFault_Handler+0x4>

08002618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800261c:	e7fe      	b.n	800261c <MemManage_Handler+0x4>

0800261e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002622:	e7fe      	b.n	8002622 <BusFault_Handler+0x4>

08002624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002628:	e7fe      	b.n	8002628 <UsageFault_Handler+0x4>

0800262a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002658:	f000 fe58 	bl	800330c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800265c:	bf00      	nop
 800265e:	bd80      	pop	{r7, pc}

08002660 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_UP_Pin);
 8002664:	2002      	movs	r0, #2
 8002666:	f001 fcd7 	bl	8004018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}

0800266e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_MID_Pin);
 8002672:	2004      	movs	r0, #4
 8002674:	f001 fcd0 	bl	8004018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}

0800267c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_DOWN_Pin);
 8002680:	2008      	movs	r0, #8
 8002682:	f001 fcc9 	bl	8004018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <DMA1_Stream0_IRQHandler+0x10>)
 8002692:	f001 f8b9 	bl	8003808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	200003dc 	.word	0x200003dc

080026a0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 80026a4:	4802      	ldr	r0, [pc, #8]	; (80026b0 <DMA1_Stream2_IRQHandler+0x10>)
 80026a6:	f001 f8af 	bl	8003808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	2000043c 	.word	0x2000043c

080026b4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80026b8:	4802      	ldr	r0, [pc, #8]	; (80026c4 <DMA1_Stream4_IRQHandler+0x10>)
 80026ba:	f001 f8a5 	bl	8003808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	2000037c 	.word	0x2000037c

080026c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80026cc:	4802      	ldr	r0, [pc, #8]	; (80026d8 <DMA1_Stream5_IRQHandler+0x10>)
 80026ce:	f001 f89b 	bl	8003808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	2000031c 	.word	0x2000031c

080026dc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80026e0:	4802      	ldr	r0, [pc, #8]	; (80026ec <DMA2_Stream1_IRQHandler+0x10>)
 80026e2:	f001 f891 	bl	8003808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	200002bc 	.word	0x200002bc

080026f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	e00a      	b.n	8002718 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002702:	f3af 8000 	nop.w
 8002706:	4601      	mov	r1, r0
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	60ba      	str	r2, [r7, #8]
 800270e:	b2ca      	uxtb	r2, r1
 8002710:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	3301      	adds	r3, #1
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	429a      	cmp	r2, r3
 800271e:	dbf0      	blt.n	8002702 <_read+0x12>
	}

return len;
 8002720:	687b      	ldr	r3, [r7, #4]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b086      	sub	sp, #24
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	e009      	b.n	8002750 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	60ba      	str	r2, [r7, #8]
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	3301      	adds	r3, #1
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	429a      	cmp	r2, r3
 8002756:	dbf1      	blt.n	800273c <_write+0x12>
	}
	return len;
 8002758:	687b      	ldr	r3, [r7, #4]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <_close>:

int _close(int file)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
	return -1;
 800276a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
 8002782:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800278a:	605a      	str	r2, [r3, #4]
	return 0;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <_isatty>:

int _isatty(int file)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
	return 1;
 80027a2:	2301      	movs	r3, #1
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
	return 0;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027d4:	4a14      	ldr	r2, [pc, #80]	; (8002828 <_sbrk+0x5c>)
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <_sbrk+0x60>)
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027e0:	4b13      	ldr	r3, [pc, #76]	; (8002830 <_sbrk+0x64>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d102      	bne.n	80027ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027e8:	4b11      	ldr	r3, [pc, #68]	; (8002830 <_sbrk+0x64>)
 80027ea:	4a12      	ldr	r2, [pc, #72]	; (8002834 <_sbrk+0x68>)
 80027ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ee:	4b10      	ldr	r3, [pc, #64]	; (8002830 <_sbrk+0x64>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4413      	add	r3, r2
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d207      	bcs.n	800280c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027fc:	f007 fcea 	bl	800a1d4 <__errno>
 8002800:	4603      	mov	r3, r0
 8002802:	220c      	movs	r2, #12
 8002804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002806:	f04f 33ff 	mov.w	r3, #4294967295
 800280a:	e009      	b.n	8002820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800280c:	4b08      	ldr	r3, [pc, #32]	; (8002830 <_sbrk+0x64>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <_sbrk+0x64>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4413      	add	r3, r2
 800281a:	4a05      	ldr	r2, [pc, #20]	; (8002830 <_sbrk+0x64>)
 800281c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800281e:	68fb      	ldr	r3, [r7, #12]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20018000 	.word	0x20018000
 800282c:	00000400 	.word	0x00000400
 8002830:	20001c34 	.word	0x20001c34
 8002834:	20001e98 	.word	0x20001e98

08002838 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <SystemInit+0x20>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002842:	4a05      	ldr	r2, [pc, #20]	; (8002858 <SystemInit+0x20>)
 8002844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800284c:	bf00      	nop
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <PCD8544_send>:
	{ 0x11, 0x1B, 0x04 },   // }
	{ 0x04, 0x06, 0x02 },   // ~
	{ 0x1F, 0x1F, 0x1F },   // delete
};

void PCD8544_send(unsigned char data) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	71fb      	strb	r3, [r7, #7]
    PCD8544_CE_LOW;
 8002866:	2200      	movs	r2, #0
 8002868:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800286c:	4809      	ldr	r0, [pc, #36]	; (8002894 <PCD8544_send+0x38>)
 800286e:	f001 fbb9 	bl	8003fe4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, &data, 1, HAL_MAX_DELAY);
 8002872:	1df9      	adds	r1, r7, #7
 8002874:	f04f 33ff 	mov.w	r3, #4294967295
 8002878:	2201      	movs	r2, #1
 800287a:	4807      	ldr	r0, [pc, #28]	; (8002898 <PCD8544_send+0x3c>)
 800287c:	f002 f905 	bl	8004a8a <HAL_SPI_Transmit>
    PCD8544_CE_HIGH;
 8002880:	2201      	movs	r2, #1
 8002882:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002886:	4803      	ldr	r0, [pc, #12]	; (8002894 <PCD8544_send+0x38>)
 8002888:	f001 fbac 	bl	8003fe4 <HAL_GPIO_WritePin>
}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40020000 	.word	0x40020000
 8002898:	200000fc 	.word	0x200000fc

0800289c <PCD8544_Pin>:

void PCD8544_Pin(PCD8544_Pin_t pin, PCD8544_State_t state) {
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	460a      	mov	r2, r1
 80028a6:	71fb      	strb	r3, [r7, #7]
 80028a8:	4613      	mov	r3, r2
 80028aa:	71bb      	strb	r3, [r7, #6]
	switch (pin) {
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d002      	beq.n	80028b8 <PCD8544_Pin+0x1c>
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d00f      	beq.n	80028d6 <PCD8544_Pin+0x3a>
			    HAL_GPIO_WritePin(PCD8544_RST_PORT, PCD8544_RST_PIN, GPIO_PIN_SET);
			} else {
			    HAL_GPIO_WritePin(PCD8544_RST_PORT, PCD8544_RST_PIN, GPIO_PIN_RESET);
			}
			break;
		default: break;
 80028b6:	e01f      	b.n	80028f8 <PCD8544_Pin+0x5c>
			if (state != PCD8544_State_Low) {
 80028b8:	79bb      	ldrb	r3, [r7, #6]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d005      	beq.n	80028ca <PCD8544_Pin+0x2e>
				HAL_GPIO_WritePin(PCD8544_DC_PORT, PCD8544_DC_PIN, GPIO_PIN_SET);
 80028be:	2201      	movs	r2, #1
 80028c0:	2110      	movs	r1, #16
 80028c2:	480f      	ldr	r0, [pc, #60]	; (8002900 <PCD8544_Pin+0x64>)
 80028c4:	f001 fb8e 	bl	8003fe4 <HAL_GPIO_WritePin>
			break;
 80028c8:	e016      	b.n	80028f8 <PCD8544_Pin+0x5c>
			    HAL_GPIO_WritePin(PCD8544_DC_PORT, PCD8544_DC_PIN, GPIO_PIN_RESET);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2110      	movs	r1, #16
 80028ce:	480c      	ldr	r0, [pc, #48]	; (8002900 <PCD8544_Pin+0x64>)
 80028d0:	f001 fb88 	bl	8003fe4 <HAL_GPIO_WritePin>
			break;
 80028d4:	e010      	b.n	80028f8 <PCD8544_Pin+0x5c>
			if (state != PCD8544_State_Low) {
 80028d6:	79bb      	ldrb	r3, [r7, #6]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d006      	beq.n	80028ea <PCD8544_Pin+0x4e>
			    HAL_GPIO_WritePin(PCD8544_RST_PORT, PCD8544_RST_PIN, GPIO_PIN_SET);
 80028dc:	2201      	movs	r2, #1
 80028de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028e2:	4807      	ldr	r0, [pc, #28]	; (8002900 <PCD8544_Pin+0x64>)
 80028e4:	f001 fb7e 	bl	8003fe4 <HAL_GPIO_WritePin>
			break;
 80028e8:	e005      	b.n	80028f6 <PCD8544_Pin+0x5a>
			    HAL_GPIO_WritePin(PCD8544_RST_PORT, PCD8544_RST_PIN, GPIO_PIN_RESET);
 80028ea:	2200      	movs	r2, #0
 80028ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028f0:	4803      	ldr	r0, [pc, #12]	; (8002900 <PCD8544_Pin+0x64>)
 80028f2:	f001 fb77 	bl	8003fe4 <HAL_GPIO_WritePin>
			break;
 80028f6:	bf00      	nop
	}
}
 80028f8:	bf00      	nop
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40020400 	.word	0x40020400

08002904 <PCD8544_Delay>:


void PCD8544_Delay(unsigned long micros) {
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
    HAL_Delay(micros);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 fd1d 	bl	800334c <HAL_Delay>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <PCD8544_Init>:

void PCD8544_Init(unsigned char contrast) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
	//Reset
	PCD8544_Pin(PCD8544_Pin_RST, PCD8544_State_Low);
 8002926:	2100      	movs	r1, #0
 8002928:	2002      	movs	r0, #2
 800292a:	f7ff ffb7 	bl	800289c <PCD8544_Pin>
	PCD8544_Delay(2000);
 800292e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002932:	f7ff ffe7 	bl	8002904 <PCD8544_Delay>
	PCD8544_Pin(PCD8544_Pin_RST, PCD8544_State_High);
 8002936:	2101      	movs	r1, #1
 8002938:	2002      	movs	r0, #2
 800293a:	f7ff ffaf 	bl	800289c <PCD8544_Pin>

	//Turn ON BL
	HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 800293e:	2201      	movs	r2, #1
 8002940:	2102      	movs	r1, #2
 8002942:	4816      	ldr	r0, [pc, #88]	; (800299c <PCD8544_Init+0x80>)
 8002944:	f001 fb4e 	bl	8003fe4 <HAL_GPIO_WritePin>
	// Go in extended mode
	PCD8544_Write(PCD8544_COMMAND, PCD8544_FUNCTIONSET | PCD8544_EXTENDEDINSTRUCTION);
 8002948:	2121      	movs	r1, #33	; 0x21
 800294a:	2000      	movs	r0, #0
 800294c:	f000 f828 	bl	80029a0 <PCD8544_Write>

	// LCD bias select
	PCD8544_Write(PCD8544_COMMAND, PCD8544_SETBIAS | 0x4);
 8002950:	2114      	movs	r1, #20
 8002952:	2000      	movs	r0, #0
 8002954:	f000 f824 	bl	80029a0 <PCD8544_Write>

	// set VOP
	if (contrast > 0x7F) {
 8002958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295c:	2b00      	cmp	r3, #0
 800295e:	da01      	bge.n	8002964 <PCD8544_Init+0x48>
		contrast = 0x7F;
 8002960:	237f      	movs	r3, #127	; 0x7f
 8002962:	71fb      	strb	r3, [r7, #7]
	}
	PCD8544_Write(PCD8544_COMMAND, PCD8544_SETVOP | contrast);
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800296a:	b2db      	uxtb	r3, r3
 800296c:	4619      	mov	r1, r3
 800296e:	2000      	movs	r0, #0
 8002970:	f000 f816 	bl	80029a0 <PCD8544_Write>

	// normal mode
	PCD8544_Write(PCD8544_COMMAND, PCD8544_FUNCTIONSET);
 8002974:	2120      	movs	r1, #32
 8002976:	2000      	movs	r0, #0
 8002978:	f000 f812 	bl	80029a0 <PCD8544_Write>

	// Set display to Normal
	PCD8544_Write(PCD8544_COMMAND, PCD8544_DISPLAYCONTROL | PCD8544_DISPLAYNORMAL);
 800297c:	210c      	movs	r1, #12
 800297e:	2000      	movs	r0, #0
 8002980:	f000 f80e 	bl	80029a0 <PCD8544_Write>

	//Set cursor to home position
	PCD8544_Home();
 8002984:	f000 f8b0 	bl	8002ae8 <PCD8544_Home>

	//Normal display
	PCD8544_Write(PCD8544_COMMAND, PCD8544_DISPLAYCONTROL | PCD8544_DISPLAYNORMAL);
 8002988:	210c      	movs	r1, #12
 800298a:	2000      	movs	r0, #0
 800298c:	f000 f808 	bl	80029a0 <PCD8544_Write>

	//Clear display
	PCD8544_Clear();
 8002990:	f000 f884 	bl	8002a9c <PCD8544_Clear>
}
 8002994:	bf00      	nop
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40020000 	.word	0x40020000

080029a0 <PCD8544_Write>:

void PCD8544_Write(PCD8544_WriteType_t cd, unsigned char data) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	460a      	mov	r2, r1
 80029aa:	71fb      	strb	r3, [r7, #7]
 80029ac:	4613      	mov	r3, r2
 80029ae:	71bb      	strb	r3, [r7, #6]
	switch (cd) {
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d006      	beq.n	80029c4 <PCD8544_Write+0x24>
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d109      	bne.n	80029ce <PCD8544_Write+0x2e>
		//Send data to lcd's ram
		case PCD8544_DATA:
			//Set DC pin HIGH
			PCD8544_Pin(PCD8544_Pin_DC, PCD8544_State_High);
 80029ba:	2101      	movs	r1, #1
 80029bc:	2001      	movs	r0, #1
 80029be:	f7ff ff6d 	bl	800289c <PCD8544_Pin>
			break;
 80029c2:	e005      	b.n	80029d0 <PCD8544_Write+0x30>
		//Send command to lcd
		case PCD8544_COMMAND:
			//Set DC pin LOW
			PCD8544_Pin(PCD8544_Pin_DC, PCD8544_State_Low);
 80029c4:	2100      	movs	r1, #0
 80029c6:	2001      	movs	r0, #1
 80029c8:	f7ff ff68 	bl	800289c <PCD8544_Pin>
			break;
 80029cc:	e000      	b.n	80029d0 <PCD8544_Write+0x30>
		default: break;
 80029ce:	bf00      	nop
	}
	//Send data
	PCD8544_send(data);
 80029d0:	79bb      	ldrb	r3, [r7, #6]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff ff42 	bl	800285c <PCD8544_send>
}
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <PCD8544_DrawPixel>:

	// normal mode
	PCD8544_Write(PCD8544_COMMAND, PCD8544_FUNCTIONSET);
}

void PCD8544_DrawPixel(unsigned char x, unsigned char y, PCD8544_Pixel_t pixel) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	71fb      	strb	r3, [r7, #7]
 80029ea:	460b      	mov	r3, r1
 80029ec:	71bb      	strb	r3, [r7, #6]
 80029ee:	4613      	mov	r3, r2
 80029f0:	717b      	strb	r3, [r7, #5]
	if (x >= PCD8544_WIDTH) {
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	2b53      	cmp	r3, #83	; 0x53
 80029f6:	d849      	bhi.n	8002a8c <PCD8544_DrawPixel+0xac>
		return;
	}
	if (y >= PCD8544_HEIGHT) {
 80029f8:	79bb      	ldrb	r3, [r7, #6]
 80029fa:	2b2f      	cmp	r3, #47	; 0x2f
 80029fc:	d848      	bhi.n	8002a90 <PCD8544_DrawPixel+0xb0>
		return;
	}

	if (pixel != PCD8544_Pixel_Clear) {
 80029fe:	797b      	ldrb	r3, [r7, #5]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d01d      	beq.n	8002a40 <PCD8544_DrawPixel+0x60>
		PCD8544_Buffer[x + (y / 8) * PCD8544_WIDTH] |= 1 << (y % 8);
 8002a04:	79fa      	ldrb	r2, [r7, #7]
 8002a06:	79bb      	ldrb	r3, [r7, #6]
 8002a08:	08db      	lsrs	r3, r3, #3
 8002a0a:	b2d8      	uxtb	r0, r3
 8002a0c:	4601      	mov	r1, r0
 8002a0e:	2354      	movs	r3, #84	; 0x54
 8002a10:	fb01 f303 	mul.w	r3, r1, r3
 8002a14:	4413      	add	r3, r2
 8002a16:	4a20      	ldr	r2, [pc, #128]	; (8002a98 <PCD8544_DrawPixel+0xb8>)
 8002a18:	5cd3      	ldrb	r3, [r2, r3]
 8002a1a:	b25a      	sxtb	r2, r3
 8002a1c:	79bb      	ldrb	r3, [r7, #6]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	2101      	movs	r1, #1
 8002a24:	fa01 f303 	lsl.w	r3, r1, r3
 8002a28:	b25b      	sxtb	r3, r3
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	b259      	sxtb	r1, r3
 8002a2e:	79fa      	ldrb	r2, [r7, #7]
 8002a30:	2354      	movs	r3, #84	; 0x54
 8002a32:	fb00 f303 	mul.w	r3, r0, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	b2c9      	uxtb	r1, r1
 8002a3a:	4a17      	ldr	r2, [pc, #92]	; (8002a98 <PCD8544_DrawPixel+0xb8>)
 8002a3c:	54d1      	strb	r1, [r2, r3]
 8002a3e:	e01e      	b.n	8002a7e <PCD8544_DrawPixel+0x9e>
	} else {
		PCD8544_Buffer[x + (y / 8) * PCD8544_WIDTH] &= ~(1 << (y % 8));
 8002a40:	79fa      	ldrb	r2, [r7, #7]
 8002a42:	79bb      	ldrb	r3, [r7, #6]
 8002a44:	08db      	lsrs	r3, r3, #3
 8002a46:	b2d8      	uxtb	r0, r3
 8002a48:	4601      	mov	r1, r0
 8002a4a:	2354      	movs	r3, #84	; 0x54
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	4a11      	ldr	r2, [pc, #68]	; (8002a98 <PCD8544_DrawPixel+0xb8>)
 8002a54:	5cd3      	ldrb	r3, [r2, r3]
 8002a56:	b25a      	sxtb	r2, r3
 8002a58:	79bb      	ldrb	r3, [r7, #6]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	2101      	movs	r1, #1
 8002a60:	fa01 f303 	lsl.w	r3, r1, r3
 8002a64:	b25b      	sxtb	r3, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	b25b      	sxtb	r3, r3
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	b259      	sxtb	r1, r3
 8002a6e:	79fa      	ldrb	r2, [r7, #7]
 8002a70:	2354      	movs	r3, #84	; 0x54
 8002a72:	fb00 f303 	mul.w	r3, r0, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	b2c9      	uxtb	r1, r1
 8002a7a:	4a07      	ldr	r2, [pc, #28]	; (8002a98 <PCD8544_DrawPixel+0xb8>)
 8002a7c:	54d1      	strb	r1, [r2, r3]
	}
	PCD8544_UpdateArea(x, y, x, y);
 8002a7e:	79bb      	ldrb	r3, [r7, #6]
 8002a80:	79fa      	ldrb	r2, [r7, #7]
 8002a82:	79b9      	ldrb	r1, [r7, #6]
 8002a84:	79f8      	ldrb	r0, [r7, #7]
 8002a86:	f000 f89d 	bl	8002bc4 <PCD8544_UpdateArea>
 8002a8a:	e002      	b.n	8002a92 <PCD8544_DrawPixel+0xb2>
		return;
 8002a8c:	bf00      	nop
 8002a8e:	e000      	b.n	8002a92 <PCD8544_DrawPixel+0xb2>
		return;
 8002a90:	bf00      	nop
}
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20001c38 	.word	0x20001c38

08002a9c <PCD8544_Clear>:
	} else {
		PCD8544_Write(PCD8544_COMMAND, PCD8544_DISPLAYCONTROL | PCD8544_DISPLAYNORMAL);
	}
}

void PCD8544_Clear(void) {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
	unsigned int i;
	PCD8544_Home();
 8002aa2:	f000 f821 	bl	8002ae8 <PCD8544_Home>
	for (i = 0; i < PCD8544_BUFFER_SIZE; i++) {
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	607b      	str	r3, [r7, #4]
 8002aaa:	e007      	b.n	8002abc <PCD8544_Clear+0x20>
		PCD8544_Buffer[i] = 0x00;
 8002aac:	4a0d      	ldr	r2, [pc, #52]	; (8002ae4 <PCD8544_Clear+0x48>)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < PCD8544_BUFFER_SIZE; i++) {
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	607b      	str	r3, [r7, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8002ac2:	d3f3      	bcc.n	8002aac <PCD8544_Clear+0x10>
		//PCD8544_Write(PCD8544_DATA, 0x00);
	}
	PCD8544_GotoXY(0, 0);
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f000 f8b8 	bl	8002c3c <PCD8544_GotoXY>
	PCD8544_UpdateArea(0, 0, PCD8544_WIDTH - 1, PCD8544_HEIGHT - 1);
 8002acc:	232f      	movs	r3, #47	; 0x2f
 8002ace:	2253      	movs	r2, #83	; 0x53
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f000 f876 	bl	8002bc4 <PCD8544_UpdateArea>
	PCD8544_Refresh();
 8002ad8:	f000 f812 	bl	8002b00 <PCD8544_Refresh>
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	20001c38 	.word	0x20001c38

08002ae8 <PCD8544_Home>:

void PCD8544_Home(void) {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
	PCD8544_Write(PCD8544_COMMAND, PCD8544_SETXADDR | 0);
 8002aec:	2180      	movs	r1, #128	; 0x80
 8002aee:	2000      	movs	r0, #0
 8002af0:	f7ff ff56 	bl	80029a0 <PCD8544_Write>
	PCD8544_Write(PCD8544_COMMAND, PCD8544_SETYADDR | 0);
 8002af4:	2140      	movs	r1, #64	; 0x40
 8002af6:	2000      	movs	r0, #0
 8002af8:	f7ff ff52 	bl	80029a0 <PCD8544_Write>
}
 8002afc:	bf00      	nop
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <PCD8544_Refresh>:

void PCD8544_Refresh(void) {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
	unsigned char i, j;
	for (i = 0; i < 6; i++) {
 8002b06:	2300      	movs	r3, #0
 8002b08:	71fb      	strb	r3, [r7, #7]
 8002b0a:	e03b      	b.n	8002b84 <PCD8544_Refresh+0x84>
		//Not in range yet
		if (PCD8544_UpdateYmin > ((i + 1) * 8)) {
 8002b0c:	4b28      	ldr	r3, [pc, #160]	; (8002bb0 <PCD8544_Refresh+0xb0>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	3301      	adds	r3, #1
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	dc2f      	bgt.n	8002b7c <PCD8544_Refresh+0x7c>
			continue;
		}
		//Over range, stop
		if ((i * 8) > PCD8544_UpdateYmax) {
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4a24      	ldr	r2, [pc, #144]	; (8002bb4 <PCD8544_Refresh+0xb4>)
 8002b22:	7812      	ldrb	r2, [r2, #0]
 8002b24:	4293      	cmp	r3, r2
 8002b26:	dc31      	bgt.n	8002b8c <PCD8544_Refresh+0x8c>
			break;
		}

		PCD8544_Write(PCD8544_COMMAND, PCD8544_SETYADDR | i);
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	4619      	mov	r1, r3
 8002b32:	2000      	movs	r0, #0
 8002b34:	f7ff ff34 	bl	80029a0 <PCD8544_Write>
		PCD8544_Write(PCD8544_COMMAND, PCD8544_SETXADDR | PCD8544_UpdateXmin);
 8002b38:	4b1f      	ldr	r3, [pc, #124]	; (8002bb8 <PCD8544_Refresh+0xb8>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	4619      	mov	r1, r3
 8002b44:	2000      	movs	r0, #0
 8002b46:	f7ff ff2b 	bl	80029a0 <PCD8544_Write>

		for (j = PCD8544_UpdateXmin; j <= PCD8544_UpdateXmax; j++) {
 8002b4a:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <PCD8544_Refresh+0xb8>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	71bb      	strb	r3, [r7, #6]
 8002b50:	e00e      	b.n	8002b70 <PCD8544_Refresh+0x70>
			PCD8544_Write(PCD8544_DATA, PCD8544_Buffer[(i * PCD8544_WIDTH) + j]);
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	2254      	movs	r2, #84	; 0x54
 8002b56:	fb03 f202 	mul.w	r2, r3, r2
 8002b5a:	79bb      	ldrb	r3, [r7, #6]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	4a17      	ldr	r2, [pc, #92]	; (8002bbc <PCD8544_Refresh+0xbc>)
 8002b60:	5cd3      	ldrb	r3, [r2, r3]
 8002b62:	4619      	mov	r1, r3
 8002b64:	2001      	movs	r0, #1
 8002b66:	f7ff ff1b 	bl	80029a0 <PCD8544_Write>
		for (j = PCD8544_UpdateXmin; j <= PCD8544_UpdateXmax; j++) {
 8002b6a:	79bb      	ldrb	r3, [r7, #6]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	71bb      	strb	r3, [r7, #6]
 8002b70:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <PCD8544_Refresh+0xc0>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	79ba      	ldrb	r2, [r7, #6]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d9eb      	bls.n	8002b52 <PCD8544_Refresh+0x52>
 8002b7a:	e000      	b.n	8002b7e <PCD8544_Refresh+0x7e>
			continue;
 8002b7c:	bf00      	nop
	for (i = 0; i < 6; i++) {
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	3301      	adds	r3, #1
 8002b82:	71fb      	strb	r3, [r7, #7]
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	2b05      	cmp	r3, #5
 8002b88:	d9c0      	bls.n	8002b0c <PCD8544_Refresh+0xc>
 8002b8a:	e000      	b.n	8002b8e <PCD8544_Refresh+0x8e>
			break;
 8002b8c:	bf00      	nop
		}
	}

	PCD8544_UpdateXmin = PCD8544_WIDTH - 1;
 8002b8e:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <PCD8544_Refresh+0xb8>)
 8002b90:	2253      	movs	r2, #83	; 0x53
 8002b92:	701a      	strb	r2, [r3, #0]
	PCD8544_UpdateXmax = 0;
 8002b94:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <PCD8544_Refresh+0xc0>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
	PCD8544_UpdateYmin = PCD8544_HEIGHT - 1;
 8002b9a:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <PCD8544_Refresh+0xb0>)
 8002b9c:	222f      	movs	r2, #47	; 0x2f
 8002b9e:	701a      	strb	r2, [r3, #0]
	PCD8544_UpdateYmax = 0;
 8002ba0:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <PCD8544_Refresh+0xb4>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20001e32 	.word	0x20001e32
 8002bb4:	20001e33 	.word	0x20001e33
 8002bb8:	20001e30 	.word	0x20001e30
 8002bbc:	20001c38 	.word	0x20001c38
 8002bc0:	20001e31 	.word	0x20001e31

08002bc4 <PCD8544_UpdateArea>:

void PCD8544_UpdateArea(unsigned char xMin, unsigned char yMin, unsigned char xMax, unsigned char yMax) {
 8002bc4:	b490      	push	{r4, r7}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4604      	mov	r4, r0
 8002bcc:	4608      	mov	r0, r1
 8002bce:	4611      	mov	r1, r2
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4623      	mov	r3, r4
 8002bd4:	71fb      	strb	r3, [r7, #7]
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	71bb      	strb	r3, [r7, #6]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	717b      	strb	r3, [r7, #5]
 8002bde:	4613      	mov	r3, r2
 8002be0:	713b      	strb	r3, [r7, #4]
	if (xMin < PCD8544_UpdateXmin) {
 8002be2:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <PCD8544_UpdateArea+0x68>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	79fa      	ldrb	r2, [r7, #7]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d202      	bcs.n	8002bf2 <PCD8544_UpdateArea+0x2e>
		PCD8544_UpdateXmin = xMin;
 8002bec:	4a0f      	ldr	r2, [pc, #60]	; (8002c2c <PCD8544_UpdateArea+0x68>)
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	7013      	strb	r3, [r2, #0]
	}
	if (xMax > PCD8544_UpdateXmax) {
 8002bf2:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <PCD8544_UpdateArea+0x6c>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	797a      	ldrb	r2, [r7, #5]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d902      	bls.n	8002c02 <PCD8544_UpdateArea+0x3e>
		PCD8544_UpdateXmax = xMax;
 8002bfc:	4a0c      	ldr	r2, [pc, #48]	; (8002c30 <PCD8544_UpdateArea+0x6c>)
 8002bfe:	797b      	ldrb	r3, [r7, #5]
 8002c00:	7013      	strb	r3, [r2, #0]
	}
	if (yMin < PCD8544_UpdateYmin) {
 8002c02:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <PCD8544_UpdateArea+0x70>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	79ba      	ldrb	r2, [r7, #6]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d202      	bcs.n	8002c12 <PCD8544_UpdateArea+0x4e>
		PCD8544_UpdateYmin = yMin;
 8002c0c:	4a09      	ldr	r2, [pc, #36]	; (8002c34 <PCD8544_UpdateArea+0x70>)
 8002c0e:	79bb      	ldrb	r3, [r7, #6]
 8002c10:	7013      	strb	r3, [r2, #0]
	}
	if (yMax > PCD8544_UpdateYmax) {
 8002c12:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <PCD8544_UpdateArea+0x74>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	793a      	ldrb	r2, [r7, #4]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d902      	bls.n	8002c22 <PCD8544_UpdateArea+0x5e>
		PCD8544_UpdateYmax = yMax;
 8002c1c:	4a06      	ldr	r2, [pc, #24]	; (8002c38 <PCD8544_UpdateArea+0x74>)
 8002c1e:	793b      	ldrb	r3, [r7, #4]
 8002c20:	7013      	strb	r3, [r2, #0]
	}
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc90      	pop	{r4, r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	20001e30 	.word	0x20001e30
 8002c30:	20001e31 	.word	0x20001e31
 8002c34:	20001e32 	.word	0x20001e32
 8002c38:	20001e33 	.word	0x20001e33

08002c3c <PCD8544_GotoXY>:

void PCD8544_GotoXY(unsigned char x, unsigned char y) {
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	460a      	mov	r2, r1
 8002c46:	71fb      	strb	r3, [r7, #7]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	71bb      	strb	r3, [r7, #6]
	PCD8544_x = x;
 8002c4c:	4a05      	ldr	r2, [pc, #20]	; (8002c64 <PCD8544_GotoXY+0x28>)
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	7013      	strb	r3, [r2, #0]
	PCD8544_y = y;
 8002c52:	4a05      	ldr	r2, [pc, #20]	; (8002c68 <PCD8544_GotoXY+0x2c>)
 8002c54:	79bb      	ldrb	r3, [r7, #6]
 8002c56:	7013      	strb	r3, [r2, #0]
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	20001e34 	.word	0x20001e34
 8002c68:	20001e35 	.word	0x20001e35

08002c6c <PCD8544_Putc>:

void PCD8544_Putc(char c, PCD8544_Pixel_t color, PCD8544_FontSize_t size) {
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	71fb      	strb	r3, [r7, #7]
 8002c76:	460b      	mov	r3, r1
 8002c78:	71bb      	strb	r3, [r7, #6]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	717b      	strb	r3, [r7, #5]
	unsigned char c_height, c_width, i, b, j;
	if (size == PCD8544_FontSize_3x5) {
 8002c7e:	797b      	ldrb	r3, [r7, #5]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d104      	bne.n	8002c8e <PCD8544_Putc+0x22>
		c_width = PCD8544_CHAR3x5_WIDTH;
 8002c84:	2304      	movs	r3, #4
 8002c86:	73bb      	strb	r3, [r7, #14]
		c_height = PCD8544_CHAR3x5_HEIGHT;
 8002c88:	2306      	movs	r3, #6
 8002c8a:	73fb      	strb	r3, [r7, #15]
 8002c8c:	e003      	b.n	8002c96 <PCD8544_Putc+0x2a>
	} else {
		c_width = PCD8544_CHAR5x7_WIDTH;
 8002c8e:	2306      	movs	r3, #6
 8002c90:	73bb      	strb	r3, [r7, #14]
		c_height = PCD8544_CHAR5x7_HEIGHT;
 8002c92:	2308      	movs	r3, #8
 8002c94:	73fb      	strb	r3, [r7, #15]
	}
	if ((PCD8544_x + c_width) > PCD8544_WIDTH) {
 8002c96:	4b46      	ldr	r3, [pc, #280]	; (8002db0 <PCD8544_Putc+0x144>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	7bbb      	ldrb	r3, [r7, #14]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	2b54      	cmp	r3, #84	; 0x54
 8002ca2:	dd09      	ble.n	8002cb8 <PCD8544_Putc+0x4c>
		//If at the end of a line of display, go to new line and set x to 0 position
		PCD8544_y += c_height;
 8002ca4:	4b43      	ldr	r3, [pc, #268]	; (8002db4 <PCD8544_Putc+0x148>)
 8002ca6:	781a      	ldrb	r2, [r3, #0]
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	4413      	add	r3, r2
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	4b41      	ldr	r3, [pc, #260]	; (8002db4 <PCD8544_Putc+0x148>)
 8002cb0:	701a      	strb	r2, [r3, #0]
		PCD8544_x = 0;
 8002cb2:	4b3f      	ldr	r3, [pc, #252]	; (8002db0 <PCD8544_Putc+0x144>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < c_width - 1; i++) {
 8002cb8:	2300      	movs	r3, #0
 8002cba:	737b      	strb	r3, [r7, #13]
 8002cbc:	e068      	b.n	8002d90 <PCD8544_Putc+0x124>
		if (c < 32) {
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	2b1f      	cmp	r3, #31
 8002cc2:	d91c      	bls.n	8002cfe <PCD8544_Putc+0x92>
			//b = _custom_chars[_font_size][(uint8_t)chr][i];
		} else if (size == PCD8544_FontSize_3x5) {
 8002cc4:	797b      	ldrb	r3, [r7, #5]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d10c      	bne.n	8002ce4 <PCD8544_Putc+0x78>
			b = PCD8544_Font3x5[c - 32][i];
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	f1a3 0220 	sub.w	r2, r3, #32
 8002cd0:	7b79      	ldrb	r1, [r7, #13]
 8002cd2:	4839      	ldr	r0, [pc, #228]	; (8002db8 <PCD8544_Putc+0x14c>)
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	4413      	add	r3, r2
 8002cda:	4403      	add	r3, r0
 8002cdc:	440b      	add	r3, r1
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	733b      	strb	r3, [r7, #12]
 8002ce2:	e00c      	b.n	8002cfe <PCD8544_Putc+0x92>
		} else {
			b = PCD8544_Font5x7[c - 32][i];
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	f1a3 0220 	sub.w	r2, r3, #32
 8002cea:	7b79      	ldrb	r1, [r7, #13]
 8002cec:	4833      	ldr	r0, [pc, #204]	; (8002dbc <PCD8544_Putc+0x150>)
 8002cee:	4613      	mov	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	4413      	add	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	4403      	add	r3, r0
 8002cf8:	440b      	add	r3, r1
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	733b      	strb	r3, [r7, #12]
		}
		if (b == 0x00 && (c != 0 && c != 32)) {
 8002cfe:	7b3b      	ldrb	r3, [r7, #12]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d105      	bne.n	8002d10 <PCD8544_Putc+0xa4>
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <PCD8544_Putc+0xa4>
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	d13b      	bne.n	8002d88 <PCD8544_Putc+0x11c>
			continue;
		}
		for (j = 0; j < c_height; j++) {
 8002d10:	2300      	movs	r3, #0
 8002d12:	72fb      	strb	r3, [r7, #11]
 8002d14:	e02d      	b.n	8002d72 <PCD8544_Putc+0x106>
			if (color == PCD8544_Pixel_Set) {
 8002d16:	79bb      	ldrb	r3, [r7, #6]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d112      	bne.n	8002d42 <PCD8544_Putc+0xd6>
				PCD8544_DrawPixel(PCD8544_x, (PCD8544_y + j), ((b >> j) & 1) ? PCD8544_Pixel_Set : PCD8544_Pixel_Clear);
 8002d1c:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <PCD8544_Putc+0x144>)
 8002d1e:	7818      	ldrb	r0, [r3, #0]
 8002d20:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <PCD8544_Putc+0x148>)
 8002d22:	781a      	ldrb	r2, [r3, #0]
 8002d24:	7afb      	ldrb	r3, [r7, #11]
 8002d26:	4413      	add	r3, r2
 8002d28:	b2d9      	uxtb	r1, r3
 8002d2a:	7b3a      	ldrb	r2, [r7, #12]
 8002d2c:	7afb      	ldrb	r3, [r7, #11]
 8002d2e:	fa42 f303 	asr.w	r3, r2, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f7ff fe50 	bl	80029e0 <PCD8544_DrawPixel>
 8002d40:	e014      	b.n	8002d6c <PCD8544_Putc+0x100>
			} else {
				PCD8544_DrawPixel(PCD8544_x, (PCD8544_y + j), ((b >> j) & 1) ? PCD8544_Pixel_Clear : PCD8544_Pixel_Set);
 8002d42:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <PCD8544_Putc+0x144>)
 8002d44:	7818      	ldrb	r0, [r3, #0]
 8002d46:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <PCD8544_Putc+0x148>)
 8002d48:	781a      	ldrb	r2, [r3, #0]
 8002d4a:	7afb      	ldrb	r3, [r7, #11]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	b2d9      	uxtb	r1, r3
 8002d50:	7b3a      	ldrb	r2, [r7, #12]
 8002d52:	7afb      	ldrb	r3, [r7, #11]
 8002d54:	fa42 f303 	asr.w	r3, r2, r3
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	bf0c      	ite	eq
 8002d60:	2301      	moveq	r3, #1
 8002d62:	2300      	movne	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	461a      	mov	r2, r3
 8002d68:	f7ff fe3a 	bl	80029e0 <PCD8544_DrawPixel>
		for (j = 0; j < c_height; j++) {
 8002d6c:	7afb      	ldrb	r3, [r7, #11]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	72fb      	strb	r3, [r7, #11]
 8002d72:	7afa      	ldrb	r2, [r7, #11]
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d3cd      	bcc.n	8002d16 <PCD8544_Putc+0xaa>
			}
		}
		PCD8544_x++;
 8002d7a:	4b0d      	ldr	r3, [pc, #52]	; (8002db0 <PCD8544_Putc+0x144>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <PCD8544_Putc+0x144>)
 8002d84:	701a      	strb	r2, [r3, #0]
 8002d86:	e000      	b.n	8002d8a <PCD8544_Putc+0x11e>
			continue;
 8002d88:	bf00      	nop
	for (i = 0; i < c_width - 1; i++) {
 8002d8a:	7b7b      	ldrb	r3, [r7, #13]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	737b      	strb	r3, [r7, #13]
 8002d90:	7b7a      	ldrb	r2, [r7, #13]
 8002d92:	7bbb      	ldrb	r3, [r7, #14]
 8002d94:	3b01      	subs	r3, #1
 8002d96:	429a      	cmp	r2, r3
 8002d98:	db91      	blt.n	8002cbe <PCD8544_Putc+0x52>
	}
	PCD8544_x++;
 8002d9a:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <PCD8544_Putc+0x144>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <PCD8544_Putc+0x144>)
 8002da4:	701a      	strb	r2, [r3, #0]
}
 8002da6:	bf00      	nop
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20001e34 	.word	0x20001e34
 8002db4:	20001e35 	.word	0x20001e35
 8002db8:	0800b934 	.word	0x0800b934
 8002dbc:	0800b6ec 	.word	0x0800b6ec

08002dc0 <PCD8544_Puts>:

void PCD8544_Puts(char *c, PCD8544_Pixel_t color, PCD8544_FontSize_t size) {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	70fb      	strb	r3, [r7, #3]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	70bb      	strb	r3, [r7, #2]
	while (*c) {
 8002dd0:	e008      	b.n	8002de4 <PCD8544_Puts+0x24>
		PCD8544_Putc(*c++, color, size);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	78ba      	ldrb	r2, [r7, #2]
 8002ddc:	78f9      	ldrb	r1, [r7, #3]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff ff44 	bl	8002c6c <PCD8544_Putc>
	while (*c) {
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1f2      	bne.n	8002dd2 <PCD8544_Puts+0x12>
	}
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <PCD8544_DrawLine>:

void PCD8544_DrawLine(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1, PCD8544_Pixel_t color) {
 8002df6:	b590      	push	{r4, r7, lr}
 8002df8:	b085      	sub	sp, #20
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	4604      	mov	r4, r0
 8002dfe:	4608      	mov	r0, r1
 8002e00:	4611      	mov	r1, r2
 8002e02:	461a      	mov	r2, r3
 8002e04:	4623      	mov	r3, r4
 8002e06:	71fb      	strb	r3, [r7, #7]
 8002e08:	4603      	mov	r3, r0
 8002e0a:	71bb      	strb	r3, [r7, #6]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	717b      	strb	r3, [r7, #5]
 8002e10:	4613      	mov	r3, r2
 8002e12:	713b      	strb	r3, [r7, #4]
	short dx, dy;
	short temp;

	if (x0 > x1) {
 8002e14:	79fa      	ldrb	r2, [r7, #7]
 8002e16:	797b      	ldrb	r3, [r7, #5]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d905      	bls.n	8002e28 <PCD8544_DrawLine+0x32>
		temp = x1;
 8002e1c:	797b      	ldrb	r3, [r7, #5]
 8002e1e:	81fb      	strh	r3, [r7, #14]
		x1 = x0;
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	717b      	strb	r3, [r7, #5]
		x0 = temp;
 8002e24:	89fb      	ldrh	r3, [r7, #14]
 8002e26:	71fb      	strb	r3, [r7, #7]
	}
	if (y0 > y1) {
 8002e28:	79ba      	ldrb	r2, [r7, #6]
 8002e2a:	793b      	ldrb	r3, [r7, #4]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d905      	bls.n	8002e3c <PCD8544_DrawLine+0x46>
		temp = y1;
 8002e30:	793b      	ldrb	r3, [r7, #4]
 8002e32:	81fb      	strh	r3, [r7, #14]
		y1 = y0;
 8002e34:	79bb      	ldrb	r3, [r7, #6]
 8002e36:	713b      	strb	r3, [r7, #4]
		y0 = temp;
 8002e38:	89fb      	ldrh	r3, [r7, #14]
 8002e3a:	71bb      	strb	r3, [r7, #6]
	}

	dx = x1 - x0;
 8002e3c:	797b      	ldrb	r3, [r7, #5]
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	81bb      	strh	r3, [r7, #12]
	dy = y1 - y0;
 8002e4a:	793b      	ldrb	r3, [r7, #4]
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	79bb      	ldrb	r3, [r7, #6]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	817b      	strh	r3, [r7, #10]

	if (dx == 0) {
 8002e58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10e      	bne.n	8002e7e <PCD8544_DrawLine+0x88>
		do {
			PCD8544_DrawPixel(x0, y0, color);
 8002e60:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002e64:	79b9      	ldrb	r1, [r7, #6]
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fdb9 	bl	80029e0 <PCD8544_DrawPixel>
			y0++;
 8002e6e:	79bb      	ldrb	r3, [r7, #6]
 8002e70:	3301      	adds	r3, #1
 8002e72:	71bb      	strb	r3, [r7, #6]
		} while (y1 >= y0);
 8002e74:	793a      	ldrb	r2, [r7, #4]
 8002e76:	79bb      	ldrb	r3, [r7, #6]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d2f1      	bcs.n	8002e60 <PCD8544_DrawLine+0x6a>
		return;
 8002e7c:	e089      	b.n	8002f92 <PCD8544_DrawLine+0x19c>
	}
	if (dy == 0) {
 8002e7e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10e      	bne.n	8002ea4 <PCD8544_DrawLine+0xae>
		do {
			PCD8544_DrawPixel(x0, y0, color);
 8002e86:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002e8a:	79b9      	ldrb	r1, [r7, #6]
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff fda6 	bl	80029e0 <PCD8544_DrawPixel>
			x0++;
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	3301      	adds	r3, #1
 8002e98:	71fb      	strb	r3, [r7, #7]
		} while (x1 >= x0);
 8002e9a:	797a      	ldrb	r2, [r7, #5]
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d2f1      	bcs.n	8002e86 <PCD8544_DrawLine+0x90>
		return;
 8002ea2:	e076      	b.n	8002f92 <PCD8544_DrawLine+0x19c>
	}

	/* Based on Bresenham's line algorithm  */
	if (dx > dy) {
 8002ea4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002ea8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	dd38      	ble.n	8002f22 <PCD8544_DrawLine+0x12c>
		temp = 2 * dy - dx;
 8002eb0:	897b      	ldrh	r3, [r7, #10]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	89bb      	ldrh	r3, [r7, #12]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	81fb      	strh	r3, [r7, #14]
		while (x0 != x1) {
 8002ebe:	e024      	b.n	8002f0a <PCD8544_DrawLine+0x114>
			PCD8544_DrawPixel(x0, y0, color);
 8002ec0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002ec4:	79b9      	ldrb	r1, [r7, #6]
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff fd89 	bl	80029e0 <PCD8544_DrawPixel>
			x0++;
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	71fb      	strb	r3, [r7, #7]
			if (temp > 0) {
 8002ed4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	dd0f      	ble.n	8002efc <PCD8544_DrawLine+0x106>
				y0++;
 8002edc:	79bb      	ldrb	r3, [r7, #6]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	71bb      	strb	r3, [r7, #6]
				temp += 2 * dy - 2 * dx;
 8002ee2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002ee6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	89fb      	ldrh	r3, [r7, #14]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	81fb      	strh	r3, [r7, #14]
 8002efa:	e006      	b.n	8002f0a <PCD8544_DrawLine+0x114>
			} else {
				temp += 2 * dy;
 8002efc:	897b      	ldrh	r3, [r7, #10]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	89fb      	ldrh	r3, [r7, #14]
 8002f04:	4413      	add	r3, r2
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	81fb      	strh	r3, [r7, #14]
		while (x0 != x1) {
 8002f0a:	79fa      	ldrb	r2, [r7, #7]
 8002f0c:	797b      	ldrb	r3, [r7, #5]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d1d6      	bne.n	8002ec0 <PCD8544_DrawLine+0xca>
			}
		}
		PCD8544_DrawPixel(x0, y0, color);
 8002f12:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002f16:	79b9      	ldrb	r1, [r7, #6]
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fd60 	bl	80029e0 <PCD8544_DrawPixel>
 8002f20:	e037      	b.n	8002f92 <PCD8544_DrawLine+0x19c>
	} else {
		temp = 2 * dx - dy;
 8002f22:	89bb      	ldrh	r3, [r7, #12]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	897b      	ldrh	r3, [r7, #10]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	81fb      	strh	r3, [r7, #14]
		while (y0 != y1) {
 8002f30:	e024      	b.n	8002f7c <PCD8544_DrawLine+0x186>
			PCD8544_DrawPixel(x0, y0, color);
 8002f32:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002f36:	79b9      	ldrb	r1, [r7, #6]
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fd50 	bl	80029e0 <PCD8544_DrawPixel>
			y0++;
 8002f40:	79bb      	ldrb	r3, [r7, #6]
 8002f42:	3301      	adds	r3, #1
 8002f44:	71bb      	strb	r3, [r7, #6]
			if (temp > 0) {
 8002f46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	dd0f      	ble.n	8002f6e <PCD8544_DrawLine+0x178>
				x0++;
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	3301      	adds	r3, #1
 8002f52:	71fb      	strb	r3, [r7, #7]
				temp += 2 * dy - 2 * dx;
 8002f54:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002f58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	89fb      	ldrh	r3, [r7, #14]
 8002f66:	4413      	add	r3, r2
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	81fb      	strh	r3, [r7, #14]
 8002f6c:	e006      	b.n	8002f7c <PCD8544_DrawLine+0x186>
			} else {
				temp += 2 * dy;
 8002f6e:	897b      	ldrh	r3, [r7, #10]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	89fb      	ldrh	r3, [r7, #14]
 8002f76:	4413      	add	r3, r2
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	81fb      	strh	r3, [r7, #14]
		while (y0 != y1) {
 8002f7c:	79ba      	ldrb	r2, [r7, #6]
 8002f7e:	793b      	ldrb	r3, [r7, #4]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d1d6      	bne.n	8002f32 <PCD8544_DrawLine+0x13c>
			}
		}
		PCD8544_DrawPixel(x0, y0, color);
 8002f84:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002f88:	79b9      	ldrb	r1, [r7, #6]
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fd27 	bl	80029e0 <PCD8544_DrawPixel>
	}
}
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd90      	pop	{r4, r7, pc}

08002f98 <PCD8544_DrawFilledRectangle>:
	PCD8544_DrawLine(x0, y0, x0, y1, color);	//Left
	PCD8544_DrawLine(x1, y0, x1, y1, color);	//Right
	PCD8544_DrawLine(x0, y1, x1, y1, color);	//Bottom
}

void PCD8544_DrawFilledRectangle(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1, PCD8544_Pixel_t color) {
 8002f98:	b590      	push	{r4, r7, lr}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af02      	add	r7, sp, #8
 8002f9e:	4604      	mov	r4, r0
 8002fa0:	4608      	mov	r0, r1
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4623      	mov	r3, r4
 8002fa8:	71fb      	strb	r3, [r7, #7]
 8002faa:	4603      	mov	r3, r0
 8002fac:	71bb      	strb	r3, [r7, #6]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	717b      	strb	r3, [r7, #5]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	713b      	strb	r3, [r7, #4]
	for (; y0 < y1; y0++) {
 8002fb6:	e00b      	b.n	8002fd0 <PCD8544_DrawFilledRectangle+0x38>
		PCD8544_DrawLine(x0, y0, x1, y0, color);
 8002fb8:	79bc      	ldrb	r4, [r7, #6]
 8002fba:	797a      	ldrb	r2, [r7, #5]
 8002fbc:	79b9      	ldrb	r1, [r7, #6]
 8002fbe:	79f8      	ldrb	r0, [r7, #7]
 8002fc0:	7e3b      	ldrb	r3, [r7, #24]
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	4623      	mov	r3, r4
 8002fc6:	f7ff ff16 	bl	8002df6 <PCD8544_DrawLine>
	for (; y0 < y1; y0++) {
 8002fca:	79bb      	ldrb	r3, [r7, #6]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	71bb      	strb	r3, [r7, #6]
 8002fd0:	79ba      	ldrb	r2, [r7, #6]
 8002fd2:	793b      	ldrb	r3, [r7, #4]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d3ef      	bcc.n	8002fb8 <PCD8544_DrawFilledRectangle+0x20>
	}
}
 8002fd8:	bf00      	nop
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd90      	pop	{r4, r7, pc}

08002fe2 <scale8>:
// Peripheral usage
#include "stm32f4xx_hal.h"

#include "ws2812b.h"

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	4603      	mov	r3, r0
 8002fea:	460a      	mov	r2, r1
 8002fec:	71fb      	strb	r3, [r7, #7]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	79ba      	ldrb	r2, [r7, #6]
 8002ff6:	fb02 f303 	mul.w	r3, r2, r3
 8002ffa:	121b      	asrs	r3, r3, #8
 8002ffc:	b2db      	uxtb	r3, r3
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(Layers *layer, uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 800300a:	b590      	push	{r4, r7, lr}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	4608      	mov	r0, r1
 8003014:	4611      	mov	r1, r2
 8003016:	461a      	mov	r2, r3
 8003018:	4603      	mov	r3, r0
 800301a:	70fb      	strb	r3, [r7, #3]
 800301c:	460b      	mov	r3, r1
 800301e:	70bb      	strb	r3, [r7, #2]
 8003020:	4613      	mov	r3, r2
 8003022:	707b      	strb	r3, [r7, #1]
	layer->rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	4613      	mov	r3, r2
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	189c      	adds	r4, r3, r2
 800302c:	787b      	ldrb	r3, [r7, #1]
 800302e:	21b0      	movs	r1, #176	; 0xb0
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ffd6 	bl	8002fe2 <scale8>
 8003036:	4603      	mov	r3, r0
 8003038:	461a      	mov	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4423      	add	r3, r4
 800303e:	725a      	strb	r2, [r3, #9]
	layer->rgb_arr[3 * index + 1] = r;
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	4613      	mov	r3, r2
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	4413      	add	r3, r2
 8003048:	3301      	adds	r3, #1
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	78ba      	ldrb	r2, [r7, #2]
 8003050:	725a      	strb	r2, [r3, #9]
	layer->rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8003052:	78fa      	ldrb	r2, [r7, #3]
 8003054:	4613      	mov	r3, r2
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	4413      	add	r3, r2
 800305a:	1c9c      	adds	r4, r3, #2
 800305c:	7e3b      	ldrb	r3, [r7, #24]
 800305e:	21f0      	movs	r1, #240	; 0xf0
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff ffbe 	bl	8002fe2 <scale8>
 8003066:	4603      	mov	r3, r0
 8003068:	461a      	mov	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4423      	add	r3, r4
 800306e:	725a      	strb	r2, [r3, #9]
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	bd90      	pop	{r4, r7, pc}

08003078 <led_render>:
void led_set_all_RGB(Layers *layer, uint8_t r, uint8_t g, uint8_t b) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGB(layer, i, r, g, b);
}

// Shuttle the data to the LEDs!
void led_render(Layers *layer) {
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  if(layer->wr_buf_p != 0 || layer->dma->State != HAL_DMA_STATE_READY) {
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <led_render+0x20>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	d01d      	beq.n	80030d4 <led_render+0x5c>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) layer->wr_buf[i] = 0;
 8003098:	2300      	movs	r3, #0
 800309a:	73fb      	strb	r3, [r7, #15]
 800309c:	e00a      	b.n	80030b4 <led_render+0x3c>
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	4413      	add	r3, r2
 80030aa:	2200      	movs	r2, #0
 80030ac:	805a      	strh	r2, [r3, #2]
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	3301      	adds	r3, #1
 80030b2:	73fb      	strb	r3, [r7, #15]
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
 80030b6:	2b2f      	cmp	r3, #47	; 0x2f
 80030b8:	d9f1      	bls.n	800309e <led_render+0x26>
    layer->wr_buf_p = 0;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
    HAL_TIM_PWM_Stop_DMA(layer->timer, layer->channel);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	7a1b      	ldrb	r3, [r3, #8]
 80030ca:	4619      	mov	r1, r3
 80030cc:	4610      	mov	r0, r2
 80030ce:	f002 fadd 	bl	800568c <HAL_TIM_PWM_Stop_DMA>
    return;
 80030d2:	e09b      	b.n	800320c <led_render+0x194>
  }
  // Ooh boi the first data buffer half (and the second!)
  for(uint_fast8_t i = 0; i < 8; ++i) {
 80030d4:	2300      	movs	r3, #0
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	e085      	b.n	80031e6 <led_render+0x16e>
	  layer->wr_buf[i     ] = PWM_LO << (((layer->rgb_arr[0] << i) & 0x80) > 0);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	7a5b      	ldrb	r3, [r3, #9]
 80030de:	461a      	mov	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	dd01      	ble.n	80030f2 <led_render+0x7a>
 80030ee:	2142      	movs	r1, #66	; 0x42
 80030f0:	e000      	b.n	80030f4 <led_render+0x7c>
 80030f2:	2121      	movs	r1, #33	; 0x21
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4413      	add	r3, r2
 8003100:	460a      	mov	r2, r1
 8003102:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i +  8] = PWM_LO << (((layer->rgb_arr[1] << i) & 0x80) > 0);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	7a9b      	ldrb	r3, [r3, #10]
 8003108:	461a      	mov	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003114:	2b00      	cmp	r3, #0
 8003116:	dd01      	ble.n	800311c <led_render+0xa4>
 8003118:	2142      	movs	r1, #66	; 0x42
 800311a:	e000      	b.n	800311e <led_render+0xa6>
 800311c:	2121      	movs	r1, #33	; 0x21
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	3308      	adds	r3, #8
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	4413      	add	r3, r2
 800312c:	460a      	mov	r2, r1
 800312e:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i + 16] = PWM_LO << (((layer->rgb_arr[2] << i) & 0x80) > 0);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	7adb      	ldrb	r3, [r3, #11]
 8003134:	461a      	mov	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003140:	2b00      	cmp	r3, #0
 8003142:	dd01      	ble.n	8003148 <led_render+0xd0>
 8003144:	2142      	movs	r1, #66	; 0x42
 8003146:	e000      	b.n	800314a <led_render+0xd2>
 8003148:	2121      	movs	r1, #33	; 0x21
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	3310      	adds	r3, #16
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	4413      	add	r3, r2
 8003158:	460a      	mov	r2, r1
 800315a:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i + 24] = PWM_LO << (((layer->rgb_arr[3] << i) & 0x80) > 0);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	7b1b      	ldrb	r3, [r3, #12]
 8003160:	461a      	mov	r2, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316c:	2b00      	cmp	r3, #0
 800316e:	dd01      	ble.n	8003174 <led_render+0xfc>
 8003170:	2142      	movs	r1, #66	; 0x42
 8003172:	e000      	b.n	8003176 <led_render+0xfe>
 8003174:	2121      	movs	r1, #33	; 0x21
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	3318      	adds	r3, #24
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4413      	add	r3, r2
 8003184:	460a      	mov	r2, r1
 8003186:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i + 32] = PWM_LO << (((layer->rgb_arr[4] << i) & 0x80) > 0);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	7b5b      	ldrb	r3, [r3, #13]
 800318c:	461a      	mov	r2, r3
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003198:	2b00      	cmp	r3, #0
 800319a:	dd01      	ble.n	80031a0 <led_render+0x128>
 800319c:	2142      	movs	r1, #66	; 0x42
 800319e:	e000      	b.n	80031a2 <led_render+0x12a>
 80031a0:	2121      	movs	r1, #33	; 0x21
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	3320      	adds	r3, #32
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	4413      	add	r3, r2
 80031b0:	460a      	mov	r2, r1
 80031b2:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i + 40] = PWM_LO << (((layer->rgb_arr[5] << i) & 0x80) > 0);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	7b9b      	ldrb	r3, [r3, #14]
 80031b8:	461a      	mov	r2, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	dd01      	ble.n	80031cc <led_render+0x154>
 80031c8:	2142      	movs	r1, #66	; 0x42
 80031ca:	e000      	b.n	80031ce <led_render+0x156>
 80031cc:	2121      	movs	r1, #33	; 0x21
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	3328      	adds	r3, #40	; 0x28
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4413      	add	r3, r2
 80031dc:	460a      	mov	r2, r1
 80031de:	805a      	strh	r2, [r3, #2]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	3301      	adds	r3, #1
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b07      	cmp	r3, #7
 80031ea:	f67f af76 	bls.w	80030da <led_render+0x62>
  }
  HAL_TIM_PWM_Start_DMA(layer->timer, layer->channel, (uint32_t *)layer->wr_buf, WR_BUF_LEN);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	7a1b      	ldrb	r3, [r3, #8]
 80031f6:	4619      	mov	r1, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f203 320a 	addw	r2, r3, #778	; 0x30a
 80031fe:	2330      	movs	r3, #48	; 0x30
 8003200:	f002 f894 	bl	800532c <HAL_TIM_PWM_Start_DMA>
  layer->wr_buf_p = 2; // Since we're ready for the next buffer
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
}
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800324c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003218:	480d      	ldr	r0, [pc, #52]	; (8003250 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800321a:	490e      	ldr	r1, [pc, #56]	; (8003254 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800321c:	4a0e      	ldr	r2, [pc, #56]	; (8003258 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800321e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003220:	e002      	b.n	8003228 <LoopCopyDataInit>

08003222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003226:	3304      	adds	r3, #4

08003228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800322a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800322c:	d3f9      	bcc.n	8003222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800322e:	4a0b      	ldr	r2, [pc, #44]	; (800325c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003230:	4c0b      	ldr	r4, [pc, #44]	; (8003260 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003234:	e001      	b.n	800323a <LoopFillZerobss>

08003236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003238:	3204      	adds	r2, #4

0800323a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800323a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800323c:	d3fb      	bcc.n	8003236 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800323e:	f7ff fafb 	bl	8002838 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003242:	f006 ffcd 	bl	800a1e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003246:	f7fd f9a5 	bl	8000594 <main>
  bx  lr    
 800324a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800324c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003254:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003258:	0800bca8 	.word	0x0800bca8
  ldr r2, =_sbss
 800325c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003260:	20001e94 	.word	0x20001e94

08003264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003264:	e7fe      	b.n	8003264 <ADC_IRQHandler>
	...

08003268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800326c:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <HAL_Init+0x40>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a0d      	ldr	r2, [pc, #52]	; (80032a8 <HAL_Init+0x40>)
 8003272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003276:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003278:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <HAL_Init+0x40>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <HAL_Init+0x40>)
 800327e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003282:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003284:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <HAL_Init+0x40>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a07      	ldr	r2, [pc, #28]	; (80032a8 <HAL_Init+0x40>)
 800328a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800328e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003290:	2003      	movs	r0, #3
 8003292:	f000 f94f 	bl	8003534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003296:	2000      	movs	r0, #0
 8003298:	f000 f808 	bl	80032ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800329c:	f7fe fe6c 	bl	8001f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023c00 	.word	0x40023c00

080032ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032b4:	4b12      	ldr	r3, [pc, #72]	; (8003300 <HAL_InitTick+0x54>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4b12      	ldr	r3, [pc, #72]	; (8003304 <HAL_InitTick+0x58>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	4619      	mov	r1, r3
 80032be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 f967 	bl	800359e <HAL_SYSTICK_Config>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e00e      	b.n	80032f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b0f      	cmp	r3, #15
 80032de:	d80a      	bhi.n	80032f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032e0:	2200      	movs	r2, #0
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	f04f 30ff 	mov.w	r0, #4294967295
 80032e8:	f000 f92f 	bl	800354a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032ec:	4a06      	ldr	r2, [pc, #24]	; (8003308 <HAL_InitTick+0x5c>)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e000      	b.n	80032f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20000000 	.word	0x20000000
 8003304:	20000008 	.word	0x20000008
 8003308:	20000004 	.word	0x20000004

0800330c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003310:	4b06      	ldr	r3, [pc, #24]	; (800332c <HAL_IncTick+0x20>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_IncTick+0x24>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4413      	add	r3, r2
 800331c:	4a04      	ldr	r2, [pc, #16]	; (8003330 <HAL_IncTick+0x24>)
 800331e:	6013      	str	r3, [r2, #0]
}
 8003320:	bf00      	nop
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	20000008 	.word	0x20000008
 8003330:	20001e38 	.word	0x20001e38

08003334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return uwTick;
 8003338:	4b03      	ldr	r3, [pc, #12]	; (8003348 <HAL_GetTick+0x14>)
 800333a:	681b      	ldr	r3, [r3, #0]
}
 800333c:	4618      	mov	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	20001e38 	.word	0x20001e38

0800334c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003354:	f7ff ffee 	bl	8003334 <HAL_GetTick>
 8003358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d005      	beq.n	8003372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003366:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <HAL_Delay+0x44>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4413      	add	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003372:	bf00      	nop
 8003374:	f7ff ffde 	bl	8003334 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	429a      	cmp	r2, r3
 8003382:	d8f7      	bhi.n	8003374 <HAL_Delay+0x28>
  {
  }
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000008 	.word	0x20000008

08003394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033a4:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <__NVIC_SetPriorityGrouping+0x44>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033b0:	4013      	ands	r3, r2
 80033b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033c6:	4a04      	ldr	r2, [pc, #16]	; (80033d8 <__NVIC_SetPriorityGrouping+0x44>)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	60d3      	str	r3, [r2, #12]
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <__NVIC_GetPriorityGrouping+0x18>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	0a1b      	lsrs	r3, r3, #8
 80033e6:	f003 0307 	and.w	r3, r3, #7
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	2b00      	cmp	r3, #0
 8003408:	db0b      	blt.n	8003422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	f003 021f 	and.w	r2, r3, #31
 8003410:	4907      	ldr	r1, [pc, #28]	; (8003430 <__NVIC_EnableIRQ+0x38>)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	2001      	movs	r0, #1
 800341a:	fa00 f202 	lsl.w	r2, r0, r2
 800341e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	e000e100 	.word	0xe000e100

08003434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	6039      	str	r1, [r7, #0]
 800343e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003444:	2b00      	cmp	r3, #0
 8003446:	db0a      	blt.n	800345e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	b2da      	uxtb	r2, r3
 800344c:	490c      	ldr	r1, [pc, #48]	; (8003480 <__NVIC_SetPriority+0x4c>)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	0112      	lsls	r2, r2, #4
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	440b      	add	r3, r1
 8003458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800345c:	e00a      	b.n	8003474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	b2da      	uxtb	r2, r3
 8003462:	4908      	ldr	r1, [pc, #32]	; (8003484 <__NVIC_SetPriority+0x50>)
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	3b04      	subs	r3, #4
 800346c:	0112      	lsls	r2, r2, #4
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	440b      	add	r3, r1
 8003472:	761a      	strb	r2, [r3, #24]
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	e000e100 	.word	0xe000e100
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003488:	b480      	push	{r7}
 800348a:	b089      	sub	sp, #36	; 0x24
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f1c3 0307 	rsb	r3, r3, #7
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	bf28      	it	cs
 80034a6:	2304      	movcs	r3, #4
 80034a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3304      	adds	r3, #4
 80034ae:	2b06      	cmp	r3, #6
 80034b0:	d902      	bls.n	80034b8 <NVIC_EncodePriority+0x30>
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3b03      	subs	r3, #3
 80034b6:	e000      	b.n	80034ba <NVIC_EncodePriority+0x32>
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034bc:	f04f 32ff 	mov.w	r2, #4294967295
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43da      	mvns	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	401a      	ands	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034d0:	f04f 31ff 	mov.w	r1, #4294967295
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	fa01 f303 	lsl.w	r3, r1, r3
 80034da:	43d9      	mvns	r1, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e0:	4313      	orrs	r3, r2
         );
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3724      	adds	r7, #36	; 0x24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003500:	d301      	bcc.n	8003506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003502:	2301      	movs	r3, #1
 8003504:	e00f      	b.n	8003526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003506:	4a0a      	ldr	r2, [pc, #40]	; (8003530 <SysTick_Config+0x40>)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3b01      	subs	r3, #1
 800350c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800350e:	210f      	movs	r1, #15
 8003510:	f04f 30ff 	mov.w	r0, #4294967295
 8003514:	f7ff ff8e 	bl	8003434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <SysTick_Config+0x40>)
 800351a:	2200      	movs	r2, #0
 800351c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800351e:	4b04      	ldr	r3, [pc, #16]	; (8003530 <SysTick_Config+0x40>)
 8003520:	2207      	movs	r2, #7
 8003522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	e000e010 	.word	0xe000e010

08003534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff ff29 	bl	8003394 <__NVIC_SetPriorityGrouping>
}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800354a:	b580      	push	{r7, lr}
 800354c:	b086      	sub	sp, #24
 800354e:	af00      	add	r7, sp, #0
 8003550:	4603      	mov	r3, r0
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
 8003556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800355c:	f7ff ff3e 	bl	80033dc <__NVIC_GetPriorityGrouping>
 8003560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	6978      	ldr	r0, [r7, #20]
 8003568:	f7ff ff8e 	bl	8003488 <NVIC_EncodePriority>
 800356c:	4602      	mov	r2, r0
 800356e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003572:	4611      	mov	r1, r2
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff ff5d 	bl	8003434 <__NVIC_SetPriority>
}
 800357a:	bf00      	nop
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	4603      	mov	r3, r0
 800358a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800358c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff ff31 	bl	80033f8 <__NVIC_EnableIRQ>
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff ffa2 	bl	80034f0 <SysTick_Config>
 80035ac:	4603      	mov	r3, r0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035c4:	f7ff feb6 	bl	8003334 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e099      	b.n	8003708 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0201 	bic.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035f4:	e00f      	b.n	8003616 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035f6:	f7ff fe9d 	bl	8003334 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b05      	cmp	r3, #5
 8003602:	d908      	bls.n	8003616 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2220      	movs	r2, #32
 8003608:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2203      	movs	r2, #3
 800360e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e078      	b.n	8003708 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1e8      	bne.n	80035f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	4b38      	ldr	r3, [pc, #224]	; (8003710 <HAL_DMA_Init+0x158>)
 8003630:	4013      	ands	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003642:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800364e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800365a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	4313      	orrs	r3, r2
 8003666:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	2b04      	cmp	r3, #4
 800366e:	d107      	bne.n	8003680 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	4313      	orrs	r3, r2
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f023 0307 	bic.w	r3, r3, #7
 8003696:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	4313      	orrs	r3, r2
 80036a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d117      	bne.n	80036da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00e      	beq.n	80036da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 fa91 	bl	8003be4 <DMA_CheckFifoParam>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d008      	beq.n	80036da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2240      	movs	r2, #64	; 0x40
 80036cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036d6:	2301      	movs	r3, #1
 80036d8:	e016      	b.n	8003708 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fa48 	bl	8003b78 <DMA_CalcBaseAndBitshift>
 80036e8:	4603      	mov	r3, r0
 80036ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f0:	223f      	movs	r2, #63	; 0x3f
 80036f2:	409a      	lsls	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	f010803f 	.word	0xf010803f

08003714 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003722:	2300      	movs	r3, #0
 8003724:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_DMA_Start_IT+0x26>
 8003736:	2302      	movs	r3, #2
 8003738:	e040      	b.n	80037bc <HAL_DMA_Start_IT+0xa8>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b01      	cmp	r3, #1
 800374c:	d12f      	bne.n	80037ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2202      	movs	r2, #2
 8003752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f9da 	bl	8003b1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376c:	223f      	movs	r2, #63	; 0x3f
 800376e:	409a      	lsls	r2, r3
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0216 	orr.w	r2, r2, #22
 8003782:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	2b00      	cmp	r3, #0
 800378a:	d007      	beq.n	800379c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0208 	orr.w	r2, r2, #8
 800379a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	e005      	b.n	80037ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037b6:	2302      	movs	r3, #2
 80037b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d004      	beq.n	80037e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2280      	movs	r2, #128	; 0x80
 80037dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e00c      	b.n	80037fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2205      	movs	r2, #5
 80037e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0201 	bic.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003814:	4b8e      	ldr	r3, [pc, #568]	; (8003a50 <HAL_DMA_IRQHandler+0x248>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a8e      	ldr	r2, [pc, #568]	; (8003a54 <HAL_DMA_IRQHandler+0x24c>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	0a9b      	lsrs	r3, r3, #10
 8003820:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003826:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003832:	2208      	movs	r2, #8
 8003834:	409a      	lsls	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	4013      	ands	r3, r2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d01a      	beq.n	8003874 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d013      	beq.n	8003874 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0204 	bic.w	r2, r2, #4
 800385a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003860:	2208      	movs	r2, #8
 8003862:	409a      	lsls	r2, r3
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386c:	f043 0201 	orr.w	r2, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003878:	2201      	movs	r2, #1
 800387a:	409a      	lsls	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4013      	ands	r3, r2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d012      	beq.n	80038aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00b      	beq.n	80038aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003896:	2201      	movs	r2, #1
 8003898:	409a      	lsls	r2, r3
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a2:	f043 0202 	orr.w	r2, r3, #2
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ae:	2204      	movs	r2, #4
 80038b0:	409a      	lsls	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d012      	beq.n	80038e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00b      	beq.n	80038e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038cc:	2204      	movs	r2, #4
 80038ce:	409a      	lsls	r2, r3
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d8:	f043 0204 	orr.w	r2, r3, #4
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e4:	2210      	movs	r2, #16
 80038e6:	409a      	lsls	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4013      	ands	r3, r2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d043      	beq.n	8003978 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d03c      	beq.n	8003978 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003902:	2210      	movs	r2, #16
 8003904:	409a      	lsls	r2, r3
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d018      	beq.n	800394a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d108      	bne.n	8003938 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	2b00      	cmp	r3, #0
 800392c:	d024      	beq.n	8003978 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	4798      	blx	r3
 8003936:	e01f      	b.n	8003978 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800393c:	2b00      	cmp	r3, #0
 800393e:	d01b      	beq.n	8003978 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	4798      	blx	r3
 8003948:	e016      	b.n	8003978 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003954:	2b00      	cmp	r3, #0
 8003956:	d107      	bne.n	8003968 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0208 	bic.w	r2, r2, #8
 8003966:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397c:	2220      	movs	r2, #32
 800397e:	409a      	lsls	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4013      	ands	r3, r2
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 808f 	beq.w	8003aa8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 8087 	beq.w	8003aa8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399e:	2220      	movs	r2, #32
 80039a0:	409a      	lsls	r2, r3
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b05      	cmp	r3, #5
 80039b0:	d136      	bne.n	8003a20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0216 	bic.w	r2, r2, #22
 80039c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695a      	ldr	r2, [r3, #20]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d103      	bne.n	80039e2 <HAL_DMA_IRQHandler+0x1da>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d007      	beq.n	80039f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0208 	bic.w	r2, r2, #8
 80039f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f6:	223f      	movs	r2, #63	; 0x3f
 80039f8:	409a      	lsls	r2, r3
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d07e      	beq.n	8003b14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	4798      	blx	r3
        }
        return;
 8003a1e:	e079      	b.n	8003b14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d01d      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10d      	bne.n	8003a58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d031      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	4798      	blx	r3
 8003a4c:	e02c      	b.n	8003aa8 <HAL_DMA_IRQHandler+0x2a0>
 8003a4e:	bf00      	nop
 8003a50:	20000000 	.word	0x20000000
 8003a54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d023      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	4798      	blx	r3
 8003a68:	e01e      	b.n	8003aa8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10f      	bne.n	8003a98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0210 	bic.w	r2, r2, #16
 8003a86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d032      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d022      	beq.n	8003b02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2205      	movs	r2, #5
 8003ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0201 	bic.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	60bb      	str	r3, [r7, #8]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d307      	bcc.n	8003af0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f2      	bne.n	8003ad4 <HAL_DMA_IRQHandler+0x2cc>
 8003aee:	e000      	b.n	8003af2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003af0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	4798      	blx	r3
 8003b12:	e000      	b.n	8003b16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b14:	bf00      	nop
    }
  }
}
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b40      	cmp	r3, #64	; 0x40
 8003b48:	d108      	bne.n	8003b5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b5a:	e007      	b.n	8003b6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	60da      	str	r2, [r3, #12]
}
 8003b6c:	bf00      	nop
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	3b10      	subs	r3, #16
 8003b88:	4a14      	ldr	r2, [pc, #80]	; (8003bdc <DMA_CalcBaseAndBitshift+0x64>)
 8003b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8e:	091b      	lsrs	r3, r3, #4
 8003b90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b92:	4a13      	ldr	r2, [pc, #76]	; (8003be0 <DMA_CalcBaseAndBitshift+0x68>)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4413      	add	r3, r2
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d909      	bls.n	8003bba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bae:	f023 0303 	bic.w	r3, r3, #3
 8003bb2:	1d1a      	adds	r2, r3, #4
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	659a      	str	r2, [r3, #88]	; 0x58
 8003bb8:	e007      	b.n	8003bca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bc2:	f023 0303 	bic.w	r3, r3, #3
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	aaaaaaab 	.word	0xaaaaaaab
 8003be0:	0800ba74 	.word	0x0800ba74

08003be4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d11f      	bne.n	8003c3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	d856      	bhi.n	8003cb2 <DMA_CheckFifoParam+0xce>
 8003c04:	a201      	add	r2, pc, #4	; (adr r2, 8003c0c <DMA_CheckFifoParam+0x28>)
 8003c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0a:	bf00      	nop
 8003c0c:	08003c1d 	.word	0x08003c1d
 8003c10:	08003c2f 	.word	0x08003c2f
 8003c14:	08003c1d 	.word	0x08003c1d
 8003c18:	08003cb3 	.word	0x08003cb3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d046      	beq.n	8003cb6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c2c:	e043      	b.n	8003cb6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c36:	d140      	bne.n	8003cba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c3c:	e03d      	b.n	8003cba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c46:	d121      	bne.n	8003c8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2b03      	cmp	r3, #3
 8003c4c:	d837      	bhi.n	8003cbe <DMA_CheckFifoParam+0xda>
 8003c4e:	a201      	add	r2, pc, #4	; (adr r2, 8003c54 <DMA_CheckFifoParam+0x70>)
 8003c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c54:	08003c65 	.word	0x08003c65
 8003c58:	08003c6b 	.word	0x08003c6b
 8003c5c:	08003c65 	.word	0x08003c65
 8003c60:	08003c7d 	.word	0x08003c7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	73fb      	strb	r3, [r7, #15]
      break;
 8003c68:	e030      	b.n	8003ccc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d025      	beq.n	8003cc2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c7a:	e022      	b.n	8003cc2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c84:	d11f      	bne.n	8003cc6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c8a:	e01c      	b.n	8003cc6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d903      	bls.n	8003c9a <DMA_CheckFifoParam+0xb6>
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d003      	beq.n	8003ca0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c98:	e018      	b.n	8003ccc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8003c9e:	e015      	b.n	8003ccc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00e      	beq.n	8003cca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb0:	e00b      	b.n	8003cca <DMA_CheckFifoParam+0xe6>
      break;
 8003cb2:	bf00      	nop
 8003cb4:	e00a      	b.n	8003ccc <DMA_CheckFifoParam+0xe8>
      break;
 8003cb6:	bf00      	nop
 8003cb8:	e008      	b.n	8003ccc <DMA_CheckFifoParam+0xe8>
      break;
 8003cba:	bf00      	nop
 8003cbc:	e006      	b.n	8003ccc <DMA_CheckFifoParam+0xe8>
      break;
 8003cbe:	bf00      	nop
 8003cc0:	e004      	b.n	8003ccc <DMA_CheckFifoParam+0xe8>
      break;
 8003cc2:	bf00      	nop
 8003cc4:	e002      	b.n	8003ccc <DMA_CheckFifoParam+0xe8>
      break;   
 8003cc6:	bf00      	nop
 8003cc8:	e000      	b.n	8003ccc <DMA_CheckFifoParam+0xe8>
      break;
 8003cca:	bf00      	nop
    }
  } 
  
  return status; 
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop

08003cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b089      	sub	sp, #36	; 0x24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
 8003cf6:	e159      	b.n	8003fac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	f040 8148 	bne.w	8003fa6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d005      	beq.n	8003d2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d130      	bne.n	8003d90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	2203      	movs	r2, #3
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4013      	ands	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d64:	2201      	movs	r2, #1
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4013      	ands	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	091b      	lsrs	r3, r3, #4
 8003d7a:	f003 0201 	and.w	r2, r3, #1
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	2b03      	cmp	r3, #3
 8003d9a:	d017      	beq.n	8003dcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	2203      	movs	r2, #3
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	43db      	mvns	r3, r3
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	4013      	ands	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d123      	bne.n	8003e20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	08da      	lsrs	r2, r3, #3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3208      	adds	r2, #8
 8003de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	220f      	movs	r2, #15
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	08da      	lsrs	r2, r3, #3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3208      	adds	r2, #8
 8003e1a:	69b9      	ldr	r1, [r7, #24]
 8003e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	2203      	movs	r2, #3
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	43db      	mvns	r3, r3
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	4013      	ands	r3, r2
 8003e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 0203 	and.w	r2, r3, #3
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 80a2 	beq.w	8003fa6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	4b57      	ldr	r3, [pc, #348]	; (8003fc4 <HAL_GPIO_Init+0x2e8>)
 8003e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6a:	4a56      	ldr	r2, [pc, #344]	; (8003fc4 <HAL_GPIO_Init+0x2e8>)
 8003e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e70:	6453      	str	r3, [r2, #68]	; 0x44
 8003e72:	4b54      	ldr	r3, [pc, #336]	; (8003fc4 <HAL_GPIO_Init+0x2e8>)
 8003e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e7e:	4a52      	ldr	r2, [pc, #328]	; (8003fc8 <HAL_GPIO_Init+0x2ec>)
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	089b      	lsrs	r3, r3, #2
 8003e84:	3302      	adds	r3, #2
 8003e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	220f      	movs	r2, #15
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a49      	ldr	r2, [pc, #292]	; (8003fcc <HAL_GPIO_Init+0x2f0>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d019      	beq.n	8003ede <HAL_GPIO_Init+0x202>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a48      	ldr	r2, [pc, #288]	; (8003fd0 <HAL_GPIO_Init+0x2f4>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d013      	beq.n	8003eda <HAL_GPIO_Init+0x1fe>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a47      	ldr	r2, [pc, #284]	; (8003fd4 <HAL_GPIO_Init+0x2f8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d00d      	beq.n	8003ed6 <HAL_GPIO_Init+0x1fa>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a46      	ldr	r2, [pc, #280]	; (8003fd8 <HAL_GPIO_Init+0x2fc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d007      	beq.n	8003ed2 <HAL_GPIO_Init+0x1f6>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a45      	ldr	r2, [pc, #276]	; (8003fdc <HAL_GPIO_Init+0x300>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d101      	bne.n	8003ece <HAL_GPIO_Init+0x1f2>
 8003eca:	2304      	movs	r3, #4
 8003ecc:	e008      	b.n	8003ee0 <HAL_GPIO_Init+0x204>
 8003ece:	2307      	movs	r3, #7
 8003ed0:	e006      	b.n	8003ee0 <HAL_GPIO_Init+0x204>
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e004      	b.n	8003ee0 <HAL_GPIO_Init+0x204>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e002      	b.n	8003ee0 <HAL_GPIO_Init+0x204>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <HAL_GPIO_Init+0x204>
 8003ede:	2300      	movs	r3, #0
 8003ee0:	69fa      	ldr	r2, [r7, #28]
 8003ee2:	f002 0203 	and.w	r2, r2, #3
 8003ee6:	0092      	lsls	r2, r2, #2
 8003ee8:	4093      	lsls	r3, r2
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ef0:	4935      	ldr	r1, [pc, #212]	; (8003fc8 <HAL_GPIO_Init+0x2ec>)
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	089b      	lsrs	r3, r3, #2
 8003ef6:	3302      	adds	r3, #2
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003efe:	4b38      	ldr	r3, [pc, #224]	; (8003fe0 <HAL_GPIO_Init+0x304>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	43db      	mvns	r3, r3
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f22:	4a2f      	ldr	r2, [pc, #188]	; (8003fe0 <HAL_GPIO_Init+0x304>)
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f28:	4b2d      	ldr	r3, [pc, #180]	; (8003fe0 <HAL_GPIO_Init+0x304>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	43db      	mvns	r3, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4013      	ands	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f4c:	4a24      	ldr	r2, [pc, #144]	; (8003fe0 <HAL_GPIO_Init+0x304>)
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f52:	4b23      	ldr	r3, [pc, #140]	; (8003fe0 <HAL_GPIO_Init+0x304>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f76:	4a1a      	ldr	r2, [pc, #104]	; (8003fe0 <HAL_GPIO_Init+0x304>)
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f7c:	4b18      	ldr	r3, [pc, #96]	; (8003fe0 <HAL_GPIO_Init+0x304>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	43db      	mvns	r3, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fa0:	4a0f      	ldr	r2, [pc, #60]	; (8003fe0 <HAL_GPIO_Init+0x304>)
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	61fb      	str	r3, [r7, #28]
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	2b0f      	cmp	r3, #15
 8003fb0:	f67f aea2 	bls.w	8003cf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop
 8003fb8:	3724      	adds	r7, #36	; 0x24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40013800 	.word	0x40013800
 8003fcc:	40020000 	.word	0x40020000
 8003fd0:	40020400 	.word	0x40020400
 8003fd4:	40020800 	.word	0x40020800
 8003fd8:	40020c00 	.word	0x40020c00
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	40013c00 	.word	0x40013c00

08003fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	807b      	strh	r3, [r7, #2]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ff4:	787b      	ldrb	r3, [r7, #1]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ffa:	887a      	ldrh	r2, [r7, #2]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004000:	e003      	b.n	800400a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004002:	887b      	ldrh	r3, [r7, #2]
 8004004:	041a      	lsls	r2, r3, #16
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	619a      	str	r2, [r3, #24]
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
	...

08004018 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004022:	4b08      	ldr	r3, [pc, #32]	; (8004044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004024:	695a      	ldr	r2, [r3, #20]
 8004026:	88fb      	ldrh	r3, [r7, #6]
 8004028:	4013      	ands	r3, r2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d006      	beq.n	800403c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800402e:	4a05      	ldr	r2, [pc, #20]	; (8004044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004030:	88fb      	ldrh	r3, [r7, #6]
 8004032:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004034:	88fb      	ldrh	r3, [r7, #6]
 8004036:	4618      	mov	r0, r3
 8004038:	f7fd f99a 	bl	8001370 <HAL_GPIO_EXTI_Callback>
  }
}
 800403c:	bf00      	nop
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40013c00 	.word	0x40013c00

08004048 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e267      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d075      	beq.n	8004152 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004066:	4b88      	ldr	r3, [pc, #544]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 030c 	and.w	r3, r3, #12
 800406e:	2b04      	cmp	r3, #4
 8004070:	d00c      	beq.n	800408c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004072:	4b85      	ldr	r3, [pc, #532]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800407a:	2b08      	cmp	r3, #8
 800407c:	d112      	bne.n	80040a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800407e:	4b82      	ldr	r3, [pc, #520]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004086:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800408a:	d10b      	bne.n	80040a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800408c:	4b7e      	ldr	r3, [pc, #504]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d05b      	beq.n	8004150 <HAL_RCC_OscConfig+0x108>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d157      	bne.n	8004150 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e242      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ac:	d106      	bne.n	80040bc <HAL_RCC_OscConfig+0x74>
 80040ae:	4b76      	ldr	r3, [pc, #472]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a75      	ldr	r2, [pc, #468]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80040b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	e01d      	b.n	80040f8 <HAL_RCC_OscConfig+0xb0>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040c4:	d10c      	bne.n	80040e0 <HAL_RCC_OscConfig+0x98>
 80040c6:	4b70      	ldr	r3, [pc, #448]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a6f      	ldr	r2, [pc, #444]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80040cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	4b6d      	ldr	r3, [pc, #436]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a6c      	ldr	r2, [pc, #432]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80040d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	e00b      	b.n	80040f8 <HAL_RCC_OscConfig+0xb0>
 80040e0:	4b69      	ldr	r3, [pc, #420]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a68      	ldr	r2, [pc, #416]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80040e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	4b66      	ldr	r3, [pc, #408]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a65      	ldr	r2, [pc, #404]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80040f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d013      	beq.n	8004128 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004100:	f7ff f918 	bl	8003334 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004108:	f7ff f914 	bl	8003334 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b64      	cmp	r3, #100	; 0x64
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e207      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411a:	4b5b      	ldr	r3, [pc, #364]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f0      	beq.n	8004108 <HAL_RCC_OscConfig+0xc0>
 8004126:	e014      	b.n	8004152 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004128:	f7ff f904 	bl	8003334 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004130:	f7ff f900 	bl	8003334 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b64      	cmp	r3, #100	; 0x64
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e1f3      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004142:	4b51      	ldr	r3, [pc, #324]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f0      	bne.n	8004130 <HAL_RCC_OscConfig+0xe8>
 800414e:	e000      	b.n	8004152 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d063      	beq.n	8004226 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800415e:	4b4a      	ldr	r3, [pc, #296]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00b      	beq.n	8004182 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800416a:	4b47      	ldr	r3, [pc, #284]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004172:	2b08      	cmp	r3, #8
 8004174:	d11c      	bne.n	80041b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004176:	4b44      	ldr	r3, [pc, #272]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d116      	bne.n	80041b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004182:	4b41      	ldr	r3, [pc, #260]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <HAL_RCC_OscConfig+0x152>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d001      	beq.n	800419a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e1c7      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419a:	4b3b      	ldr	r3, [pc, #236]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	4937      	ldr	r1, [pc, #220]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ae:	e03a      	b.n	8004226 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d020      	beq.n	80041fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041b8:	4b34      	ldr	r3, [pc, #208]	; (800428c <HAL_RCC_OscConfig+0x244>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041be:	f7ff f8b9 	bl	8003334 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041c6:	f7ff f8b5 	bl	8003334 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e1a8      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d8:	4b2b      	ldr	r3, [pc, #172]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0f0      	beq.n	80041c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e4:	4b28      	ldr	r3, [pc, #160]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	4925      	ldr	r1, [pc, #148]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	600b      	str	r3, [r1, #0]
 80041f8:	e015      	b.n	8004226 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041fa:	4b24      	ldr	r3, [pc, #144]	; (800428c <HAL_RCC_OscConfig+0x244>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004200:	f7ff f898 	bl	8003334 <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004208:	f7ff f894 	bl	8003334 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e187      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800421a:	4b1b      	ldr	r3, [pc, #108]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f0      	bne.n	8004208 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d036      	beq.n	80042a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d016      	beq.n	8004268 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800423a:	4b15      	ldr	r3, [pc, #84]	; (8004290 <HAL_RCC_OscConfig+0x248>)
 800423c:	2201      	movs	r2, #1
 800423e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004240:	f7ff f878 	bl	8003334 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004248:	f7ff f874 	bl	8003334 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e167      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800425a:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <HAL_RCC_OscConfig+0x240>)
 800425c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0f0      	beq.n	8004248 <HAL_RCC_OscConfig+0x200>
 8004266:	e01b      	b.n	80042a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004268:	4b09      	ldr	r3, [pc, #36]	; (8004290 <HAL_RCC_OscConfig+0x248>)
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426e:	f7ff f861 	bl	8003334 <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004274:	e00e      	b.n	8004294 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004276:	f7ff f85d 	bl	8003334 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d907      	bls.n	8004294 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e150      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
 8004288:	40023800 	.word	0x40023800
 800428c:	42470000 	.word	0x42470000
 8004290:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004294:	4b88      	ldr	r3, [pc, #544]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 8004296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1ea      	bne.n	8004276 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 8097 	beq.w	80043dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ae:	2300      	movs	r3, #0
 80042b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042b2:	4b81      	ldr	r3, [pc, #516]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10f      	bne.n	80042de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042be:	2300      	movs	r3, #0
 80042c0:	60bb      	str	r3, [r7, #8]
 80042c2:	4b7d      	ldr	r3, [pc, #500]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	4a7c      	ldr	r2, [pc, #496]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 80042c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042cc:	6413      	str	r3, [r2, #64]	; 0x40
 80042ce:	4b7a      	ldr	r3, [pc, #488]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d6:	60bb      	str	r3, [r7, #8]
 80042d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042da:	2301      	movs	r3, #1
 80042dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042de:	4b77      	ldr	r3, [pc, #476]	; (80044bc <HAL_RCC_OscConfig+0x474>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d118      	bne.n	800431c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042ea:	4b74      	ldr	r3, [pc, #464]	; (80044bc <HAL_RCC_OscConfig+0x474>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a73      	ldr	r2, [pc, #460]	; (80044bc <HAL_RCC_OscConfig+0x474>)
 80042f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042f6:	f7ff f81d 	bl	8003334 <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042fe:	f7ff f819 	bl	8003334 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e10c      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004310:	4b6a      	ldr	r3, [pc, #424]	; (80044bc <HAL_RCC_OscConfig+0x474>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0f0      	beq.n	80042fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d106      	bne.n	8004332 <HAL_RCC_OscConfig+0x2ea>
 8004324:	4b64      	ldr	r3, [pc, #400]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	4a63      	ldr	r2, [pc, #396]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 800432a:	f043 0301 	orr.w	r3, r3, #1
 800432e:	6713      	str	r3, [r2, #112]	; 0x70
 8004330:	e01c      	b.n	800436c <HAL_RCC_OscConfig+0x324>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	2b05      	cmp	r3, #5
 8004338:	d10c      	bne.n	8004354 <HAL_RCC_OscConfig+0x30c>
 800433a:	4b5f      	ldr	r3, [pc, #380]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 800433c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433e:	4a5e      	ldr	r2, [pc, #376]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 8004340:	f043 0304 	orr.w	r3, r3, #4
 8004344:	6713      	str	r3, [r2, #112]	; 0x70
 8004346:	4b5c      	ldr	r3, [pc, #368]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 8004348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434a:	4a5b      	ldr	r2, [pc, #364]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 800434c:	f043 0301 	orr.w	r3, r3, #1
 8004350:	6713      	str	r3, [r2, #112]	; 0x70
 8004352:	e00b      	b.n	800436c <HAL_RCC_OscConfig+0x324>
 8004354:	4b58      	ldr	r3, [pc, #352]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 8004356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004358:	4a57      	ldr	r2, [pc, #348]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 800435a:	f023 0301 	bic.w	r3, r3, #1
 800435e:	6713      	str	r3, [r2, #112]	; 0x70
 8004360:	4b55      	ldr	r3, [pc, #340]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 8004362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004364:	4a54      	ldr	r2, [pc, #336]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 8004366:	f023 0304 	bic.w	r3, r3, #4
 800436a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d015      	beq.n	80043a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004374:	f7fe ffde 	bl	8003334 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800437a:	e00a      	b.n	8004392 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800437c:	f7fe ffda 	bl	8003334 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f241 3288 	movw	r2, #5000	; 0x1388
 800438a:	4293      	cmp	r3, r2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e0cb      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004392:	4b49      	ldr	r3, [pc, #292]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0ee      	beq.n	800437c <HAL_RCC_OscConfig+0x334>
 800439e:	e014      	b.n	80043ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a0:	f7fe ffc8 	bl	8003334 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043a6:	e00a      	b.n	80043be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043a8:	f7fe ffc4 	bl	8003334 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e0b5      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043be:	4b3e      	ldr	r3, [pc, #248]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1ee      	bne.n	80043a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043ca:	7dfb      	ldrb	r3, [r7, #23]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d105      	bne.n	80043dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d0:	4b39      	ldr	r3, [pc, #228]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	4a38      	ldr	r2, [pc, #224]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 80043d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 80a1 	beq.w	8004528 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043e6:	4b34      	ldr	r3, [pc, #208]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 030c 	and.w	r3, r3, #12
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d05c      	beq.n	80044ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d141      	bne.n	800447e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043fa:	4b31      	ldr	r3, [pc, #196]	; (80044c0 <HAL_RCC_OscConfig+0x478>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004400:	f7fe ff98 	bl	8003334 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004408:	f7fe ff94 	bl	8003334 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e087      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441a:	4b27      	ldr	r3, [pc, #156]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69da      	ldr	r2, [r3, #28]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	019b      	lsls	r3, r3, #6
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	085b      	lsrs	r3, r3, #1
 800443e:	3b01      	subs	r3, #1
 8004440:	041b      	lsls	r3, r3, #16
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	061b      	lsls	r3, r3, #24
 800444a:	491b      	ldr	r1, [pc, #108]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 800444c:	4313      	orrs	r3, r2
 800444e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004450:	4b1b      	ldr	r3, [pc, #108]	; (80044c0 <HAL_RCC_OscConfig+0x478>)
 8004452:	2201      	movs	r2, #1
 8004454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004456:	f7fe ff6d 	bl	8003334 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800445e:	f7fe ff69 	bl	8003334 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e05c      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004470:	4b11      	ldr	r3, [pc, #68]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f0      	beq.n	800445e <HAL_RCC_OscConfig+0x416>
 800447c:	e054      	b.n	8004528 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800447e:	4b10      	ldr	r3, [pc, #64]	; (80044c0 <HAL_RCC_OscConfig+0x478>)
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004484:	f7fe ff56 	bl	8003334 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800448c:	f7fe ff52 	bl	8003334 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e045      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449e:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <HAL_RCC_OscConfig+0x470>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0x444>
 80044aa:	e03d      	b.n	8004528 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d107      	bne.n	80044c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e038      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
 80044b8:	40023800 	.word	0x40023800
 80044bc:	40007000 	.word	0x40007000
 80044c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044c4:	4b1b      	ldr	r3, [pc, #108]	; (8004534 <HAL_RCC_OscConfig+0x4ec>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d028      	beq.n	8004524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044dc:	429a      	cmp	r2, r3
 80044de:	d121      	bne.n	8004524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d11a      	bne.n	8004524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044f4:	4013      	ands	r3, r2
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d111      	bne.n	8004524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450a:	085b      	lsrs	r3, r3, #1
 800450c:	3b01      	subs	r3, #1
 800450e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004510:	429a      	cmp	r2, r3
 8004512:	d107      	bne.n	8004524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004520:	429a      	cmp	r2, r3
 8004522:	d001      	beq.n	8004528 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40023800 	.word	0x40023800

08004538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e0cc      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800454c:	4b68      	ldr	r3, [pc, #416]	; (80046f0 <HAL_RCC_ClockConfig+0x1b8>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d90c      	bls.n	8004574 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455a:	4b65      	ldr	r3, [pc, #404]	; (80046f0 <HAL_RCC_ClockConfig+0x1b8>)
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004562:	4b63      	ldr	r3, [pc, #396]	; (80046f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0307 	and.w	r3, r3, #7
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d001      	beq.n	8004574 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e0b8      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d020      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	d005      	beq.n	8004598 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800458c:	4b59      	ldr	r3, [pc, #356]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	4a58      	ldr	r2, [pc, #352]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004596:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0308 	and.w	r3, r3, #8
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d005      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045a4:	4b53      	ldr	r3, [pc, #332]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	4a52      	ldr	r2, [pc, #328]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b0:	4b50      	ldr	r3, [pc, #320]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	494d      	ldr	r1, [pc, #308]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d044      	beq.n	8004658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d107      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d6:	4b47      	ldr	r3, [pc, #284]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d119      	bne.n	8004616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e07f      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d003      	beq.n	80045f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045f2:	2b03      	cmp	r3, #3
 80045f4:	d107      	bne.n	8004606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f6:	4b3f      	ldr	r3, [pc, #252]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d109      	bne.n	8004616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e06f      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004606:	4b3b      	ldr	r3, [pc, #236]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e067      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004616:	4b37      	ldr	r3, [pc, #220]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f023 0203 	bic.w	r2, r3, #3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	4934      	ldr	r1, [pc, #208]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004624:	4313      	orrs	r3, r2
 8004626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004628:	f7fe fe84 	bl	8003334 <HAL_GetTick>
 800462c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462e:	e00a      	b.n	8004646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004630:	f7fe fe80 	bl	8003334 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	f241 3288 	movw	r2, #5000	; 0x1388
 800463e:	4293      	cmp	r3, r2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e04f      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004646:	4b2b      	ldr	r3, [pc, #172]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 020c 	and.w	r2, r3, #12
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	429a      	cmp	r2, r3
 8004656:	d1eb      	bne.n	8004630 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004658:	4b25      	ldr	r3, [pc, #148]	; (80046f0 <HAL_RCC_ClockConfig+0x1b8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d20c      	bcs.n	8004680 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004666:	4b22      	ldr	r3, [pc, #136]	; (80046f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800466e:	4b20      	ldr	r3, [pc, #128]	; (80046f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	429a      	cmp	r2, r3
 800467a:	d001      	beq.n	8004680 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e032      	b.n	80046e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d008      	beq.n	800469e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800468c:	4b19      	ldr	r3, [pc, #100]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	4916      	ldr	r1, [pc, #88]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 800469a:	4313      	orrs	r3, r2
 800469c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d009      	beq.n	80046be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046aa:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	490e      	ldr	r1, [pc, #56]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046be:	f000 f821 	bl	8004704 <HAL_RCC_GetSysClockFreq>
 80046c2:	4602      	mov	r2, r0
 80046c4:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	091b      	lsrs	r3, r3, #4
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	490a      	ldr	r1, [pc, #40]	; (80046f8 <HAL_RCC_ClockConfig+0x1c0>)
 80046d0:	5ccb      	ldrb	r3, [r1, r3]
 80046d2:	fa22 f303 	lsr.w	r3, r2, r3
 80046d6:	4a09      	ldr	r2, [pc, #36]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 80046d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046da:	4b09      	ldr	r3, [pc, #36]	; (8004700 <HAL_RCC_ClockConfig+0x1c8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fe fde4 	bl	80032ac <HAL_InitTick>

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40023c00 	.word	0x40023c00
 80046f4:	40023800 	.word	0x40023800
 80046f8:	0800b6d4 	.word	0x0800b6d4
 80046fc:	20000000 	.word	0x20000000
 8004700:	20000004 	.word	0x20000004

08004704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004708:	b094      	sub	sp, #80	; 0x50
 800470a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	647b      	str	r3, [r7, #68]	; 0x44
 8004710:	2300      	movs	r3, #0
 8004712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004714:	2300      	movs	r3, #0
 8004716:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800471c:	4b79      	ldr	r3, [pc, #484]	; (8004904 <HAL_RCC_GetSysClockFreq+0x200>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 030c 	and.w	r3, r3, #12
 8004724:	2b08      	cmp	r3, #8
 8004726:	d00d      	beq.n	8004744 <HAL_RCC_GetSysClockFreq+0x40>
 8004728:	2b08      	cmp	r3, #8
 800472a:	f200 80e1 	bhi.w	80048f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <HAL_RCC_GetSysClockFreq+0x34>
 8004732:	2b04      	cmp	r3, #4
 8004734:	d003      	beq.n	800473e <HAL_RCC_GetSysClockFreq+0x3a>
 8004736:	e0db      	b.n	80048f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004738:	4b73      	ldr	r3, [pc, #460]	; (8004908 <HAL_RCC_GetSysClockFreq+0x204>)
 800473a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800473c:	e0db      	b.n	80048f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800473e:	4b73      	ldr	r3, [pc, #460]	; (800490c <HAL_RCC_GetSysClockFreq+0x208>)
 8004740:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004742:	e0d8      	b.n	80048f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004744:	4b6f      	ldr	r3, [pc, #444]	; (8004904 <HAL_RCC_GetSysClockFreq+0x200>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800474c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800474e:	4b6d      	ldr	r3, [pc, #436]	; (8004904 <HAL_RCC_GetSysClockFreq+0x200>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d063      	beq.n	8004822 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800475a:	4b6a      	ldr	r3, [pc, #424]	; (8004904 <HAL_RCC_GetSysClockFreq+0x200>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	099b      	lsrs	r3, r3, #6
 8004760:	2200      	movs	r2, #0
 8004762:	63bb      	str	r3, [r7, #56]	; 0x38
 8004764:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476c:	633b      	str	r3, [r7, #48]	; 0x30
 800476e:	2300      	movs	r3, #0
 8004770:	637b      	str	r3, [r7, #52]	; 0x34
 8004772:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004776:	4622      	mov	r2, r4
 8004778:	462b      	mov	r3, r5
 800477a:	f04f 0000 	mov.w	r0, #0
 800477e:	f04f 0100 	mov.w	r1, #0
 8004782:	0159      	lsls	r1, r3, #5
 8004784:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004788:	0150      	lsls	r0, r2, #5
 800478a:	4602      	mov	r2, r0
 800478c:	460b      	mov	r3, r1
 800478e:	4621      	mov	r1, r4
 8004790:	1a51      	subs	r1, r2, r1
 8004792:	6139      	str	r1, [r7, #16]
 8004794:	4629      	mov	r1, r5
 8004796:	eb63 0301 	sbc.w	r3, r3, r1
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047a8:	4659      	mov	r1, fp
 80047aa:	018b      	lsls	r3, r1, #6
 80047ac:	4651      	mov	r1, sl
 80047ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047b2:	4651      	mov	r1, sl
 80047b4:	018a      	lsls	r2, r1, #6
 80047b6:	4651      	mov	r1, sl
 80047b8:	ebb2 0801 	subs.w	r8, r2, r1
 80047bc:	4659      	mov	r1, fp
 80047be:	eb63 0901 	sbc.w	r9, r3, r1
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047d6:	4690      	mov	r8, r2
 80047d8:	4699      	mov	r9, r3
 80047da:	4623      	mov	r3, r4
 80047dc:	eb18 0303 	adds.w	r3, r8, r3
 80047e0:	60bb      	str	r3, [r7, #8]
 80047e2:	462b      	mov	r3, r5
 80047e4:	eb49 0303 	adc.w	r3, r9, r3
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047f6:	4629      	mov	r1, r5
 80047f8:	024b      	lsls	r3, r1, #9
 80047fa:	4621      	mov	r1, r4
 80047fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004800:	4621      	mov	r1, r4
 8004802:	024a      	lsls	r2, r1, #9
 8004804:	4610      	mov	r0, r2
 8004806:	4619      	mov	r1, r3
 8004808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800480a:	2200      	movs	r2, #0
 800480c:	62bb      	str	r3, [r7, #40]	; 0x28
 800480e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004810:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004814:	f7fb fd3c 	bl	8000290 <__aeabi_uldivmod>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4613      	mov	r3, r2
 800481e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004820:	e058      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004822:	4b38      	ldr	r3, [pc, #224]	; (8004904 <HAL_RCC_GetSysClockFreq+0x200>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	099b      	lsrs	r3, r3, #6
 8004828:	2200      	movs	r2, #0
 800482a:	4618      	mov	r0, r3
 800482c:	4611      	mov	r1, r2
 800482e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004832:	623b      	str	r3, [r7, #32]
 8004834:	2300      	movs	r3, #0
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
 8004838:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800483c:	4642      	mov	r2, r8
 800483e:	464b      	mov	r3, r9
 8004840:	f04f 0000 	mov.w	r0, #0
 8004844:	f04f 0100 	mov.w	r1, #0
 8004848:	0159      	lsls	r1, r3, #5
 800484a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800484e:	0150      	lsls	r0, r2, #5
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4641      	mov	r1, r8
 8004856:	ebb2 0a01 	subs.w	sl, r2, r1
 800485a:	4649      	mov	r1, r9
 800485c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800486c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004870:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004874:	ebb2 040a 	subs.w	r4, r2, sl
 8004878:	eb63 050b 	sbc.w	r5, r3, fp
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	00eb      	lsls	r3, r5, #3
 8004886:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800488a:	00e2      	lsls	r2, r4, #3
 800488c:	4614      	mov	r4, r2
 800488e:	461d      	mov	r5, r3
 8004890:	4643      	mov	r3, r8
 8004892:	18e3      	adds	r3, r4, r3
 8004894:	603b      	str	r3, [r7, #0]
 8004896:	464b      	mov	r3, r9
 8004898:	eb45 0303 	adc.w	r3, r5, r3
 800489c:	607b      	str	r3, [r7, #4]
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048aa:	4629      	mov	r1, r5
 80048ac:	028b      	lsls	r3, r1, #10
 80048ae:	4621      	mov	r1, r4
 80048b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048b4:	4621      	mov	r1, r4
 80048b6:	028a      	lsls	r2, r1, #10
 80048b8:	4610      	mov	r0, r2
 80048ba:	4619      	mov	r1, r3
 80048bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048be:	2200      	movs	r2, #0
 80048c0:	61bb      	str	r3, [r7, #24]
 80048c2:	61fa      	str	r2, [r7, #28]
 80048c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048c8:	f7fb fce2 	bl	8000290 <__aeabi_uldivmod>
 80048cc:	4602      	mov	r2, r0
 80048ce:	460b      	mov	r3, r1
 80048d0:	4613      	mov	r3, r2
 80048d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048d4:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	0c1b      	lsrs	r3, r3, #16
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	3301      	adds	r3, #1
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80048e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048ee:	e002      	b.n	80048f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048f0:	4b05      	ldr	r3, [pc, #20]	; (8004908 <HAL_RCC_GetSysClockFreq+0x204>)
 80048f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3750      	adds	r7, #80	; 0x50
 80048fc:	46bd      	mov	sp, r7
 80048fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004902:	bf00      	nop
 8004904:	40023800 	.word	0x40023800
 8004908:	00f42400 	.word	0x00f42400
 800490c:	007a1200 	.word	0x007a1200

08004910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004914:	4b03      	ldr	r3, [pc, #12]	; (8004924 <HAL_RCC_GetHCLKFreq+0x14>)
 8004916:	681b      	ldr	r3, [r3, #0]
}
 8004918:	4618      	mov	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	20000000 	.word	0x20000000

08004928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800492c:	f7ff fff0 	bl	8004910 <HAL_RCC_GetHCLKFreq>
 8004930:	4602      	mov	r2, r0
 8004932:	4b05      	ldr	r3, [pc, #20]	; (8004948 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	0a9b      	lsrs	r3, r3, #10
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	4903      	ldr	r1, [pc, #12]	; (800494c <HAL_RCC_GetPCLK1Freq+0x24>)
 800493e:	5ccb      	ldrb	r3, [r1, r3]
 8004940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004944:	4618      	mov	r0, r3
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40023800 	.word	0x40023800
 800494c:	0800b6e4 	.word	0x0800b6e4

08004950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004954:	f7ff ffdc 	bl	8004910 <HAL_RCC_GetHCLKFreq>
 8004958:	4602      	mov	r2, r0
 800495a:	4b05      	ldr	r3, [pc, #20]	; (8004970 <HAL_RCC_GetPCLK2Freq+0x20>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	0b5b      	lsrs	r3, r3, #13
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	4903      	ldr	r1, [pc, #12]	; (8004974 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004966:	5ccb      	ldrb	r3, [r1, r3]
 8004968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800496c:	4618      	mov	r0, r3
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40023800 	.word	0x40023800
 8004974:	0800b6e4 	.word	0x0800b6e4

08004978 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e07b      	b.n	8004a82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	2b00      	cmp	r3, #0
 8004990:	d108      	bne.n	80049a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800499a:	d009      	beq.n	80049b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	61da      	str	r2, [r3, #28]
 80049a2:	e005      	b.n	80049b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d106      	bne.n	80049d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7fd fafc 	bl	8001fc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a34:	ea42 0103 	orr.w	r1, r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	0c1b      	lsrs	r3, r3, #16
 8004a4e:	f003 0104 	and.w	r1, r3, #4
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	f003 0210 	and.w	r2, r3, #16
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	69da      	ldr	r2, [r3, #28]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b088      	sub	sp, #32
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	603b      	str	r3, [r7, #0]
 8004a96:	4613      	mov	r3, r2
 8004a98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_SPI_Transmit+0x22>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e126      	b.n	8004cfa <HAL_SPI_Transmit+0x270>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ab4:	f7fe fc3e 	bl	8003334 <HAL_GetTick>
 8004ab8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004aba:	88fb      	ldrh	r3, [r7, #6]
 8004abc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d002      	beq.n	8004ad0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004aca:	2302      	movs	r3, #2
 8004acc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ace:	e10b      	b.n	8004ce8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d002      	beq.n	8004adc <HAL_SPI_Transmit+0x52>
 8004ad6:	88fb      	ldrh	r3, [r7, #6]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d102      	bne.n	8004ae2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ae0:	e102      	b.n	8004ce8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2203      	movs	r2, #3
 8004ae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	88fa      	ldrh	r2, [r7, #6]
 8004afa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	88fa      	ldrh	r2, [r7, #6]
 8004b00:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b28:	d10f      	bne.n	8004b4a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b54:	2b40      	cmp	r3, #64	; 0x40
 8004b56:	d007      	beq.n	8004b68 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b70:	d14b      	bne.n	8004c0a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <HAL_SPI_Transmit+0xf6>
 8004b7a:	8afb      	ldrh	r3, [r7, #22]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d13e      	bne.n	8004bfe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	881a      	ldrh	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	1c9a      	adds	r2, r3, #2
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ba4:	e02b      	b.n	8004bfe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d112      	bne.n	8004bda <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb8:	881a      	ldrh	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc4:	1c9a      	adds	r2, r3, #2
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bd8:	e011      	b.n	8004bfe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bda:	f7fe fbab 	bl	8003334 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d803      	bhi.n	8004bf2 <HAL_SPI_Transmit+0x168>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf0:	d102      	bne.n	8004bf8 <HAL_SPI_Transmit+0x16e>
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d102      	bne.n	8004bfe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bfc:	e074      	b.n	8004ce8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1ce      	bne.n	8004ba6 <HAL_SPI_Transmit+0x11c>
 8004c08:	e04c      	b.n	8004ca4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <HAL_SPI_Transmit+0x18e>
 8004c12:	8afb      	ldrh	r3, [r7, #22]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d140      	bne.n	8004c9a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	330c      	adds	r3, #12
 8004c22:	7812      	ldrb	r2, [r2, #0]
 8004c24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c3e:	e02c      	b.n	8004c9a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d113      	bne.n	8004c76 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	330c      	adds	r3, #12
 8004c58:	7812      	ldrb	r2, [r2, #0]
 8004c5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c74:	e011      	b.n	8004c9a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c76:	f7fe fb5d 	bl	8003334 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d803      	bhi.n	8004c8e <HAL_SPI_Transmit+0x204>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d102      	bne.n	8004c94 <HAL_SPI_Transmit+0x20a>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d102      	bne.n	8004c9a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c98:	e026      	b.n	8004ce8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1cd      	bne.n	8004c40 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	6839      	ldr	r1, [r7, #0]
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 fa55 	bl	8005158 <SPI_EndRxTxTransaction>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10a      	bne.n	8004cd8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	613b      	str	r3, [r7, #16]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	77fb      	strb	r3, [r7, #31]
 8004ce4:	e000      	b.n	8004ce8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004ce6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cf8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3720      	adds	r7, #32
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b08c      	sub	sp, #48	; 0x30
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
 8004d0e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d10:	2301      	movs	r3, #1
 8004d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d101      	bne.n	8004d28 <HAL_SPI_TransmitReceive+0x26>
 8004d24:	2302      	movs	r3, #2
 8004d26:	e18a      	b.n	800503e <HAL_SPI_TransmitReceive+0x33c>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d30:	f7fe fb00 	bl	8003334 <HAL_GetTick>
 8004d34:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004d46:	887b      	ldrh	r3, [r7, #2]
 8004d48:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d00f      	beq.n	8004d72 <HAL_SPI_TransmitReceive+0x70>
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d58:	d107      	bne.n	8004d6a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d103      	bne.n	8004d6a <HAL_SPI_TransmitReceive+0x68>
 8004d62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d003      	beq.n	8004d72 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d70:	e15b      	b.n	800502a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d005      	beq.n	8004d84 <HAL_SPI_TransmitReceive+0x82>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <HAL_SPI_TransmitReceive+0x82>
 8004d7e:	887b      	ldrh	r3, [r7, #2]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d103      	bne.n	8004d8c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d8a:	e14e      	b.n	800502a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d003      	beq.n	8004da0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2205      	movs	r2, #5
 8004d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	887a      	ldrh	r2, [r7, #2]
 8004db0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	887a      	ldrh	r2, [r7, #2]
 8004db6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	887a      	ldrh	r2, [r7, #2]
 8004dc2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	887a      	ldrh	r2, [r7, #2]
 8004dc8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de0:	2b40      	cmp	r3, #64	; 0x40
 8004de2:	d007      	beq.n	8004df4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004df2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dfc:	d178      	bne.n	8004ef0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_SPI_TransmitReceive+0x10a>
 8004e06:	8b7b      	ldrh	r3, [r7, #26]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d166      	bne.n	8004eda <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e10:	881a      	ldrh	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1c:	1c9a      	adds	r2, r3, #2
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e30:	e053      	b.n	8004eda <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d11b      	bne.n	8004e78 <HAL_SPI_TransmitReceive+0x176>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d016      	beq.n	8004e78 <HAL_SPI_TransmitReceive+0x176>
 8004e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d113      	bne.n	8004e78 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e54:	881a      	ldrh	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e60:	1c9a      	adds	r2, r3, #2
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d119      	bne.n	8004eba <HAL_SPI_TransmitReceive+0x1b8>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d014      	beq.n	8004eba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9a:	b292      	uxth	r2, r2
 8004e9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea2:	1c9a      	adds	r2, r3, #2
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004eba:	f7fe fa3b 	bl	8003334 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d807      	bhi.n	8004eda <HAL_SPI_TransmitReceive+0x1d8>
 8004eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed0:	d003      	beq.n	8004eda <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ed8:	e0a7      	b.n	800502a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1a6      	bne.n	8004e32 <HAL_SPI_TransmitReceive+0x130>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1a1      	bne.n	8004e32 <HAL_SPI_TransmitReceive+0x130>
 8004eee:	e07c      	b.n	8004fea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <HAL_SPI_TransmitReceive+0x1fc>
 8004ef8:	8b7b      	ldrh	r3, [r7, #26]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d16b      	bne.n	8004fd6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	330c      	adds	r3, #12
 8004f08:	7812      	ldrb	r2, [r2, #0]
 8004f0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f24:	e057      	b.n	8004fd6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d11c      	bne.n	8004f6e <HAL_SPI_TransmitReceive+0x26c>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d017      	beq.n	8004f6e <HAL_SPI_TransmitReceive+0x26c>
 8004f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d114      	bne.n	8004f6e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	330c      	adds	r3, #12
 8004f4e:	7812      	ldrb	r2, [r2, #0]
 8004f50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d119      	bne.n	8004fb0 <HAL_SPI_TransmitReceive+0x2ae>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d014      	beq.n	8004fb0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fac:	2301      	movs	r3, #1
 8004fae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004fb0:	f7fe f9c0 	bl	8003334 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d803      	bhi.n	8004fc8 <HAL_SPI_TransmitReceive+0x2c6>
 8004fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc6:	d102      	bne.n	8004fce <HAL_SPI_TransmitReceive+0x2cc>
 8004fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d103      	bne.n	8004fd6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004fd4:	e029      	b.n	800502a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1a2      	bne.n	8004f26 <HAL_SPI_TransmitReceive+0x224>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d19d      	bne.n	8004f26 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 f8b2 	bl	8005158 <SPI_EndRxTxTransaction>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d006      	beq.n	8005008 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2220      	movs	r2, #32
 8005004:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005006:	e010      	b.n	800502a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10b      	bne.n	8005028 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005010:	2300      	movs	r3, #0
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	e000      	b.n	800502a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005028:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800503a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800503e:	4618      	mov	r0, r3
 8005040:	3730      	adds	r7, #48	; 0x30
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	603b      	str	r3, [r7, #0]
 8005054:	4613      	mov	r3, r2
 8005056:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005058:	f7fe f96c 	bl	8003334 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005060:	1a9b      	subs	r3, r3, r2
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	4413      	add	r3, r2
 8005066:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005068:	f7fe f964 	bl	8003334 <HAL_GetTick>
 800506c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800506e:	4b39      	ldr	r3, [pc, #228]	; (8005154 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	015b      	lsls	r3, r3, #5
 8005074:	0d1b      	lsrs	r3, r3, #20
 8005076:	69fa      	ldr	r2, [r7, #28]
 8005078:	fb02 f303 	mul.w	r3, r2, r3
 800507c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800507e:	e054      	b.n	800512a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005086:	d050      	beq.n	800512a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005088:	f7fe f954 	bl	8003334 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	69fa      	ldr	r2, [r7, #28]
 8005094:	429a      	cmp	r2, r3
 8005096:	d902      	bls.n	800509e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d13d      	bne.n	800511a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050b6:	d111      	bne.n	80050dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c0:	d004      	beq.n	80050cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ca:	d107      	bne.n	80050dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050e4:	d10f      	bne.n	8005106 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005104:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e017      	b.n	800514a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	3b01      	subs	r3, #1
 8005128:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	4013      	ands	r3, r2
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	429a      	cmp	r2, r3
 8005138:	bf0c      	ite	eq
 800513a:	2301      	moveq	r3, #1
 800513c:	2300      	movne	r3, #0
 800513e:	b2db      	uxtb	r3, r3
 8005140:	461a      	mov	r2, r3
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	429a      	cmp	r2, r3
 8005146:	d19b      	bne.n	8005080 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3720      	adds	r7, #32
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	20000000 	.word	0x20000000

08005158 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b088      	sub	sp, #32
 800515c:	af02      	add	r7, sp, #8
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005164:	4b1b      	ldr	r3, [pc, #108]	; (80051d4 <SPI_EndRxTxTransaction+0x7c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a1b      	ldr	r2, [pc, #108]	; (80051d8 <SPI_EndRxTxTransaction+0x80>)
 800516a:	fba2 2303 	umull	r2, r3, r2, r3
 800516e:	0d5b      	lsrs	r3, r3, #21
 8005170:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005174:	fb02 f303 	mul.w	r3, r2, r3
 8005178:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005182:	d112      	bne.n	80051aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2200      	movs	r2, #0
 800518c:	2180      	movs	r1, #128	; 0x80
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f7ff ff5a 	bl	8005048 <SPI_WaitFlagStateUntilTimeout>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d016      	beq.n	80051c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519e:	f043 0220 	orr.w	r2, r3, #32
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e00f      	b.n	80051ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c0:	2b80      	cmp	r3, #128	; 0x80
 80051c2:	d0f2      	beq.n	80051aa <SPI_EndRxTxTransaction+0x52>
 80051c4:	e000      	b.n	80051c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80051c6:	bf00      	nop
  }

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	20000000 	.word	0x20000000
 80051d8:	165e9f81 	.word	0x165e9f81

080051dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e041      	b.n	8005272 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7fc ff5e 	bl	80020c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3304      	adds	r3, #4
 8005218:	4619      	mov	r1, r3
 800521a:	4610      	mov	r0, r2
 800521c:	f000 fd60 	bl	8005ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b082      	sub	sp, #8
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e041      	b.n	8005310 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d106      	bne.n	80052a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f839 	bl	8005318 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2202      	movs	r2, #2
 80052aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	3304      	adds	r3, #4
 80052b6:	4619      	mov	r1, r3
 80052b8:	4610      	mov	r0, r2
 80052ba:	f000 fd11 	bl	8005ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d109      	bne.n	8005358 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	bf0c      	ite	eq
 8005350:	2301      	moveq	r3, #1
 8005352:	2300      	movne	r3, #0
 8005354:	b2db      	uxtb	r3, r3
 8005356:	e022      	b.n	800539e <HAL_TIM_PWM_Start_DMA+0x72>
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b04      	cmp	r3, #4
 800535c:	d109      	bne.n	8005372 <HAL_TIM_PWM_Start_DMA+0x46>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	bf0c      	ite	eq
 800536a:	2301      	moveq	r3, #1
 800536c:	2300      	movne	r3, #0
 800536e:	b2db      	uxtb	r3, r3
 8005370:	e015      	b.n	800539e <HAL_TIM_PWM_Start_DMA+0x72>
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2b08      	cmp	r3, #8
 8005376:	d109      	bne.n	800538c <HAL_TIM_PWM_Start_DMA+0x60>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	bf0c      	ite	eq
 8005384:	2301      	moveq	r3, #1
 8005386:	2300      	movne	r3, #0
 8005388:	b2db      	uxtb	r3, r3
 800538a:	e008      	b.n	800539e <HAL_TIM_PWM_Start_DMA+0x72>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	bf0c      	ite	eq
 8005398:	2301      	moveq	r3, #1
 800539a:	2300      	movne	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80053a2:	2302      	movs	r3, #2
 80053a4:	e15d      	b.n	8005662 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d109      	bne.n	80053c0 <HAL_TIM_PWM_Start_DMA+0x94>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	bf0c      	ite	eq
 80053b8:	2301      	moveq	r3, #1
 80053ba:	2300      	movne	r3, #0
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	e022      	b.n	8005406 <HAL_TIM_PWM_Start_DMA+0xda>
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d109      	bne.n	80053da <HAL_TIM_PWM_Start_DMA+0xae>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	bf0c      	ite	eq
 80053d2:	2301      	moveq	r3, #1
 80053d4:	2300      	movne	r3, #0
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	e015      	b.n	8005406 <HAL_TIM_PWM_Start_DMA+0xda>
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d109      	bne.n	80053f4 <HAL_TIM_PWM_Start_DMA+0xc8>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	bf0c      	ite	eq
 80053ec:	2301      	moveq	r3, #1
 80053ee:	2300      	movne	r3, #0
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	e008      	b.n	8005406 <HAL_TIM_PWM_Start_DMA+0xda>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	bf0c      	ite	eq
 8005400:	2301      	moveq	r3, #1
 8005402:	2300      	movne	r3, #0
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d024      	beq.n	8005454 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d104      	bne.n	800541a <HAL_TIM_PWM_Start_DMA+0xee>
 8005410:	887b      	ldrh	r3, [r7, #2]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e123      	b.n	8005662 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d104      	bne.n	800542a <HAL_TIM_PWM_Start_DMA+0xfe>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2202      	movs	r2, #2
 8005424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005428:	e016      	b.n	8005458 <HAL_TIM_PWM_Start_DMA+0x12c>
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2b04      	cmp	r3, #4
 800542e:	d104      	bne.n	800543a <HAL_TIM_PWM_Start_DMA+0x10e>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005438:	e00e      	b.n	8005458 <HAL_TIM_PWM_Start_DMA+0x12c>
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2b08      	cmp	r3, #8
 800543e:	d104      	bne.n	800544a <HAL_TIM_PWM_Start_DMA+0x11e>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005448:	e006      	b.n	8005458 <HAL_TIM_PWM_Start_DMA+0x12c>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2202      	movs	r2, #2
 800544e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005452:	e001      	b.n	8005458 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e104      	b.n	8005662 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b0c      	cmp	r3, #12
 800545c:	f200 80ae 	bhi.w	80055bc <HAL_TIM_PWM_Start_DMA+0x290>
 8005460:	a201      	add	r2, pc, #4	; (adr r2, 8005468 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005466:	bf00      	nop
 8005468:	0800549d 	.word	0x0800549d
 800546c:	080055bd 	.word	0x080055bd
 8005470:	080055bd 	.word	0x080055bd
 8005474:	080055bd 	.word	0x080055bd
 8005478:	080054e5 	.word	0x080054e5
 800547c:	080055bd 	.word	0x080055bd
 8005480:	080055bd 	.word	0x080055bd
 8005484:	080055bd 	.word	0x080055bd
 8005488:	0800552d 	.word	0x0800552d
 800548c:	080055bd 	.word	0x080055bd
 8005490:	080055bd 	.word	0x080055bd
 8005494:	080055bd 	.word	0x080055bd
 8005498:	08005575 	.word	0x08005575
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	4a72      	ldr	r2, [pc, #456]	; (800566c <HAL_TIM_PWM_Start_DMA+0x340>)
 80054a2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	4a71      	ldr	r2, [pc, #452]	; (8005670 <HAL_TIM_PWM_Start_DMA+0x344>)
 80054aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	4a70      	ldr	r2, [pc, #448]	; (8005674 <HAL_TIM_PWM_Start_DMA+0x348>)
 80054b2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3334      	adds	r3, #52	; 0x34
 80054c0:	461a      	mov	r2, r3
 80054c2:	887b      	ldrh	r3, [r7, #2]
 80054c4:	f7fe f926 	bl	8003714 <HAL_DMA_Start_IT>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e0c7      	b.n	8005662 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e0:	60da      	str	r2, [r3, #12]
      break;
 80054e2:	e06e      	b.n	80055c2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e8:	4a60      	ldr	r2, [pc, #384]	; (800566c <HAL_TIM_PWM_Start_DMA+0x340>)
 80054ea:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f0:	4a5f      	ldr	r2, [pc, #380]	; (8005670 <HAL_TIM_PWM_Start_DMA+0x344>)
 80054f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f8:	4a5e      	ldr	r2, [pc, #376]	; (8005674 <HAL_TIM_PWM_Start_DMA+0x348>)
 80054fa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005500:	6879      	ldr	r1, [r7, #4]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	3338      	adds	r3, #56	; 0x38
 8005508:	461a      	mov	r2, r3
 800550a:	887b      	ldrh	r3, [r7, #2]
 800550c:	f7fe f902 	bl	8003714 <HAL_DMA_Start_IT>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e0a3      	b.n	8005662 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005528:	60da      	str	r2, [r3, #12]
      break;
 800552a:	e04a      	b.n	80055c2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	4a4e      	ldr	r2, [pc, #312]	; (800566c <HAL_TIM_PWM_Start_DMA+0x340>)
 8005532:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005538:	4a4d      	ldr	r2, [pc, #308]	; (8005670 <HAL_TIM_PWM_Start_DMA+0x344>)
 800553a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	4a4c      	ldr	r2, [pc, #304]	; (8005674 <HAL_TIM_PWM_Start_DMA+0x348>)
 8005542:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	333c      	adds	r3, #60	; 0x3c
 8005550:	461a      	mov	r2, r3
 8005552:	887b      	ldrh	r3, [r7, #2]
 8005554:	f7fe f8de 	bl	8003714 <HAL_DMA_Start_IT>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e07f      	b.n	8005662 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005570:	60da      	str	r2, [r3, #12]
      break;
 8005572:	e026      	b.n	80055c2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005578:	4a3c      	ldr	r2, [pc, #240]	; (800566c <HAL_TIM_PWM_Start_DMA+0x340>)
 800557a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005580:	4a3b      	ldr	r2, [pc, #236]	; (8005670 <HAL_TIM_PWM_Start_DMA+0x344>)
 8005582:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005588:	4a3a      	ldr	r2, [pc, #232]	; (8005674 <HAL_TIM_PWM_Start_DMA+0x348>)
 800558a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005590:	6879      	ldr	r1, [r7, #4]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3340      	adds	r3, #64	; 0x40
 8005598:	461a      	mov	r2, r3
 800559a:	887b      	ldrh	r3, [r7, #2]
 800559c:	f7fe f8ba 	bl	8003714 <HAL_DMA_Start_IT>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e05b      	b.n	8005662 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055b8:	60da      	str	r2, [r3, #12]
      break;
 80055ba:	e002      	b.n	80055c2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	75fb      	strb	r3, [r7, #23]
      break;
 80055c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80055c2:	7dfb      	ldrb	r3, [r7, #23]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d14b      	bne.n	8005660 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2201      	movs	r2, #1
 80055ce:	68b9      	ldr	r1, [r7, #8]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f000 fe2b 	bl	800622c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a27      	ldr	r2, [pc, #156]	; (8005678 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d107      	bne.n	80055f0 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055ee:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a20      	ldr	r2, [pc, #128]	; (8005678 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d018      	beq.n	800562c <HAL_TIM_PWM_Start_DMA+0x300>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005602:	d013      	beq.n	800562c <HAL_TIM_PWM_Start_DMA+0x300>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a1c      	ldr	r2, [pc, #112]	; (800567c <HAL_TIM_PWM_Start_DMA+0x350>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d00e      	beq.n	800562c <HAL_TIM_PWM_Start_DMA+0x300>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a1b      	ldr	r2, [pc, #108]	; (8005680 <HAL_TIM_PWM_Start_DMA+0x354>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d009      	beq.n	800562c <HAL_TIM_PWM_Start_DMA+0x300>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a19      	ldr	r2, [pc, #100]	; (8005684 <HAL_TIM_PWM_Start_DMA+0x358>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d004      	beq.n	800562c <HAL_TIM_PWM_Start_DMA+0x300>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a18      	ldr	r2, [pc, #96]	; (8005688 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d111      	bne.n	8005650 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2b06      	cmp	r3, #6
 800563c:	d010      	beq.n	8005660 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f042 0201 	orr.w	r2, r2, #1
 800564c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800564e:	e007      	b.n	8005660 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005660:	7dfb      	ldrb	r3, [r7, #23]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	08005bd1 	.word	0x08005bd1
 8005670:	08005c79 	.word	0x08005c79
 8005674:	08005b3f 	.word	0x08005b3f
 8005678:	40010000 	.word	0x40010000
 800567c:	40000400 	.word	0x40000400
 8005680:	40000800 	.word	0x40000800
 8005684:	40000c00 	.word	0x40000c00
 8005688:	40014000 	.word	0x40014000

0800568c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b0c      	cmp	r3, #12
 800569e:	d855      	bhi.n	800574c <HAL_TIM_PWM_Stop_DMA+0xc0>
 80056a0:	a201      	add	r2, pc, #4	; (adr r2, 80056a8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80056a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a6:	bf00      	nop
 80056a8:	080056dd 	.word	0x080056dd
 80056ac:	0800574d 	.word	0x0800574d
 80056b0:	0800574d 	.word	0x0800574d
 80056b4:	0800574d 	.word	0x0800574d
 80056b8:	080056f9 	.word	0x080056f9
 80056bc:	0800574d 	.word	0x0800574d
 80056c0:	0800574d 	.word	0x0800574d
 80056c4:	0800574d 	.word	0x0800574d
 80056c8:	08005715 	.word	0x08005715
 80056cc:	0800574d 	.word	0x0800574d
 80056d0:	0800574d 	.word	0x0800574d
 80056d4:	0800574d 	.word	0x0800574d
 80056d8:	08005731 	.word	0x08005731
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80056ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7fe f867 	bl	80037c4 <HAL_DMA_Abort_IT>
      break;
 80056f6:	e02c      	b.n	8005752 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005706:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570c:	4618      	mov	r0, r3
 800570e:	f7fe f859 	bl	80037c4 <HAL_DMA_Abort_IT>
      break;
 8005712:	e01e      	b.n	8005752 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005722:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	4618      	mov	r0, r3
 800572a:	f7fe f84b 	bl	80037c4 <HAL_DMA_Abort_IT>
      break;
 800572e:	e010      	b.n	8005752 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800573e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005744:	4618      	mov	r0, r3
 8005746:	f7fe f83d 	bl	80037c4 <HAL_DMA_Abort_IT>
      break;
 800574a:	e002      	b.n	8005752 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	73fb      	strb	r3, [r7, #15]
      break;
 8005750:	bf00      	nop
  }

  if (status == HAL_OK)
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d157      	bne.n	8005808 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2200      	movs	r2, #0
 800575e:	6839      	ldr	r1, [r7, #0]
 8005760:	4618      	mov	r0, r3
 8005762:	f000 fd63 	bl	800622c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a2a      	ldr	r2, [pc, #168]	; (8005814 <HAL_TIM_PWM_Stop_DMA+0x188>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d117      	bne.n	80057a0 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6a1a      	ldr	r2, [r3, #32]
 8005776:	f241 1311 	movw	r3, #4369	; 0x1111
 800577a:	4013      	ands	r3, r2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10f      	bne.n	80057a0 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6a1a      	ldr	r2, [r3, #32]
 8005786:	f240 4344 	movw	r3, #1092	; 0x444
 800578a:	4013      	ands	r3, r2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d107      	bne.n	80057a0 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800579e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6a1a      	ldr	r2, [r3, #32]
 80057a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80057aa:	4013      	ands	r3, r2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10f      	bne.n	80057d0 <HAL_TIM_PWM_Stop_DMA+0x144>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6a1a      	ldr	r2, [r3, #32]
 80057b6:	f240 4344 	movw	r3, #1092	; 0x444
 80057ba:	4013      	ands	r3, r2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d107      	bne.n	80057d0 <HAL_TIM_PWM_Stop_DMA+0x144>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0201 	bic.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d104      	bne.n	80057e0 <HAL_TIM_PWM_Stop_DMA+0x154>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057de:	e013      	b.n	8005808 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	d104      	bne.n	80057f0 <HAL_TIM_PWM_Stop_DMA+0x164>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057ee:	e00b      	b.n	8005808 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b08      	cmp	r3, #8
 80057f4:	d104      	bne.n	8005800 <HAL_TIM_PWM_Stop_DMA+0x174>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057fe:	e003      	b.n	8005808 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005808:	7bfb      	ldrb	r3, [r7, #15]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	40010000 	.word	0x40010000

08005818 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005824:	2300      	movs	r3, #0
 8005826:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800582e:	2b01      	cmp	r3, #1
 8005830:	d101      	bne.n	8005836 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005832:	2302      	movs	r3, #2
 8005834:	e0ae      	b.n	8005994 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b0c      	cmp	r3, #12
 8005842:	f200 809f 	bhi.w	8005984 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005846:	a201      	add	r2, pc, #4	; (adr r2, 800584c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584c:	08005881 	.word	0x08005881
 8005850:	08005985 	.word	0x08005985
 8005854:	08005985 	.word	0x08005985
 8005858:	08005985 	.word	0x08005985
 800585c:	080058c1 	.word	0x080058c1
 8005860:	08005985 	.word	0x08005985
 8005864:	08005985 	.word	0x08005985
 8005868:	08005985 	.word	0x08005985
 800586c:	08005903 	.word	0x08005903
 8005870:	08005985 	.word	0x08005985
 8005874:	08005985 	.word	0x08005985
 8005878:	08005985 	.word	0x08005985
 800587c:	08005943 	.word	0x08005943
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68b9      	ldr	r1, [r7, #8]
 8005886:	4618      	mov	r0, r3
 8005888:	f000 faaa 	bl	8005de0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	699a      	ldr	r2, [r3, #24]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0208 	orr.w	r2, r2, #8
 800589a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699a      	ldr	r2, [r3, #24]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0204 	bic.w	r2, r2, #4
 80058aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6999      	ldr	r1, [r3, #24]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	691a      	ldr	r2, [r3, #16]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	619a      	str	r2, [r3, #24]
      break;
 80058be:	e064      	b.n	800598a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68b9      	ldr	r1, [r7, #8]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 faf0 	bl	8005eac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699a      	ldr	r2, [r3, #24]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6999      	ldr	r1, [r3, #24]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	021a      	lsls	r2, r3, #8
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	619a      	str	r2, [r3, #24]
      break;
 8005900:	e043      	b.n	800598a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68b9      	ldr	r1, [r7, #8]
 8005908:	4618      	mov	r0, r3
 800590a:	f000 fb3b 	bl	8005f84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	69da      	ldr	r2, [r3, #28]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f042 0208 	orr.w	r2, r2, #8
 800591c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	69da      	ldr	r2, [r3, #28]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f022 0204 	bic.w	r2, r2, #4
 800592c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69d9      	ldr	r1, [r3, #28]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	691a      	ldr	r2, [r3, #16]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	61da      	str	r2, [r3, #28]
      break;
 8005940:	e023      	b.n	800598a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	4618      	mov	r0, r3
 800594a:	f000 fb85 	bl	8006058 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69da      	ldr	r2, [r3, #28]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800595c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69da      	ldr	r2, [r3, #28]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800596c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69d9      	ldr	r1, [r3, #28]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	021a      	lsls	r2, r3, #8
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	61da      	str	r2, [r3, #28]
      break;
 8005982:	e002      	b.n	800598a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	75fb      	strb	r3, [r7, #23]
      break;
 8005988:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005992:	7dfb      	ldrb	r3, [r7, #23]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_TIM_ConfigClockSource+0x1c>
 80059b4:	2302      	movs	r3, #2
 80059b6:	e0b4      	b.n	8005b22 <HAL_TIM_ConfigClockSource+0x186>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f0:	d03e      	beq.n	8005a70 <HAL_TIM_ConfigClockSource+0xd4>
 80059f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f6:	f200 8087 	bhi.w	8005b08 <HAL_TIM_ConfigClockSource+0x16c>
 80059fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059fe:	f000 8086 	beq.w	8005b0e <HAL_TIM_ConfigClockSource+0x172>
 8005a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a06:	d87f      	bhi.n	8005b08 <HAL_TIM_ConfigClockSource+0x16c>
 8005a08:	2b70      	cmp	r3, #112	; 0x70
 8005a0a:	d01a      	beq.n	8005a42 <HAL_TIM_ConfigClockSource+0xa6>
 8005a0c:	2b70      	cmp	r3, #112	; 0x70
 8005a0e:	d87b      	bhi.n	8005b08 <HAL_TIM_ConfigClockSource+0x16c>
 8005a10:	2b60      	cmp	r3, #96	; 0x60
 8005a12:	d050      	beq.n	8005ab6 <HAL_TIM_ConfigClockSource+0x11a>
 8005a14:	2b60      	cmp	r3, #96	; 0x60
 8005a16:	d877      	bhi.n	8005b08 <HAL_TIM_ConfigClockSource+0x16c>
 8005a18:	2b50      	cmp	r3, #80	; 0x50
 8005a1a:	d03c      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0xfa>
 8005a1c:	2b50      	cmp	r3, #80	; 0x50
 8005a1e:	d873      	bhi.n	8005b08 <HAL_TIM_ConfigClockSource+0x16c>
 8005a20:	2b40      	cmp	r3, #64	; 0x40
 8005a22:	d058      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x13a>
 8005a24:	2b40      	cmp	r3, #64	; 0x40
 8005a26:	d86f      	bhi.n	8005b08 <HAL_TIM_ConfigClockSource+0x16c>
 8005a28:	2b30      	cmp	r3, #48	; 0x30
 8005a2a:	d064      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0x15a>
 8005a2c:	2b30      	cmp	r3, #48	; 0x30
 8005a2e:	d86b      	bhi.n	8005b08 <HAL_TIM_ConfigClockSource+0x16c>
 8005a30:	2b20      	cmp	r3, #32
 8005a32:	d060      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0x15a>
 8005a34:	2b20      	cmp	r3, #32
 8005a36:	d867      	bhi.n	8005b08 <HAL_TIM_ConfigClockSource+0x16c>
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d05c      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0x15a>
 8005a3c:	2b10      	cmp	r3, #16
 8005a3e:	d05a      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0x15a>
 8005a40:	e062      	b.n	8005b08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6818      	ldr	r0, [r3, #0]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	6899      	ldr	r1, [r3, #8]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	f000 fbcb 	bl	80061ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	609a      	str	r2, [r3, #8]
      break;
 8005a6e:	e04f      	b.n	8005b10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6818      	ldr	r0, [r3, #0]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	6899      	ldr	r1, [r3, #8]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f000 fbb4 	bl	80061ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a92:	609a      	str	r2, [r3, #8]
      break;
 8005a94:	e03c      	b.n	8005b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6818      	ldr	r0, [r3, #0]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	6859      	ldr	r1, [r3, #4]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f000 fb28 	bl	80060f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2150      	movs	r1, #80	; 0x50
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 fb81 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 8005ab4:	e02c      	b.n	8005b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6818      	ldr	r0, [r3, #0]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	6859      	ldr	r1, [r3, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f000 fb47 	bl	8006156 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2160      	movs	r1, #96	; 0x60
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 fb71 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 8005ad4:	e01c      	b.n	8005b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6818      	ldr	r0, [r3, #0]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	6859      	ldr	r1, [r3, #4]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	f000 fb08 	bl	80060f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2140      	movs	r1, #64	; 0x40
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fb61 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 8005af4:	e00c      	b.n	8005b10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4619      	mov	r1, r3
 8005b00:	4610      	mov	r0, r2
 8005b02:	f000 fb58 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 8005b06:	e003      	b.n	8005b10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b0c:	e000      	b.n	8005b10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b084      	sub	sp, #16
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d107      	bne.n	8005b66 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b64:	e02a      	b.n	8005bbc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d107      	bne.n	8005b80 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2202      	movs	r2, #2
 8005b74:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b7e:	e01d      	b.n	8005bbc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d107      	bne.n	8005b9a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2204      	movs	r2, #4
 8005b8e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b98:	e010      	b.n	8005bbc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d107      	bne.n	8005bb4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2208      	movs	r2, #8
 8005ba8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bb2:	e003      	b.n	8005bbc <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f7ff ffb4 	bl	8005b2a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	771a      	strb	r2, [r3, #28]
}
 8005bc8:	bf00      	nop
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bdc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d10b      	bne.n	8005c00 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2201      	movs	r2, #1
 8005bec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d136      	bne.n	8005c64 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bfe:	e031      	b.n	8005c64 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d10b      	bne.n	8005c22 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d125      	bne.n	8005c64 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c20:	e020      	b.n	8005c64 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d10b      	bne.n	8005c44 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2204      	movs	r2, #4
 8005c30:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d114      	bne.n	8005c64 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c42:	e00f      	b.n	8005c64 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d10a      	bne.n	8005c64 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2208      	movs	r2, #8
 8005c52:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d103      	bne.n	8005c64 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f7fb fd11 	bl	800168c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	771a      	strb	r2, [r3, #28]
}
 8005c70:	bf00      	nop
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c84:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d103      	bne.n	8005c98 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2201      	movs	r2, #1
 8005c94:	771a      	strb	r2, [r3, #28]
 8005c96:	e019      	b.n	8005ccc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d103      	bne.n	8005caa <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	771a      	strb	r2, [r3, #28]
 8005ca8:	e010      	b.n	8005ccc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d103      	bne.n	8005cbc <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2204      	movs	r2, #4
 8005cb8:	771a      	strb	r2, [r3, #28]
 8005cba:	e007      	b.n	8005ccc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d102      	bne.n	8005ccc <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2208      	movs	r2, #8
 8005cca:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f7fb fc0f 	bl	80014f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	771a      	strb	r2, [r3, #28]
}
 8005cd8:	bf00      	nop
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a34      	ldr	r2, [pc, #208]	; (8005dc4 <TIM_Base_SetConfig+0xe4>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d00f      	beq.n	8005d18 <TIM_Base_SetConfig+0x38>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cfe:	d00b      	beq.n	8005d18 <TIM_Base_SetConfig+0x38>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a31      	ldr	r2, [pc, #196]	; (8005dc8 <TIM_Base_SetConfig+0xe8>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d007      	beq.n	8005d18 <TIM_Base_SetConfig+0x38>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a30      	ldr	r2, [pc, #192]	; (8005dcc <TIM_Base_SetConfig+0xec>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d003      	beq.n	8005d18 <TIM_Base_SetConfig+0x38>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a2f      	ldr	r2, [pc, #188]	; (8005dd0 <TIM_Base_SetConfig+0xf0>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d108      	bne.n	8005d2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a25      	ldr	r2, [pc, #148]	; (8005dc4 <TIM_Base_SetConfig+0xe4>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d01b      	beq.n	8005d6a <TIM_Base_SetConfig+0x8a>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d38:	d017      	beq.n	8005d6a <TIM_Base_SetConfig+0x8a>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a22      	ldr	r2, [pc, #136]	; (8005dc8 <TIM_Base_SetConfig+0xe8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d013      	beq.n	8005d6a <TIM_Base_SetConfig+0x8a>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a21      	ldr	r2, [pc, #132]	; (8005dcc <TIM_Base_SetConfig+0xec>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d00f      	beq.n	8005d6a <TIM_Base_SetConfig+0x8a>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a20      	ldr	r2, [pc, #128]	; (8005dd0 <TIM_Base_SetConfig+0xf0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00b      	beq.n	8005d6a <TIM_Base_SetConfig+0x8a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a1f      	ldr	r2, [pc, #124]	; (8005dd4 <TIM_Base_SetConfig+0xf4>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d007      	beq.n	8005d6a <TIM_Base_SetConfig+0x8a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a1e      	ldr	r2, [pc, #120]	; (8005dd8 <TIM_Base_SetConfig+0xf8>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d003      	beq.n	8005d6a <TIM_Base_SetConfig+0x8a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a1d      	ldr	r2, [pc, #116]	; (8005ddc <TIM_Base_SetConfig+0xfc>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d108      	bne.n	8005d7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a08      	ldr	r2, [pc, #32]	; (8005dc4 <TIM_Base_SetConfig+0xe4>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d103      	bne.n	8005db0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	691a      	ldr	r2, [r3, #16]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	615a      	str	r2, [r3, #20]
}
 8005db6:	bf00      	nop
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	40010000 	.word	0x40010000
 8005dc8:	40000400 	.word	0x40000400
 8005dcc:	40000800 	.word	0x40000800
 8005dd0:	40000c00 	.word	0x40000c00
 8005dd4:	40014000 	.word	0x40014000
 8005dd8:	40014400 	.word	0x40014400
 8005ddc:	40014800 	.word	0x40014800

08005de0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	f023 0201 	bic.w	r2, r3, #1
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f023 0303 	bic.w	r3, r3, #3
 8005e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f023 0302 	bic.w	r3, r3, #2
 8005e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a1c      	ldr	r2, [pc, #112]	; (8005ea8 <TIM_OC1_SetConfig+0xc8>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d10c      	bne.n	8005e56 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f023 0308 	bic.w	r3, r3, #8
 8005e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f023 0304 	bic.w	r3, r3, #4
 8005e54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a13      	ldr	r2, [pc, #76]	; (8005ea8 <TIM_OC1_SetConfig+0xc8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d111      	bne.n	8005e82 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	621a      	str	r2, [r3, #32]
}
 8005e9c:	bf00      	nop
 8005e9e:	371c      	adds	r7, #28
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	40010000 	.word	0x40010000

08005eac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	f023 0210 	bic.w	r2, r3, #16
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	021b      	lsls	r3, r3, #8
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f023 0320 	bic.w	r3, r3, #32
 8005ef6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	011b      	lsls	r3, r3, #4
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a1e      	ldr	r2, [pc, #120]	; (8005f80 <TIM_OC2_SetConfig+0xd4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d10d      	bne.n	8005f28 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	011b      	lsls	r3, r3, #4
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a15      	ldr	r2, [pc, #84]	; (8005f80 <TIM_OC2_SetConfig+0xd4>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d113      	bne.n	8005f58 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685a      	ldr	r2, [r3, #4]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	621a      	str	r2, [r3, #32]
}
 8005f72:	bf00      	nop
 8005f74:	371c      	adds	r7, #28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	40010000 	.word	0x40010000

08005f84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f023 0303 	bic.w	r3, r3, #3
 8005fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	021b      	lsls	r3, r3, #8
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a1d      	ldr	r2, [pc, #116]	; (8006054 <TIM_OC3_SetConfig+0xd0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d10d      	bne.n	8005ffe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fe8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	021b      	lsls	r3, r3, #8
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ffc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a14      	ldr	r2, [pc, #80]	; (8006054 <TIM_OC3_SetConfig+0xd0>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d113      	bne.n	800602e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800600c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	011b      	lsls	r3, r3, #4
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	4313      	orrs	r3, r2
 8006020:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	011b      	lsls	r3, r3, #4
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	4313      	orrs	r3, r2
 800602c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	621a      	str	r2, [r3, #32]
}
 8006048:	bf00      	nop
 800604a:	371c      	adds	r7, #28
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr
 8006054:	40010000 	.word	0x40010000

08006058 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006058:	b480      	push	{r7}
 800605a:	b087      	sub	sp, #28
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800608e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	021b      	lsls	r3, r3, #8
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	4313      	orrs	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	031b      	lsls	r3, r3, #12
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a10      	ldr	r2, [pc, #64]	; (80060f4 <TIM_OC4_SetConfig+0x9c>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d109      	bne.n	80060cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	019b      	lsls	r3, r3, #6
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	621a      	str	r2, [r3, #32]
}
 80060e6:	bf00      	nop
 80060e8:	371c      	adds	r7, #28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	40010000 	.word	0x40010000

080060f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	f023 0201 	bic.w	r2, r3, #1
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f023 030a 	bic.w	r3, r3, #10
 8006134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	621a      	str	r2, [r3, #32]
}
 800614a:	bf00      	nop
 800614c:	371c      	adds	r7, #28
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006156:	b480      	push	{r7}
 8006158:	b087      	sub	sp, #28
 800615a:	af00      	add	r7, sp, #0
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	f023 0210 	bic.w	r2, r3, #16
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006180:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	031b      	lsls	r3, r3, #12
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	4313      	orrs	r3, r2
 800618a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006192:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	011b      	lsls	r3, r3, #4
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	4313      	orrs	r3, r2
 800619c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b085      	sub	sp, #20
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	f043 0307 	orr.w	r3, r3, #7
 80061d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	609a      	str	r2, [r3, #8]
}
 80061e0:	bf00      	nop
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006206:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	021a      	lsls	r2, r3, #8
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	431a      	orrs	r2, r3
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	4313      	orrs	r3, r2
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	4313      	orrs	r3, r2
 8006218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	609a      	str	r2, [r3, #8]
}
 8006220:	bf00      	nop
 8006222:	371c      	adds	r7, #28
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f003 031f 	and.w	r3, r3, #31
 800623e:	2201      	movs	r2, #1
 8006240:	fa02 f303 	lsl.w	r3, r2, r3
 8006244:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6a1a      	ldr	r2, [r3, #32]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	43db      	mvns	r3, r3
 800624e:	401a      	ands	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6a1a      	ldr	r2, [r3, #32]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f003 031f 	and.w	r3, r3, #31
 800625e:	6879      	ldr	r1, [r7, #4]
 8006260:	fa01 f303 	lsl.w	r3, r1, r3
 8006264:	431a      	orrs	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	621a      	str	r2, [r3, #32]
}
 800626a:	bf00      	nop
 800626c:	371c      	adds	r7, #28
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
	...

08006278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800628c:	2302      	movs	r3, #2
 800628e:	e050      	b.n	8006332 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a1c      	ldr	r2, [pc, #112]	; (8006340 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d018      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062dc:	d013      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a18      	ldr	r2, [pc, #96]	; (8006344 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d00e      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a16      	ldr	r2, [pc, #88]	; (8006348 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d009      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a15      	ldr	r2, [pc, #84]	; (800634c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d004      	beq.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a13      	ldr	r2, [pc, #76]	; (8006350 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d10c      	bne.n	8006320 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800630c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	4313      	orrs	r3, r2
 8006316:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	40010000 	.word	0x40010000
 8006344:	40000400 	.word	0x40000400
 8006348:	40000800 	.word	0x40000800
 800634c:	40000c00 	.word	0x40000c00
 8006350:	40014000 	.word	0x40014000

08006354 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800635e:	2300      	movs	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006368:	2b01      	cmp	r3, #1
 800636a:	d101      	bne.n	8006370 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800636c:	2302      	movs	r3, #2
 800636e:	e03d      	b.n	80063ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	4313      	orrs	r3, r2
 8006392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	4313      	orrs	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e03f      	b.n	800648a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d106      	bne.n	8006424 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7fc f8ac 	bl	800257c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2224      	movs	r2, #36	; 0x24
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68da      	ldr	r2, [r3, #12]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800643a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f929 	bl	8006694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	691a      	ldr	r2, [r3, #16]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006450:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	695a      	ldr	r2, [r3, #20]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006460:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006470:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2220      	movs	r2, #32
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2220      	movs	r2, #32
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b08a      	sub	sp, #40	; 0x28
 8006496:	af02      	add	r7, sp, #8
 8006498:	60f8      	str	r0, [r7, #12]
 800649a:	60b9      	str	r1, [r7, #8]
 800649c:	603b      	str	r3, [r7, #0]
 800649e:	4613      	mov	r3, r2
 80064a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80064a2:	2300      	movs	r3, #0
 80064a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b20      	cmp	r3, #32
 80064b0:	d17c      	bne.n	80065ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <HAL_UART_Transmit+0x2c>
 80064b8:	88fb      	ldrh	r3, [r7, #6]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e075      	b.n	80065ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d101      	bne.n	80064d0 <HAL_UART_Transmit+0x3e>
 80064cc:	2302      	movs	r3, #2
 80064ce:	e06e      	b.n	80065ae <HAL_UART_Transmit+0x11c>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2221      	movs	r2, #33	; 0x21
 80064e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064e6:	f7fc ff25 	bl	8003334 <HAL_GetTick>
 80064ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	88fa      	ldrh	r2, [r7, #6]
 80064f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	88fa      	ldrh	r2, [r7, #6]
 80064f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006500:	d108      	bne.n	8006514 <HAL_UART_Transmit+0x82>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d104      	bne.n	8006514 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800650a:	2300      	movs	r3, #0
 800650c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	61bb      	str	r3, [r7, #24]
 8006512:	e003      	b.n	800651c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006518:	2300      	movs	r3, #0
 800651a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006524:	e02a      	b.n	800657c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2200      	movs	r2, #0
 800652e:	2180      	movs	r1, #128	; 0x80
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f000 f840 	bl	80065b6 <UART_WaitOnFlagUntilTimeout>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e036      	b.n	80065ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10b      	bne.n	800655e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	461a      	mov	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006554:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	3302      	adds	r3, #2
 800655a:	61bb      	str	r3, [r7, #24]
 800655c:	e007      	b.n	800656e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	781a      	ldrb	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	3301      	adds	r3, #1
 800656c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006572:	b29b      	uxth	r3, r3
 8006574:	3b01      	subs	r3, #1
 8006576:	b29a      	uxth	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006580:	b29b      	uxth	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1cf      	bne.n	8006526 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2200      	movs	r2, #0
 800658e:	2140      	movs	r1, #64	; 0x40
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 f810 	bl	80065b6 <UART_WaitOnFlagUntilTimeout>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e006      	b.n	80065ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2220      	movs	r2, #32
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	e000      	b.n	80065ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80065ac:	2302      	movs	r3, #2
  }
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3720      	adds	r7, #32
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b090      	sub	sp, #64	; 0x40
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	60f8      	str	r0, [r7, #12]
 80065be:	60b9      	str	r1, [r7, #8]
 80065c0:	603b      	str	r3, [r7, #0]
 80065c2:	4613      	mov	r3, r2
 80065c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065c6:	e050      	b.n	800666a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ce:	d04c      	beq.n	800666a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80065d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d007      	beq.n	80065e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80065d6:	f7fc fead 	bl	8003334 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d241      	bcs.n	800666a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	330c      	adds	r3, #12
 80065ec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f0:	e853 3f00 	ldrex	r3, [r3]
 80065f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	330c      	adds	r3, #12
 8006604:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006606:	637a      	str	r2, [r7, #52]	; 0x34
 8006608:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800660c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800660e:	e841 2300 	strex	r3, r2, [r1]
 8006612:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1e5      	bne.n	80065e6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3314      	adds	r3, #20
 8006620:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	e853 3f00 	ldrex	r3, [r3]
 8006628:	613b      	str	r3, [r7, #16]
   return(result);
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f023 0301 	bic.w	r3, r3, #1
 8006630:	63bb      	str	r3, [r7, #56]	; 0x38
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	3314      	adds	r3, #20
 8006638:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800663a:	623a      	str	r2, [r7, #32]
 800663c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663e:	69f9      	ldr	r1, [r7, #28]
 8006640:	6a3a      	ldr	r2, [r7, #32]
 8006642:	e841 2300 	strex	r3, r2, [r1]
 8006646:	61bb      	str	r3, [r7, #24]
   return(result);
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1e5      	bne.n	800661a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2220      	movs	r2, #32
 8006652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2220      	movs	r2, #32
 800665a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e00f      	b.n	800668a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	4013      	ands	r3, r2
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	429a      	cmp	r2, r3
 8006678:	bf0c      	ite	eq
 800667a:	2301      	moveq	r3, #1
 800667c:	2300      	movne	r3, #0
 800667e:	b2db      	uxtb	r3, r3
 8006680:	461a      	mov	r2, r3
 8006682:	79fb      	ldrb	r3, [r7, #7]
 8006684:	429a      	cmp	r2, r3
 8006686:	d09f      	beq.n	80065c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3740      	adds	r7, #64	; 0x40
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
	...

08006694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006698:	b0c0      	sub	sp, #256	; 0x100
 800669a:	af00      	add	r7, sp, #0
 800669c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b0:	68d9      	ldr	r1, [r3, #12]
 80066b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	ea40 0301 	orr.w	r3, r0, r1
 80066bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	431a      	orrs	r2, r3
 80066cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	431a      	orrs	r2, r3
 80066d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	4313      	orrs	r3, r2
 80066dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066ec:	f021 010c 	bic.w	r1, r1, #12
 80066f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066fa:	430b      	orrs	r3, r1
 80066fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800670a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800670e:	6999      	ldr	r1, [r3, #24]
 8006710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	ea40 0301 	orr.w	r3, r0, r1
 800671a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800671c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	4b8f      	ldr	r3, [pc, #572]	; (8006960 <UART_SetConfig+0x2cc>)
 8006724:	429a      	cmp	r2, r3
 8006726:	d005      	beq.n	8006734 <UART_SetConfig+0xa0>
 8006728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	4b8d      	ldr	r3, [pc, #564]	; (8006964 <UART_SetConfig+0x2d0>)
 8006730:	429a      	cmp	r2, r3
 8006732:	d104      	bne.n	800673e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006734:	f7fe f90c 	bl	8004950 <HAL_RCC_GetPCLK2Freq>
 8006738:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800673c:	e003      	b.n	8006746 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800673e:	f7fe f8f3 	bl	8004928 <HAL_RCC_GetPCLK1Freq>
 8006742:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800674a:	69db      	ldr	r3, [r3, #28]
 800674c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006750:	f040 810c 	bne.w	800696c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006758:	2200      	movs	r2, #0
 800675a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800675e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006762:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006766:	4622      	mov	r2, r4
 8006768:	462b      	mov	r3, r5
 800676a:	1891      	adds	r1, r2, r2
 800676c:	65b9      	str	r1, [r7, #88]	; 0x58
 800676e:	415b      	adcs	r3, r3
 8006770:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006772:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006776:	4621      	mov	r1, r4
 8006778:	eb12 0801 	adds.w	r8, r2, r1
 800677c:	4629      	mov	r1, r5
 800677e:	eb43 0901 	adc.w	r9, r3, r1
 8006782:	f04f 0200 	mov.w	r2, #0
 8006786:	f04f 0300 	mov.w	r3, #0
 800678a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800678e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006796:	4690      	mov	r8, r2
 8006798:	4699      	mov	r9, r3
 800679a:	4623      	mov	r3, r4
 800679c:	eb18 0303 	adds.w	r3, r8, r3
 80067a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067a4:	462b      	mov	r3, r5
 80067a6:	eb49 0303 	adc.w	r3, r9, r3
 80067aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80067be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80067c2:	460b      	mov	r3, r1
 80067c4:	18db      	adds	r3, r3, r3
 80067c6:	653b      	str	r3, [r7, #80]	; 0x50
 80067c8:	4613      	mov	r3, r2
 80067ca:	eb42 0303 	adc.w	r3, r2, r3
 80067ce:	657b      	str	r3, [r7, #84]	; 0x54
 80067d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80067d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80067d8:	f7f9 fd5a 	bl	8000290 <__aeabi_uldivmod>
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	4b61      	ldr	r3, [pc, #388]	; (8006968 <UART_SetConfig+0x2d4>)
 80067e2:	fba3 2302 	umull	r2, r3, r3, r2
 80067e6:	095b      	lsrs	r3, r3, #5
 80067e8:	011c      	lsls	r4, r3, #4
 80067ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80067f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80067fc:	4642      	mov	r2, r8
 80067fe:	464b      	mov	r3, r9
 8006800:	1891      	adds	r1, r2, r2
 8006802:	64b9      	str	r1, [r7, #72]	; 0x48
 8006804:	415b      	adcs	r3, r3
 8006806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006808:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800680c:	4641      	mov	r1, r8
 800680e:	eb12 0a01 	adds.w	sl, r2, r1
 8006812:	4649      	mov	r1, r9
 8006814:	eb43 0b01 	adc.w	fp, r3, r1
 8006818:	f04f 0200 	mov.w	r2, #0
 800681c:	f04f 0300 	mov.w	r3, #0
 8006820:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006824:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006828:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800682c:	4692      	mov	sl, r2
 800682e:	469b      	mov	fp, r3
 8006830:	4643      	mov	r3, r8
 8006832:	eb1a 0303 	adds.w	r3, sl, r3
 8006836:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800683a:	464b      	mov	r3, r9
 800683c:	eb4b 0303 	adc.w	r3, fp, r3
 8006840:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006850:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006854:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006858:	460b      	mov	r3, r1
 800685a:	18db      	adds	r3, r3, r3
 800685c:	643b      	str	r3, [r7, #64]	; 0x40
 800685e:	4613      	mov	r3, r2
 8006860:	eb42 0303 	adc.w	r3, r2, r3
 8006864:	647b      	str	r3, [r7, #68]	; 0x44
 8006866:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800686a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800686e:	f7f9 fd0f 	bl	8000290 <__aeabi_uldivmod>
 8006872:	4602      	mov	r2, r0
 8006874:	460b      	mov	r3, r1
 8006876:	4611      	mov	r1, r2
 8006878:	4b3b      	ldr	r3, [pc, #236]	; (8006968 <UART_SetConfig+0x2d4>)
 800687a:	fba3 2301 	umull	r2, r3, r3, r1
 800687e:	095b      	lsrs	r3, r3, #5
 8006880:	2264      	movs	r2, #100	; 0x64
 8006882:	fb02 f303 	mul.w	r3, r2, r3
 8006886:	1acb      	subs	r3, r1, r3
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800688e:	4b36      	ldr	r3, [pc, #216]	; (8006968 <UART_SetConfig+0x2d4>)
 8006890:	fba3 2302 	umull	r2, r3, r3, r2
 8006894:	095b      	lsrs	r3, r3, #5
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800689c:	441c      	add	r4, r3
 800689e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80068ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80068b0:	4642      	mov	r2, r8
 80068b2:	464b      	mov	r3, r9
 80068b4:	1891      	adds	r1, r2, r2
 80068b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80068b8:	415b      	adcs	r3, r3
 80068ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80068c0:	4641      	mov	r1, r8
 80068c2:	1851      	adds	r1, r2, r1
 80068c4:	6339      	str	r1, [r7, #48]	; 0x30
 80068c6:	4649      	mov	r1, r9
 80068c8:	414b      	adcs	r3, r1
 80068ca:	637b      	str	r3, [r7, #52]	; 0x34
 80068cc:	f04f 0200 	mov.w	r2, #0
 80068d0:	f04f 0300 	mov.w	r3, #0
 80068d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80068d8:	4659      	mov	r1, fp
 80068da:	00cb      	lsls	r3, r1, #3
 80068dc:	4651      	mov	r1, sl
 80068de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068e2:	4651      	mov	r1, sl
 80068e4:	00ca      	lsls	r2, r1, #3
 80068e6:	4610      	mov	r0, r2
 80068e8:	4619      	mov	r1, r3
 80068ea:	4603      	mov	r3, r0
 80068ec:	4642      	mov	r2, r8
 80068ee:	189b      	adds	r3, r3, r2
 80068f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068f4:	464b      	mov	r3, r9
 80068f6:	460a      	mov	r2, r1
 80068f8:	eb42 0303 	adc.w	r3, r2, r3
 80068fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800690c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006910:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006914:	460b      	mov	r3, r1
 8006916:	18db      	adds	r3, r3, r3
 8006918:	62bb      	str	r3, [r7, #40]	; 0x28
 800691a:	4613      	mov	r3, r2
 800691c:	eb42 0303 	adc.w	r3, r2, r3
 8006920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006922:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006926:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800692a:	f7f9 fcb1 	bl	8000290 <__aeabi_uldivmod>
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	4b0d      	ldr	r3, [pc, #52]	; (8006968 <UART_SetConfig+0x2d4>)
 8006934:	fba3 1302 	umull	r1, r3, r3, r2
 8006938:	095b      	lsrs	r3, r3, #5
 800693a:	2164      	movs	r1, #100	; 0x64
 800693c:	fb01 f303 	mul.w	r3, r1, r3
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	3332      	adds	r3, #50	; 0x32
 8006946:	4a08      	ldr	r2, [pc, #32]	; (8006968 <UART_SetConfig+0x2d4>)
 8006948:	fba2 2303 	umull	r2, r3, r2, r3
 800694c:	095b      	lsrs	r3, r3, #5
 800694e:	f003 0207 	and.w	r2, r3, #7
 8006952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4422      	add	r2, r4
 800695a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800695c:	e105      	b.n	8006b6a <UART_SetConfig+0x4d6>
 800695e:	bf00      	nop
 8006960:	40011000 	.word	0x40011000
 8006964:	40011400 	.word	0x40011400
 8006968:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800696c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006970:	2200      	movs	r2, #0
 8006972:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006976:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800697a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800697e:	4642      	mov	r2, r8
 8006980:	464b      	mov	r3, r9
 8006982:	1891      	adds	r1, r2, r2
 8006984:	6239      	str	r1, [r7, #32]
 8006986:	415b      	adcs	r3, r3
 8006988:	627b      	str	r3, [r7, #36]	; 0x24
 800698a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800698e:	4641      	mov	r1, r8
 8006990:	1854      	adds	r4, r2, r1
 8006992:	4649      	mov	r1, r9
 8006994:	eb43 0501 	adc.w	r5, r3, r1
 8006998:	f04f 0200 	mov.w	r2, #0
 800699c:	f04f 0300 	mov.w	r3, #0
 80069a0:	00eb      	lsls	r3, r5, #3
 80069a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069a6:	00e2      	lsls	r2, r4, #3
 80069a8:	4614      	mov	r4, r2
 80069aa:	461d      	mov	r5, r3
 80069ac:	4643      	mov	r3, r8
 80069ae:	18e3      	adds	r3, r4, r3
 80069b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069b4:	464b      	mov	r3, r9
 80069b6:	eb45 0303 	adc.w	r3, r5, r3
 80069ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069ce:	f04f 0200 	mov.w	r2, #0
 80069d2:	f04f 0300 	mov.w	r3, #0
 80069d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80069da:	4629      	mov	r1, r5
 80069dc:	008b      	lsls	r3, r1, #2
 80069de:	4621      	mov	r1, r4
 80069e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069e4:	4621      	mov	r1, r4
 80069e6:	008a      	lsls	r2, r1, #2
 80069e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80069ec:	f7f9 fc50 	bl	8000290 <__aeabi_uldivmod>
 80069f0:	4602      	mov	r2, r0
 80069f2:	460b      	mov	r3, r1
 80069f4:	4b60      	ldr	r3, [pc, #384]	; (8006b78 <UART_SetConfig+0x4e4>)
 80069f6:	fba3 2302 	umull	r2, r3, r3, r2
 80069fa:	095b      	lsrs	r3, r3, #5
 80069fc:	011c      	lsls	r4, r3, #4
 80069fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006a10:	4642      	mov	r2, r8
 8006a12:	464b      	mov	r3, r9
 8006a14:	1891      	adds	r1, r2, r2
 8006a16:	61b9      	str	r1, [r7, #24]
 8006a18:	415b      	adcs	r3, r3
 8006a1a:	61fb      	str	r3, [r7, #28]
 8006a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a20:	4641      	mov	r1, r8
 8006a22:	1851      	adds	r1, r2, r1
 8006a24:	6139      	str	r1, [r7, #16]
 8006a26:	4649      	mov	r1, r9
 8006a28:	414b      	adcs	r3, r1
 8006a2a:	617b      	str	r3, [r7, #20]
 8006a2c:	f04f 0200 	mov.w	r2, #0
 8006a30:	f04f 0300 	mov.w	r3, #0
 8006a34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a38:	4659      	mov	r1, fp
 8006a3a:	00cb      	lsls	r3, r1, #3
 8006a3c:	4651      	mov	r1, sl
 8006a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a42:	4651      	mov	r1, sl
 8006a44:	00ca      	lsls	r2, r1, #3
 8006a46:	4610      	mov	r0, r2
 8006a48:	4619      	mov	r1, r3
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	4642      	mov	r2, r8
 8006a4e:	189b      	adds	r3, r3, r2
 8006a50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a54:	464b      	mov	r3, r9
 8006a56:	460a      	mov	r2, r1
 8006a58:	eb42 0303 	adc.w	r3, r2, r3
 8006a5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a6c:	f04f 0200 	mov.w	r2, #0
 8006a70:	f04f 0300 	mov.w	r3, #0
 8006a74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a78:	4649      	mov	r1, r9
 8006a7a:	008b      	lsls	r3, r1, #2
 8006a7c:	4641      	mov	r1, r8
 8006a7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a82:	4641      	mov	r1, r8
 8006a84:	008a      	lsls	r2, r1, #2
 8006a86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a8a:	f7f9 fc01 	bl	8000290 <__aeabi_uldivmod>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	4b39      	ldr	r3, [pc, #228]	; (8006b78 <UART_SetConfig+0x4e4>)
 8006a94:	fba3 1302 	umull	r1, r3, r3, r2
 8006a98:	095b      	lsrs	r3, r3, #5
 8006a9a:	2164      	movs	r1, #100	; 0x64
 8006a9c:	fb01 f303 	mul.w	r3, r1, r3
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	011b      	lsls	r3, r3, #4
 8006aa4:	3332      	adds	r3, #50	; 0x32
 8006aa6:	4a34      	ldr	r2, [pc, #208]	; (8006b78 <UART_SetConfig+0x4e4>)
 8006aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8006aac:	095b      	lsrs	r3, r3, #5
 8006aae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ab2:	441c      	add	r4, r3
 8006ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ab8:	2200      	movs	r2, #0
 8006aba:	673b      	str	r3, [r7, #112]	; 0x70
 8006abc:	677a      	str	r2, [r7, #116]	; 0x74
 8006abe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ac2:	4642      	mov	r2, r8
 8006ac4:	464b      	mov	r3, r9
 8006ac6:	1891      	adds	r1, r2, r2
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	415b      	adcs	r3, r3
 8006acc:	60fb      	str	r3, [r7, #12]
 8006ace:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ad2:	4641      	mov	r1, r8
 8006ad4:	1851      	adds	r1, r2, r1
 8006ad6:	6039      	str	r1, [r7, #0]
 8006ad8:	4649      	mov	r1, r9
 8006ada:	414b      	adcs	r3, r1
 8006adc:	607b      	str	r3, [r7, #4]
 8006ade:	f04f 0200 	mov.w	r2, #0
 8006ae2:	f04f 0300 	mov.w	r3, #0
 8006ae6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006aea:	4659      	mov	r1, fp
 8006aec:	00cb      	lsls	r3, r1, #3
 8006aee:	4651      	mov	r1, sl
 8006af0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006af4:	4651      	mov	r1, sl
 8006af6:	00ca      	lsls	r2, r1, #3
 8006af8:	4610      	mov	r0, r2
 8006afa:	4619      	mov	r1, r3
 8006afc:	4603      	mov	r3, r0
 8006afe:	4642      	mov	r2, r8
 8006b00:	189b      	adds	r3, r3, r2
 8006b02:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b04:	464b      	mov	r3, r9
 8006b06:	460a      	mov	r2, r1
 8006b08:	eb42 0303 	adc.w	r3, r2, r3
 8006b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	663b      	str	r3, [r7, #96]	; 0x60
 8006b18:	667a      	str	r2, [r7, #100]	; 0x64
 8006b1a:	f04f 0200 	mov.w	r2, #0
 8006b1e:	f04f 0300 	mov.w	r3, #0
 8006b22:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006b26:	4649      	mov	r1, r9
 8006b28:	008b      	lsls	r3, r1, #2
 8006b2a:	4641      	mov	r1, r8
 8006b2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b30:	4641      	mov	r1, r8
 8006b32:	008a      	lsls	r2, r1, #2
 8006b34:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b38:	f7f9 fbaa 	bl	8000290 <__aeabi_uldivmod>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4b0d      	ldr	r3, [pc, #52]	; (8006b78 <UART_SetConfig+0x4e4>)
 8006b42:	fba3 1302 	umull	r1, r3, r3, r2
 8006b46:	095b      	lsrs	r3, r3, #5
 8006b48:	2164      	movs	r1, #100	; 0x64
 8006b4a:	fb01 f303 	mul.w	r3, r1, r3
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	011b      	lsls	r3, r3, #4
 8006b52:	3332      	adds	r3, #50	; 0x32
 8006b54:	4a08      	ldr	r2, [pc, #32]	; (8006b78 <UART_SetConfig+0x4e4>)
 8006b56:	fba2 2303 	umull	r2, r3, r2, r3
 8006b5a:	095b      	lsrs	r3, r3, #5
 8006b5c:	f003 020f 	and.w	r2, r3, #15
 8006b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4422      	add	r2, r4
 8006b68:	609a      	str	r2, [r3, #8]
}
 8006b6a:	bf00      	nop
 8006b6c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b70:	46bd      	mov	sp, r7
 8006b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b76:	bf00      	nop
 8006b78:	51eb851f 	.word	0x51eb851f

08006b7c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006b80:	4904      	ldr	r1, [pc, #16]	; (8006b94 <MX_FATFS_Init+0x18>)
 8006b82:	4805      	ldr	r0, [pc, #20]	; (8006b98 <MX_FATFS_Init+0x1c>)
 8006b84:	f003 fb12 	bl	800a1ac <FATFS_LinkDriver>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	4b03      	ldr	r3, [pc, #12]	; (8006b9c <MX_FATFS_Init+0x20>)
 8006b8e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006b90:	bf00      	nop
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	20001e40 	.word	0x20001e40
 8006b98:	2000000c 	.word	0x2000000c
 8006b9c:	20001e3c 	.word	0x20001e3c

08006ba0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006ba4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8006bba:	79fb      	ldrb	r3, [r7, #7]
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 f9dd 	bl	8006f7c <USER_SPI_initialize>
 8006bc2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8006bd6:	79fb      	ldrb	r3, [r7, #7]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 fab9 	bl	8007150 <USER_SPI_status>
 8006bde:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60b9      	str	r1, [r7, #8]
 8006bf0:	607a      	str	r2, [r7, #4]
 8006bf2:	603b      	str	r3, [r7, #0]
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8006bf8:	7bf8      	ldrb	r0, [r7, #15]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	68b9      	ldr	r1, [r7, #8]
 8006c00:	f000 fabc 	bl	800717c <USER_SPI_read>
 8006c04:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b084      	sub	sp, #16
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	603b      	str	r3, [r7, #0]
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8006c1e:	7bf8      	ldrb	r0, [r7, #15]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	68b9      	ldr	r1, [r7, #8]
 8006c26:	f000 fb0f 	bl	8007248 <USER_SPI_write>
 8006c2a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	603a      	str	r2, [r7, #0]
 8006c3e:	71fb      	strb	r3, [r7, #7]
 8006c40:	460b      	mov	r3, r1
 8006c42:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8006c44:	79b9      	ldrb	r1, [r7, #6]
 8006c46:	79fb      	ldrb	r3, [r7, #7]
 8006c48:	683a      	ldr	r2, [r7, #0]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 fb78 	bl	8007340 <USER_SPI_ioctl>
 8006c50:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
	...

08006c5c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006c64:	f7fc fb66 	bl	8003334 <HAL_GetTick>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	4a04      	ldr	r2, [pc, #16]	; (8006c7c <SPI_Timer_On+0x20>)
 8006c6c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8006c6e:	4a04      	ldr	r2, [pc, #16]	; (8006c80 <SPI_Timer_On+0x24>)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6013      	str	r3, [r2, #0]
}
 8006c74:	bf00      	nop
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	20001e48 	.word	0x20001e48
 8006c80:	20001e4c 	.word	0x20001e4c

08006c84 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006c84:	b580      	push	{r7, lr}
 8006c86:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006c88:	f7fc fb54 	bl	8003334 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	4b06      	ldr	r3, [pc, #24]	; (8006ca8 <SPI_Timer_Status+0x24>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	1ad2      	subs	r2, r2, r3
 8006c94:	4b05      	ldr	r3, [pc, #20]	; (8006cac <SPI_Timer_Status+0x28>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	bf34      	ite	cc
 8006c9c:	2301      	movcc	r3, #1
 8006c9e:	2300      	movcs	r3, #0
 8006ca0:	b2db      	uxtb	r3, r3
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	20001e48 	.word	0x20001e48
 8006cac:	20001e4c 	.word	0x20001e4c

08006cb0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af02      	add	r7, sp, #8
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006cba:	f107 020f 	add.w	r2, r7, #15
 8006cbe:	1df9      	adds	r1, r7, #7
 8006cc0:	2332      	movs	r3, #50	; 0x32
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	4804      	ldr	r0, [pc, #16]	; (8006cd8 <xchg_spi+0x28>)
 8006cc8:	f7fe f81b 	bl	8004d02 <HAL_SPI_TransmitReceive>
    return rxDat;
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	200000a4 	.word	0x200000a4

08006cdc <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006cdc:	b590      	push	{r4, r7, lr}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	e00a      	b.n	8006d02 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	18d4      	adds	r4, r2, r3
 8006cf2:	20ff      	movs	r0, #255	; 0xff
 8006cf4:	f7ff ffdc 	bl	8006cb0 <xchg_spi>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	60fb      	str	r3, [r7, #12]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d3f0      	bcc.n	8006cec <rcvr_spi_multi+0x10>
	}
}
 8006d0a:	bf00      	nop
 8006d0c:	bf00      	nop
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd90      	pop	{r4, r7, pc}

08006d14 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60fb      	str	r3, [r7, #12]
 8006d22:	e009      	b.n	8006d38 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	4413      	add	r3, r2
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7ff ffbf 	bl	8006cb0 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	3301      	adds	r3, #1
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d3f1      	bcc.n	8006d24 <xmit_spi_multi+0x10>
	}
}
 8006d40:	bf00      	nop
 8006d42:	bf00      	nop
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b086      	sub	sp, #24
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006d52:	f7fc faef 	bl	8003334 <HAL_GetTick>
 8006d56:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006d5c:	20ff      	movs	r0, #255	; 0xff
 8006d5e:	f7ff ffa7 	bl	8006cb0 <xchg_spi>
 8006d62:	4603      	mov	r3, r0
 8006d64:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
 8006d68:	2bff      	cmp	r3, #255	; 0xff
 8006d6a:	d007      	beq.n	8006d7c <wait_ready+0x32>
 8006d6c:	f7fc fae2 	bl	8003334 <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d8ef      	bhi.n	8006d5c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
 8006d7e:	2bff      	cmp	r3, #255	; 0xff
 8006d80:	bf0c      	ite	eq
 8006d82:	2301      	moveq	r3, #1
 8006d84:	2300      	movne	r3, #0
 8006d86:	b2db      	uxtb	r3, r3
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3718      	adds	r7, #24
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006d94:	2201      	movs	r2, #1
 8006d96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d9a:	4804      	ldr	r0, [pc, #16]	; (8006dac <despiselect+0x1c>)
 8006d9c:	f7fd f922 	bl	8003fe4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006da0:	20ff      	movs	r0, #255	; 0xff
 8006da2:	f7ff ff85 	bl	8006cb0 <xchg_spi>

}
 8006da6:	bf00      	nop
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	40020000 	.word	0x40020000

08006db0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006db4:	2200      	movs	r2, #0
 8006db6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006dba:	480a      	ldr	r0, [pc, #40]	; (8006de4 <spiselect+0x34>)
 8006dbc:	f7fd f912 	bl	8003fe4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006dc0:	20ff      	movs	r0, #255	; 0xff
 8006dc2:	f7ff ff75 	bl	8006cb0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006dc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006dca:	f7ff ffbe 	bl	8006d4a <wait_ready>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <spiselect+0x28>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e002      	b.n	8006dde <spiselect+0x2e>

	despiselect();
 8006dd8:	f7ff ffda 	bl	8006d90 <despiselect>
	return 0;	/* Timeout */
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	40020000 	.word	0x40020000

08006de8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8006df2:	20c8      	movs	r0, #200	; 0xc8
 8006df4:	f7ff ff32 	bl	8006c5c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006df8:	20ff      	movs	r0, #255	; 0xff
 8006dfa:	f7ff ff59 	bl	8006cb0 <xchg_spi>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
 8006e04:	2bff      	cmp	r3, #255	; 0xff
 8006e06:	d104      	bne.n	8006e12 <rcvr_datablock+0x2a>
 8006e08:	f7ff ff3c 	bl	8006c84 <SPI_Timer_Status>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1f2      	bne.n	8006df8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8006e12:	7bfb      	ldrb	r3, [r7, #15]
 8006e14:	2bfe      	cmp	r3, #254	; 0xfe
 8006e16:	d001      	beq.n	8006e1c <rcvr_datablock+0x34>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	e00a      	b.n	8006e32 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006e1c:	6839      	ldr	r1, [r7, #0]
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f7ff ff5c 	bl	8006cdc <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006e24:	20ff      	movs	r0, #255	; 0xff
 8006e26:	f7ff ff43 	bl	8006cb0 <xchg_spi>
 8006e2a:	20ff      	movs	r0, #255	; 0xff
 8006e2c:	f7ff ff40 	bl	8006cb0 <xchg_spi>

	return 1;						/* Function succeeded */
 8006e30:	2301      	movs	r3, #1
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b084      	sub	sp, #16
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	460b      	mov	r3, r1
 8006e44:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006e46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006e4a:	f7ff ff7e 	bl	8006d4a <wait_ready>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <xmit_datablock+0x1e>
 8006e54:	2300      	movs	r3, #0
 8006e56:	e01e      	b.n	8006e96 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006e58:	78fb      	ldrb	r3, [r7, #3]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7ff ff28 	bl	8006cb0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006e60:	78fb      	ldrb	r3, [r7, #3]
 8006e62:	2bfd      	cmp	r3, #253	; 0xfd
 8006e64:	d016      	beq.n	8006e94 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006e66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7ff ff52 	bl	8006d14 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006e70:	20ff      	movs	r0, #255	; 0xff
 8006e72:	f7ff ff1d 	bl	8006cb0 <xchg_spi>
 8006e76:	20ff      	movs	r0, #255	; 0xff
 8006e78:	f7ff ff1a 	bl	8006cb0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006e7c:	20ff      	movs	r0, #255	; 0xff
 8006e7e:	f7ff ff17 	bl	8006cb0 <xchg_spi>
 8006e82:	4603      	mov	r3, r0
 8006e84:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
 8006e88:	f003 031f 	and.w	r3, r3, #31
 8006e8c:	2b05      	cmp	r3, #5
 8006e8e:	d001      	beq.n	8006e94 <xmit_datablock+0x5a>
 8006e90:	2300      	movs	r3, #0
 8006e92:	e000      	b.n	8006e96 <xmit_datablock+0x5c>
	}
	return 1;
 8006e94:	2301      	movs	r3, #1
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	6039      	str	r1, [r7, #0]
 8006ea8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	da0e      	bge.n	8006ed0 <send_cmd+0x32>
		cmd &= 0x7F;
 8006eb2:	79fb      	ldrb	r3, [r7, #7]
 8006eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eb8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006eba:	2100      	movs	r1, #0
 8006ebc:	2037      	movs	r0, #55	; 0x37
 8006ebe:	f7ff ffee 	bl	8006e9e <send_cmd>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006ec6:	7bbb      	ldrb	r3, [r7, #14]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d901      	bls.n	8006ed0 <send_cmd+0x32>
 8006ecc:	7bbb      	ldrb	r3, [r7, #14]
 8006ece:	e051      	b.n	8006f74 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8006ed0:	79fb      	ldrb	r3, [r7, #7]
 8006ed2:	2b0c      	cmp	r3, #12
 8006ed4:	d008      	beq.n	8006ee8 <send_cmd+0x4a>
		despiselect();
 8006ed6:	f7ff ff5b 	bl	8006d90 <despiselect>
		if (!spiselect()) return 0xFF;
 8006eda:	f7ff ff69 	bl	8006db0 <spiselect>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <send_cmd+0x4a>
 8006ee4:	23ff      	movs	r3, #255	; 0xff
 8006ee6:	e045      	b.n	8006f74 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006ee8:	79fb      	ldrb	r3, [r7, #7]
 8006eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7ff fedd 	bl	8006cb0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	0e1b      	lsrs	r3, r3, #24
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7ff fed7 	bl	8006cb0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	0c1b      	lsrs	r3, r3, #16
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7ff fed1 	bl	8006cb0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	0a1b      	lsrs	r3, r3, #8
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7ff fecb 	bl	8006cb0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7ff fec6 	bl	8006cb0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006f24:	2301      	movs	r3, #1
 8006f26:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006f28:	79fb      	ldrb	r3, [r7, #7]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <send_cmd+0x94>
 8006f2e:	2395      	movs	r3, #149	; 0x95
 8006f30:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006f32:	79fb      	ldrb	r3, [r7, #7]
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	d101      	bne.n	8006f3c <send_cmd+0x9e>
 8006f38:	2387      	movs	r3, #135	; 0x87
 8006f3a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7ff feb6 	bl	8006cb0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006f44:	79fb      	ldrb	r3, [r7, #7]
 8006f46:	2b0c      	cmp	r3, #12
 8006f48:	d102      	bne.n	8006f50 <send_cmd+0xb2>
 8006f4a:	20ff      	movs	r0, #255	; 0xff
 8006f4c:	f7ff feb0 	bl	8006cb0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006f50:	230a      	movs	r3, #10
 8006f52:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006f54:	20ff      	movs	r0, #255	; 0xff
 8006f56:	f7ff feab 	bl	8006cb0 <xchg_spi>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006f5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	da05      	bge.n	8006f72 <send_cmd+0xd4>
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	73fb      	strb	r3, [r7, #15]
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1f0      	bne.n	8006f54 <send_cmd+0xb6>

	return res;							/* Return received response */
 8006f72:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006f7c:	b590      	push	{r4, r7, lr}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	4603      	mov	r3, r0
 8006f84:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006f86:	79fb      	ldrb	r3, [r7, #7]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d001      	beq.n	8006f90 <USER_SPI_initialize+0x14>
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e0d4      	b.n	800713a <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006f90:	4b6c      	ldr	r3, [pc, #432]	; (8007144 <USER_SPI_initialize+0x1c8>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d003      	beq.n	8006fa6 <USER_SPI_initialize+0x2a>
 8006f9e:	4b69      	ldr	r3, [pc, #420]	; (8007144 <USER_SPI_initialize+0x1c8>)
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	e0c9      	b.n	800713a <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8006fa6:	4b68      	ldr	r3, [pc, #416]	; (8007148 <USER_SPI_initialize+0x1cc>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	4b66      	ldr	r3, [pc, #408]	; (8007148 <USER_SPI_initialize+0x1cc>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8006fb4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006fb6:	230a      	movs	r3, #10
 8006fb8:	73fb      	strb	r3, [r7, #15]
 8006fba:	e005      	b.n	8006fc8 <USER_SPI_initialize+0x4c>
 8006fbc:	20ff      	movs	r0, #255	; 0xff
 8006fbe:	f7ff fe77 	bl	8006cb0 <xchg_spi>
 8006fc2:	7bfb      	ldrb	r3, [r7, #15]
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	73fb      	strb	r3, [r7, #15]
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1f6      	bne.n	8006fbc <USER_SPI_initialize+0x40>

	ty = 0;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	f7ff ff62 	bl	8006e9e <send_cmd>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	f040 808b 	bne.w	80070f8 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006fe2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006fe6:	f7ff fe39 	bl	8006c5c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006fea:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006fee:	2008      	movs	r0, #8
 8006ff0:	f7ff ff55 	bl	8006e9e <send_cmd>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d151      	bne.n	800709e <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	73fb      	strb	r3, [r7, #15]
 8006ffe:	e00d      	b.n	800701c <USER_SPI_initialize+0xa0>
 8007000:	7bfc      	ldrb	r4, [r7, #15]
 8007002:	20ff      	movs	r0, #255	; 0xff
 8007004:	f7ff fe54 	bl	8006cb0 <xchg_spi>
 8007008:	4603      	mov	r3, r0
 800700a:	461a      	mov	r2, r3
 800700c:	f104 0310 	add.w	r3, r4, #16
 8007010:	443b      	add	r3, r7
 8007012:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007016:	7bfb      	ldrb	r3, [r7, #15]
 8007018:	3301      	adds	r3, #1
 800701a:	73fb      	strb	r3, [r7, #15]
 800701c:	7bfb      	ldrb	r3, [r7, #15]
 800701e:	2b03      	cmp	r3, #3
 8007020:	d9ee      	bls.n	8007000 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8007022:	7abb      	ldrb	r3, [r7, #10]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d167      	bne.n	80070f8 <USER_SPI_initialize+0x17c>
 8007028:	7afb      	ldrb	r3, [r7, #11]
 800702a:	2baa      	cmp	r3, #170	; 0xaa
 800702c:	d164      	bne.n	80070f8 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800702e:	bf00      	nop
 8007030:	f7ff fe28 	bl	8006c84 <SPI_Timer_Status>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d007      	beq.n	800704a <USER_SPI_initialize+0xce>
 800703a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800703e:	20a9      	movs	r0, #169	; 0xa9
 8007040:	f7ff ff2d 	bl	8006e9e <send_cmd>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1f2      	bne.n	8007030 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800704a:	f7ff fe1b 	bl	8006c84 <SPI_Timer_Status>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d051      	beq.n	80070f8 <USER_SPI_initialize+0x17c>
 8007054:	2100      	movs	r1, #0
 8007056:	203a      	movs	r0, #58	; 0x3a
 8007058:	f7ff ff21 	bl	8006e9e <send_cmd>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d14a      	bne.n	80070f8 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8007062:	2300      	movs	r3, #0
 8007064:	73fb      	strb	r3, [r7, #15]
 8007066:	e00d      	b.n	8007084 <USER_SPI_initialize+0x108>
 8007068:	7bfc      	ldrb	r4, [r7, #15]
 800706a:	20ff      	movs	r0, #255	; 0xff
 800706c:	f7ff fe20 	bl	8006cb0 <xchg_spi>
 8007070:	4603      	mov	r3, r0
 8007072:	461a      	mov	r2, r3
 8007074:	f104 0310 	add.w	r3, r4, #16
 8007078:	443b      	add	r3, r7
 800707a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800707e:	7bfb      	ldrb	r3, [r7, #15]
 8007080:	3301      	adds	r3, #1
 8007082:	73fb      	strb	r3, [r7, #15]
 8007084:	7bfb      	ldrb	r3, [r7, #15]
 8007086:	2b03      	cmp	r3, #3
 8007088:	d9ee      	bls.n	8007068 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800708a:	7a3b      	ldrb	r3, [r7, #8]
 800708c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <USER_SPI_initialize+0x11c>
 8007094:	230c      	movs	r3, #12
 8007096:	e000      	b.n	800709a <USER_SPI_initialize+0x11e>
 8007098:	2304      	movs	r3, #4
 800709a:	737b      	strb	r3, [r7, #13]
 800709c:	e02c      	b.n	80070f8 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800709e:	2100      	movs	r1, #0
 80070a0:	20a9      	movs	r0, #169	; 0xa9
 80070a2:	f7ff fefc 	bl	8006e9e <send_cmd>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d804      	bhi.n	80070b6 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80070ac:	2302      	movs	r3, #2
 80070ae:	737b      	strb	r3, [r7, #13]
 80070b0:	23a9      	movs	r3, #169	; 0xa9
 80070b2:	73bb      	strb	r3, [r7, #14]
 80070b4:	e003      	b.n	80070be <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80070b6:	2301      	movs	r3, #1
 80070b8:	737b      	strb	r3, [r7, #13]
 80070ba:	2301      	movs	r3, #1
 80070bc:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80070be:	bf00      	nop
 80070c0:	f7ff fde0 	bl	8006c84 <SPI_Timer_Status>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d007      	beq.n	80070da <USER_SPI_initialize+0x15e>
 80070ca:	7bbb      	ldrb	r3, [r7, #14]
 80070cc:	2100      	movs	r1, #0
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7ff fee5 	bl	8006e9e <send_cmd>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1f2      	bne.n	80070c0 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80070da:	f7ff fdd3 	bl	8006c84 <SPI_Timer_Status>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d007      	beq.n	80070f4 <USER_SPI_initialize+0x178>
 80070e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80070e8:	2010      	movs	r0, #16
 80070ea:	f7ff fed8 	bl	8006e9e <send_cmd>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <USER_SPI_initialize+0x17c>
				ty = 0;
 80070f4:	2300      	movs	r3, #0
 80070f6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80070f8:	4a14      	ldr	r2, [pc, #80]	; (800714c <USER_SPI_initialize+0x1d0>)
 80070fa:	7b7b      	ldrb	r3, [r7, #13]
 80070fc:	7013      	strb	r3, [r2, #0]
	despiselect();
 80070fe:	f7ff fe47 	bl	8006d90 <despiselect>

	if (ty) {			/* OK */
 8007102:	7b7b      	ldrb	r3, [r7, #13]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d012      	beq.n	800712e <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8007108:	4b0f      	ldr	r3, [pc, #60]	; (8007148 <USER_SPI_initialize+0x1cc>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007112:	4b0d      	ldr	r3, [pc, #52]	; (8007148 <USER_SPI_initialize+0x1cc>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f042 0218 	orr.w	r2, r2, #24
 800711a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800711c:	4b09      	ldr	r3, [pc, #36]	; (8007144 <USER_SPI_initialize+0x1c8>)
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	b2db      	uxtb	r3, r3
 8007122:	f023 0301 	bic.w	r3, r3, #1
 8007126:	b2da      	uxtb	r2, r3
 8007128:	4b06      	ldr	r3, [pc, #24]	; (8007144 <USER_SPI_initialize+0x1c8>)
 800712a:	701a      	strb	r2, [r3, #0]
 800712c:	e002      	b.n	8007134 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800712e:	4b05      	ldr	r3, [pc, #20]	; (8007144 <USER_SPI_initialize+0x1c8>)
 8007130:	2201      	movs	r2, #1
 8007132:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007134:	4b03      	ldr	r3, [pc, #12]	; (8007144 <USER_SPI_initialize+0x1c8>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	b2db      	uxtb	r3, r3
}
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	bd90      	pop	{r4, r7, pc}
 8007142:	bf00      	nop
 8007144:	20000020 	.word	0x20000020
 8007148:	200000a4 	.word	0x200000a4
 800714c:	20001e44 	.word	0x20001e44

08007150 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	4603      	mov	r3, r0
 8007158:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800715a:	79fb      	ldrb	r3, [r7, #7]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <USER_SPI_status+0x14>
 8007160:	2301      	movs	r3, #1
 8007162:	e002      	b.n	800716a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8007164:	4b04      	ldr	r3, [pc, #16]	; (8007178 <USER_SPI_status+0x28>)
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	b2db      	uxtb	r3, r3
}
 800716a:	4618      	mov	r0, r3
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	20000020 	.word	0x20000020

0800717c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	60b9      	str	r1, [r7, #8]
 8007184:	607a      	str	r2, [r7, #4]
 8007186:	603b      	str	r3, [r7, #0]
 8007188:	4603      	mov	r3, r0
 800718a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800718c:	7bfb      	ldrb	r3, [r7, #15]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d102      	bne.n	8007198 <USER_SPI_read+0x1c>
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <USER_SPI_read+0x20>
 8007198:	2304      	movs	r3, #4
 800719a:	e04d      	b.n	8007238 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800719c:	4b28      	ldr	r3, [pc, #160]	; (8007240 <USER_SPI_read+0xc4>)
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <USER_SPI_read+0x32>
 80071aa:	2303      	movs	r3, #3
 80071ac:	e044      	b.n	8007238 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80071ae:	4b25      	ldr	r3, [pc, #148]	; (8007244 <USER_SPI_read+0xc8>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	f003 0308 	and.w	r3, r3, #8
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d102      	bne.n	80071c0 <USER_SPI_read+0x44>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	025b      	lsls	r3, r3, #9
 80071be:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d111      	bne.n	80071ea <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80071c6:	6879      	ldr	r1, [r7, #4]
 80071c8:	2011      	movs	r0, #17
 80071ca:	f7ff fe68 	bl	8006e9e <send_cmd>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d129      	bne.n	8007228 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80071d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80071d8:	68b8      	ldr	r0, [r7, #8]
 80071da:	f7ff fe05 	bl	8006de8 <rcvr_datablock>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d021      	beq.n	8007228 <USER_SPI_read+0xac>
			count = 0;
 80071e4:	2300      	movs	r3, #0
 80071e6:	603b      	str	r3, [r7, #0]
 80071e8:	e01e      	b.n	8007228 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80071ea:	6879      	ldr	r1, [r7, #4]
 80071ec:	2012      	movs	r0, #18
 80071ee:	f7ff fe56 	bl	8006e9e <send_cmd>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d117      	bne.n	8007228 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80071f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80071fc:	68b8      	ldr	r0, [r7, #8]
 80071fe:	f7ff fdf3 	bl	8006de8 <rcvr_datablock>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00a      	beq.n	800721e <USER_SPI_read+0xa2>
				buff += 512;
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800720e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	3b01      	subs	r3, #1
 8007214:	603b      	str	r3, [r7, #0]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1ed      	bne.n	80071f8 <USER_SPI_read+0x7c>
 800721c:	e000      	b.n	8007220 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800721e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007220:	2100      	movs	r1, #0
 8007222:	200c      	movs	r0, #12
 8007224:	f7ff fe3b 	bl	8006e9e <send_cmd>
		}
	}
	despiselect();
 8007228:	f7ff fdb2 	bl	8006d90 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	bf14      	ite	ne
 8007232:	2301      	movne	r3, #1
 8007234:	2300      	moveq	r3, #0
 8007236:	b2db      	uxtb	r3, r3
}
 8007238:	4618      	mov	r0, r3
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	20000020 	.word	0x20000020
 8007244:	20001e44 	.word	0x20001e44

08007248 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	60b9      	str	r1, [r7, #8]
 8007250:	607a      	str	r2, [r7, #4]
 8007252:	603b      	str	r3, [r7, #0]
 8007254:	4603      	mov	r3, r0
 8007256:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007258:	7bfb      	ldrb	r3, [r7, #15]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d102      	bne.n	8007264 <USER_SPI_write+0x1c>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d101      	bne.n	8007268 <USER_SPI_write+0x20>
 8007264:	2304      	movs	r3, #4
 8007266:	e063      	b.n	8007330 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007268:	4b33      	ldr	r3, [pc, #204]	; (8007338 <USER_SPI_write+0xf0>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	b2db      	uxtb	r3, r3
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <USER_SPI_write+0x32>
 8007276:	2303      	movs	r3, #3
 8007278:	e05a      	b.n	8007330 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800727a:	4b2f      	ldr	r3, [pc, #188]	; (8007338 <USER_SPI_write+0xf0>)
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	b2db      	uxtb	r3, r3
 8007280:	f003 0304 	and.w	r3, r3, #4
 8007284:	2b00      	cmp	r3, #0
 8007286:	d001      	beq.n	800728c <USER_SPI_write+0x44>
 8007288:	2302      	movs	r3, #2
 800728a:	e051      	b.n	8007330 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800728c:	4b2b      	ldr	r3, [pc, #172]	; (800733c <USER_SPI_write+0xf4>)
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	f003 0308 	and.w	r3, r3, #8
 8007294:	2b00      	cmp	r3, #0
 8007296:	d102      	bne.n	800729e <USER_SPI_write+0x56>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	025b      	lsls	r3, r3, #9
 800729c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d110      	bne.n	80072c6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80072a4:	6879      	ldr	r1, [r7, #4]
 80072a6:	2018      	movs	r0, #24
 80072a8:	f7ff fdf9 	bl	8006e9e <send_cmd>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d136      	bne.n	8007320 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80072b2:	21fe      	movs	r1, #254	; 0xfe
 80072b4:	68b8      	ldr	r0, [r7, #8]
 80072b6:	f7ff fdc0 	bl	8006e3a <xmit_datablock>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d02f      	beq.n	8007320 <USER_SPI_write+0xd8>
			count = 0;
 80072c0:	2300      	movs	r3, #0
 80072c2:	603b      	str	r3, [r7, #0]
 80072c4:	e02c      	b.n	8007320 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80072c6:	4b1d      	ldr	r3, [pc, #116]	; (800733c <USER_SPI_write+0xf4>)
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	f003 0306 	and.w	r3, r3, #6
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d003      	beq.n	80072da <USER_SPI_write+0x92>
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	2097      	movs	r0, #151	; 0x97
 80072d6:	f7ff fde2 	bl	8006e9e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80072da:	6879      	ldr	r1, [r7, #4]
 80072dc:	2019      	movs	r0, #25
 80072de:	f7ff fdde 	bl	8006e9e <send_cmd>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d11b      	bne.n	8007320 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80072e8:	21fc      	movs	r1, #252	; 0xfc
 80072ea:	68b8      	ldr	r0, [r7, #8]
 80072ec:	f7ff fda5 	bl	8006e3a <xmit_datablock>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00a      	beq.n	800730c <USER_SPI_write+0xc4>
				buff += 512;
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80072fc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	3b01      	subs	r3, #1
 8007302:	603b      	str	r3, [r7, #0]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1ee      	bne.n	80072e8 <USER_SPI_write+0xa0>
 800730a:	e000      	b.n	800730e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800730c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800730e:	21fd      	movs	r1, #253	; 0xfd
 8007310:	2000      	movs	r0, #0
 8007312:	f7ff fd92 	bl	8006e3a <xmit_datablock>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <USER_SPI_write+0xd8>
 800731c:	2301      	movs	r3, #1
 800731e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007320:	f7ff fd36 	bl	8006d90 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	bf14      	ite	ne
 800732a:	2301      	movne	r3, #1
 800732c:	2300      	moveq	r3, #0
 800732e:	b2db      	uxtb	r3, r3
}
 8007330:	4618      	mov	r0, r3
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	20000020 	.word	0x20000020
 800733c:	20001e44 	.word	0x20001e44

08007340 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b08c      	sub	sp, #48	; 0x30
 8007344:	af00      	add	r7, sp, #0
 8007346:	4603      	mov	r3, r0
 8007348:	603a      	str	r2, [r7, #0]
 800734a:	71fb      	strb	r3, [r7, #7]
 800734c:	460b      	mov	r3, r1
 800734e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007350:	79fb      	ldrb	r3, [r7, #7]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d001      	beq.n	800735a <USER_SPI_ioctl+0x1a>
 8007356:	2304      	movs	r3, #4
 8007358:	e15a      	b.n	8007610 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800735a:	4baf      	ldr	r3, [pc, #700]	; (8007618 <USER_SPI_ioctl+0x2d8>)
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	b2db      	uxtb	r3, r3
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <USER_SPI_ioctl+0x2c>
 8007368:	2303      	movs	r3, #3
 800736a:	e151      	b.n	8007610 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8007372:	79bb      	ldrb	r3, [r7, #6]
 8007374:	2b04      	cmp	r3, #4
 8007376:	f200 8136 	bhi.w	80075e6 <USER_SPI_ioctl+0x2a6>
 800737a:	a201      	add	r2, pc, #4	; (adr r2, 8007380 <USER_SPI_ioctl+0x40>)
 800737c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007380:	08007395 	.word	0x08007395
 8007384:	080073a9 	.word	0x080073a9
 8007388:	080075e7 	.word	0x080075e7
 800738c:	08007455 	.word	0x08007455
 8007390:	0800754b 	.word	0x0800754b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8007394:	f7ff fd0c 	bl	8006db0 <spiselect>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 8127 	beq.w	80075ee <USER_SPI_ioctl+0x2ae>
 80073a0:	2300      	movs	r3, #0
 80073a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80073a6:	e122      	b.n	80075ee <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80073a8:	2100      	movs	r1, #0
 80073aa:	2009      	movs	r0, #9
 80073ac:	f7ff fd77 	bl	8006e9e <send_cmd>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f040 811d 	bne.w	80075f2 <USER_SPI_ioctl+0x2b2>
 80073b8:	f107 030c 	add.w	r3, r7, #12
 80073bc:	2110      	movs	r1, #16
 80073be:	4618      	mov	r0, r3
 80073c0:	f7ff fd12 	bl	8006de8 <rcvr_datablock>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f000 8113 	beq.w	80075f2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80073cc:	7b3b      	ldrb	r3, [r7, #12]
 80073ce:	099b      	lsrs	r3, r3, #6
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d111      	bne.n	80073fa <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80073d6:	7d7b      	ldrb	r3, [r7, #21]
 80073d8:	461a      	mov	r2, r3
 80073da:	7d3b      	ldrb	r3, [r7, #20]
 80073dc:	021b      	lsls	r3, r3, #8
 80073de:	4413      	add	r3, r2
 80073e0:	461a      	mov	r2, r3
 80073e2:	7cfb      	ldrb	r3, [r7, #19]
 80073e4:	041b      	lsls	r3, r3, #16
 80073e6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80073ea:	4413      	add	r3, r2
 80073ec:	3301      	adds	r3, #1
 80073ee:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	029a      	lsls	r2, r3, #10
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	e028      	b.n	800744c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80073fa:	7c7b      	ldrb	r3, [r7, #17]
 80073fc:	f003 030f 	and.w	r3, r3, #15
 8007400:	b2da      	uxtb	r2, r3
 8007402:	7dbb      	ldrb	r3, [r7, #22]
 8007404:	09db      	lsrs	r3, r3, #7
 8007406:	b2db      	uxtb	r3, r3
 8007408:	4413      	add	r3, r2
 800740a:	b2da      	uxtb	r2, r3
 800740c:	7d7b      	ldrb	r3, [r7, #21]
 800740e:	005b      	lsls	r3, r3, #1
 8007410:	b2db      	uxtb	r3, r3
 8007412:	f003 0306 	and.w	r3, r3, #6
 8007416:	b2db      	uxtb	r3, r3
 8007418:	4413      	add	r3, r2
 800741a:	b2db      	uxtb	r3, r3
 800741c:	3302      	adds	r3, #2
 800741e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007422:	7d3b      	ldrb	r3, [r7, #20]
 8007424:	099b      	lsrs	r3, r3, #6
 8007426:	b2db      	uxtb	r3, r3
 8007428:	461a      	mov	r2, r3
 800742a:	7cfb      	ldrb	r3, [r7, #19]
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	441a      	add	r2, r3
 8007430:	7cbb      	ldrb	r3, [r7, #18]
 8007432:	029b      	lsls	r3, r3, #10
 8007434:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007438:	4413      	add	r3, r2
 800743a:	3301      	adds	r3, #1
 800743c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800743e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007442:	3b09      	subs	r3, #9
 8007444:	69fa      	ldr	r2, [r7, #28]
 8007446:	409a      	lsls	r2, r3
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800744c:	2300      	movs	r3, #0
 800744e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007452:	e0ce      	b.n	80075f2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8007454:	4b71      	ldr	r3, [pc, #452]	; (800761c <USER_SPI_ioctl+0x2dc>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	f003 0304 	and.w	r3, r3, #4
 800745c:	2b00      	cmp	r3, #0
 800745e:	d031      	beq.n	80074c4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8007460:	2100      	movs	r1, #0
 8007462:	208d      	movs	r0, #141	; 0x8d
 8007464:	f7ff fd1b 	bl	8006e9e <send_cmd>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	f040 80c3 	bne.w	80075f6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8007470:	20ff      	movs	r0, #255	; 0xff
 8007472:	f7ff fc1d 	bl	8006cb0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8007476:	f107 030c 	add.w	r3, r7, #12
 800747a:	2110      	movs	r1, #16
 800747c:	4618      	mov	r0, r3
 800747e:	f7ff fcb3 	bl	8006de8 <rcvr_datablock>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 80b6 	beq.w	80075f6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800748a:	2330      	movs	r3, #48	; 0x30
 800748c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007490:	e007      	b.n	80074a2 <USER_SPI_ioctl+0x162>
 8007492:	20ff      	movs	r0, #255	; 0xff
 8007494:	f7ff fc0c 	bl	8006cb0 <xchg_spi>
 8007498:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800749c:	3b01      	subs	r3, #1
 800749e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80074a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1f3      	bne.n	8007492 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80074aa:	7dbb      	ldrb	r3, [r7, #22]
 80074ac:	091b      	lsrs	r3, r3, #4
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	461a      	mov	r2, r3
 80074b2:	2310      	movs	r3, #16
 80074b4:	fa03 f202 	lsl.w	r2, r3, r2
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80074bc:	2300      	movs	r3, #0
 80074be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80074c2:	e098      	b.n	80075f6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80074c4:	2100      	movs	r1, #0
 80074c6:	2009      	movs	r0, #9
 80074c8:	f7ff fce9 	bl	8006e9e <send_cmd>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f040 8091 	bne.w	80075f6 <USER_SPI_ioctl+0x2b6>
 80074d4:	f107 030c 	add.w	r3, r7, #12
 80074d8:	2110      	movs	r1, #16
 80074da:	4618      	mov	r0, r3
 80074dc:	f7ff fc84 	bl	8006de8 <rcvr_datablock>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 8087 	beq.w	80075f6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80074e8:	4b4c      	ldr	r3, [pc, #304]	; (800761c <USER_SPI_ioctl+0x2dc>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	f003 0302 	and.w	r3, r3, #2
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d012      	beq.n	800751a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80074f4:	7dbb      	ldrb	r3, [r7, #22]
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80074fc:	7dfa      	ldrb	r2, [r7, #23]
 80074fe:	09d2      	lsrs	r2, r2, #7
 8007500:	b2d2      	uxtb	r2, r2
 8007502:	4413      	add	r3, r2
 8007504:	1c5a      	adds	r2, r3, #1
 8007506:	7e7b      	ldrb	r3, [r7, #25]
 8007508:	099b      	lsrs	r3, r3, #6
 800750a:	b2db      	uxtb	r3, r3
 800750c:	3b01      	subs	r3, #1
 800750e:	fa02 f303 	lsl.w	r3, r2, r3
 8007512:	461a      	mov	r2, r3
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	601a      	str	r2, [r3, #0]
 8007518:	e013      	b.n	8007542 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800751a:	7dbb      	ldrb	r3, [r7, #22]
 800751c:	109b      	asrs	r3, r3, #2
 800751e:	b29b      	uxth	r3, r3
 8007520:	f003 031f 	and.w	r3, r3, #31
 8007524:	3301      	adds	r3, #1
 8007526:	7dfa      	ldrb	r2, [r7, #23]
 8007528:	00d2      	lsls	r2, r2, #3
 800752a:	f002 0218 	and.w	r2, r2, #24
 800752e:	7df9      	ldrb	r1, [r7, #23]
 8007530:	0949      	lsrs	r1, r1, #5
 8007532:	b2c9      	uxtb	r1, r1
 8007534:	440a      	add	r2, r1
 8007536:	3201      	adds	r2, #1
 8007538:	fb02 f303 	mul.w	r3, r2, r3
 800753c:	461a      	mov	r2, r3
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007542:	2300      	movs	r3, #0
 8007544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007548:	e055      	b.n	80075f6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800754a:	4b34      	ldr	r3, [pc, #208]	; (800761c <USER_SPI_ioctl+0x2dc>)
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	f003 0306 	and.w	r3, r3, #6
 8007552:	2b00      	cmp	r3, #0
 8007554:	d051      	beq.n	80075fa <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007556:	f107 020c 	add.w	r2, r7, #12
 800755a:	79fb      	ldrb	r3, [r7, #7]
 800755c:	210b      	movs	r1, #11
 800755e:	4618      	mov	r0, r3
 8007560:	f7ff feee 	bl	8007340 <USER_SPI_ioctl>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d149      	bne.n	80075fe <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800756a:	7b3b      	ldrb	r3, [r7, #12]
 800756c:	099b      	lsrs	r3, r3, #6
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	d104      	bne.n	800757e <USER_SPI_ioctl+0x23e>
 8007574:	7dbb      	ldrb	r3, [r7, #22]
 8007576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757a:	2b00      	cmp	r3, #0
 800757c:	d041      	beq.n	8007602 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	623b      	str	r3, [r7, #32]
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	62bb      	str	r3, [r7, #40]	; 0x28
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800758e:	4b23      	ldr	r3, [pc, #140]	; (800761c <USER_SPI_ioctl+0x2dc>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	f003 0308 	and.w	r3, r3, #8
 8007596:	2b00      	cmp	r3, #0
 8007598:	d105      	bne.n	80075a6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800759a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759c:	025b      	lsls	r3, r3, #9
 800759e:	62bb      	str	r3, [r7, #40]	; 0x28
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	025b      	lsls	r3, r3, #9
 80075a4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80075a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075a8:	2020      	movs	r0, #32
 80075aa:	f7ff fc78 	bl	8006e9e <send_cmd>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d128      	bne.n	8007606 <USER_SPI_ioctl+0x2c6>
 80075b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075b6:	2021      	movs	r0, #33	; 0x21
 80075b8:	f7ff fc71 	bl	8006e9e <send_cmd>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d121      	bne.n	8007606 <USER_SPI_ioctl+0x2c6>
 80075c2:	2100      	movs	r1, #0
 80075c4:	2026      	movs	r0, #38	; 0x26
 80075c6:	f7ff fc6a 	bl	8006e9e <send_cmd>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d11a      	bne.n	8007606 <USER_SPI_ioctl+0x2c6>
 80075d0:	f247 5030 	movw	r0, #30000	; 0x7530
 80075d4:	f7ff fbb9 	bl	8006d4a <wait_ready>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d013      	beq.n	8007606 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80075de:	2300      	movs	r3, #0
 80075e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80075e4:	e00f      	b.n	8007606 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80075e6:	2304      	movs	r3, #4
 80075e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80075ec:	e00c      	b.n	8007608 <USER_SPI_ioctl+0x2c8>
		break;
 80075ee:	bf00      	nop
 80075f0:	e00a      	b.n	8007608 <USER_SPI_ioctl+0x2c8>
		break;
 80075f2:	bf00      	nop
 80075f4:	e008      	b.n	8007608 <USER_SPI_ioctl+0x2c8>
		break;
 80075f6:	bf00      	nop
 80075f8:	e006      	b.n	8007608 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80075fa:	bf00      	nop
 80075fc:	e004      	b.n	8007608 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80075fe:	bf00      	nop
 8007600:	e002      	b.n	8007608 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007602:	bf00      	nop
 8007604:	e000      	b.n	8007608 <USER_SPI_ioctl+0x2c8>
		break;
 8007606:	bf00      	nop
	}

	despiselect();
 8007608:	f7ff fbc2 	bl	8006d90 <despiselect>

	return res;
 800760c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007610:	4618      	mov	r0, r3
 8007612:	3730      	adds	r7, #48	; 0x30
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	20000020 	.word	0x20000020
 800761c:	20001e44 	.word	0x20001e44

08007620 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	4603      	mov	r3, r0
 8007628:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800762a:	79fb      	ldrb	r3, [r7, #7]
 800762c:	4a08      	ldr	r2, [pc, #32]	; (8007650 <disk_status+0x30>)
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	79fa      	ldrb	r2, [r7, #7]
 8007638:	4905      	ldr	r1, [pc, #20]	; (8007650 <disk_status+0x30>)
 800763a:	440a      	add	r2, r1
 800763c:	7a12      	ldrb	r2, [r2, #8]
 800763e:	4610      	mov	r0, r2
 8007640:	4798      	blx	r3
 8007642:	4603      	mov	r3, r0
 8007644:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007646:	7bfb      	ldrb	r3, [r7, #15]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	20001e78 	.word	0x20001e78

08007654 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	4603      	mov	r3, r0
 800765c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007662:	79fb      	ldrb	r3, [r7, #7]
 8007664:	4a0d      	ldr	r2, [pc, #52]	; (800769c <disk_initialize+0x48>)
 8007666:	5cd3      	ldrb	r3, [r2, r3]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d111      	bne.n	8007690 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800766c:	79fb      	ldrb	r3, [r7, #7]
 800766e:	4a0b      	ldr	r2, [pc, #44]	; (800769c <disk_initialize+0x48>)
 8007670:	2101      	movs	r1, #1
 8007672:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007674:	79fb      	ldrb	r3, [r7, #7]
 8007676:	4a09      	ldr	r2, [pc, #36]	; (800769c <disk_initialize+0x48>)
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	79fa      	ldrb	r2, [r7, #7]
 8007682:	4906      	ldr	r1, [pc, #24]	; (800769c <disk_initialize+0x48>)
 8007684:	440a      	add	r2, r1
 8007686:	7a12      	ldrb	r2, [r2, #8]
 8007688:	4610      	mov	r0, r2
 800768a:	4798      	blx	r3
 800768c:	4603      	mov	r3, r0
 800768e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007690:	7bfb      	ldrb	r3, [r7, #15]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	20001e78 	.word	0x20001e78

080076a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80076a0:	b590      	push	{r4, r7, lr}
 80076a2:	b087      	sub	sp, #28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60b9      	str	r1, [r7, #8]
 80076a8:	607a      	str	r2, [r7, #4]
 80076aa:	603b      	str	r3, [r7, #0]
 80076ac:	4603      	mov	r3, r0
 80076ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80076b0:	7bfb      	ldrb	r3, [r7, #15]
 80076b2:	4a0a      	ldr	r2, [pc, #40]	; (80076dc <disk_read+0x3c>)
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	689c      	ldr	r4, [r3, #8]
 80076bc:	7bfb      	ldrb	r3, [r7, #15]
 80076be:	4a07      	ldr	r2, [pc, #28]	; (80076dc <disk_read+0x3c>)
 80076c0:	4413      	add	r3, r2
 80076c2:	7a18      	ldrb	r0, [r3, #8]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	68b9      	ldr	r1, [r7, #8]
 80076ca:	47a0      	blx	r4
 80076cc:	4603      	mov	r3, r0
 80076ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80076d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	371c      	adds	r7, #28
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd90      	pop	{r4, r7, pc}
 80076da:	bf00      	nop
 80076dc:	20001e78 	.word	0x20001e78

080076e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80076e0:	b590      	push	{r4, r7, lr}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60b9      	str	r1, [r7, #8]
 80076e8:	607a      	str	r2, [r7, #4]
 80076ea:	603b      	str	r3, [r7, #0]
 80076ec:	4603      	mov	r3, r0
 80076ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
 80076f2:	4a0a      	ldr	r2, [pc, #40]	; (800771c <disk_write+0x3c>)
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4413      	add	r3, r2
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	68dc      	ldr	r4, [r3, #12]
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
 80076fe:	4a07      	ldr	r2, [pc, #28]	; (800771c <disk_write+0x3c>)
 8007700:	4413      	add	r3, r2
 8007702:	7a18      	ldrb	r0, [r3, #8]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	68b9      	ldr	r1, [r7, #8]
 800770a:	47a0      	blx	r4
 800770c:	4603      	mov	r3, r0
 800770e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007710:	7dfb      	ldrb	r3, [r7, #23]
}
 8007712:	4618      	mov	r0, r3
 8007714:	371c      	adds	r7, #28
 8007716:	46bd      	mov	sp, r7
 8007718:	bd90      	pop	{r4, r7, pc}
 800771a:	bf00      	nop
 800771c:	20001e78 	.word	0x20001e78

08007720 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	4603      	mov	r3, r0
 8007728:	603a      	str	r2, [r7, #0]
 800772a:	71fb      	strb	r3, [r7, #7]
 800772c:	460b      	mov	r3, r1
 800772e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007730:	79fb      	ldrb	r3, [r7, #7]
 8007732:	4a09      	ldr	r2, [pc, #36]	; (8007758 <disk_ioctl+0x38>)
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	79fa      	ldrb	r2, [r7, #7]
 800773e:	4906      	ldr	r1, [pc, #24]	; (8007758 <disk_ioctl+0x38>)
 8007740:	440a      	add	r2, r1
 8007742:	7a10      	ldrb	r0, [r2, #8]
 8007744:	79b9      	ldrb	r1, [r7, #6]
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	4798      	blx	r3
 800774a:	4603      	mov	r3, r0
 800774c:	73fb      	strb	r3, [r7, #15]
  return res;
 800774e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	20001e78 	.word	0x20001e78

0800775c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	3301      	adds	r3, #1
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800776c:	89fb      	ldrh	r3, [r7, #14]
 800776e:	021b      	lsls	r3, r3, #8
 8007770:	b21a      	sxth	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	b21b      	sxth	r3, r3
 8007778:	4313      	orrs	r3, r2
 800777a:	b21b      	sxth	r3, r3
 800777c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800777e:	89fb      	ldrh	r3, [r7, #14]
}
 8007780:	4618      	mov	r0, r3
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	3303      	adds	r3, #3
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	021b      	lsls	r3, r3, #8
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	3202      	adds	r2, #2
 80077a4:	7812      	ldrb	r2, [r2, #0]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	021b      	lsls	r3, r3, #8
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	3201      	adds	r2, #1
 80077b2:	7812      	ldrb	r2, [r2, #0]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	021b      	lsls	r3, r3, #8
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	7812      	ldrb	r2, [r2, #0]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	60fb      	str	r3, [r7, #12]
	return rv;
 80077c4:	68fb      	ldr	r3, [r7, #12]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80077d2:	b480      	push	{r7}
 80077d4:	b083      	sub	sp, #12
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	460b      	mov	r3, r1
 80077dc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	1c5a      	adds	r2, r3, #1
 80077e2:	607a      	str	r2, [r7, #4]
 80077e4:	887a      	ldrh	r2, [r7, #2]
 80077e6:	b2d2      	uxtb	r2, r2
 80077e8:	701a      	strb	r2, [r3, #0]
 80077ea:	887b      	ldrh	r3, [r7, #2]
 80077ec:	0a1b      	lsrs	r3, r3, #8
 80077ee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	1c5a      	adds	r2, r3, #1
 80077f4:	607a      	str	r2, [r7, #4]
 80077f6:	887a      	ldrh	r2, [r7, #2]
 80077f8:	b2d2      	uxtb	r2, r2
 80077fa:	701a      	strb	r2, [r3, #0]
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	1c5a      	adds	r2, r3, #1
 8007816:	607a      	str	r2, [r7, #4]
 8007818:	683a      	ldr	r2, [r7, #0]
 800781a:	b2d2      	uxtb	r2, r2
 800781c:	701a      	strb	r2, [r3, #0]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	0a1b      	lsrs	r3, r3, #8
 8007822:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	1c5a      	adds	r2, r3, #1
 8007828:	607a      	str	r2, [r7, #4]
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	b2d2      	uxtb	r2, r2
 800782e:	701a      	strb	r2, [r3, #0]
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	0a1b      	lsrs	r3, r3, #8
 8007834:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	1c5a      	adds	r2, r3, #1
 800783a:	607a      	str	r2, [r7, #4]
 800783c:	683a      	ldr	r2, [r7, #0]
 800783e:	b2d2      	uxtb	r2, r2
 8007840:	701a      	strb	r2, [r3, #0]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	0a1b      	lsrs	r3, r3, #8
 8007846:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	1c5a      	adds	r2, r3, #1
 800784c:	607a      	str	r2, [r7, #4]
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	b2d2      	uxtb	r2, r2
 8007852:	701a      	strb	r2, [r3, #0]
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00d      	beq.n	8007896 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	1c53      	adds	r3, r2, #1
 800787e:	613b      	str	r3, [r7, #16]
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	1c59      	adds	r1, r3, #1
 8007884:	6179      	str	r1, [r7, #20]
 8007886:	7812      	ldrb	r2, [r2, #0]
 8007888:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	3b01      	subs	r3, #1
 800788e:	607b      	str	r3, [r7, #4]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1f1      	bne.n	800787a <mem_cpy+0x1a>
	}
}
 8007896:	bf00      	nop
 8007898:	371c      	adds	r7, #28
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80078a2:	b480      	push	{r7}
 80078a4:	b087      	sub	sp, #28
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	60f8      	str	r0, [r7, #12]
 80078aa:	60b9      	str	r1, [r7, #8]
 80078ac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	1c5a      	adds	r2, r3, #1
 80078b6:	617a      	str	r2, [r7, #20]
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	b2d2      	uxtb	r2, r2
 80078bc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	3b01      	subs	r3, #1
 80078c2:	607b      	str	r3, [r7, #4]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1f3      	bne.n	80078b2 <mem_set+0x10>
}
 80078ca:	bf00      	nop
 80078cc:	bf00      	nop
 80078ce:	371c      	adds	r7, #28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80078d8:	b480      	push	{r7}
 80078da:	b089      	sub	sp, #36	; 0x24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	61fb      	str	r3, [r7, #28]
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80078ec:	2300      	movs	r3, #0
 80078ee:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	1c5a      	adds	r2, r3, #1
 80078f4:	61fa      	str	r2, [r7, #28]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	4619      	mov	r1, r3
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	1c5a      	adds	r2, r3, #1
 80078fe:	61ba      	str	r2, [r7, #24]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	1acb      	subs	r3, r1, r3
 8007904:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	3b01      	subs	r3, #1
 800790a:	607b      	str	r3, [r7, #4]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d002      	beq.n	8007918 <mem_cmp+0x40>
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d0eb      	beq.n	80078f0 <mem_cmp+0x18>

	return r;
 8007918:	697b      	ldr	r3, [r7, #20]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3724      	adds	r7, #36	; 0x24
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007926:	b480      	push	{r7}
 8007928:	b083      	sub	sp, #12
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007930:	e002      	b.n	8007938 <chk_chr+0x12>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	3301      	adds	r3, #1
 8007936:	607b      	str	r3, [r7, #4]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d005      	beq.n	800794c <chk_chr+0x26>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	461a      	mov	r2, r3
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	4293      	cmp	r3, r2
 800794a:	d1f2      	bne.n	8007932 <chk_chr+0xc>
	return *str;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	781b      	ldrb	r3, [r3, #0]
}
 8007950:	4618      	mov	r0, r3
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007966:	2300      	movs	r3, #0
 8007968:	60bb      	str	r3, [r7, #8]
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	60fb      	str	r3, [r7, #12]
 800796e:	e029      	b.n	80079c4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007970:	4a27      	ldr	r2, [pc, #156]	; (8007a10 <chk_lock+0xb4>)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	011b      	lsls	r3, r3, #4
 8007976:	4413      	add	r3, r2
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d01d      	beq.n	80079ba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800797e:	4a24      	ldr	r2, [pc, #144]	; (8007a10 <chk_lock+0xb4>)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	011b      	lsls	r3, r3, #4
 8007984:	4413      	add	r3, r2
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	429a      	cmp	r2, r3
 800798e:	d116      	bne.n	80079be <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007990:	4a1f      	ldr	r2, [pc, #124]	; (8007a10 <chk_lock+0xb4>)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	011b      	lsls	r3, r3, #4
 8007996:	4413      	add	r3, r2
 8007998:	3304      	adds	r3, #4
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d10c      	bne.n	80079be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80079a4:	4a1a      	ldr	r2, [pc, #104]	; (8007a10 <chk_lock+0xb4>)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	011b      	lsls	r3, r3, #4
 80079aa:	4413      	add	r3, r2
 80079ac:	3308      	adds	r3, #8
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d102      	bne.n	80079be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80079b8:	e007      	b.n	80079ca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80079ba:	2301      	movs	r3, #1
 80079bc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	3301      	adds	r3, #1
 80079c2:	60fb      	str	r3, [r7, #12]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d9d2      	bls.n	8007970 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d109      	bne.n	80079e4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d102      	bne.n	80079dc <chk_lock+0x80>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d101      	bne.n	80079e0 <chk_lock+0x84>
 80079dc:	2300      	movs	r3, #0
 80079de:	e010      	b.n	8007a02 <chk_lock+0xa6>
 80079e0:	2312      	movs	r3, #18
 80079e2:	e00e      	b.n	8007a02 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d108      	bne.n	80079fc <chk_lock+0xa0>
 80079ea:	4a09      	ldr	r2, [pc, #36]	; (8007a10 <chk_lock+0xb4>)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	011b      	lsls	r3, r3, #4
 80079f0:	4413      	add	r3, r2
 80079f2:	330c      	adds	r3, #12
 80079f4:	881b      	ldrh	r3, [r3, #0]
 80079f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079fa:	d101      	bne.n	8007a00 <chk_lock+0xa4>
 80079fc:	2310      	movs	r3, #16
 80079fe:	e000      	b.n	8007a02 <chk_lock+0xa6>
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3714      	adds	r7, #20
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	20001e58 	.word	0x20001e58

08007a14 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	607b      	str	r3, [r7, #4]
 8007a1e:	e002      	b.n	8007a26 <enq_lock+0x12>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	3301      	adds	r3, #1
 8007a24:	607b      	str	r3, [r7, #4]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d806      	bhi.n	8007a3a <enq_lock+0x26>
 8007a2c:	4a09      	ldr	r2, [pc, #36]	; (8007a54 <enq_lock+0x40>)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	011b      	lsls	r3, r3, #4
 8007a32:	4413      	add	r3, r2
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1f2      	bne.n	8007a20 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	bf14      	ite	ne
 8007a40:	2301      	movne	r3, #1
 8007a42:	2300      	moveq	r3, #0
 8007a44:	b2db      	uxtb	r3, r3
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	20001e58 	.word	0x20001e58

08007a58 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007a62:	2300      	movs	r3, #0
 8007a64:	60fb      	str	r3, [r7, #12]
 8007a66:	e01f      	b.n	8007aa8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007a68:	4a41      	ldr	r2, [pc, #260]	; (8007b70 <inc_lock+0x118>)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	011b      	lsls	r3, r3, #4
 8007a6e:	4413      	add	r3, r2
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d113      	bne.n	8007aa2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007a7a:	4a3d      	ldr	r2, [pc, #244]	; (8007b70 <inc_lock+0x118>)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	011b      	lsls	r3, r3, #4
 8007a80:	4413      	add	r3, r2
 8007a82:	3304      	adds	r3, #4
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d109      	bne.n	8007aa2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007a8e:	4a38      	ldr	r2, [pc, #224]	; (8007b70 <inc_lock+0x118>)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	011b      	lsls	r3, r3, #4
 8007a94:	4413      	add	r3, r2
 8007a96:	3308      	adds	r3, #8
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d006      	beq.n	8007ab0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	60fb      	str	r3, [r7, #12]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d9dc      	bls.n	8007a68 <inc_lock+0x10>
 8007aae:	e000      	b.n	8007ab2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007ab0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d132      	bne.n	8007b1e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	60fb      	str	r3, [r7, #12]
 8007abc:	e002      	b.n	8007ac4 <inc_lock+0x6c>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	60fb      	str	r3, [r7, #12]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d806      	bhi.n	8007ad8 <inc_lock+0x80>
 8007aca:	4a29      	ldr	r2, [pc, #164]	; (8007b70 <inc_lock+0x118>)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	011b      	lsls	r3, r3, #4
 8007ad0:	4413      	add	r3, r2
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1f2      	bne.n	8007abe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d101      	bne.n	8007ae2 <inc_lock+0x8a>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	e040      	b.n	8007b64 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	4922      	ldr	r1, [pc, #136]	; (8007b70 <inc_lock+0x118>)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	011b      	lsls	r3, r3, #4
 8007aec:	440b      	add	r3, r1
 8007aee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689a      	ldr	r2, [r3, #8]
 8007af4:	491e      	ldr	r1, [pc, #120]	; (8007b70 <inc_lock+0x118>)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	011b      	lsls	r3, r3, #4
 8007afa:	440b      	add	r3, r1
 8007afc:	3304      	adds	r3, #4
 8007afe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	695a      	ldr	r2, [r3, #20]
 8007b04:	491a      	ldr	r1, [pc, #104]	; (8007b70 <inc_lock+0x118>)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	011b      	lsls	r3, r3, #4
 8007b0a:	440b      	add	r3, r1
 8007b0c:	3308      	adds	r3, #8
 8007b0e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007b10:	4a17      	ldr	r2, [pc, #92]	; (8007b70 <inc_lock+0x118>)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	011b      	lsls	r3, r3, #4
 8007b16:	4413      	add	r3, r2
 8007b18:	330c      	adds	r3, #12
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d009      	beq.n	8007b38 <inc_lock+0xe0>
 8007b24:	4a12      	ldr	r2, [pc, #72]	; (8007b70 <inc_lock+0x118>)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	011b      	lsls	r3, r3, #4
 8007b2a:	4413      	add	r3, r2
 8007b2c:	330c      	adds	r3, #12
 8007b2e:	881b      	ldrh	r3, [r3, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d001      	beq.n	8007b38 <inc_lock+0xe0>
 8007b34:	2300      	movs	r3, #0
 8007b36:	e015      	b.n	8007b64 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d108      	bne.n	8007b50 <inc_lock+0xf8>
 8007b3e:	4a0c      	ldr	r2, [pc, #48]	; (8007b70 <inc_lock+0x118>)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	011b      	lsls	r3, r3, #4
 8007b44:	4413      	add	r3, r2
 8007b46:	330c      	adds	r3, #12
 8007b48:	881b      	ldrh	r3, [r3, #0]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	e001      	b.n	8007b54 <inc_lock+0xfc>
 8007b50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b54:	4906      	ldr	r1, [pc, #24]	; (8007b70 <inc_lock+0x118>)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	011b      	lsls	r3, r3, #4
 8007b5a:	440b      	add	r3, r1
 8007b5c:	330c      	adds	r3, #12
 8007b5e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	3301      	adds	r3, #1
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	20001e58 	.word	0x20001e58

08007b74 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	607b      	str	r3, [r7, #4]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d825      	bhi.n	8007bd4 <dec_lock+0x60>
		n = Files[i].ctr;
 8007b88:	4a17      	ldr	r2, [pc, #92]	; (8007be8 <dec_lock+0x74>)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	011b      	lsls	r3, r3, #4
 8007b8e:	4413      	add	r3, r2
 8007b90:	330c      	adds	r3, #12
 8007b92:	881b      	ldrh	r3, [r3, #0]
 8007b94:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007b96:	89fb      	ldrh	r3, [r7, #14]
 8007b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b9c:	d101      	bne.n	8007ba2 <dec_lock+0x2e>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007ba2:	89fb      	ldrh	r3, [r7, #14]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d002      	beq.n	8007bae <dec_lock+0x3a>
 8007ba8:	89fb      	ldrh	r3, [r7, #14]
 8007baa:	3b01      	subs	r3, #1
 8007bac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007bae:	4a0e      	ldr	r2, [pc, #56]	; (8007be8 <dec_lock+0x74>)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	011b      	lsls	r3, r3, #4
 8007bb4:	4413      	add	r3, r2
 8007bb6:	330c      	adds	r3, #12
 8007bb8:	89fa      	ldrh	r2, [r7, #14]
 8007bba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007bbc:	89fb      	ldrh	r3, [r7, #14]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d105      	bne.n	8007bce <dec_lock+0x5a>
 8007bc2:	4a09      	ldr	r2, [pc, #36]	; (8007be8 <dec_lock+0x74>)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	011b      	lsls	r3, r3, #4
 8007bc8:	4413      	add	r3, r2
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	737b      	strb	r3, [r7, #13]
 8007bd2:	e001      	b.n	8007bd8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007bd8:	7b7b      	ldrb	r3, [r7, #13]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	20001e58 	.word	0x20001e58

08007bec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	60fb      	str	r3, [r7, #12]
 8007bf8:	e010      	b.n	8007c1c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007bfa:	4a0d      	ldr	r2, [pc, #52]	; (8007c30 <clear_lock+0x44>)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	011b      	lsls	r3, r3, #4
 8007c00:	4413      	add	r3, r2
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d105      	bne.n	8007c16 <clear_lock+0x2a>
 8007c0a:	4a09      	ldr	r2, [pc, #36]	; (8007c30 <clear_lock+0x44>)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	011b      	lsls	r3, r3, #4
 8007c10:	4413      	add	r3, r2
 8007c12:	2200      	movs	r2, #0
 8007c14:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d9eb      	bls.n	8007bfa <clear_lock+0xe>
	}
}
 8007c22:	bf00      	nop
 8007c24:	bf00      	nop
 8007c26:	3714      	adds	r7, #20
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	20001e58 	.word	0x20001e58

08007c34 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	78db      	ldrb	r3, [r3, #3]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d034      	beq.n	8007cb2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	7858      	ldrb	r0, [r3, #1]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c58:	2301      	movs	r3, #1
 8007c5a:	697a      	ldr	r2, [r7, #20]
 8007c5c:	f7ff fd40 	bl	80076e0 <disk_write>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d002      	beq.n	8007c6c <sync_window+0x38>
			res = FR_DISK_ERR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	73fb      	strb	r3, [r7, #15]
 8007c6a:	e022      	b.n	8007cb2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	1ad2      	subs	r2, r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d217      	bcs.n	8007cb2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	789b      	ldrb	r3, [r3, #2]
 8007c86:	613b      	str	r3, [r7, #16]
 8007c88:	e010      	b.n	8007cac <sync_window+0x78>
					wsect += fs->fsize;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	4413      	add	r3, r2
 8007c92:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	7858      	ldrb	r0, [r3, #1]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	697a      	ldr	r2, [r7, #20]
 8007ca2:	f7ff fd1d 	bl	80076e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	613b      	str	r3, [r7, #16]
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d8eb      	bhi.n	8007c8a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3718      	adds	r7, #24
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cce:	683a      	ldr	r2, [r7, #0]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d01b      	beq.n	8007d0c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f7ff ffad 	bl	8007c34 <sync_window>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d113      	bne.n	8007d0c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	7858      	ldrb	r0, [r3, #1]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007cee:	2301      	movs	r3, #1
 8007cf0:	683a      	ldr	r2, [r7, #0]
 8007cf2:	f7ff fcd5 	bl	80076a0 <disk_read>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d004      	beq.n	8007d06 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8007d00:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
	...

08007d18 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7ff ff87 	bl	8007c34 <sync_window>
 8007d26:	4603      	mov	r3, r0
 8007d28:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007d2a:	7bfb      	ldrb	r3, [r7, #15]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d158      	bne.n	8007de2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	2b03      	cmp	r3, #3
 8007d36:	d148      	bne.n	8007dca <sync_fs+0xb2>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	791b      	ldrb	r3, [r3, #4]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d144      	bne.n	8007dca <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	3330      	adds	r3, #48	; 0x30
 8007d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d48:	2100      	movs	r1, #0
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7ff fda9 	bl	80078a2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	3330      	adds	r3, #48	; 0x30
 8007d54:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007d58:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7ff fd38 	bl	80077d2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	3330      	adds	r3, #48	; 0x30
 8007d66:	4921      	ldr	r1, [pc, #132]	; (8007dec <sync_fs+0xd4>)
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7ff fd4d 	bl	8007808 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	3330      	adds	r3, #48	; 0x30
 8007d72:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007d76:	491e      	ldr	r1, [pc, #120]	; (8007df0 <sync_fs+0xd8>)
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7ff fd45 	bl	8007808 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	3330      	adds	r3, #48	; 0x30
 8007d82:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	f7ff fd3b 	bl	8007808 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	3330      	adds	r3, #48	; 0x30
 8007d96:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	4610      	mov	r0, r2
 8007da2:	f7ff fd31 	bl	8007808 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	69db      	ldr	r3, [r3, #28]
 8007daa:	1c5a      	adds	r2, r3, #1
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	7858      	ldrb	r0, [r3, #1]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	f7ff fc8e 	bl	80076e0 <disk_write>
			fs->fsi_flag = 0;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	785b      	ldrb	r3, [r3, #1]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7ff fca4 	bl	8007720 <disk_ioctl>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <sync_fs+0xca>
 8007dde:	2301      	movs	r3, #1
 8007de0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	41615252 	.word	0x41615252
 8007df0:	61417272 	.word	0x61417272

08007df4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	3b02      	subs	r3, #2
 8007e02:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	3b02      	subs	r3, #2
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d301      	bcc.n	8007e14 <clust2sect+0x20>
 8007e10:	2300      	movs	r3, #0
 8007e12:	e008      	b.n	8007e26 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	895b      	ldrh	r3, [r3, #10]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	fb03 f202 	mul.w	r2, r3, r2
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e24:	4413      	add	r3, r2
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b086      	sub	sp, #24
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d904      	bls.n	8007e52 <get_fat+0x20>
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d302      	bcc.n	8007e58 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007e52:	2301      	movs	r3, #1
 8007e54:	617b      	str	r3, [r7, #20]
 8007e56:	e08f      	b.n	8007f78 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007e58:	f04f 33ff 	mov.w	r3, #4294967295
 8007e5c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	2b03      	cmp	r3, #3
 8007e64:	d062      	beq.n	8007f2c <get_fat+0xfa>
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	dc7c      	bgt.n	8007f64 <get_fat+0x132>
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d002      	beq.n	8007e74 <get_fat+0x42>
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d042      	beq.n	8007ef8 <get_fat+0xc6>
 8007e72:	e077      	b.n	8007f64 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	60fb      	str	r3, [r7, #12]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	085b      	lsrs	r3, r3, #1
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	4413      	add	r3, r2
 8007e80:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	6a1a      	ldr	r2, [r3, #32]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	0a5b      	lsrs	r3, r3, #9
 8007e8a:	4413      	add	r3, r2
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6938      	ldr	r0, [r7, #16]
 8007e90:	f7ff ff14 	bl	8007cbc <move_window>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d167      	bne.n	8007f6a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	1c5a      	adds	r2, r3, #1
 8007e9e:	60fa      	str	r2, [r7, #12]
 8007ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007eac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	6a1a      	ldr	r2, [r3, #32]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	0a5b      	lsrs	r3, r3, #9
 8007eb6:	4413      	add	r3, r2
 8007eb8:	4619      	mov	r1, r3
 8007eba:	6938      	ldr	r0, [r7, #16]
 8007ebc:	f7ff fefe 	bl	8007cbc <move_window>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d153      	bne.n	8007f6e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ecc:	693a      	ldr	r2, [r7, #16]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ed4:	021b      	lsls	r3, r3, #8
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <get_fat+0xbc>
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	091b      	lsrs	r3, r3, #4
 8007eec:	e002      	b.n	8007ef4 <get_fat+0xc2>
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ef4:	617b      	str	r3, [r7, #20]
			break;
 8007ef6:	e03f      	b.n	8007f78 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	6a1a      	ldr	r2, [r3, #32]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	0a1b      	lsrs	r3, r3, #8
 8007f00:	4413      	add	r3, r2
 8007f02:	4619      	mov	r1, r3
 8007f04:	6938      	ldr	r0, [r7, #16]
 8007f06:	f7ff fed9 	bl	8007cbc <move_window>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d130      	bne.n	8007f72 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	005b      	lsls	r3, r3, #1
 8007f1a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007f1e:	4413      	add	r3, r2
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7ff fc1b 	bl	800775c <ld_word>
 8007f26:	4603      	mov	r3, r0
 8007f28:	617b      	str	r3, [r7, #20]
			break;
 8007f2a:	e025      	b.n	8007f78 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	6a1a      	ldr	r2, [r3, #32]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	09db      	lsrs	r3, r3, #7
 8007f34:	4413      	add	r3, r2
 8007f36:	4619      	mov	r1, r3
 8007f38:	6938      	ldr	r0, [r7, #16]
 8007f3a:	f7ff febf 	bl	8007cbc <move_window>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d118      	bne.n	8007f76 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007f52:	4413      	add	r3, r2
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7ff fc19 	bl	800778c <ld_dword>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007f60:	617b      	str	r3, [r7, #20]
			break;
 8007f62:	e009      	b.n	8007f78 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007f64:	2301      	movs	r3, #1
 8007f66:	617b      	str	r3, [r7, #20]
 8007f68:	e006      	b.n	8007f78 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007f6a:	bf00      	nop
 8007f6c:	e004      	b.n	8007f78 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007f6e:	bf00      	nop
 8007f70:	e002      	b.n	8007f78 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007f72:	bf00      	nop
 8007f74:	e000      	b.n	8007f78 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007f76:	bf00      	nop
		}
	}

	return val;
 8007f78:	697b      	ldr	r3, [r7, #20]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3718      	adds	r7, #24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007f82:	b590      	push	{r4, r7, lr}
 8007f84:	b089      	sub	sp, #36	; 0x24
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	60f8      	str	r0, [r7, #12]
 8007f8a:	60b9      	str	r1, [r7, #8]
 8007f8c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007f8e:	2302      	movs	r3, #2
 8007f90:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	f240 80d2 	bls.w	800813e <put_fat+0x1bc>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	f080 80cc 	bcs.w	800813e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	2b03      	cmp	r3, #3
 8007fac:	f000 8096 	beq.w	80080dc <put_fat+0x15a>
 8007fb0:	2b03      	cmp	r3, #3
 8007fb2:	f300 80cd 	bgt.w	8008150 <put_fat+0x1ce>
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d002      	beq.n	8007fc0 <put_fat+0x3e>
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d06e      	beq.n	800809c <put_fat+0x11a>
 8007fbe:	e0c7      	b.n	8008150 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	61bb      	str	r3, [r7, #24]
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	085b      	lsrs	r3, r3, #1
 8007fc8:	69ba      	ldr	r2, [r7, #24]
 8007fca:	4413      	add	r3, r2
 8007fcc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6a1a      	ldr	r2, [r3, #32]
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	0a5b      	lsrs	r3, r3, #9
 8007fd6:	4413      	add	r3, r2
 8007fd8:	4619      	mov	r1, r3
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f7ff fe6e 	bl	8007cbc <move_window>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007fe4:	7ffb      	ldrb	r3, [r7, #31]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f040 80ab 	bne.w	8008142 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	1c59      	adds	r1, r3, #1
 8007ff6:	61b9      	str	r1, [r7, #24]
 8007ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ffc:	4413      	add	r3, r2
 8007ffe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00d      	beq.n	8008026 <put_fat+0xa4>
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	b25b      	sxtb	r3, r3
 8008010:	f003 030f 	and.w	r3, r3, #15
 8008014:	b25a      	sxtb	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	b2db      	uxtb	r3, r3
 800801a:	011b      	lsls	r3, r3, #4
 800801c:	b25b      	sxtb	r3, r3
 800801e:	4313      	orrs	r3, r2
 8008020:	b25b      	sxtb	r3, r3
 8008022:	b2db      	uxtb	r3, r3
 8008024:	e001      	b.n	800802a <put_fat+0xa8>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	b2db      	uxtb	r3, r3
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2201      	movs	r2, #1
 8008032:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6a1a      	ldr	r2, [r3, #32]
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	0a5b      	lsrs	r3, r3, #9
 800803c:	4413      	add	r3, r2
 800803e:	4619      	mov	r1, r3
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f7ff fe3b 	bl	8007cbc <move_window>
 8008046:	4603      	mov	r3, r0
 8008048:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800804a:	7ffb      	ldrb	r3, [r7, #31]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d17a      	bne.n	8008146 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800805c:	4413      	add	r3, r2
 800805e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <put_fat+0xf0>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	091b      	lsrs	r3, r3, #4
 800806e:	b2db      	uxtb	r3, r3
 8008070:	e00e      	b.n	8008090 <put_fat+0x10e>
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	b25b      	sxtb	r3, r3
 8008078:	f023 030f 	bic.w	r3, r3, #15
 800807c:	b25a      	sxtb	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	0a1b      	lsrs	r3, r3, #8
 8008082:	b25b      	sxtb	r3, r3
 8008084:	f003 030f 	and.w	r3, r3, #15
 8008088:	b25b      	sxtb	r3, r3
 800808a:	4313      	orrs	r3, r2
 800808c:	b25b      	sxtb	r3, r3
 800808e:	b2db      	uxtb	r3, r3
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2201      	movs	r2, #1
 8008098:	70da      	strb	r2, [r3, #3]
			break;
 800809a:	e059      	b.n	8008150 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6a1a      	ldr	r2, [r3, #32]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	0a1b      	lsrs	r3, r3, #8
 80080a4:	4413      	add	r3, r2
 80080a6:	4619      	mov	r1, r3
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f7ff fe07 	bl	8007cbc <move_window>
 80080ae:	4603      	mov	r3, r0
 80080b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80080b2:	7ffb      	ldrb	r3, [r7, #31]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d148      	bne.n	800814a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	005b      	lsls	r3, r3, #1
 80080c2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80080c6:	4413      	add	r3, r2
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	b292      	uxth	r2, r2
 80080cc:	4611      	mov	r1, r2
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7ff fb7f 	bl	80077d2 <st_word>
			fs->wflag = 1;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2201      	movs	r2, #1
 80080d8:	70da      	strb	r2, [r3, #3]
			break;
 80080da:	e039      	b.n	8008150 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6a1a      	ldr	r2, [r3, #32]
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	09db      	lsrs	r3, r3, #7
 80080e4:	4413      	add	r3, r2
 80080e6:	4619      	mov	r1, r3
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f7ff fde7 	bl	8007cbc <move_window>
 80080ee:	4603      	mov	r3, r0
 80080f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80080f2:	7ffb      	ldrb	r3, [r7, #31]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d12a      	bne.n	800814e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800810c:	4413      	add	r3, r2
 800810e:	4618      	mov	r0, r3
 8008110:	f7ff fb3c 	bl	800778c <ld_dword>
 8008114:	4603      	mov	r3, r0
 8008116:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800811a:	4323      	orrs	r3, r4
 800811c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800812c:	4413      	add	r3, r2
 800812e:	6879      	ldr	r1, [r7, #4]
 8008130:	4618      	mov	r0, r3
 8008132:	f7ff fb69 	bl	8007808 <st_dword>
			fs->wflag = 1;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2201      	movs	r2, #1
 800813a:	70da      	strb	r2, [r3, #3]
			break;
 800813c:	e008      	b.n	8008150 <put_fat+0x1ce>
		}
	}
 800813e:	bf00      	nop
 8008140:	e006      	b.n	8008150 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008142:	bf00      	nop
 8008144:	e004      	b.n	8008150 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008146:	bf00      	nop
 8008148:	e002      	b.n	8008150 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800814a:	bf00      	nop
 800814c:	e000      	b.n	8008150 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800814e:	bf00      	nop
	return res;
 8008150:	7ffb      	ldrb	r3, [r7, #31]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3724      	adds	r7, #36	; 0x24
 8008156:	46bd      	mov	sp, r7
 8008158:	bd90      	pop	{r4, r7, pc}

0800815a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b088      	sub	sp, #32
 800815e:	af00      	add	r7, sp, #0
 8008160:	60f8      	str	r0, [r7, #12]
 8008162:	60b9      	str	r1, [r7, #8]
 8008164:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008166:	2300      	movs	r3, #0
 8008168:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d904      	bls.n	8008180 <remove_chain+0x26>
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	429a      	cmp	r2, r3
 800817e:	d301      	bcc.n	8008184 <remove_chain+0x2a>
 8008180:	2302      	movs	r3, #2
 8008182:	e04b      	b.n	800821c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00c      	beq.n	80081a4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800818a:	f04f 32ff 	mov.w	r2, #4294967295
 800818e:	6879      	ldr	r1, [r7, #4]
 8008190:	69b8      	ldr	r0, [r7, #24]
 8008192:	f7ff fef6 	bl	8007f82 <put_fat>
 8008196:	4603      	mov	r3, r0
 8008198:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800819a:	7ffb      	ldrb	r3, [r7, #31]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d001      	beq.n	80081a4 <remove_chain+0x4a>
 80081a0:	7ffb      	ldrb	r3, [r7, #31]
 80081a2:	e03b      	b.n	800821c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80081a4:	68b9      	ldr	r1, [r7, #8]
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f7ff fe43 	bl	8007e32 <get_fat>
 80081ac:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d031      	beq.n	8008218 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d101      	bne.n	80081be <remove_chain+0x64>
 80081ba:	2302      	movs	r3, #2
 80081bc:	e02e      	b.n	800821c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c4:	d101      	bne.n	80081ca <remove_chain+0x70>
 80081c6:	2301      	movs	r3, #1
 80081c8:	e028      	b.n	800821c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80081ca:	2200      	movs	r2, #0
 80081cc:	68b9      	ldr	r1, [r7, #8]
 80081ce:	69b8      	ldr	r0, [r7, #24]
 80081d0:	f7ff fed7 	bl	8007f82 <put_fat>
 80081d4:	4603      	mov	r3, r0
 80081d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80081d8:	7ffb      	ldrb	r3, [r7, #31]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <remove_chain+0x88>
 80081de:	7ffb      	ldrb	r3, [r7, #31]
 80081e0:	e01c      	b.n	800821c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	691a      	ldr	r2, [r3, #16]
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	695b      	ldr	r3, [r3, #20]
 80081ea:	3b02      	subs	r3, #2
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d20b      	bcs.n	8008208 <remove_chain+0xae>
			fs->free_clst++;
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	1c5a      	adds	r2, r3, #1
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	791b      	ldrb	r3, [r3, #4]
 80081fe:	f043 0301 	orr.w	r3, r3, #1
 8008202:	b2da      	uxtb	r2, r3
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	695b      	ldr	r3, [r3, #20]
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	429a      	cmp	r2, r3
 8008214:	d3c6      	bcc.n	80081a4 <remove_chain+0x4a>
 8008216:	e000      	b.n	800821a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008218:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3720      	adds	r7, #32
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b088      	sub	sp, #32
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10d      	bne.n	8008256 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d004      	beq.n	8008250 <create_chain+0x2c>
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	69ba      	ldr	r2, [r7, #24]
 800824c:	429a      	cmp	r2, r3
 800824e:	d31b      	bcc.n	8008288 <create_chain+0x64>
 8008250:	2301      	movs	r3, #1
 8008252:	61bb      	str	r3, [r7, #24]
 8008254:	e018      	b.n	8008288 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008256:	6839      	ldr	r1, [r7, #0]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7ff fdea 	bl	8007e32 <get_fat>
 800825e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2b01      	cmp	r3, #1
 8008264:	d801      	bhi.n	800826a <create_chain+0x46>
 8008266:	2301      	movs	r3, #1
 8008268:	e070      	b.n	800834c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008270:	d101      	bne.n	8008276 <create_chain+0x52>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	e06a      	b.n	800834c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	429a      	cmp	r2, r3
 800827e:	d201      	bcs.n	8008284 <create_chain+0x60>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	e063      	b.n	800834c <create_chain+0x128>
		scl = clst;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	3301      	adds	r3, #1
 8008290:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	69fa      	ldr	r2, [r7, #28]
 8008298:	429a      	cmp	r2, r3
 800829a:	d307      	bcc.n	80082ac <create_chain+0x88>
				ncl = 2;
 800829c:	2302      	movs	r3, #2
 800829e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80082a0:	69fa      	ldr	r2, [r7, #28]
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d901      	bls.n	80082ac <create_chain+0x88>
 80082a8:	2300      	movs	r3, #0
 80082aa:	e04f      	b.n	800834c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80082ac:	69f9      	ldr	r1, [r7, #28]
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7ff fdbf 	bl	8007e32 <get_fat>
 80082b4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00e      	beq.n	80082da <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d003      	beq.n	80082ca <create_chain+0xa6>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c8:	d101      	bne.n	80082ce <create_chain+0xaa>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	e03e      	b.n	800834c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80082ce:	69fa      	ldr	r2, [r7, #28]
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d1da      	bne.n	800828c <create_chain+0x68>
 80082d6:	2300      	movs	r3, #0
 80082d8:	e038      	b.n	800834c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80082da:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80082dc:	f04f 32ff 	mov.w	r2, #4294967295
 80082e0:	69f9      	ldr	r1, [r7, #28]
 80082e2:	6938      	ldr	r0, [r7, #16]
 80082e4:	f7ff fe4d 	bl	8007f82 <put_fat>
 80082e8:	4603      	mov	r3, r0
 80082ea:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80082ec:	7dfb      	ldrb	r3, [r7, #23]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d109      	bne.n	8008306 <create_chain+0xe2>
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d006      	beq.n	8008306 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80082f8:	69fa      	ldr	r2, [r7, #28]
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6938      	ldr	r0, [r7, #16]
 80082fe:	f7ff fe40 	bl	8007f82 <put_fat>
 8008302:	4603      	mov	r3, r0
 8008304:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008306:	7dfb      	ldrb	r3, [r7, #23]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d116      	bne.n	800833a <create_chain+0x116>
		fs->last_clst = ncl;
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	69fa      	ldr	r2, [r7, #28]
 8008310:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	691a      	ldr	r2, [r3, #16]
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	695b      	ldr	r3, [r3, #20]
 800831a:	3b02      	subs	r3, #2
 800831c:	429a      	cmp	r2, r3
 800831e:	d804      	bhi.n	800832a <create_chain+0x106>
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	1e5a      	subs	r2, r3, #1
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	791b      	ldrb	r3, [r3, #4]
 800832e:	f043 0301 	orr.w	r3, r3, #1
 8008332:	b2da      	uxtb	r2, r3
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	711a      	strb	r2, [r3, #4]
 8008338:	e007      	b.n	800834a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800833a:	7dfb      	ldrb	r3, [r7, #23]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d102      	bne.n	8008346 <create_chain+0x122>
 8008340:	f04f 33ff 	mov.w	r3, #4294967295
 8008344:	e000      	b.n	8008348 <create_chain+0x124>
 8008346:	2301      	movs	r3, #1
 8008348:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800834a:	69fb      	ldr	r3, [r7, #28]
}
 800834c:	4618      	mov	r0, r3
 800834e:	3720      	adds	r7, #32
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008354:	b480      	push	{r7}
 8008356:	b087      	sub	sp, #28
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008368:	3304      	adds	r3, #4
 800836a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	0a5b      	lsrs	r3, r3, #9
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	8952      	ldrh	r2, [r2, #10]
 8008374:	fbb3 f3f2 	udiv	r3, r3, r2
 8008378:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	1d1a      	adds	r2, r3, #4
 800837e:	613a      	str	r2, [r7, #16]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d101      	bne.n	800838e <clmt_clust+0x3a>
 800838a:	2300      	movs	r3, #0
 800838c:	e010      	b.n	80083b0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	429a      	cmp	r2, r3
 8008394:	d307      	bcc.n	80083a6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	1ad3      	subs	r3, r2, r3
 800839c:	617b      	str	r3, [r7, #20]
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	3304      	adds	r3, #4
 80083a2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80083a4:	e7e9      	b.n	800837a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80083a6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	4413      	add	r3, r2
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	371c      	adds	r7, #28
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083d2:	d204      	bcs.n	80083de <dir_sdi+0x22>
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	f003 031f 	and.w	r3, r3, #31
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d001      	beq.n	80083e2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80083de:	2302      	movs	r3, #2
 80083e0:	e063      	b.n	80084aa <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	683a      	ldr	r2, [r7, #0]
 80083e6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d106      	bne.n	8008402 <dir_sdi+0x46>
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d902      	bls.n	8008402 <dir_sdi+0x46>
		clst = fs->dirbase;
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008400:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d10c      	bne.n	8008422 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	095b      	lsrs	r3, r3, #5
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	8912      	ldrh	r2, [r2, #8]
 8008410:	4293      	cmp	r3, r2
 8008412:	d301      	bcc.n	8008418 <dir_sdi+0x5c>
 8008414:	2302      	movs	r3, #2
 8008416:	e048      	b.n	80084aa <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	61da      	str	r2, [r3, #28]
 8008420:	e029      	b.n	8008476 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	895b      	ldrh	r3, [r3, #10]
 8008426:	025b      	lsls	r3, r3, #9
 8008428:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800842a:	e019      	b.n	8008460 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6979      	ldr	r1, [r7, #20]
 8008430:	4618      	mov	r0, r3
 8008432:	f7ff fcfe 	bl	8007e32 <get_fat>
 8008436:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843e:	d101      	bne.n	8008444 <dir_sdi+0x88>
 8008440:	2301      	movs	r3, #1
 8008442:	e032      	b.n	80084aa <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d904      	bls.n	8008454 <dir_sdi+0x98>
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	429a      	cmp	r2, r3
 8008452:	d301      	bcc.n	8008458 <dir_sdi+0x9c>
 8008454:	2302      	movs	r3, #2
 8008456:	e028      	b.n	80084aa <dir_sdi+0xee>
			ofs -= csz;
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008460:	683a      	ldr	r2, [r7, #0]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	429a      	cmp	r2, r3
 8008466:	d2e1      	bcs.n	800842c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008468:	6979      	ldr	r1, [r7, #20]
 800846a:	6938      	ldr	r0, [r7, #16]
 800846c:	f7ff fcc2 	bl	8007df4 <clust2sect>
 8008470:	4602      	mov	r2, r0
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	69db      	ldr	r3, [r3, #28]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d101      	bne.n	8008488 <dir_sdi+0xcc>
 8008484:	2302      	movs	r3, #2
 8008486:	e010      	b.n	80084aa <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	69da      	ldr	r2, [r3, #28]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	0a5b      	lsrs	r3, r3, #9
 8008490:	441a      	add	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084a2:	441a      	add	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3718      	adds	r7, #24
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b086      	sub	sp, #24
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	695b      	ldr	r3, [r3, #20]
 80084c6:	3320      	adds	r3, #32
 80084c8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	69db      	ldr	r3, [r3, #28]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <dir_next+0x28>
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084d8:	d301      	bcc.n	80084de <dir_next+0x2c>
 80084da:	2304      	movs	r3, #4
 80084dc:	e0aa      	b.n	8008634 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f040 8098 	bne.w	800861a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	69db      	ldr	r3, [r3, #28]
 80084ee:	1c5a      	adds	r2, r3, #1
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	699b      	ldr	r3, [r3, #24]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10b      	bne.n	8008514 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	095b      	lsrs	r3, r3, #5
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	8912      	ldrh	r2, [r2, #8]
 8008504:	4293      	cmp	r3, r2
 8008506:	f0c0 8088 	bcc.w	800861a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	61da      	str	r2, [r3, #28]
 8008510:	2304      	movs	r3, #4
 8008512:	e08f      	b.n	8008634 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	0a5b      	lsrs	r3, r3, #9
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	8952      	ldrh	r2, [r2, #10]
 800851c:	3a01      	subs	r2, #1
 800851e:	4013      	ands	r3, r2
 8008520:	2b00      	cmp	r3, #0
 8008522:	d17a      	bne.n	800861a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	4619      	mov	r1, r3
 800852c:	4610      	mov	r0, r2
 800852e:	f7ff fc80 	bl	8007e32 <get_fat>
 8008532:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d801      	bhi.n	800853e <dir_next+0x8c>
 800853a:	2302      	movs	r3, #2
 800853c:	e07a      	b.n	8008634 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008544:	d101      	bne.n	800854a <dir_next+0x98>
 8008546:	2301      	movs	r3, #1
 8008548:	e074      	b.n	8008634 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	695b      	ldr	r3, [r3, #20]
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	429a      	cmp	r2, r3
 8008552:	d358      	bcc.n	8008606 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d104      	bne.n	8008564 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	61da      	str	r2, [r3, #28]
 8008560:	2304      	movs	r3, #4
 8008562:	e067      	b.n	8008634 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	4619      	mov	r1, r3
 800856c:	4610      	mov	r0, r2
 800856e:	f7ff fe59 	bl	8008224 <create_chain>
 8008572:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d101      	bne.n	800857e <dir_next+0xcc>
 800857a:	2307      	movs	r3, #7
 800857c:	e05a      	b.n	8008634 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d101      	bne.n	8008588 <dir_next+0xd6>
 8008584:	2302      	movs	r3, #2
 8008586:	e055      	b.n	8008634 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800858e:	d101      	bne.n	8008594 <dir_next+0xe2>
 8008590:	2301      	movs	r3, #1
 8008592:	e04f      	b.n	8008634 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f7ff fb4d 	bl	8007c34 <sync_window>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <dir_next+0xf2>
 80085a0:	2301      	movs	r3, #1
 80085a2:	e047      	b.n	8008634 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	3330      	adds	r3, #48	; 0x30
 80085a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085ac:	2100      	movs	r1, #0
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7ff f977 	bl	80078a2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80085b4:	2300      	movs	r3, #0
 80085b6:	613b      	str	r3, [r7, #16]
 80085b8:	6979      	ldr	r1, [r7, #20]
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	f7ff fc1a 	bl	8007df4 <clust2sect>
 80085c0:	4602      	mov	r2, r0
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80085c6:	e012      	b.n	80085ee <dir_next+0x13c>
						fs->wflag = 1;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2201      	movs	r2, #1
 80085cc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f7ff fb30 	bl	8007c34 <sync_window>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d001      	beq.n	80085de <dir_next+0x12c>
 80085da:	2301      	movs	r3, #1
 80085dc:	e02a      	b.n	8008634 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	3301      	adds	r3, #1
 80085e2:	613b      	str	r3, [r7, #16]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e8:	1c5a      	adds	r2, r3, #1
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	895b      	ldrh	r3, [r3, #10]
 80085f2:	461a      	mov	r2, r3
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d3e6      	bcc.n	80085c8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	1ad2      	subs	r2, r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	697a      	ldr	r2, [r7, #20]
 800860a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800860c:	6979      	ldr	r1, [r7, #20]
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f7ff fbf0 	bl	8007df4 <clust2sect>
 8008614:	4602      	mov	r2, r0
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800862c:	441a      	add	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3718      	adds	r7, #24
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800864c:	2100      	movs	r1, #0
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f7ff feb4 	bl	80083bc <dir_sdi>
 8008654:	4603      	mov	r3, r0
 8008656:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008658:	7dfb      	ldrb	r3, [r7, #23]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d12b      	bne.n	80086b6 <dir_alloc+0x7a>
		n = 0;
 800865e:	2300      	movs	r3, #0
 8008660:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	69db      	ldr	r3, [r3, #28]
 8008666:	4619      	mov	r1, r3
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f7ff fb27 	bl	8007cbc <move_window>
 800866e:	4603      	mov	r3, r0
 8008670:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008672:	7dfb      	ldrb	r3, [r7, #23]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d11d      	bne.n	80086b4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a1b      	ldr	r3, [r3, #32]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	2be5      	cmp	r3, #229	; 0xe5
 8008680:	d004      	beq.n	800868c <dir_alloc+0x50>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d107      	bne.n	800869c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	3301      	adds	r3, #1
 8008690:	613b      	str	r3, [r7, #16]
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	429a      	cmp	r2, r3
 8008698:	d102      	bne.n	80086a0 <dir_alloc+0x64>
 800869a:	e00c      	b.n	80086b6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800869c:	2300      	movs	r3, #0
 800869e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80086a0:	2101      	movs	r1, #1
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7ff ff05 	bl	80084b2 <dir_next>
 80086a8:	4603      	mov	r3, r0
 80086aa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80086ac:	7dfb      	ldrb	r3, [r7, #23]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d0d7      	beq.n	8008662 <dir_alloc+0x26>
 80086b2:	e000      	b.n	80086b6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80086b4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80086b6:	7dfb      	ldrb	r3, [r7, #23]
 80086b8:	2b04      	cmp	r3, #4
 80086ba:	d101      	bne.n	80086c0 <dir_alloc+0x84>
 80086bc:	2307      	movs	r3, #7
 80086be:	75fb      	strb	r3, [r7, #23]
	return res;
 80086c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3718      	adds	r7, #24
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b084      	sub	sp, #16
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	331a      	adds	r3, #26
 80086d8:	4618      	mov	r0, r3
 80086da:	f7ff f83f 	bl	800775c <ld_word>
 80086de:	4603      	mov	r3, r0
 80086e0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d109      	bne.n	80086fe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	3314      	adds	r3, #20
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7ff f834 	bl	800775c <ld_word>
 80086f4:	4603      	mov	r3, r0
 80086f6:	041b      	lsls	r3, r3, #16
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80086fe:	68fb      	ldr	r3, [r7, #12]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	331a      	adds	r3, #26
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	b292      	uxth	r2, r2
 800871c:	4611      	mov	r1, r2
 800871e:	4618      	mov	r0, r3
 8008720:	f7ff f857 	bl	80077d2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	2b03      	cmp	r3, #3
 800872a:	d109      	bne.n	8008740 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	f103 0214 	add.w	r2, r3, #20
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	0c1b      	lsrs	r3, r3, #16
 8008736:	b29b      	uxth	r3, r3
 8008738:	4619      	mov	r1, r3
 800873a:	4610      	mov	r0, r2
 800873c:	f7ff f849 	bl	80077d2 <st_word>
	}
}
 8008740:	bf00      	nop
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8008752:	2304      	movs	r3, #4
 8008754:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800875c:	e03c      	b.n	80087d8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	4619      	mov	r1, r3
 8008764:	6938      	ldr	r0, [r7, #16]
 8008766:	f7ff faa9 	bl	8007cbc <move_window>
 800876a:	4603      	mov	r3, r0
 800876c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800876e:	7dfb      	ldrb	r3, [r7, #23]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d136      	bne.n	80087e2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a1b      	ldr	r3, [r3, #32]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800877c:	7bfb      	ldrb	r3, [r7, #15]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d102      	bne.n	8008788 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8008782:	2304      	movs	r3, #4
 8008784:	75fb      	strb	r3, [r7, #23]
 8008786:	e031      	b.n	80087ec <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a1b      	ldr	r3, [r3, #32]
 800878c:	330b      	adds	r3, #11
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008794:	73bb      	strb	r3, [r7, #14]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	7bba      	ldrb	r2, [r7, #14]
 800879a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800879c:	7bfb      	ldrb	r3, [r7, #15]
 800879e:	2be5      	cmp	r3, #229	; 0xe5
 80087a0:	d011      	beq.n	80087c6 <dir_read+0x7e>
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
 80087a4:	2b2e      	cmp	r3, #46	; 0x2e
 80087a6:	d00e      	beq.n	80087c6 <dir_read+0x7e>
 80087a8:	7bbb      	ldrb	r3, [r7, #14]
 80087aa:	2b0f      	cmp	r3, #15
 80087ac:	d00b      	beq.n	80087c6 <dir_read+0x7e>
 80087ae:	7bbb      	ldrb	r3, [r7, #14]
 80087b0:	f023 0320 	bic.w	r3, r3, #32
 80087b4:	2b08      	cmp	r3, #8
 80087b6:	bf0c      	ite	eq
 80087b8:	2301      	moveq	r3, #1
 80087ba:	2300      	movne	r3, #0
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	461a      	mov	r2, r3
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d00f      	beq.n	80087e6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80087c6:	2100      	movs	r1, #0
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f7ff fe72 	bl	80084b2 <dir_next>
 80087ce:	4603      	mov	r3, r0
 80087d0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80087d2:	7dfb      	ldrb	r3, [r7, #23]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d108      	bne.n	80087ea <dir_read+0xa2>
	while (dp->sect) {
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	69db      	ldr	r3, [r3, #28]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1be      	bne.n	800875e <dir_read+0x16>
 80087e0:	e004      	b.n	80087ec <dir_read+0xa4>
		if (res != FR_OK) break;
 80087e2:	bf00      	nop
 80087e4:	e002      	b.n	80087ec <dir_read+0xa4>
				break;
 80087e6:	bf00      	nop
 80087e8:	e000      	b.n	80087ec <dir_read+0xa4>
		if (res != FR_OK) break;
 80087ea:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80087ec:	7dfb      	ldrb	r3, [r7, #23]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d002      	beq.n	80087f8 <dir_read+0xb0>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	61da      	str	r2, [r3, #28]
	return res;
 80087f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3718      	adds	r7, #24
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b086      	sub	sp, #24
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008810:	2100      	movs	r1, #0
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f7ff fdd2 	bl	80083bc <dir_sdi>
 8008818:	4603      	mov	r3, r0
 800881a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800881c:	7dfb      	ldrb	r3, [r7, #23]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <dir_find+0x24>
 8008822:	7dfb      	ldrb	r3, [r7, #23]
 8008824:	e03e      	b.n	80088a4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	4619      	mov	r1, r3
 800882c:	6938      	ldr	r0, [r7, #16]
 800882e:	f7ff fa45 	bl	8007cbc <move_window>
 8008832:	4603      	mov	r3, r0
 8008834:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008836:	7dfb      	ldrb	r3, [r7, #23]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d12f      	bne.n	800889c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a1b      	ldr	r3, [r3, #32]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008844:	7bfb      	ldrb	r3, [r7, #15]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d102      	bne.n	8008850 <dir_find+0x4e>
 800884a:	2304      	movs	r3, #4
 800884c:	75fb      	strb	r3, [r7, #23]
 800884e:	e028      	b.n	80088a2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6a1b      	ldr	r3, [r3, #32]
 8008854:	330b      	adds	r3, #11
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800885c:	b2da      	uxtb	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	330b      	adds	r3, #11
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	f003 0308 	and.w	r3, r3, #8
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10a      	bne.n	8008888 <dir_find+0x86>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a18      	ldr	r0, [r3, #32]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	3324      	adds	r3, #36	; 0x24
 800887a:	220b      	movs	r2, #11
 800887c:	4619      	mov	r1, r3
 800887e:	f7ff f82b 	bl	80078d8 <mem_cmp>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00b      	beq.n	80088a0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008888:	2100      	movs	r1, #0
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f7ff fe11 	bl	80084b2 <dir_next>
 8008890:	4603      	mov	r3, r0
 8008892:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008894:	7dfb      	ldrb	r3, [r7, #23]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d0c5      	beq.n	8008826 <dir_find+0x24>
 800889a:	e002      	b.n	80088a2 <dir_find+0xa0>
		if (res != FR_OK) break;
 800889c:	bf00      	nop
 800889e:	e000      	b.n	80088a2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80088a0:	bf00      	nop

	return res;
 80088a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3718      	adds	r7, #24
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80088ba:	2101      	movs	r1, #1
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7ff febd 	bl	800863c <dir_alloc>
 80088c2:	4603      	mov	r3, r0
 80088c4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80088c6:	7bfb      	ldrb	r3, [r7, #15]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d11c      	bne.n	8008906 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	69db      	ldr	r3, [r3, #28]
 80088d0:	4619      	mov	r1, r3
 80088d2:	68b8      	ldr	r0, [r7, #8]
 80088d4:	f7ff f9f2 	bl	8007cbc <move_window>
 80088d8:	4603      	mov	r3, r0
 80088da:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d111      	bne.n	8008906 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	2220      	movs	r2, #32
 80088e8:	2100      	movs	r1, #0
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fe ffd9 	bl	80078a2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a18      	ldr	r0, [r3, #32]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	3324      	adds	r3, #36	; 0x24
 80088f8:	220b      	movs	r2, #11
 80088fa:	4619      	mov	r1, r3
 80088fc:	f7fe ffb0 	bl	8007860 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	2201      	movs	r2, #1
 8008904:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008906:	7bfb      	ldrb	r3, [r7, #15]
}
 8008908:	4618      	mov	r0, r3
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	2200      	movs	r2, #0
 800891e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d04e      	beq.n	80089c6 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8008928:	2300      	movs	r3, #0
 800892a:	613b      	str	r3, [r7, #16]
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8008930:	e021      	b.n	8008976 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a1a      	ldr	r2, [r3, #32]
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	1c59      	adds	r1, r3, #1
 800893a:	6179      	str	r1, [r7, #20]
 800893c:	4413      	add	r3, r2
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8008942:	7bfb      	ldrb	r3, [r7, #15]
 8008944:	2b20      	cmp	r3, #32
 8008946:	d100      	bne.n	800894a <get_fileinfo+0x3a>
 8008948:	e015      	b.n	8008976 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800894a:	7bfb      	ldrb	r3, [r7, #15]
 800894c:	2b05      	cmp	r3, #5
 800894e:	d101      	bne.n	8008954 <get_fileinfo+0x44>
 8008950:	23e5      	movs	r3, #229	; 0xe5
 8008952:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	2b09      	cmp	r3, #9
 8008958:	d106      	bne.n	8008968 <get_fileinfo+0x58>
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	1c5a      	adds	r2, r3, #1
 800895e:	613a      	str	r2, [r7, #16]
 8008960:	683a      	ldr	r2, [r7, #0]
 8008962:	4413      	add	r3, r2
 8008964:	222e      	movs	r2, #46	; 0x2e
 8008966:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	1c5a      	adds	r2, r3, #1
 800896c:	613a      	str	r2, [r7, #16]
 800896e:	683a      	ldr	r2, [r7, #0]
 8008970:	4413      	add	r3, r2
 8008972:	7bfa      	ldrb	r2, [r7, #15]
 8008974:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	2b0a      	cmp	r3, #10
 800897a:	d9da      	bls.n	8008932 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800897c:	683a      	ldr	r2, [r7, #0]
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	4413      	add	r3, r2
 8008982:	3309      	adds	r3, #9
 8008984:	2200      	movs	r2, #0
 8008986:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a1b      	ldr	r3, [r3, #32]
 800898c:	7ada      	ldrb	r2, [r3, #11]
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a1b      	ldr	r3, [r3, #32]
 8008996:	331c      	adds	r3, #28
 8008998:	4618      	mov	r0, r3
 800899a:	f7fe fef7 	bl	800778c <ld_dword>
 800899e:	4602      	mov	r2, r0
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a1b      	ldr	r3, [r3, #32]
 80089a8:	3316      	adds	r3, #22
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fe feee 	bl	800778c <ld_dword>
 80089b0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	80da      	strh	r2, [r3, #6]
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	0c1b      	lsrs	r3, r3, #16
 80089be:	b29a      	uxth	r2, r3
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	809a      	strh	r2, [r3, #4]
 80089c4:	e000      	b.n	80089c8 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80089c6:	bf00      	nop
}
 80089c8:	3718      	adds	r7, #24
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
	...

080089d0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b088      	sub	sp, #32
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	60fb      	str	r3, [r7, #12]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	3324      	adds	r3, #36	; 0x24
 80089e4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80089e6:	220b      	movs	r2, #11
 80089e8:	2120      	movs	r1, #32
 80089ea:	68b8      	ldr	r0, [r7, #8]
 80089ec:	f7fe ff59 	bl	80078a2 <mem_set>
	si = i = 0; ni = 8;
 80089f0:	2300      	movs	r3, #0
 80089f2:	613b      	str	r3, [r7, #16]
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	61fb      	str	r3, [r7, #28]
 80089f8:	2308      	movs	r3, #8
 80089fa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	1c5a      	adds	r2, r3, #1
 8008a00:	61fa      	str	r2, [r7, #28]
 8008a02:	68fa      	ldr	r2, [r7, #12]
 8008a04:	4413      	add	r3, r2
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008a0a:	7efb      	ldrb	r3, [r7, #27]
 8008a0c:	2b20      	cmp	r3, #32
 8008a0e:	d94e      	bls.n	8008aae <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008a10:	7efb      	ldrb	r3, [r7, #27]
 8008a12:	2b2f      	cmp	r3, #47	; 0x2f
 8008a14:	d006      	beq.n	8008a24 <create_name+0x54>
 8008a16:	7efb      	ldrb	r3, [r7, #27]
 8008a18:	2b5c      	cmp	r3, #92	; 0x5c
 8008a1a:	d110      	bne.n	8008a3e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008a1c:	e002      	b.n	8008a24 <create_name+0x54>
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	3301      	adds	r3, #1
 8008a22:	61fb      	str	r3, [r7, #28]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	4413      	add	r3, r2
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	2b2f      	cmp	r3, #47	; 0x2f
 8008a2e:	d0f6      	beq.n	8008a1e <create_name+0x4e>
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	4413      	add	r3, r2
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	2b5c      	cmp	r3, #92	; 0x5c
 8008a3a:	d0f0      	beq.n	8008a1e <create_name+0x4e>
			break;
 8008a3c:	e038      	b.n	8008ab0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008a3e:	7efb      	ldrb	r3, [r7, #27]
 8008a40:	2b2e      	cmp	r3, #46	; 0x2e
 8008a42:	d003      	beq.n	8008a4c <create_name+0x7c>
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d30c      	bcc.n	8008a66 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	2b0b      	cmp	r3, #11
 8008a50:	d002      	beq.n	8008a58 <create_name+0x88>
 8008a52:	7efb      	ldrb	r3, [r7, #27]
 8008a54:	2b2e      	cmp	r3, #46	; 0x2e
 8008a56:	d001      	beq.n	8008a5c <create_name+0x8c>
 8008a58:	2306      	movs	r3, #6
 8008a5a:	e044      	b.n	8008ae6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008a5c:	2308      	movs	r3, #8
 8008a5e:	613b      	str	r3, [r7, #16]
 8008a60:	230b      	movs	r3, #11
 8008a62:	617b      	str	r3, [r7, #20]
			continue;
 8008a64:	e022      	b.n	8008aac <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008a66:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	da04      	bge.n	8008a78 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008a6e:	7efb      	ldrb	r3, [r7, #27]
 8008a70:	3b80      	subs	r3, #128	; 0x80
 8008a72:	4a1f      	ldr	r2, [pc, #124]	; (8008af0 <create_name+0x120>)
 8008a74:	5cd3      	ldrb	r3, [r2, r3]
 8008a76:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008a78:	7efb      	ldrb	r3, [r7, #27]
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	481d      	ldr	r0, [pc, #116]	; (8008af4 <create_name+0x124>)
 8008a7e:	f7fe ff52 	bl	8007926 <chk_chr>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d001      	beq.n	8008a8c <create_name+0xbc>
 8008a88:	2306      	movs	r3, #6
 8008a8a:	e02c      	b.n	8008ae6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008a8c:	7efb      	ldrb	r3, [r7, #27]
 8008a8e:	2b60      	cmp	r3, #96	; 0x60
 8008a90:	d905      	bls.n	8008a9e <create_name+0xce>
 8008a92:	7efb      	ldrb	r3, [r7, #27]
 8008a94:	2b7a      	cmp	r3, #122	; 0x7a
 8008a96:	d802      	bhi.n	8008a9e <create_name+0xce>
 8008a98:	7efb      	ldrb	r3, [r7, #27]
 8008a9a:	3b20      	subs	r3, #32
 8008a9c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	1c5a      	adds	r2, r3, #1
 8008aa2:	613a      	str	r2, [r7, #16]
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	7efa      	ldrb	r2, [r7, #27]
 8008aaa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008aac:	e7a6      	b.n	80089fc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008aae:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	441a      	add	r2, r3
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d101      	bne.n	8008ac4 <create_name+0xf4>
 8008ac0:	2306      	movs	r3, #6
 8008ac2:	e010      	b.n	8008ae6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	2be5      	cmp	r3, #229	; 0xe5
 8008aca:	d102      	bne.n	8008ad2 <create_name+0x102>
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	2205      	movs	r2, #5
 8008ad0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008ad2:	7efb      	ldrb	r3, [r7, #27]
 8008ad4:	2b20      	cmp	r3, #32
 8008ad6:	d801      	bhi.n	8008adc <create_name+0x10c>
 8008ad8:	2204      	movs	r2, #4
 8008ada:	e000      	b.n	8008ade <create_name+0x10e>
 8008adc:	2200      	movs	r2, #0
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	330b      	adds	r3, #11
 8008ae2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008ae4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3720      	adds	r7, #32
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	0800ba7c 	.word	0x0800ba7c
 8008af4:	0800b690 	.word	0x0800b690

08008af8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008b0c:	e002      	b.n	8008b14 <follow_path+0x1c>
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	3301      	adds	r3, #1
 8008b12:	603b      	str	r3, [r7, #0]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	2b2f      	cmp	r3, #47	; 0x2f
 8008b1a:	d0f8      	beq.n	8008b0e <follow_path+0x16>
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	2b5c      	cmp	r3, #92	; 0x5c
 8008b22:	d0f4      	beq.n	8008b0e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	2200      	movs	r2, #0
 8008b28:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	2b1f      	cmp	r3, #31
 8008b30:	d80a      	bhi.n	8008b48 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2280      	movs	r2, #128	; 0x80
 8008b36:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f7ff fc3d 	bl	80083bc <dir_sdi>
 8008b42:	4603      	mov	r3, r0
 8008b44:	75fb      	strb	r3, [r7, #23]
 8008b46:	e043      	b.n	8008bd0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008b48:	463b      	mov	r3, r7
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f7ff ff3f 	bl	80089d0 <create_name>
 8008b52:	4603      	mov	r3, r0
 8008b54:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008b56:	7dfb      	ldrb	r3, [r7, #23]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d134      	bne.n	8008bc6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f7ff fe50 	bl	8008802 <dir_find>
 8008b62:	4603      	mov	r3, r0
 8008b64:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008b6c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008b6e:	7dfb      	ldrb	r3, [r7, #23]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00a      	beq.n	8008b8a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008b74:	7dfb      	ldrb	r3, [r7, #23]
 8008b76:	2b04      	cmp	r3, #4
 8008b78:	d127      	bne.n	8008bca <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008b7a:	7afb      	ldrb	r3, [r7, #11]
 8008b7c:	f003 0304 	and.w	r3, r3, #4
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d122      	bne.n	8008bca <follow_path+0xd2>
 8008b84:	2305      	movs	r3, #5
 8008b86:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008b88:	e01f      	b.n	8008bca <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008b8a:	7afb      	ldrb	r3, [r7, #11]
 8008b8c:	f003 0304 	and.w	r3, r3, #4
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d11c      	bne.n	8008bce <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	799b      	ldrb	r3, [r3, #6]
 8008b98:	f003 0310 	and.w	r3, r3, #16
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d102      	bne.n	8008ba6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008ba0:	2305      	movs	r3, #5
 8008ba2:	75fb      	strb	r3, [r7, #23]
 8008ba4:	e014      	b.n	8008bd0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bb4:	4413      	add	r3, r2
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f7ff fd86 	bl	80086ca <ld_clust>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008bc4:	e7c0      	b.n	8008b48 <follow_path+0x50>
			if (res != FR_OK) break;
 8008bc6:	bf00      	nop
 8008bc8:	e002      	b.n	8008bd0 <follow_path+0xd8>
				break;
 8008bca:	bf00      	nop
 8008bcc:	e000      	b.n	8008bd0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008bce:	bf00      	nop
			}
		}
	}

	return res;
 8008bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3718      	adds	r7, #24
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008bda:	b480      	push	{r7}
 8008bdc:	b087      	sub	sp, #28
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008be2:	f04f 33ff 	mov.w	r3, #4294967295
 8008be6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d031      	beq.n	8008c54 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	617b      	str	r3, [r7, #20]
 8008bf6:	e002      	b.n	8008bfe <get_ldnumber+0x24>
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	617b      	str	r3, [r7, #20]
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	2b20      	cmp	r3, #32
 8008c04:	d903      	bls.n	8008c0e <get_ldnumber+0x34>
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	2b3a      	cmp	r3, #58	; 0x3a
 8008c0c:	d1f4      	bne.n	8008bf8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	2b3a      	cmp	r3, #58	; 0x3a
 8008c14:	d11c      	bne.n	8008c50 <get_ldnumber+0x76>
			tp = *path;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	1c5a      	adds	r2, r3, #1
 8008c20:	60fa      	str	r2, [r7, #12]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	3b30      	subs	r3, #48	; 0x30
 8008c26:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	2b09      	cmp	r3, #9
 8008c2c:	d80e      	bhi.n	8008c4c <get_ldnumber+0x72>
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d10a      	bne.n	8008c4c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d107      	bne.n	8008c4c <get_ldnumber+0x72>
					vol = (int)i;
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	3301      	adds	r3, #1
 8008c44:	617b      	str	r3, [r7, #20]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	697a      	ldr	r2, [r7, #20]
 8008c4a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	e002      	b.n	8008c56 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008c50:	2300      	movs	r3, #0
 8008c52:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008c54:	693b      	ldr	r3, [r7, #16]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	371c      	adds	r7, #28
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
	...

08008c64 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	70da      	strb	r2, [r3, #3]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f04f 32ff 	mov.w	r2, #4294967295
 8008c7a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008c7c:	6839      	ldr	r1, [r7, #0]
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7ff f81c 	bl	8007cbc <move_window>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <check_fs+0x2a>
 8008c8a:	2304      	movs	r3, #4
 8008c8c:	e038      	b.n	8008d00 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	3330      	adds	r3, #48	; 0x30
 8008c92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fe fd60 	bl	800775c <ld_word>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d001      	beq.n	8008cac <check_fs+0x48>
 8008ca8:	2303      	movs	r3, #3
 8008caa:	e029      	b.n	8008d00 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008cb2:	2be9      	cmp	r3, #233	; 0xe9
 8008cb4:	d009      	beq.n	8008cca <check_fs+0x66>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008cbc:	2beb      	cmp	r3, #235	; 0xeb
 8008cbe:	d11e      	bne.n	8008cfe <check_fs+0x9a>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008cc6:	2b90      	cmp	r3, #144	; 0x90
 8008cc8:	d119      	bne.n	8008cfe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	3330      	adds	r3, #48	; 0x30
 8008cce:	3336      	adds	r3, #54	; 0x36
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7fe fd5b 	bl	800778c <ld_dword>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008cdc:	4a0a      	ldr	r2, [pc, #40]	; (8008d08 <check_fs+0xa4>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d101      	bne.n	8008ce6 <check_fs+0x82>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	e00c      	b.n	8008d00 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	3330      	adds	r3, #48	; 0x30
 8008cea:	3352      	adds	r3, #82	; 0x52
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7fe fd4d 	bl	800778c <ld_dword>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	4a05      	ldr	r2, [pc, #20]	; (8008d0c <check_fs+0xa8>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d101      	bne.n	8008cfe <check_fs+0x9a>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	e000      	b.n	8008d00 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008cfe:	2302      	movs	r3, #2
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	00544146 	.word	0x00544146
 8008d0c:	33544146 	.word	0x33544146

08008d10 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b096      	sub	sp, #88	; 0x58
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	2200      	movs	r2, #0
 8008d22:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f7ff ff58 	bl	8008bda <get_ldnumber>
 8008d2a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	da01      	bge.n	8008d36 <find_volume+0x26>
 8008d32:	230b      	movs	r3, #11
 8008d34:	e22d      	b.n	8009192 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008d36:	4aa1      	ldr	r2, [pc, #644]	; (8008fbc <find_volume+0x2ac>)
 8008d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d3e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d101      	bne.n	8008d4a <find_volume+0x3a>
 8008d46:	230c      	movs	r3, #12
 8008d48:	e223      	b.n	8009192 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d4e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008d50:	79fb      	ldrb	r3, [r7, #7]
 8008d52:	f023 0301 	bic.w	r3, r3, #1
 8008d56:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d01a      	beq.n	8008d96 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d62:	785b      	ldrb	r3, [r3, #1]
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7fe fc5b 	bl	8007620 <disk_status>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008d70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d74:	f003 0301 	and.w	r3, r3, #1
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10c      	bne.n	8008d96 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008d7c:	79fb      	ldrb	r3, [r7, #7]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d007      	beq.n	8008d92 <find_volume+0x82>
 8008d82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d86:	f003 0304 	and.w	r3, r3, #4
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d001      	beq.n	8008d92 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008d8e:	230a      	movs	r3, #10
 8008d90:	e1ff      	b.n	8009192 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008d92:	2300      	movs	r3, #0
 8008d94:	e1fd      	b.n	8009192 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d98:	2200      	movs	r2, #0
 8008d9a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d9e:	b2da      	uxtb	r2, r3
 8008da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da6:	785b      	ldrb	r3, [r3, #1]
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7fe fc53 	bl	8007654 <disk_initialize>
 8008dae:	4603      	mov	r3, r0
 8008db0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008db4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008db8:	f003 0301 	and.w	r3, r3, #1
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d001      	beq.n	8008dc4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008dc0:	2303      	movs	r3, #3
 8008dc2:	e1e6      	b.n	8009192 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008dc4:	79fb      	ldrb	r3, [r7, #7]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d007      	beq.n	8008dda <find_volume+0xca>
 8008dca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008dce:	f003 0304 	and.w	r3, r3, #4
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008dd6:	230a      	movs	r3, #10
 8008dd8:	e1db      	b.n	8009192 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008dde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008de0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008de2:	f7ff ff3f 	bl	8008c64 <check_fs>
 8008de6:	4603      	mov	r3, r0
 8008de8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008dec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d149      	bne.n	8008e88 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008df4:	2300      	movs	r3, #0
 8008df6:	643b      	str	r3, [r7, #64]	; 0x40
 8008df8:	e01e      	b.n	8008e38 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e02:	011b      	lsls	r3, r3, #4
 8008e04:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008e08:	4413      	add	r3, r2
 8008e0a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0e:	3304      	adds	r3, #4
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d006      	beq.n	8008e24 <find_volume+0x114>
 8008e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e18:	3308      	adds	r3, #8
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7fe fcb6 	bl	800778c <ld_dword>
 8008e20:	4602      	mov	r2, r0
 8008e22:	e000      	b.n	8008e26 <find_volume+0x116>
 8008e24:	2200      	movs	r2, #0
 8008e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	3358      	adds	r3, #88	; 0x58
 8008e2c:	443b      	add	r3, r7
 8008e2e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e34:	3301      	adds	r3, #1
 8008e36:	643b      	str	r3, [r7, #64]	; 0x40
 8008e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e3a:	2b03      	cmp	r3, #3
 8008e3c:	d9dd      	bls.n	8008dfa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008e3e:	2300      	movs	r3, #0
 8008e40:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d002      	beq.n	8008e4e <find_volume+0x13e>
 8008e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	3358      	adds	r3, #88	; 0x58
 8008e54:	443b      	add	r3, r7
 8008e56:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008e5a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d005      	beq.n	8008e6e <find_volume+0x15e>
 8008e62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e66:	f7ff fefd 	bl	8008c64 <check_fs>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	e000      	b.n	8008e70 <find_volume+0x160>
 8008e6e:	2303      	movs	r3, #3
 8008e70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008e74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d905      	bls.n	8008e88 <find_volume+0x178>
 8008e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e7e:	3301      	adds	r3, #1
 8008e80:	643b      	str	r3, [r7, #64]	; 0x40
 8008e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e84:	2b03      	cmp	r3, #3
 8008e86:	d9e2      	bls.n	8008e4e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008e88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e8c:	2b04      	cmp	r3, #4
 8008e8e:	d101      	bne.n	8008e94 <find_volume+0x184>
 8008e90:	2301      	movs	r3, #1
 8008e92:	e17e      	b.n	8009192 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008e94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d901      	bls.n	8008ea0 <find_volume+0x190>
 8008e9c:	230d      	movs	r3, #13
 8008e9e:	e178      	b.n	8009192 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea2:	3330      	adds	r3, #48	; 0x30
 8008ea4:	330b      	adds	r3, #11
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fe fc58 	bl	800775c <ld_word>
 8008eac:	4603      	mov	r3, r0
 8008eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eb2:	d001      	beq.n	8008eb8 <find_volume+0x1a8>
 8008eb4:	230d      	movs	r3, #13
 8008eb6:	e16c      	b.n	8009192 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eba:	3330      	adds	r3, #48	; 0x30
 8008ebc:	3316      	adds	r3, #22
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fe fc4c 	bl	800775c <ld_word>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d106      	bne.n	8008edc <find_volume+0x1cc>
 8008ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed0:	3330      	adds	r3, #48	; 0x30
 8008ed2:	3324      	adds	r3, #36	; 0x24
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fe fc59 	bl	800778c <ld_dword>
 8008eda:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ede:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ee0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eee:	789b      	ldrb	r3, [r3, #2]
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d005      	beq.n	8008f00 <find_volume+0x1f0>
 8008ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef6:	789b      	ldrb	r3, [r3, #2]
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d001      	beq.n	8008f00 <find_volume+0x1f0>
 8008efc:	230d      	movs	r3, #13
 8008efe:	e148      	b.n	8009192 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f02:	789b      	ldrb	r3, [r3, #2]
 8008f04:	461a      	mov	r2, r3
 8008f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f08:	fb02 f303 	mul.w	r3, r2, r3
 8008f0c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f18:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1c:	895b      	ldrh	r3, [r3, #10]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d008      	beq.n	8008f34 <find_volume+0x224>
 8008f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f24:	895b      	ldrh	r3, [r3, #10]
 8008f26:	461a      	mov	r2, r3
 8008f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2a:	895b      	ldrh	r3, [r3, #10]
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	4013      	ands	r3, r2
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d001      	beq.n	8008f38 <find_volume+0x228>
 8008f34:	230d      	movs	r3, #13
 8008f36:	e12c      	b.n	8009192 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3a:	3330      	adds	r3, #48	; 0x30
 8008f3c:	3311      	adds	r3, #17
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fe fc0c 	bl	800775c <ld_word>
 8008f44:	4603      	mov	r3, r0
 8008f46:	461a      	mov	r2, r3
 8008f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4e:	891b      	ldrh	r3, [r3, #8]
 8008f50:	f003 030f 	and.w	r3, r3, #15
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d001      	beq.n	8008f5e <find_volume+0x24e>
 8008f5a:	230d      	movs	r3, #13
 8008f5c:	e119      	b.n	8009192 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f60:	3330      	adds	r3, #48	; 0x30
 8008f62:	3313      	adds	r3, #19
 8008f64:	4618      	mov	r0, r3
 8008f66:	f7fe fbf9 	bl	800775c <ld_word>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d106      	bne.n	8008f82 <find_volume+0x272>
 8008f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f76:	3330      	adds	r3, #48	; 0x30
 8008f78:	3320      	adds	r3, #32
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fe fc06 	bl	800778c <ld_dword>
 8008f80:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f84:	3330      	adds	r3, #48	; 0x30
 8008f86:	330e      	adds	r3, #14
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fe fbe7 	bl	800775c <ld_word>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008f92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d101      	bne.n	8008f9c <find_volume+0x28c>
 8008f98:	230d      	movs	r3, #13
 8008f9a:	e0fa      	b.n	8009192 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008f9c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fa0:	4413      	add	r3, r2
 8008fa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fa4:	8912      	ldrh	r2, [r2, #8]
 8008fa6:	0912      	lsrs	r2, r2, #4
 8008fa8:	b292      	uxth	r2, r2
 8008faa:	4413      	add	r3, r2
 8008fac:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008fae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d204      	bcs.n	8008fc0 <find_volume+0x2b0>
 8008fb6:	230d      	movs	r3, #13
 8008fb8:	e0eb      	b.n	8009192 <find_volume+0x482>
 8008fba:	bf00      	nop
 8008fbc:	20001e50 	.word	0x20001e50
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008fc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fc8:	8952      	ldrh	r2, [r2, #10]
 8008fca:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fce:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d101      	bne.n	8008fda <find_volume+0x2ca>
 8008fd6:	230d      	movs	r3, #13
 8008fd8:	e0db      	b.n	8009192 <find_volume+0x482>
		fmt = FS_FAT32;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d802      	bhi.n	8008ff0 <find_volume+0x2e0>
 8008fea:	2302      	movs	r3, #2
 8008fec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d802      	bhi.n	8009000 <find_volume+0x2f0>
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009002:	1c9a      	adds	r2, r3, #2
 8009004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009006:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800900c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800900e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009012:	441a      	add	r2, r3
 8009014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009016:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009018:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800901a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901c:	441a      	add	r2, r3
 800901e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009020:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8009022:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009026:	2b03      	cmp	r3, #3
 8009028:	d11e      	bne.n	8009068 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800902a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902c:	3330      	adds	r3, #48	; 0x30
 800902e:	332a      	adds	r3, #42	; 0x2a
 8009030:	4618      	mov	r0, r3
 8009032:	f7fe fb93 	bl	800775c <ld_word>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d001      	beq.n	8009040 <find_volume+0x330>
 800903c:	230d      	movs	r3, #13
 800903e:	e0a8      	b.n	8009192 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009042:	891b      	ldrh	r3, [r3, #8]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d001      	beq.n	800904c <find_volume+0x33c>
 8009048:	230d      	movs	r3, #13
 800904a:	e0a2      	b.n	8009192 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800904c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904e:	3330      	adds	r3, #48	; 0x30
 8009050:	332c      	adds	r3, #44	; 0x2c
 8009052:	4618      	mov	r0, r3
 8009054:	f7fe fb9a 	bl	800778c <ld_dword>
 8009058:	4602      	mov	r2, r0
 800905a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800905e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009060:	695b      	ldr	r3, [r3, #20]
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	647b      	str	r3, [r7, #68]	; 0x44
 8009066:	e01f      	b.n	80090a8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906a:	891b      	ldrh	r3, [r3, #8]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d101      	bne.n	8009074 <find_volume+0x364>
 8009070:	230d      	movs	r3, #13
 8009072:	e08e      	b.n	8009192 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009076:	6a1a      	ldr	r2, [r3, #32]
 8009078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800907a:	441a      	add	r2, r3
 800907c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009080:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009084:	2b02      	cmp	r3, #2
 8009086:	d103      	bne.n	8009090 <find_volume+0x380>
 8009088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908a:	695b      	ldr	r3, [r3, #20]
 800908c:	005b      	lsls	r3, r3, #1
 800908e:	e00a      	b.n	80090a6 <find_volume+0x396>
 8009090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009092:	695a      	ldr	r2, [r3, #20]
 8009094:	4613      	mov	r3, r2
 8009096:	005b      	lsls	r3, r3, #1
 8009098:	4413      	add	r3, r2
 800909a:	085a      	lsrs	r2, r3, #1
 800909c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909e:	695b      	ldr	r3, [r3, #20]
 80090a0:	f003 0301 	and.w	r3, r3, #1
 80090a4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80090a6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80090a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090aa:	699a      	ldr	r2, [r3, #24]
 80090ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090ae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80090b2:	0a5b      	lsrs	r3, r3, #9
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d201      	bcs.n	80090bc <find_volume+0x3ac>
 80090b8:	230d      	movs	r3, #13
 80090ba:	e06a      	b.n	8009192 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80090bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090be:	f04f 32ff 	mov.w	r2, #4294967295
 80090c2:	611a      	str	r2, [r3, #16]
 80090c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c6:	691a      	ldr	r2, [r3, #16]
 80090c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ca:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80090cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ce:	2280      	movs	r2, #128	; 0x80
 80090d0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80090d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80090d6:	2b03      	cmp	r3, #3
 80090d8:	d149      	bne.n	800916e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80090da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090dc:	3330      	adds	r3, #48	; 0x30
 80090de:	3330      	adds	r3, #48	; 0x30
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7fe fb3b 	bl	800775c <ld_word>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d140      	bne.n	800916e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80090ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090ee:	3301      	adds	r3, #1
 80090f0:	4619      	mov	r1, r3
 80090f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80090f4:	f7fe fde2 	bl	8007cbc <move_window>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d137      	bne.n	800916e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80090fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009100:	2200      	movs	r2, #0
 8009102:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009106:	3330      	adds	r3, #48	; 0x30
 8009108:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800910c:	4618      	mov	r0, r3
 800910e:	f7fe fb25 	bl	800775c <ld_word>
 8009112:	4603      	mov	r3, r0
 8009114:	461a      	mov	r2, r3
 8009116:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800911a:	429a      	cmp	r2, r3
 800911c:	d127      	bne.n	800916e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800911e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009120:	3330      	adds	r3, #48	; 0x30
 8009122:	4618      	mov	r0, r3
 8009124:	f7fe fb32 	bl	800778c <ld_dword>
 8009128:	4603      	mov	r3, r0
 800912a:	4a1c      	ldr	r2, [pc, #112]	; (800919c <find_volume+0x48c>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d11e      	bne.n	800916e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009132:	3330      	adds	r3, #48	; 0x30
 8009134:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009138:	4618      	mov	r0, r3
 800913a:	f7fe fb27 	bl	800778c <ld_dword>
 800913e:	4603      	mov	r3, r0
 8009140:	4a17      	ldr	r2, [pc, #92]	; (80091a0 <find_volume+0x490>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d113      	bne.n	800916e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009148:	3330      	adds	r3, #48	; 0x30
 800914a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe fb1c 	bl	800778c <ld_dword>
 8009154:	4602      	mov	r2, r0
 8009156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009158:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800915a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915c:	3330      	adds	r3, #48	; 0x30
 800915e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009162:	4618      	mov	r0, r3
 8009164:	f7fe fb12 	bl	800778c <ld_dword>
 8009168:	4602      	mov	r2, r0
 800916a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800916e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009170:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009174:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009176:	4b0b      	ldr	r3, [pc, #44]	; (80091a4 <find_volume+0x494>)
 8009178:	881b      	ldrh	r3, [r3, #0]
 800917a:	3301      	adds	r3, #1
 800917c:	b29a      	uxth	r2, r3
 800917e:	4b09      	ldr	r3, [pc, #36]	; (80091a4 <find_volume+0x494>)
 8009180:	801a      	strh	r2, [r3, #0]
 8009182:	4b08      	ldr	r3, [pc, #32]	; (80091a4 <find_volume+0x494>)
 8009184:	881a      	ldrh	r2, [r3, #0]
 8009186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009188:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800918a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800918c:	f7fe fd2e 	bl	8007bec <clear_lock>
#endif
	return FR_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3758      	adds	r7, #88	; 0x58
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	41615252 	.word	0x41615252
 80091a0:	61417272 	.word	0x61417272
 80091a4:	20001e54 	.word	0x20001e54

080091a8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80091b2:	2309      	movs	r3, #9
 80091b4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d01c      	beq.n	80091f6 <validate+0x4e>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d018      	beq.n	80091f6 <validate+0x4e>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d013      	beq.n	80091f6 <validate+0x4e>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	889a      	ldrh	r2, [r3, #4]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	88db      	ldrh	r3, [r3, #6]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d10c      	bne.n	80091f6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	785b      	ldrb	r3, [r3, #1]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fe fa1c 	bl	8007620 <disk_status>
 80091e8:	4603      	mov	r3, r0
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d101      	bne.n	80091f6 <validate+0x4e>
			res = FR_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80091f6:	7bfb      	ldrb	r3, [r7, #15]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d102      	bne.n	8009202 <validate+0x5a>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	e000      	b.n	8009204 <validate+0x5c>
 8009202:	2300      	movs	r3, #0
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	6013      	str	r3, [r2, #0]
	return res;
 8009208:	7bfb      	ldrb	r3, [r7, #15]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
	...

08009214 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b088      	sub	sp, #32
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	4613      	mov	r3, r2
 8009220:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009226:	f107 0310 	add.w	r3, r7, #16
 800922a:	4618      	mov	r0, r3
 800922c:	f7ff fcd5 	bl	8008bda <get_ldnumber>
 8009230:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	2b00      	cmp	r3, #0
 8009236:	da01      	bge.n	800923c <f_mount+0x28>
 8009238:	230b      	movs	r3, #11
 800923a:	e02b      	b.n	8009294 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800923c:	4a17      	ldr	r2, [pc, #92]	; (800929c <f_mount+0x88>)
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009244:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d005      	beq.n	8009258 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800924c:	69b8      	ldr	r0, [r7, #24]
 800924e:	f7fe fccd 	bl	8007bec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	2200      	movs	r2, #0
 8009256:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	490d      	ldr	r1, [pc, #52]	; (800929c <f_mount+0x88>)
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d002      	beq.n	800927a <f_mount+0x66>
 8009274:	79fb      	ldrb	r3, [r7, #7]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d001      	beq.n	800927e <f_mount+0x6a>
 800927a:	2300      	movs	r3, #0
 800927c:	e00a      	b.n	8009294 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800927e:	f107 010c 	add.w	r1, r7, #12
 8009282:	f107 0308 	add.w	r3, r7, #8
 8009286:	2200      	movs	r2, #0
 8009288:	4618      	mov	r0, r3
 800928a:	f7ff fd41 	bl	8008d10 <find_volume>
 800928e:	4603      	mov	r3, r0
 8009290:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009292:	7dfb      	ldrb	r3, [r7, #23]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3720      	adds	r7, #32
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	20001e50 	.word	0x20001e50

080092a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b098      	sub	sp, #96	; 0x60
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	4613      	mov	r3, r2
 80092ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d101      	bne.n	80092b8 <f_open+0x18>
 80092b4:	2309      	movs	r3, #9
 80092b6:	e1ad      	b.n	8009614 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80092b8:	79fb      	ldrb	r3, [r7, #7]
 80092ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80092c0:	79fa      	ldrb	r2, [r7, #7]
 80092c2:	f107 0110 	add.w	r1, r7, #16
 80092c6:	f107 0308 	add.w	r3, r7, #8
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7ff fd20 	bl	8008d10 <find_volume>
 80092d0:	4603      	mov	r3, r0
 80092d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80092d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092da:	2b00      	cmp	r3, #0
 80092dc:	f040 8191 	bne.w	8009602 <f_open+0x362>
		dj.obj.fs = fs;
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	f107 0314 	add.w	r3, r7, #20
 80092ea:	4611      	mov	r1, r2
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7ff fc03 	bl	8008af8 <follow_path>
 80092f2:	4603      	mov	r3, r0
 80092f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80092f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d11a      	bne.n	8009336 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009300:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009304:	b25b      	sxtb	r3, r3
 8009306:	2b00      	cmp	r3, #0
 8009308:	da03      	bge.n	8009312 <f_open+0x72>
				res = FR_INVALID_NAME;
 800930a:	2306      	movs	r3, #6
 800930c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009310:	e011      	b.n	8009336 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009312:	79fb      	ldrb	r3, [r7, #7]
 8009314:	f023 0301 	bic.w	r3, r3, #1
 8009318:	2b00      	cmp	r3, #0
 800931a:	bf14      	ite	ne
 800931c:	2301      	movne	r3, #1
 800931e:	2300      	moveq	r3, #0
 8009320:	b2db      	uxtb	r3, r3
 8009322:	461a      	mov	r2, r3
 8009324:	f107 0314 	add.w	r3, r7, #20
 8009328:	4611      	mov	r1, r2
 800932a:	4618      	mov	r0, r3
 800932c:	f7fe fb16 	bl	800795c <chk_lock>
 8009330:	4603      	mov	r3, r0
 8009332:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009336:	79fb      	ldrb	r3, [r7, #7]
 8009338:	f003 031c 	and.w	r3, r3, #28
 800933c:	2b00      	cmp	r3, #0
 800933e:	d07f      	beq.n	8009440 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009340:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009344:	2b00      	cmp	r3, #0
 8009346:	d017      	beq.n	8009378 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009348:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800934c:	2b04      	cmp	r3, #4
 800934e:	d10e      	bne.n	800936e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009350:	f7fe fb60 	bl	8007a14 <enq_lock>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d006      	beq.n	8009368 <f_open+0xc8>
 800935a:	f107 0314 	add.w	r3, r7, #20
 800935e:	4618      	mov	r0, r3
 8009360:	f7ff faa4 	bl	80088ac <dir_register>
 8009364:	4603      	mov	r3, r0
 8009366:	e000      	b.n	800936a <f_open+0xca>
 8009368:	2312      	movs	r3, #18
 800936a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800936e:	79fb      	ldrb	r3, [r7, #7]
 8009370:	f043 0308 	orr.w	r3, r3, #8
 8009374:	71fb      	strb	r3, [r7, #7]
 8009376:	e010      	b.n	800939a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009378:	7ebb      	ldrb	r3, [r7, #26]
 800937a:	f003 0311 	and.w	r3, r3, #17
 800937e:	2b00      	cmp	r3, #0
 8009380:	d003      	beq.n	800938a <f_open+0xea>
					res = FR_DENIED;
 8009382:	2307      	movs	r3, #7
 8009384:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009388:	e007      	b.n	800939a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800938a:	79fb      	ldrb	r3, [r7, #7]
 800938c:	f003 0304 	and.w	r3, r3, #4
 8009390:	2b00      	cmp	r3, #0
 8009392:	d002      	beq.n	800939a <f_open+0xfa>
 8009394:	2308      	movs	r3, #8
 8009396:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800939a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d168      	bne.n	8009474 <f_open+0x1d4>
 80093a2:	79fb      	ldrb	r3, [r7, #7]
 80093a4:	f003 0308 	and.w	r3, r3, #8
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d063      	beq.n	8009474 <f_open+0x1d4>
				dw = GET_FATTIME();
 80093ac:	f7fd fbf8 	bl	8006ba0 <get_fattime>
 80093b0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80093b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b4:	330e      	adds	r3, #14
 80093b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7fe fa25 	bl	8007808 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80093be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c0:	3316      	adds	r3, #22
 80093c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7fe fa1f 	bl	8007808 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80093ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093cc:	330b      	adds	r3, #11
 80093ce:	2220      	movs	r2, #32
 80093d0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093d6:	4611      	mov	r1, r2
 80093d8:	4618      	mov	r0, r3
 80093da:	f7ff f976 	bl	80086ca <ld_clust>
 80093de:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80093e4:	2200      	movs	r2, #0
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7ff f98e 	bl	8008708 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80093ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ee:	331c      	adds	r3, #28
 80093f0:	2100      	movs	r1, #0
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fe fa08 	bl	8007808 <st_dword>
					fs->wflag = 1;
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	2201      	movs	r2, #1
 80093fc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80093fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009400:	2b00      	cmp	r3, #0
 8009402:	d037      	beq.n	8009474 <f_open+0x1d4>
						dw = fs->winsect;
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009408:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800940a:	f107 0314 	add.w	r3, r7, #20
 800940e:	2200      	movs	r2, #0
 8009410:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009412:	4618      	mov	r0, r3
 8009414:	f7fe fea1 	bl	800815a <remove_chain>
 8009418:	4603      	mov	r3, r0
 800941a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800941e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009422:	2b00      	cmp	r3, #0
 8009424:	d126      	bne.n	8009474 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800942a:	4618      	mov	r0, r3
 800942c:	f7fe fc46 	bl	8007cbc <move_window>
 8009430:	4603      	mov	r3, r0
 8009432:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800943a:	3a01      	subs	r2, #1
 800943c:	60da      	str	r2, [r3, #12]
 800943e:	e019      	b.n	8009474 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009440:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009444:	2b00      	cmp	r3, #0
 8009446:	d115      	bne.n	8009474 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009448:	7ebb      	ldrb	r3, [r7, #26]
 800944a:	f003 0310 	and.w	r3, r3, #16
 800944e:	2b00      	cmp	r3, #0
 8009450:	d003      	beq.n	800945a <f_open+0x1ba>
					res = FR_NO_FILE;
 8009452:	2304      	movs	r3, #4
 8009454:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009458:	e00c      	b.n	8009474 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800945a:	79fb      	ldrb	r3, [r7, #7]
 800945c:	f003 0302 	and.w	r3, r3, #2
 8009460:	2b00      	cmp	r3, #0
 8009462:	d007      	beq.n	8009474 <f_open+0x1d4>
 8009464:	7ebb      	ldrb	r3, [r7, #26]
 8009466:	f003 0301 	and.w	r3, r3, #1
 800946a:	2b00      	cmp	r3, #0
 800946c:	d002      	beq.n	8009474 <f_open+0x1d4>
						res = FR_DENIED;
 800946e:	2307      	movs	r3, #7
 8009470:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009474:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009478:	2b00      	cmp	r3, #0
 800947a:	d128      	bne.n	80094ce <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800947c:	79fb      	ldrb	r3, [r7, #7]
 800947e:	f003 0308 	and.w	r3, r3, #8
 8009482:	2b00      	cmp	r3, #0
 8009484:	d003      	beq.n	800948e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009486:	79fb      	ldrb	r3, [r7, #7]
 8009488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800948c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800949c:	79fb      	ldrb	r3, [r7, #7]
 800949e:	f023 0301 	bic.w	r3, r3, #1
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	bf14      	ite	ne
 80094a6:	2301      	movne	r3, #1
 80094a8:	2300      	moveq	r3, #0
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	461a      	mov	r2, r3
 80094ae:	f107 0314 	add.w	r3, r7, #20
 80094b2:	4611      	mov	r1, r2
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7fe facf 	bl	8007a58 <inc_lock>
 80094ba:	4602      	mov	r2, r0
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d102      	bne.n	80094ce <f_open+0x22e>
 80094c8:	2302      	movs	r3, #2
 80094ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80094ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	f040 8095 	bne.w	8009602 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094dc:	4611      	mov	r1, r2
 80094de:	4618      	mov	r0, r3
 80094e0:	f7ff f8f3 	bl	80086ca <ld_clust>
 80094e4:	4602      	mov	r2, r0
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80094ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ec:	331c      	adds	r3, #28
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7fe f94c 	bl	800778c <ld_dword>
 80094f4:	4602      	mov	r2, r0
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2200      	movs	r2, #0
 80094fe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	88da      	ldrh	r2, [r3, #6]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	79fa      	ldrb	r2, [r7, #7]
 8009512:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2200      	movs	r2, #0
 8009518:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2200      	movs	r2, #0
 800951e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	3330      	adds	r3, #48	; 0x30
 800952a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800952e:	2100      	movs	r1, #0
 8009530:	4618      	mov	r0, r3
 8009532:	f7fe f9b6 	bl	80078a2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009536:	79fb      	ldrb	r3, [r7, #7]
 8009538:	f003 0320 	and.w	r3, r3, #32
 800953c:	2b00      	cmp	r3, #0
 800953e:	d060      	beq.n	8009602 <f_open+0x362>
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d05c      	beq.n	8009602 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	68da      	ldr	r2, [r3, #12]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	895b      	ldrh	r3, [r3, #10]
 8009554:	025b      	lsls	r3, r3, #9
 8009556:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	657b      	str	r3, [r7, #84]	; 0x54
 8009564:	e016      	b.n	8009594 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800956a:	4618      	mov	r0, r3
 800956c:	f7fe fc61 	bl	8007e32 <get_fat>
 8009570:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009572:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009574:	2b01      	cmp	r3, #1
 8009576:	d802      	bhi.n	800957e <f_open+0x2de>
 8009578:	2302      	movs	r3, #2
 800957a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800957e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009584:	d102      	bne.n	800958c <f_open+0x2ec>
 8009586:	2301      	movs	r3, #1
 8009588:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800958c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800958e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009590:	1ad3      	subs	r3, r2, r3
 8009592:	657b      	str	r3, [r7, #84]	; 0x54
 8009594:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009598:	2b00      	cmp	r3, #0
 800959a:	d103      	bne.n	80095a4 <f_open+0x304>
 800959c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800959e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d8e0      	bhi.n	8009566 <f_open+0x2c6>
				}
				fp->clust = clst;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80095a8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80095aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d127      	bne.n	8009602 <f_open+0x362>
 80095b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d022      	beq.n	8009602 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7fe fc17 	bl	8007df4 <clust2sect>
 80095c6:	6478      	str	r0, [r7, #68]	; 0x44
 80095c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d103      	bne.n	80095d6 <f_open+0x336>
						res = FR_INT_ERR;
 80095ce:	2302      	movs	r3, #2
 80095d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80095d4:	e015      	b.n	8009602 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80095d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095d8:	0a5a      	lsrs	r2, r3, #9
 80095da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095dc:	441a      	add	r2, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	7858      	ldrb	r0, [r3, #1]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6a1a      	ldr	r2, [r3, #32]
 80095f0:	2301      	movs	r3, #1
 80095f2:	f7fe f855 	bl	80076a0 <disk_read>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d002      	beq.n	8009602 <f_open+0x362>
 80095fc:	2301      	movs	r3, #1
 80095fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009602:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009606:	2b00      	cmp	r3, #0
 8009608:	d002      	beq.n	8009610 <f_open+0x370>
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009610:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009614:	4618      	mov	r0, r3
 8009616:	3760      	adds	r7, #96	; 0x60
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b08e      	sub	sp, #56	; 0x38
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	607a      	str	r2, [r7, #4]
 8009628:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	2200      	movs	r2, #0
 8009632:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f107 0214 	add.w	r2, r7, #20
 800963a:	4611      	mov	r1, r2
 800963c:	4618      	mov	r0, r3
 800963e:	f7ff fdb3 	bl	80091a8 <validate>
 8009642:	4603      	mov	r3, r0
 8009644:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009648:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800964c:	2b00      	cmp	r3, #0
 800964e:	d107      	bne.n	8009660 <f_read+0x44>
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	7d5b      	ldrb	r3, [r3, #21]
 8009654:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009658:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800965c:	2b00      	cmp	r3, #0
 800965e:	d002      	beq.n	8009666 <f_read+0x4a>
 8009660:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009664:	e115      	b.n	8009892 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	7d1b      	ldrb	r3, [r3, #20]
 800966a:	f003 0301 	and.w	r3, r3, #1
 800966e:	2b00      	cmp	r3, #0
 8009670:	d101      	bne.n	8009676 <f_read+0x5a>
 8009672:	2307      	movs	r3, #7
 8009674:	e10d      	b.n	8009892 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	68da      	ldr	r2, [r3, #12]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	1ad3      	subs	r3, r2, r3
 8009680:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	6a3b      	ldr	r3, [r7, #32]
 8009686:	429a      	cmp	r2, r3
 8009688:	f240 80fe 	bls.w	8009888 <f_read+0x26c>
 800968c:	6a3b      	ldr	r3, [r7, #32]
 800968e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009690:	e0fa      	b.n	8009888 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	699b      	ldr	r3, [r3, #24]
 8009696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800969a:	2b00      	cmp	r3, #0
 800969c:	f040 80c6 	bne.w	800982c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	699b      	ldr	r3, [r3, #24]
 80096a4:	0a5b      	lsrs	r3, r3, #9
 80096a6:	697a      	ldr	r2, [r7, #20]
 80096a8:	8952      	ldrh	r2, [r2, #10]
 80096aa:	3a01      	subs	r2, #1
 80096ac:	4013      	ands	r3, r2
 80096ae:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d12f      	bne.n	8009716 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d103      	bne.n	80096c6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	633b      	str	r3, [r7, #48]	; 0x30
 80096c4:	e013      	b.n	80096ee <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d007      	beq.n	80096de <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	699b      	ldr	r3, [r3, #24]
 80096d2:	4619      	mov	r1, r3
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f7fe fe3d 	bl	8008354 <clmt_clust>
 80096da:	6338      	str	r0, [r7, #48]	; 0x30
 80096dc:	e007      	b.n	80096ee <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	69db      	ldr	r3, [r3, #28]
 80096e4:	4619      	mov	r1, r3
 80096e6:	4610      	mov	r0, r2
 80096e8:	f7fe fba3 	bl	8007e32 <get_fat>
 80096ec:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80096ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d804      	bhi.n	80096fe <f_read+0xe2>
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2202      	movs	r2, #2
 80096f8:	755a      	strb	r2, [r3, #21]
 80096fa:	2302      	movs	r3, #2
 80096fc:	e0c9      	b.n	8009892 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80096fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009704:	d104      	bne.n	8009710 <f_read+0xf4>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2201      	movs	r2, #1
 800970a:	755a      	strb	r2, [r3, #21]
 800970c:	2301      	movs	r3, #1
 800970e:	e0c0      	b.n	8009892 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009714:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009716:	697a      	ldr	r2, [r7, #20]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	69db      	ldr	r3, [r3, #28]
 800971c:	4619      	mov	r1, r3
 800971e:	4610      	mov	r0, r2
 8009720:	f7fe fb68 	bl	8007df4 <clust2sect>
 8009724:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d104      	bne.n	8009736 <f_read+0x11a>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2202      	movs	r2, #2
 8009730:	755a      	strb	r2, [r3, #21]
 8009732:	2302      	movs	r3, #2
 8009734:	e0ad      	b.n	8009892 <f_read+0x276>
			sect += csect;
 8009736:	69ba      	ldr	r2, [r7, #24]
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	4413      	add	r3, r2
 800973c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	0a5b      	lsrs	r3, r3, #9
 8009742:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009746:	2b00      	cmp	r3, #0
 8009748:	d039      	beq.n	80097be <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800974a:	69fa      	ldr	r2, [r7, #28]
 800974c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974e:	4413      	add	r3, r2
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	8952      	ldrh	r2, [r2, #10]
 8009754:	4293      	cmp	r3, r2
 8009756:	d905      	bls.n	8009764 <f_read+0x148>
					cc = fs->csize - csect;
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	895b      	ldrh	r3, [r3, #10]
 800975c:	461a      	mov	r2, r3
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	7858      	ldrb	r0, [r3, #1]
 8009768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976a:	69ba      	ldr	r2, [r7, #24]
 800976c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800976e:	f7fd ff97 	bl	80076a0 <disk_read>
 8009772:	4603      	mov	r3, r0
 8009774:	2b00      	cmp	r3, #0
 8009776:	d004      	beq.n	8009782 <f_read+0x166>
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2201      	movs	r2, #1
 800977c:	755a      	strb	r2, [r3, #21]
 800977e:	2301      	movs	r3, #1
 8009780:	e087      	b.n	8009892 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	7d1b      	ldrb	r3, [r3, #20]
 8009786:	b25b      	sxtb	r3, r3
 8009788:	2b00      	cmp	r3, #0
 800978a:	da14      	bge.n	80097b6 <f_read+0x19a>
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6a1a      	ldr	r2, [r3, #32]
 8009790:	69bb      	ldr	r3, [r7, #24]
 8009792:	1ad3      	subs	r3, r2, r3
 8009794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009796:	429a      	cmp	r2, r3
 8009798:	d90d      	bls.n	80097b6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6a1a      	ldr	r2, [r3, #32]
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	025b      	lsls	r3, r3, #9
 80097a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097a6:	18d0      	adds	r0, r2, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	3330      	adds	r3, #48	; 0x30
 80097ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097b0:	4619      	mov	r1, r3
 80097b2:	f7fe f855 	bl	8007860 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80097b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b8:	025b      	lsls	r3, r3, #9
 80097ba:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80097bc:	e050      	b.n	8009860 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6a1b      	ldr	r3, [r3, #32]
 80097c2:	69ba      	ldr	r2, [r7, #24]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d02e      	beq.n	8009826 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	7d1b      	ldrb	r3, [r3, #20]
 80097cc:	b25b      	sxtb	r3, r3
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	da18      	bge.n	8009804 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	7858      	ldrb	r0, [r3, #1]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6a1a      	ldr	r2, [r3, #32]
 80097e0:	2301      	movs	r3, #1
 80097e2:	f7fd ff7d 	bl	80076e0 <disk_write>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d004      	beq.n	80097f6 <f_read+0x1da>
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2201      	movs	r2, #1
 80097f0:	755a      	strb	r2, [r3, #21]
 80097f2:	2301      	movs	r3, #1
 80097f4:	e04d      	b.n	8009892 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	7d1b      	ldrb	r3, [r3, #20]
 80097fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097fe:	b2da      	uxtb	r2, r3
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	7858      	ldrb	r0, [r3, #1]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800980e:	2301      	movs	r3, #1
 8009810:	69ba      	ldr	r2, [r7, #24]
 8009812:	f7fd ff45 	bl	80076a0 <disk_read>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d004      	beq.n	8009826 <f_read+0x20a>
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2201      	movs	r2, #1
 8009820:	755a      	strb	r2, [r3, #21]
 8009822:	2301      	movs	r3, #1
 8009824:	e035      	b.n	8009892 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	69ba      	ldr	r2, [r7, #24]
 800982a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009834:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009838:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800983a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	429a      	cmp	r2, r3
 8009840:	d901      	bls.n	8009846 <f_read+0x22a>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	699b      	ldr	r3, [r3, #24]
 8009850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009854:	4413      	add	r3, r2
 8009856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009858:	4619      	mov	r1, r3
 800985a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800985c:	f7fe f800 	bl	8007860 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009864:	4413      	add	r3, r2
 8009866:	627b      	str	r3, [r7, #36]	; 0x24
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	699a      	ldr	r2, [r3, #24]
 800986c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800986e:	441a      	add	r2, r3
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	619a      	str	r2, [r3, #24]
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987a:	441a      	add	r2, r3
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	601a      	str	r2, [r3, #0]
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009884:	1ad3      	subs	r3, r2, r3
 8009886:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2b00      	cmp	r3, #0
 800988c:	f47f af01 	bne.w	8009692 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3738      	adds	r7, #56	; 0x38
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	b086      	sub	sp, #24
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f107 0208 	add.w	r2, r7, #8
 80098a8:	4611      	mov	r1, r2
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7ff fc7c 	bl	80091a8 <validate>
 80098b0:	4603      	mov	r3, r0
 80098b2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80098b4:	7dfb      	ldrb	r3, [r7, #23]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d168      	bne.n	800998c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	7d1b      	ldrb	r3, [r3, #20]
 80098be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d062      	beq.n	800998c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	7d1b      	ldrb	r3, [r3, #20]
 80098ca:	b25b      	sxtb	r3, r3
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	da15      	bge.n	80098fc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	7858      	ldrb	r0, [r3, #1]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a1a      	ldr	r2, [r3, #32]
 80098de:	2301      	movs	r3, #1
 80098e0:	f7fd fefe 	bl	80076e0 <disk_write>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d001      	beq.n	80098ee <f_sync+0x54>
 80098ea:	2301      	movs	r3, #1
 80098ec:	e04f      	b.n	800998e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	7d1b      	ldrb	r3, [r3, #20]
 80098f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098f6:	b2da      	uxtb	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80098fc:	f7fd f950 	bl	8006ba0 <get_fattime>
 8009900:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009902:	68ba      	ldr	r2, [r7, #8]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009908:	4619      	mov	r1, r3
 800990a:	4610      	mov	r0, r2
 800990c:	f7fe f9d6 	bl	8007cbc <move_window>
 8009910:	4603      	mov	r3, r0
 8009912:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009914:	7dfb      	ldrb	r3, [r7, #23]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d138      	bne.n	800998c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800991e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	330b      	adds	r3, #11
 8009924:	781a      	ldrb	r2, [r3, #0]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	330b      	adds	r3, #11
 800992a:	f042 0220 	orr.w	r2, r2, #32
 800992e:	b2d2      	uxtb	r2, r2
 8009930:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6818      	ldr	r0, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	461a      	mov	r2, r3
 800993c:	68f9      	ldr	r1, [r7, #12]
 800993e:	f7fe fee3 	bl	8008708 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f103 021c 	add.w	r2, r3, #28
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	4619      	mov	r1, r3
 800994e:	4610      	mov	r0, r2
 8009950:	f7fd ff5a 	bl	8007808 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	3316      	adds	r3, #22
 8009958:	6939      	ldr	r1, [r7, #16]
 800995a:	4618      	mov	r0, r3
 800995c:	f7fd ff54 	bl	8007808 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	3312      	adds	r3, #18
 8009964:	2100      	movs	r1, #0
 8009966:	4618      	mov	r0, r3
 8009968:	f7fd ff33 	bl	80077d2 <st_word>
					fs->wflag = 1;
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	2201      	movs	r2, #1
 8009970:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	4618      	mov	r0, r3
 8009976:	f7fe f9cf 	bl	8007d18 <sync_fs>
 800997a:	4603      	mov	r3, r0
 800997c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	7d1b      	ldrb	r3, [r3, #20]
 8009982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009986:	b2da      	uxtb	r2, r3
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800998c:	7dfb      	ldrb	r3, [r7, #23]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3718      	adds	r7, #24
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b084      	sub	sp, #16
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7ff ff7b 	bl	800989a <f_sync>
 80099a4:	4603      	mov	r3, r0
 80099a6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d118      	bne.n	80099e0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f107 0208 	add.w	r2, r7, #8
 80099b4:	4611      	mov	r1, r2
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7ff fbf6 	bl	80091a8 <validate>
 80099bc:	4603      	mov	r3, r0
 80099be:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80099c0:	7bfb      	ldrb	r3, [r7, #15]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10c      	bne.n	80099e0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fe f8d2 	bl	8007b74 <dec_lock>
 80099d0:	4603      	mov	r3, r0
 80099d2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d102      	bne.n	80099e0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b090      	sub	sp, #64	; 0x40
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f107 0208 	add.w	r2, r7, #8
 80099fa:	4611      	mov	r1, r2
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7ff fbd3 	bl	80091a8 <validate>
 8009a02:	4603      	mov	r3, r0
 8009a04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009a08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d103      	bne.n	8009a18 <f_lseek+0x2e>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	7d5b      	ldrb	r3, [r3, #21]
 8009a14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009a18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d002      	beq.n	8009a26 <f_lseek+0x3c>
 8009a20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a24:	e1e6      	b.n	8009df4 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f000 80d1 	beq.w	8009bd2 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a36:	d15a      	bne.n	8009aee <f_lseek+0x104>
			tbl = fp->cltbl;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a40:	1d1a      	adds	r2, r3, #4
 8009a42:	627a      	str	r2, [r7, #36]	; 0x24
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	617b      	str	r3, [r7, #20]
 8009a48:	2302      	movs	r3, #2
 8009a4a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d03a      	beq.n	8009ace <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5a:	613b      	str	r3, [r7, #16]
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a62:	3302      	adds	r3, #2
 8009a64:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a68:	60fb      	str	r3, [r7, #12]
 8009a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7fe f9dc 	bl	8007e32 <get_fat>
 8009a7a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d804      	bhi.n	8009a8c <f_lseek+0xa2>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2202      	movs	r2, #2
 8009a86:	755a      	strb	r2, [r3, #21]
 8009a88:	2302      	movs	r3, #2
 8009a8a:	e1b3      	b.n	8009df4 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a92:	d104      	bne.n	8009a9e <f_lseek+0xb4>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	755a      	strb	r2, [r3, #21]
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e1aa      	b.n	8009df4 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d0de      	beq.n	8009a66 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009aa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d809      	bhi.n	8009ac4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab2:	1d1a      	adds	r2, r3, #4
 8009ab4:	627a      	str	r2, [r7, #36]	; 0x24
 8009ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ab8:	601a      	str	r2, [r3, #0]
 8009aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abc:	1d1a      	adds	r2, r3, #4
 8009abe:	627a      	str	r2, [r7, #36]	; 0x24
 8009ac0:	693a      	ldr	r2, [r7, #16]
 8009ac2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	695b      	ldr	r3, [r3, #20]
 8009ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d3c4      	bcc.n	8009a58 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ad4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d803      	bhi.n	8009ae6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8009ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	601a      	str	r2, [r3, #0]
 8009ae4:	e184      	b.n	8009df0 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009ae6:	2311      	movs	r3, #17
 8009ae8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009aec:	e180      	b.n	8009df0 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	683a      	ldr	r2, [r7, #0]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d902      	bls.n	8009afe <f_lseek+0x114>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	683a      	ldr	r2, [r7, #0]
 8009b02:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f000 8172 	beq.w	8009df0 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	4619      	mov	r1, r3
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f7fe fc1e 	bl	8008354 <clmt_clust>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	69db      	ldr	r3, [r3, #28]
 8009b24:	4619      	mov	r1, r3
 8009b26:	4610      	mov	r0, r2
 8009b28:	f7fe f964 	bl	8007df4 <clust2sect>
 8009b2c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d104      	bne.n	8009b3e <f_lseek+0x154>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2202      	movs	r2, #2
 8009b38:	755a      	strb	r2, [r3, #21]
 8009b3a:	2302      	movs	r3, #2
 8009b3c:	e15a      	b.n	8009df4 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	3b01      	subs	r3, #1
 8009b42:	0a5b      	lsrs	r3, r3, #9
 8009b44:	68ba      	ldr	r2, [r7, #8]
 8009b46:	8952      	ldrh	r2, [r2, #10]
 8009b48:	3a01      	subs	r2, #1
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	69ba      	ldr	r2, [r7, #24]
 8009b4e:	4413      	add	r3, r2
 8009b50:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	699b      	ldr	r3, [r3, #24]
 8009b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	f000 8148 	beq.w	8009df0 <f_lseek+0x406>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a1b      	ldr	r3, [r3, #32]
 8009b64:	69ba      	ldr	r2, [r7, #24]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	f000 8142 	beq.w	8009df0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	7d1b      	ldrb	r3, [r3, #20]
 8009b70:	b25b      	sxtb	r3, r3
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	da18      	bge.n	8009ba8 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	7858      	ldrb	r0, [r3, #1]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6a1a      	ldr	r2, [r3, #32]
 8009b84:	2301      	movs	r3, #1
 8009b86:	f7fd fdab 	bl	80076e0 <disk_write>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d004      	beq.n	8009b9a <f_lseek+0x1b0>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2201      	movs	r2, #1
 8009b94:	755a      	strb	r2, [r3, #21]
 8009b96:	2301      	movs	r3, #1
 8009b98:	e12c      	b.n	8009df4 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	7d1b      	ldrb	r3, [r3, #20]
 8009b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	7858      	ldrb	r0, [r3, #1]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	69ba      	ldr	r2, [r7, #24]
 8009bb6:	f7fd fd73 	bl	80076a0 <disk_read>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d004      	beq.n	8009bca <f_lseek+0x1e0>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	755a      	strb	r2, [r3, #21]
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e114      	b.n	8009df4 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	69ba      	ldr	r2, [r7, #24]
 8009bce:	621a      	str	r2, [r3, #32]
 8009bd0:	e10e      	b.n	8009df0 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	683a      	ldr	r2, [r7, #0]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d908      	bls.n	8009bee <f_lseek+0x204>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	7d1b      	ldrb	r3, [r3, #20]
 8009be0:	f003 0302 	and.w	r3, r3, #2
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d102      	bne.n	8009bee <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	699b      	ldr	r3, [r3, #24]
 8009bf2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bfc:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f000 80a7 	beq.w	8009d54 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	895b      	ldrh	r3, [r3, #10]
 8009c0a:	025b      	lsls	r3, r3, #9
 8009c0c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009c0e:	6a3b      	ldr	r3, [r7, #32]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d01b      	beq.n	8009c4c <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	1e5a      	subs	r2, r3, #1
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c1e:	6a3b      	ldr	r3, [r7, #32]
 8009c20:	1e59      	subs	r1, r3, #1
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d30f      	bcc.n	8009c4c <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009c2c:	6a3b      	ldr	r3, [r7, #32]
 8009c2e:	1e5a      	subs	r2, r3, #1
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	425b      	negs	r3, r3
 8009c34:	401a      	ands	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	699b      	ldr	r3, [r3, #24]
 8009c3e:	683a      	ldr	r2, [r7, #0]
 8009c40:	1ad3      	subs	r3, r2, r3
 8009c42:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	69db      	ldr	r3, [r3, #28]
 8009c48:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c4a:	e022      	b.n	8009c92 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d119      	bne.n	8009c8c <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2100      	movs	r1, #0
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7fe fae1 	bl	8008224 <create_chain>
 8009c62:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d104      	bne.n	8009c74 <f_lseek+0x28a>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2202      	movs	r2, #2
 8009c6e:	755a      	strb	r2, [r3, #21]
 8009c70:	2302      	movs	r3, #2
 8009c72:	e0bf      	b.n	8009df4 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c7a:	d104      	bne.n	8009c86 <f_lseek+0x29c>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	755a      	strb	r2, [r3, #21]
 8009c82:	2301      	movs	r3, #1
 8009c84:	e0b6      	b.n	8009df4 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c8a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c90:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8009c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d05d      	beq.n	8009d54 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8009c98:	e03a      	b.n	8009d10 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8009c9a:	683a      	ldr	r2, [r7, #0]
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	603b      	str	r3, [r7, #0]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	699a      	ldr	r2, [r3, #24]
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	441a      	add	r2, r3
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	7d1b      	ldrb	r3, [r3, #20]
 8009cb2:	f003 0302 	and.w	r3, r3, #2
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00b      	beq.n	8009cd2 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7fe fab0 	bl	8008224 <create_chain>
 8009cc4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8009cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d108      	bne.n	8009cde <f_lseek+0x2f4>
							ofs = 0; break;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	603b      	str	r3, [r7, #0]
 8009cd0:	e022      	b.n	8009d18 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7fe f8ab 	bl	8007e32 <get_fat>
 8009cdc:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce4:	d104      	bne.n	8009cf0 <f_lseek+0x306>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2201      	movs	r2, #1
 8009cea:	755a      	strb	r2, [r3, #21]
 8009cec:	2301      	movs	r3, #1
 8009cee:	e081      	b.n	8009df4 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8009cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d904      	bls.n	8009d00 <f_lseek+0x316>
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d304      	bcc.n	8009d0a <f_lseek+0x320>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2202      	movs	r2, #2
 8009d04:	755a      	strb	r2, [r3, #21]
 8009d06:	2302      	movs	r3, #2
 8009d08:	e074      	b.n	8009df4 <f_lseek+0x40a>
					fp->clust = clst;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d0e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8009d10:	683a      	ldr	r2, [r7, #0]
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d8c0      	bhi.n	8009c9a <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	699a      	ldr	r2, [r3, #24]
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	441a      	add	r2, r3
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d012      	beq.n	8009d54 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7fe f85e 	bl	8007df4 <clust2sect>
 8009d38:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d104      	bne.n	8009d4a <f_lseek+0x360>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2202      	movs	r2, #2
 8009d44:	755a      	strb	r2, [r3, #21]
 8009d46:	2302      	movs	r3, #2
 8009d48:	e054      	b.n	8009df4 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	0a5b      	lsrs	r3, r3, #9
 8009d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d50:	4413      	add	r3, r2
 8009d52:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	699a      	ldr	r2, [r3, #24]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d90a      	bls.n	8009d76 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	699a      	ldr	r2, [r3, #24]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	7d1b      	ldrb	r3, [r3, #20]
 8009d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d70:	b2da      	uxtb	r2, r3
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	699b      	ldr	r3, [r3, #24]
 8009d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d036      	beq.n	8009df0 <f_lseek+0x406>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a1b      	ldr	r3, [r3, #32]
 8009d86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d031      	beq.n	8009df0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	7d1b      	ldrb	r3, [r3, #20]
 8009d90:	b25b      	sxtb	r3, r3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	da18      	bge.n	8009dc8 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	7858      	ldrb	r0, [r3, #1]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6a1a      	ldr	r2, [r3, #32]
 8009da4:	2301      	movs	r3, #1
 8009da6:	f7fd fc9b 	bl	80076e0 <disk_write>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d004      	beq.n	8009dba <f_lseek+0x3d0>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	755a      	strb	r2, [r3, #21]
 8009db6:	2301      	movs	r3, #1
 8009db8:	e01c      	b.n	8009df4 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	7d1b      	ldrb	r3, [r3, #20]
 8009dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dc2:	b2da      	uxtb	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	7858      	ldrb	r0, [r3, #1]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009dd6:	f7fd fc63 	bl	80076a0 <disk_read>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d004      	beq.n	8009dea <f_lseek+0x400>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2201      	movs	r2, #1
 8009de4:	755a      	strb	r2, [r3, #21]
 8009de6:	2301      	movs	r3, #1
 8009de8:	e004      	b.n	8009df4 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009dee:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009df0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3740      	adds	r7, #64	; 0x40
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b086      	sub	sp, #24
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d101      	bne.n	8009e10 <f_opendir+0x14>
 8009e0c:	2309      	movs	r3, #9
 8009e0e:	e064      	b.n	8009eda <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8009e14:	f107 010c 	add.w	r1, r7, #12
 8009e18:	463b      	mov	r3, r7
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7fe ff77 	bl	8008d10 <find_volume>
 8009e22:	4603      	mov	r3, r0
 8009e24:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009e26:	7dfb      	ldrb	r3, [r7, #23]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d14f      	bne.n	8009ecc <f_opendir+0xd0>
		obj->fs = fs;
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	4619      	mov	r1, r3
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f7fe fe5e 	bl	8008af8 <follow_path>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8009e40:	7dfb      	ldrb	r3, [r7, #23]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d13d      	bne.n	8009ec2 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009e4c:	b25b      	sxtb	r3, r3
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	db12      	blt.n	8009e78 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	799b      	ldrb	r3, [r3, #6]
 8009e56:	f003 0310 	and.w	r3, r3, #16
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00a      	beq.n	8009e74 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6a1b      	ldr	r3, [r3, #32]
 8009e64:	4619      	mov	r1, r3
 8009e66:	4610      	mov	r0, r2
 8009e68:	f7fe fc2f 	bl	80086ca <ld_clust>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	609a      	str	r2, [r3, #8]
 8009e72:	e001      	b.n	8009e78 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8009e74:	2305      	movs	r3, #5
 8009e76:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8009e78:	7dfb      	ldrb	r3, [r7, #23]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d121      	bne.n	8009ec2 <f_opendir+0xc6>
				obj->id = fs->id;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	88da      	ldrh	r2, [r3, #6]
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8009e86:	2100      	movs	r1, #0
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f7fe fa97 	bl	80083bc <dir_sdi>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8009e92:	7dfb      	ldrb	r3, [r7, #23]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d114      	bne.n	8009ec2 <f_opendir+0xc6>
					if (obj->sclust) {
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00d      	beq.n	8009ebc <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8009ea0:	2100      	movs	r1, #0
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f7fd fdd8 	bl	8007a58 <inc_lock>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	691b      	ldr	r3, [r3, #16]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d105      	bne.n	8009ec2 <f_opendir+0xc6>
 8009eb6:	2312      	movs	r3, #18
 8009eb8:	75fb      	strb	r3, [r7, #23]
 8009eba:	e002      	b.n	8009ec2 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8009ec2:	7dfb      	ldrb	r3, [r7, #23]
 8009ec4:	2b04      	cmp	r3, #4
 8009ec6:	d101      	bne.n	8009ecc <f_opendir+0xd0>
 8009ec8:	2305      	movs	r3, #5
 8009eca:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8009ecc:	7dfb      	ldrb	r3, [r7, #23]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d002      	beq.n	8009ed8 <f_opendir+0xdc>
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3718      	adds	r7, #24
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b084      	sub	sp, #16
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f107 0208 	add.w	r2, r7, #8
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7ff f958 	bl	80091a8 <validate>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009efc:	7bfb      	ldrb	r3, [r7, #15]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d110      	bne.n	8009f24 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	691b      	ldr	r3, [r3, #16]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d006      	beq.n	8009f18 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7fd fe30 	bl	8007b74 <dec_lock>
 8009f14:	4603      	mov	r3, r0
 8009f16:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8009f18:	7bfb      	ldrb	r3, [r7, #15]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d102      	bne.n	8009f24 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8009f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b084      	sub	sp, #16
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f107 0208 	add.w	r2, r7, #8
 8009f3e:	4611      	mov	r1, r2
 8009f40:	4618      	mov	r0, r3
 8009f42:	f7ff f931 	bl	80091a8 <validate>
 8009f46:	4603      	mov	r3, r0
 8009f48:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009f4a:	7bfb      	ldrb	r3, [r7, #15]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d126      	bne.n	8009f9e <f_readdir+0x70>
		if (!fno) {
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d106      	bne.n	8009f64 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8009f56:	2100      	movs	r1, #0
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f7fe fa2f 	bl	80083bc <dir_sdi>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	73fb      	strb	r3, [r7, #15]
 8009f62:	e01c      	b.n	8009f9e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8009f64:	2100      	movs	r1, #0
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f7fe fbee 	bl	8008748 <dir_read>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8009f70:	7bfb      	ldrb	r3, [r7, #15]
 8009f72:	2b04      	cmp	r3, #4
 8009f74:	d101      	bne.n	8009f7a <f_readdir+0x4c>
 8009f76:	2300      	movs	r3, #0
 8009f78:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8009f7a:	7bfb      	ldrb	r3, [r7, #15]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10e      	bne.n	8009f9e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8009f80:	6839      	ldr	r1, [r7, #0]
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f7fe fcc4 	bl	8008910 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8009f88:	2100      	movs	r1, #0
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f7fe fa91 	bl	80084b2 <dir_next>
 8009f90:	4603      	mov	r3, r0
 8009f92:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8009f94:	7bfb      	ldrb	r3, [r7, #15]
 8009f96:	2b04      	cmp	r3, #4
 8009f98:	d101      	bne.n	8009f9e <f_readdir+0x70>
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8009f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3710      	adds	r7, #16
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b092      	sub	sp, #72	; 0x48
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8009fb4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009fb8:	f107 030c 	add.w	r3, r7, #12
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fe fea6 	bl	8008d10 <find_volume>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8009fca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f040 8099 	bne.w	800a106 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009fd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fdc:	691a      	ldr	r2, [r3, #16]
 8009fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe0:	695b      	ldr	r3, [r3, #20]
 8009fe2:	3b02      	subs	r3, #2
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d804      	bhi.n	8009ff2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fea:	691a      	ldr	r2, [r3, #16]
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	601a      	str	r2, [r3, #0]
 8009ff0:	e089      	b.n	800a106 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d128      	bne.n	800a050 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8009ffe:	2302      	movs	r3, #2
 800a000:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a004:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800a006:	f107 0314 	add.w	r3, r7, #20
 800a00a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7fd ff10 	bl	8007e32 <get_fat>
 800a012:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a01a:	d103      	bne.n	800a024 <f_getfree+0x7c>
 800a01c:	2301      	movs	r3, #1
 800a01e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a022:	e063      	b.n	800a0ec <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a026:	2b01      	cmp	r3, #1
 800a028:	d103      	bne.n	800a032 <f_getfree+0x8a>
 800a02a:	2302      	movs	r3, #2
 800a02c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a030:	e05c      	b.n	800a0ec <f_getfree+0x144>
					if (stat == 0) nfree++;
 800a032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a034:	2b00      	cmp	r3, #0
 800a036:	d102      	bne.n	800a03e <f_getfree+0x96>
 800a038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a03a:	3301      	adds	r3, #1
 800a03c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800a03e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a040:	3301      	adds	r3, #1
 800a042:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a046:	695b      	ldr	r3, [r3, #20]
 800a048:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d3db      	bcc.n	800a006 <f_getfree+0x5e>
 800a04e:	e04d      	b.n	800a0ec <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800a050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a052:	695b      	ldr	r3, [r3, #20]
 800a054:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a058:	6a1b      	ldr	r3, [r3, #32]
 800a05a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800a05c:	2300      	movs	r3, #0
 800a05e:	637b      	str	r3, [r7, #52]	; 0x34
 800a060:	2300      	movs	r3, #0
 800a062:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800a064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a066:	2b00      	cmp	r3, #0
 800a068:	d113      	bne.n	800a092 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800a06a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06e:	1c5a      	adds	r2, r3, #1
 800a070:	63ba      	str	r2, [r7, #56]	; 0x38
 800a072:	4619      	mov	r1, r3
 800a074:	f7fd fe22 	bl	8007cbc <move_window>
 800a078:	4603      	mov	r3, r0
 800a07a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800a07e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a082:	2b00      	cmp	r3, #0
 800a084:	d131      	bne.n	800a0ea <f_getfree+0x142>
							p = fs->win;
 800a086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a088:	3330      	adds	r3, #48	; 0x30
 800a08a:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800a08c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a090:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800a092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	2b02      	cmp	r3, #2
 800a098:	d10f      	bne.n	800a0ba <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800a09a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a09c:	f7fd fb5e 	bl	800775c <ld_word>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d102      	bne.n	800a0ac <f_getfree+0x104>
 800a0a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800a0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ae:	3302      	adds	r3, #2
 800a0b0:	633b      	str	r3, [r7, #48]	; 0x30
 800a0b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b4:	3b02      	subs	r3, #2
 800a0b6:	637b      	str	r3, [r7, #52]	; 0x34
 800a0b8:	e010      	b.n	800a0dc <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800a0ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0bc:	f7fd fb66 	bl	800778c <ld_dword>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d102      	bne.n	800a0d0 <f_getfree+0x128>
 800a0ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800a0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d2:	3304      	adds	r3, #4
 800a0d4:	633b      	str	r3, [r7, #48]	; 0x30
 800a0d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0d8:	3b04      	subs	r3, #4
 800a0da:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800a0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d1bd      	bne.n	800a064 <f_getfree+0xbc>
 800a0e8:	e000      	b.n	800a0ec <f_getfree+0x144>
							if (res != FR_OK) break;
 800a0ea:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a0f0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800a0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a0f6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fa:	791a      	ldrb	r2, [r3, #4]
 800a0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fe:	f042 0201 	orr.w	r2, r2, #1
 800a102:	b2d2      	uxtb	r2, r2
 800a104:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800a106:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3748      	adds	r7, #72	; 0x48
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
	...

0800a114 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a114:	b480      	push	{r7}
 800a116:	b087      	sub	sp, #28
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	4613      	mov	r3, r2
 800a120:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a122:	2301      	movs	r3, #1
 800a124:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a126:	2300      	movs	r3, #0
 800a128:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a12a:	4b1f      	ldr	r3, [pc, #124]	; (800a1a8 <FATFS_LinkDriverEx+0x94>)
 800a12c:	7a5b      	ldrb	r3, [r3, #9]
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	2b00      	cmp	r3, #0
 800a132:	d131      	bne.n	800a198 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a134:	4b1c      	ldr	r3, [pc, #112]	; (800a1a8 <FATFS_LinkDriverEx+0x94>)
 800a136:	7a5b      	ldrb	r3, [r3, #9]
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	461a      	mov	r2, r3
 800a13c:	4b1a      	ldr	r3, [pc, #104]	; (800a1a8 <FATFS_LinkDriverEx+0x94>)
 800a13e:	2100      	movs	r1, #0
 800a140:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a142:	4b19      	ldr	r3, [pc, #100]	; (800a1a8 <FATFS_LinkDriverEx+0x94>)
 800a144:	7a5b      	ldrb	r3, [r3, #9]
 800a146:	b2db      	uxtb	r3, r3
 800a148:	4a17      	ldr	r2, [pc, #92]	; (800a1a8 <FATFS_LinkDriverEx+0x94>)
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4413      	add	r3, r2
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a152:	4b15      	ldr	r3, [pc, #84]	; (800a1a8 <FATFS_LinkDriverEx+0x94>)
 800a154:	7a5b      	ldrb	r3, [r3, #9]
 800a156:	b2db      	uxtb	r3, r3
 800a158:	461a      	mov	r2, r3
 800a15a:	4b13      	ldr	r3, [pc, #76]	; (800a1a8 <FATFS_LinkDriverEx+0x94>)
 800a15c:	4413      	add	r3, r2
 800a15e:	79fa      	ldrb	r2, [r7, #7]
 800a160:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a162:	4b11      	ldr	r3, [pc, #68]	; (800a1a8 <FATFS_LinkDriverEx+0x94>)
 800a164:	7a5b      	ldrb	r3, [r3, #9]
 800a166:	b2db      	uxtb	r3, r3
 800a168:	1c5a      	adds	r2, r3, #1
 800a16a:	b2d1      	uxtb	r1, r2
 800a16c:	4a0e      	ldr	r2, [pc, #56]	; (800a1a8 <FATFS_LinkDriverEx+0x94>)
 800a16e:	7251      	strb	r1, [r2, #9]
 800a170:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a172:	7dbb      	ldrb	r3, [r7, #22]
 800a174:	3330      	adds	r3, #48	; 0x30
 800a176:	b2da      	uxtb	r2, r3
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	3301      	adds	r3, #1
 800a180:	223a      	movs	r2, #58	; 0x3a
 800a182:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	3302      	adds	r3, #2
 800a188:	222f      	movs	r2, #47	; 0x2f
 800a18a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	3303      	adds	r3, #3
 800a190:	2200      	movs	r2, #0
 800a192:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a194:	2300      	movs	r3, #0
 800a196:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a198:	7dfb      	ldrb	r3, [r7, #23]
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	371c      	adds	r7, #28
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	20001e78 	.word	0x20001e78

0800a1ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	6839      	ldr	r1, [r7, #0]
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7ff ffaa 	bl	800a114 <FATFS_LinkDriverEx>
 800a1c0:	4603      	mov	r3, r0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3708      	adds	r7, #8
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <atoi>:
 800a1ca:	220a      	movs	r2, #10
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	f000 b959 	b.w	800a484 <strtol>
	...

0800a1d4 <__errno>:
 800a1d4:	4b01      	ldr	r3, [pc, #4]	; (800a1dc <__errno+0x8>)
 800a1d6:	6818      	ldr	r0, [r3, #0]
 800a1d8:	4770      	bx	lr
 800a1da:	bf00      	nop
 800a1dc:	20000024 	.word	0x20000024

0800a1e0 <__libc_init_array>:
 800a1e0:	b570      	push	{r4, r5, r6, lr}
 800a1e2:	4d0d      	ldr	r5, [pc, #52]	; (800a218 <__libc_init_array+0x38>)
 800a1e4:	4c0d      	ldr	r4, [pc, #52]	; (800a21c <__libc_init_array+0x3c>)
 800a1e6:	1b64      	subs	r4, r4, r5
 800a1e8:	10a4      	asrs	r4, r4, #2
 800a1ea:	2600      	movs	r6, #0
 800a1ec:	42a6      	cmp	r6, r4
 800a1ee:	d109      	bne.n	800a204 <__libc_init_array+0x24>
 800a1f0:	4d0b      	ldr	r5, [pc, #44]	; (800a220 <__libc_init_array+0x40>)
 800a1f2:	4c0c      	ldr	r4, [pc, #48]	; (800a224 <__libc_init_array+0x44>)
 800a1f4:	f001 f954 	bl	800b4a0 <_init>
 800a1f8:	1b64      	subs	r4, r4, r5
 800a1fa:	10a4      	asrs	r4, r4, #2
 800a1fc:	2600      	movs	r6, #0
 800a1fe:	42a6      	cmp	r6, r4
 800a200:	d105      	bne.n	800a20e <__libc_init_array+0x2e>
 800a202:	bd70      	pop	{r4, r5, r6, pc}
 800a204:	f855 3b04 	ldr.w	r3, [r5], #4
 800a208:	4798      	blx	r3
 800a20a:	3601      	adds	r6, #1
 800a20c:	e7ee      	b.n	800a1ec <__libc_init_array+0xc>
 800a20e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a212:	4798      	blx	r3
 800a214:	3601      	adds	r6, #1
 800a216:	e7f2      	b.n	800a1fe <__libc_init_array+0x1e>
 800a218:	0800bca0 	.word	0x0800bca0
 800a21c:	0800bca0 	.word	0x0800bca0
 800a220:	0800bca0 	.word	0x0800bca0
 800a224:	0800bca4 	.word	0x0800bca4

0800a228 <memcpy>:
 800a228:	440a      	add	r2, r1
 800a22a:	4291      	cmp	r1, r2
 800a22c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a230:	d100      	bne.n	800a234 <memcpy+0xc>
 800a232:	4770      	bx	lr
 800a234:	b510      	push	{r4, lr}
 800a236:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a23a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a23e:	4291      	cmp	r1, r2
 800a240:	d1f9      	bne.n	800a236 <memcpy+0xe>
 800a242:	bd10      	pop	{r4, pc}

0800a244 <memset>:
 800a244:	4402      	add	r2, r0
 800a246:	4603      	mov	r3, r0
 800a248:	4293      	cmp	r3, r2
 800a24a:	d100      	bne.n	800a24e <memset+0xa>
 800a24c:	4770      	bx	lr
 800a24e:	f803 1b01 	strb.w	r1, [r3], #1
 800a252:	e7f9      	b.n	800a248 <memset+0x4>

0800a254 <_puts_r>:
 800a254:	b570      	push	{r4, r5, r6, lr}
 800a256:	460e      	mov	r6, r1
 800a258:	4605      	mov	r5, r0
 800a25a:	b118      	cbz	r0, 800a264 <_puts_r+0x10>
 800a25c:	6983      	ldr	r3, [r0, #24]
 800a25e:	b90b      	cbnz	r3, 800a264 <_puts_r+0x10>
 800a260:	f000 fb2e 	bl	800a8c0 <__sinit>
 800a264:	69ab      	ldr	r3, [r5, #24]
 800a266:	68ac      	ldr	r4, [r5, #8]
 800a268:	b913      	cbnz	r3, 800a270 <_puts_r+0x1c>
 800a26a:	4628      	mov	r0, r5
 800a26c:	f000 fb28 	bl	800a8c0 <__sinit>
 800a270:	4b2c      	ldr	r3, [pc, #176]	; (800a324 <_puts_r+0xd0>)
 800a272:	429c      	cmp	r4, r3
 800a274:	d120      	bne.n	800a2b8 <_puts_r+0x64>
 800a276:	686c      	ldr	r4, [r5, #4]
 800a278:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a27a:	07db      	lsls	r3, r3, #31
 800a27c:	d405      	bmi.n	800a28a <_puts_r+0x36>
 800a27e:	89a3      	ldrh	r3, [r4, #12]
 800a280:	0598      	lsls	r0, r3, #22
 800a282:	d402      	bmi.n	800a28a <_puts_r+0x36>
 800a284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a286:	f000 fbb9 	bl	800a9fc <__retarget_lock_acquire_recursive>
 800a28a:	89a3      	ldrh	r3, [r4, #12]
 800a28c:	0719      	lsls	r1, r3, #28
 800a28e:	d51d      	bpl.n	800a2cc <_puts_r+0x78>
 800a290:	6923      	ldr	r3, [r4, #16]
 800a292:	b1db      	cbz	r3, 800a2cc <_puts_r+0x78>
 800a294:	3e01      	subs	r6, #1
 800a296:	68a3      	ldr	r3, [r4, #8]
 800a298:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a29c:	3b01      	subs	r3, #1
 800a29e:	60a3      	str	r3, [r4, #8]
 800a2a0:	bb39      	cbnz	r1, 800a2f2 <_puts_r+0x9e>
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	da38      	bge.n	800a318 <_puts_r+0xc4>
 800a2a6:	4622      	mov	r2, r4
 800a2a8:	210a      	movs	r1, #10
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	f000 f92e 	bl	800a50c <__swbuf_r>
 800a2b0:	3001      	adds	r0, #1
 800a2b2:	d011      	beq.n	800a2d8 <_puts_r+0x84>
 800a2b4:	250a      	movs	r5, #10
 800a2b6:	e011      	b.n	800a2dc <_puts_r+0x88>
 800a2b8:	4b1b      	ldr	r3, [pc, #108]	; (800a328 <_puts_r+0xd4>)
 800a2ba:	429c      	cmp	r4, r3
 800a2bc:	d101      	bne.n	800a2c2 <_puts_r+0x6e>
 800a2be:	68ac      	ldr	r4, [r5, #8]
 800a2c0:	e7da      	b.n	800a278 <_puts_r+0x24>
 800a2c2:	4b1a      	ldr	r3, [pc, #104]	; (800a32c <_puts_r+0xd8>)
 800a2c4:	429c      	cmp	r4, r3
 800a2c6:	bf08      	it	eq
 800a2c8:	68ec      	ldreq	r4, [r5, #12]
 800a2ca:	e7d5      	b.n	800a278 <_puts_r+0x24>
 800a2cc:	4621      	mov	r1, r4
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	f000 f96e 	bl	800a5b0 <__swsetup_r>
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	d0dd      	beq.n	800a294 <_puts_r+0x40>
 800a2d8:	f04f 35ff 	mov.w	r5, #4294967295
 800a2dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2de:	07da      	lsls	r2, r3, #31
 800a2e0:	d405      	bmi.n	800a2ee <_puts_r+0x9a>
 800a2e2:	89a3      	ldrh	r3, [r4, #12]
 800a2e4:	059b      	lsls	r3, r3, #22
 800a2e6:	d402      	bmi.n	800a2ee <_puts_r+0x9a>
 800a2e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2ea:	f000 fb88 	bl	800a9fe <__retarget_lock_release_recursive>
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	bd70      	pop	{r4, r5, r6, pc}
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	da04      	bge.n	800a300 <_puts_r+0xac>
 800a2f6:	69a2      	ldr	r2, [r4, #24]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	dc06      	bgt.n	800a30a <_puts_r+0xb6>
 800a2fc:	290a      	cmp	r1, #10
 800a2fe:	d004      	beq.n	800a30a <_puts_r+0xb6>
 800a300:	6823      	ldr	r3, [r4, #0]
 800a302:	1c5a      	adds	r2, r3, #1
 800a304:	6022      	str	r2, [r4, #0]
 800a306:	7019      	strb	r1, [r3, #0]
 800a308:	e7c5      	b.n	800a296 <_puts_r+0x42>
 800a30a:	4622      	mov	r2, r4
 800a30c:	4628      	mov	r0, r5
 800a30e:	f000 f8fd 	bl	800a50c <__swbuf_r>
 800a312:	3001      	adds	r0, #1
 800a314:	d1bf      	bne.n	800a296 <_puts_r+0x42>
 800a316:	e7df      	b.n	800a2d8 <_puts_r+0x84>
 800a318:	6823      	ldr	r3, [r4, #0]
 800a31a:	250a      	movs	r5, #10
 800a31c:	1c5a      	adds	r2, r3, #1
 800a31e:	6022      	str	r2, [r4, #0]
 800a320:	701d      	strb	r5, [r3, #0]
 800a322:	e7db      	b.n	800a2dc <_puts_r+0x88>
 800a324:	0800bc24 	.word	0x0800bc24
 800a328:	0800bc44 	.word	0x0800bc44
 800a32c:	0800bc04 	.word	0x0800bc04

0800a330 <puts>:
 800a330:	4b02      	ldr	r3, [pc, #8]	; (800a33c <puts+0xc>)
 800a332:	4601      	mov	r1, r0
 800a334:	6818      	ldr	r0, [r3, #0]
 800a336:	f7ff bf8d 	b.w	800a254 <_puts_r>
 800a33a:	bf00      	nop
 800a33c:	20000024 	.word	0x20000024

0800a340 <siprintf>:
 800a340:	b40e      	push	{r1, r2, r3}
 800a342:	b500      	push	{lr}
 800a344:	b09c      	sub	sp, #112	; 0x70
 800a346:	ab1d      	add	r3, sp, #116	; 0x74
 800a348:	9002      	str	r0, [sp, #8]
 800a34a:	9006      	str	r0, [sp, #24]
 800a34c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a350:	4809      	ldr	r0, [pc, #36]	; (800a378 <siprintf+0x38>)
 800a352:	9107      	str	r1, [sp, #28]
 800a354:	9104      	str	r1, [sp, #16]
 800a356:	4909      	ldr	r1, [pc, #36]	; (800a37c <siprintf+0x3c>)
 800a358:	f853 2b04 	ldr.w	r2, [r3], #4
 800a35c:	9105      	str	r1, [sp, #20]
 800a35e:	6800      	ldr	r0, [r0, #0]
 800a360:	9301      	str	r3, [sp, #4]
 800a362:	a902      	add	r1, sp, #8
 800a364:	f000 fcee 	bl	800ad44 <_svfiprintf_r>
 800a368:	9b02      	ldr	r3, [sp, #8]
 800a36a:	2200      	movs	r2, #0
 800a36c:	701a      	strb	r2, [r3, #0]
 800a36e:	b01c      	add	sp, #112	; 0x70
 800a370:	f85d eb04 	ldr.w	lr, [sp], #4
 800a374:	b003      	add	sp, #12
 800a376:	4770      	bx	lr
 800a378:	20000024 	.word	0x20000024
 800a37c:	ffff0208 	.word	0xffff0208

0800a380 <_strtol_l.constprop.0>:
 800a380:	2b01      	cmp	r3, #1
 800a382:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a386:	d001      	beq.n	800a38c <_strtol_l.constprop.0+0xc>
 800a388:	2b24      	cmp	r3, #36	; 0x24
 800a38a:	d906      	bls.n	800a39a <_strtol_l.constprop.0+0x1a>
 800a38c:	f7ff ff22 	bl	800a1d4 <__errno>
 800a390:	2316      	movs	r3, #22
 800a392:	6003      	str	r3, [r0, #0]
 800a394:	2000      	movs	r0, #0
 800a396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a39a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a480 <_strtol_l.constprop.0+0x100>
 800a39e:	460d      	mov	r5, r1
 800a3a0:	462e      	mov	r6, r5
 800a3a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3a6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a3aa:	f017 0708 	ands.w	r7, r7, #8
 800a3ae:	d1f7      	bne.n	800a3a0 <_strtol_l.constprop.0+0x20>
 800a3b0:	2c2d      	cmp	r4, #45	; 0x2d
 800a3b2:	d132      	bne.n	800a41a <_strtol_l.constprop.0+0x9a>
 800a3b4:	782c      	ldrb	r4, [r5, #0]
 800a3b6:	2701      	movs	r7, #1
 800a3b8:	1cb5      	adds	r5, r6, #2
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d05b      	beq.n	800a476 <_strtol_l.constprop.0+0xf6>
 800a3be:	2b10      	cmp	r3, #16
 800a3c0:	d109      	bne.n	800a3d6 <_strtol_l.constprop.0+0x56>
 800a3c2:	2c30      	cmp	r4, #48	; 0x30
 800a3c4:	d107      	bne.n	800a3d6 <_strtol_l.constprop.0+0x56>
 800a3c6:	782c      	ldrb	r4, [r5, #0]
 800a3c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a3cc:	2c58      	cmp	r4, #88	; 0x58
 800a3ce:	d14d      	bne.n	800a46c <_strtol_l.constprop.0+0xec>
 800a3d0:	786c      	ldrb	r4, [r5, #1]
 800a3d2:	2310      	movs	r3, #16
 800a3d4:	3502      	adds	r5, #2
 800a3d6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a3da:	f108 38ff 	add.w	r8, r8, #4294967295
 800a3de:	f04f 0c00 	mov.w	ip, #0
 800a3e2:	fbb8 f9f3 	udiv	r9, r8, r3
 800a3e6:	4666      	mov	r6, ip
 800a3e8:	fb03 8a19 	mls	sl, r3, r9, r8
 800a3ec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a3f0:	f1be 0f09 	cmp.w	lr, #9
 800a3f4:	d816      	bhi.n	800a424 <_strtol_l.constprop.0+0xa4>
 800a3f6:	4674      	mov	r4, lr
 800a3f8:	42a3      	cmp	r3, r4
 800a3fa:	dd24      	ble.n	800a446 <_strtol_l.constprop.0+0xc6>
 800a3fc:	f1bc 0f00 	cmp.w	ip, #0
 800a400:	db1e      	blt.n	800a440 <_strtol_l.constprop.0+0xc0>
 800a402:	45b1      	cmp	r9, r6
 800a404:	d31c      	bcc.n	800a440 <_strtol_l.constprop.0+0xc0>
 800a406:	d101      	bne.n	800a40c <_strtol_l.constprop.0+0x8c>
 800a408:	45a2      	cmp	sl, r4
 800a40a:	db19      	blt.n	800a440 <_strtol_l.constprop.0+0xc0>
 800a40c:	fb06 4603 	mla	r6, r6, r3, r4
 800a410:	f04f 0c01 	mov.w	ip, #1
 800a414:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a418:	e7e8      	b.n	800a3ec <_strtol_l.constprop.0+0x6c>
 800a41a:	2c2b      	cmp	r4, #43	; 0x2b
 800a41c:	bf04      	itt	eq
 800a41e:	782c      	ldrbeq	r4, [r5, #0]
 800a420:	1cb5      	addeq	r5, r6, #2
 800a422:	e7ca      	b.n	800a3ba <_strtol_l.constprop.0+0x3a>
 800a424:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a428:	f1be 0f19 	cmp.w	lr, #25
 800a42c:	d801      	bhi.n	800a432 <_strtol_l.constprop.0+0xb2>
 800a42e:	3c37      	subs	r4, #55	; 0x37
 800a430:	e7e2      	b.n	800a3f8 <_strtol_l.constprop.0+0x78>
 800a432:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a436:	f1be 0f19 	cmp.w	lr, #25
 800a43a:	d804      	bhi.n	800a446 <_strtol_l.constprop.0+0xc6>
 800a43c:	3c57      	subs	r4, #87	; 0x57
 800a43e:	e7db      	b.n	800a3f8 <_strtol_l.constprop.0+0x78>
 800a440:	f04f 3cff 	mov.w	ip, #4294967295
 800a444:	e7e6      	b.n	800a414 <_strtol_l.constprop.0+0x94>
 800a446:	f1bc 0f00 	cmp.w	ip, #0
 800a44a:	da05      	bge.n	800a458 <_strtol_l.constprop.0+0xd8>
 800a44c:	2322      	movs	r3, #34	; 0x22
 800a44e:	6003      	str	r3, [r0, #0]
 800a450:	4646      	mov	r6, r8
 800a452:	b942      	cbnz	r2, 800a466 <_strtol_l.constprop.0+0xe6>
 800a454:	4630      	mov	r0, r6
 800a456:	e79e      	b.n	800a396 <_strtol_l.constprop.0+0x16>
 800a458:	b107      	cbz	r7, 800a45c <_strtol_l.constprop.0+0xdc>
 800a45a:	4276      	negs	r6, r6
 800a45c:	2a00      	cmp	r2, #0
 800a45e:	d0f9      	beq.n	800a454 <_strtol_l.constprop.0+0xd4>
 800a460:	f1bc 0f00 	cmp.w	ip, #0
 800a464:	d000      	beq.n	800a468 <_strtol_l.constprop.0+0xe8>
 800a466:	1e69      	subs	r1, r5, #1
 800a468:	6011      	str	r1, [r2, #0]
 800a46a:	e7f3      	b.n	800a454 <_strtol_l.constprop.0+0xd4>
 800a46c:	2430      	movs	r4, #48	; 0x30
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d1b1      	bne.n	800a3d6 <_strtol_l.constprop.0+0x56>
 800a472:	2308      	movs	r3, #8
 800a474:	e7af      	b.n	800a3d6 <_strtol_l.constprop.0+0x56>
 800a476:	2c30      	cmp	r4, #48	; 0x30
 800a478:	d0a5      	beq.n	800a3c6 <_strtol_l.constprop.0+0x46>
 800a47a:	230a      	movs	r3, #10
 800a47c:	e7ab      	b.n	800a3d6 <_strtol_l.constprop.0+0x56>
 800a47e:	bf00      	nop
 800a480:	0800bb01 	.word	0x0800bb01

0800a484 <strtol>:
 800a484:	4613      	mov	r3, r2
 800a486:	460a      	mov	r2, r1
 800a488:	4601      	mov	r1, r0
 800a48a:	4802      	ldr	r0, [pc, #8]	; (800a494 <strtol+0x10>)
 800a48c:	6800      	ldr	r0, [r0, #0]
 800a48e:	f7ff bf77 	b.w	800a380 <_strtol_l.constprop.0>
 800a492:	bf00      	nop
 800a494:	20000024 	.word	0x20000024

0800a498 <_vsniprintf_r>:
 800a498:	b530      	push	{r4, r5, lr}
 800a49a:	4614      	mov	r4, r2
 800a49c:	2c00      	cmp	r4, #0
 800a49e:	b09b      	sub	sp, #108	; 0x6c
 800a4a0:	4605      	mov	r5, r0
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	da05      	bge.n	800a4b2 <_vsniprintf_r+0x1a>
 800a4a6:	238b      	movs	r3, #139	; 0x8b
 800a4a8:	6003      	str	r3, [r0, #0]
 800a4aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ae:	b01b      	add	sp, #108	; 0x6c
 800a4b0:	bd30      	pop	{r4, r5, pc}
 800a4b2:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a4b6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a4ba:	bf14      	ite	ne
 800a4bc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a4c0:	4623      	moveq	r3, r4
 800a4c2:	9302      	str	r3, [sp, #8]
 800a4c4:	9305      	str	r3, [sp, #20]
 800a4c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a4ca:	9100      	str	r1, [sp, #0]
 800a4cc:	9104      	str	r1, [sp, #16]
 800a4ce:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a4d2:	4669      	mov	r1, sp
 800a4d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a4d6:	f000 fc35 	bl	800ad44 <_svfiprintf_r>
 800a4da:	1c43      	adds	r3, r0, #1
 800a4dc:	bfbc      	itt	lt
 800a4de:	238b      	movlt	r3, #139	; 0x8b
 800a4e0:	602b      	strlt	r3, [r5, #0]
 800a4e2:	2c00      	cmp	r4, #0
 800a4e4:	d0e3      	beq.n	800a4ae <_vsniprintf_r+0x16>
 800a4e6:	9b00      	ldr	r3, [sp, #0]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	701a      	strb	r2, [r3, #0]
 800a4ec:	e7df      	b.n	800a4ae <_vsniprintf_r+0x16>
	...

0800a4f0 <vsniprintf>:
 800a4f0:	b507      	push	{r0, r1, r2, lr}
 800a4f2:	9300      	str	r3, [sp, #0]
 800a4f4:	4613      	mov	r3, r2
 800a4f6:	460a      	mov	r2, r1
 800a4f8:	4601      	mov	r1, r0
 800a4fa:	4803      	ldr	r0, [pc, #12]	; (800a508 <vsniprintf+0x18>)
 800a4fc:	6800      	ldr	r0, [r0, #0]
 800a4fe:	f7ff ffcb 	bl	800a498 <_vsniprintf_r>
 800a502:	b003      	add	sp, #12
 800a504:	f85d fb04 	ldr.w	pc, [sp], #4
 800a508:	20000024 	.word	0x20000024

0800a50c <__swbuf_r>:
 800a50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a50e:	460e      	mov	r6, r1
 800a510:	4614      	mov	r4, r2
 800a512:	4605      	mov	r5, r0
 800a514:	b118      	cbz	r0, 800a51e <__swbuf_r+0x12>
 800a516:	6983      	ldr	r3, [r0, #24]
 800a518:	b90b      	cbnz	r3, 800a51e <__swbuf_r+0x12>
 800a51a:	f000 f9d1 	bl	800a8c0 <__sinit>
 800a51e:	4b21      	ldr	r3, [pc, #132]	; (800a5a4 <__swbuf_r+0x98>)
 800a520:	429c      	cmp	r4, r3
 800a522:	d12b      	bne.n	800a57c <__swbuf_r+0x70>
 800a524:	686c      	ldr	r4, [r5, #4]
 800a526:	69a3      	ldr	r3, [r4, #24]
 800a528:	60a3      	str	r3, [r4, #8]
 800a52a:	89a3      	ldrh	r3, [r4, #12]
 800a52c:	071a      	lsls	r2, r3, #28
 800a52e:	d52f      	bpl.n	800a590 <__swbuf_r+0x84>
 800a530:	6923      	ldr	r3, [r4, #16]
 800a532:	b36b      	cbz	r3, 800a590 <__swbuf_r+0x84>
 800a534:	6923      	ldr	r3, [r4, #16]
 800a536:	6820      	ldr	r0, [r4, #0]
 800a538:	1ac0      	subs	r0, r0, r3
 800a53a:	6963      	ldr	r3, [r4, #20]
 800a53c:	b2f6      	uxtb	r6, r6
 800a53e:	4283      	cmp	r3, r0
 800a540:	4637      	mov	r7, r6
 800a542:	dc04      	bgt.n	800a54e <__swbuf_r+0x42>
 800a544:	4621      	mov	r1, r4
 800a546:	4628      	mov	r0, r5
 800a548:	f000 f926 	bl	800a798 <_fflush_r>
 800a54c:	bb30      	cbnz	r0, 800a59c <__swbuf_r+0x90>
 800a54e:	68a3      	ldr	r3, [r4, #8]
 800a550:	3b01      	subs	r3, #1
 800a552:	60a3      	str	r3, [r4, #8]
 800a554:	6823      	ldr	r3, [r4, #0]
 800a556:	1c5a      	adds	r2, r3, #1
 800a558:	6022      	str	r2, [r4, #0]
 800a55a:	701e      	strb	r6, [r3, #0]
 800a55c:	6963      	ldr	r3, [r4, #20]
 800a55e:	3001      	adds	r0, #1
 800a560:	4283      	cmp	r3, r0
 800a562:	d004      	beq.n	800a56e <__swbuf_r+0x62>
 800a564:	89a3      	ldrh	r3, [r4, #12]
 800a566:	07db      	lsls	r3, r3, #31
 800a568:	d506      	bpl.n	800a578 <__swbuf_r+0x6c>
 800a56a:	2e0a      	cmp	r6, #10
 800a56c:	d104      	bne.n	800a578 <__swbuf_r+0x6c>
 800a56e:	4621      	mov	r1, r4
 800a570:	4628      	mov	r0, r5
 800a572:	f000 f911 	bl	800a798 <_fflush_r>
 800a576:	b988      	cbnz	r0, 800a59c <__swbuf_r+0x90>
 800a578:	4638      	mov	r0, r7
 800a57a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a57c:	4b0a      	ldr	r3, [pc, #40]	; (800a5a8 <__swbuf_r+0x9c>)
 800a57e:	429c      	cmp	r4, r3
 800a580:	d101      	bne.n	800a586 <__swbuf_r+0x7a>
 800a582:	68ac      	ldr	r4, [r5, #8]
 800a584:	e7cf      	b.n	800a526 <__swbuf_r+0x1a>
 800a586:	4b09      	ldr	r3, [pc, #36]	; (800a5ac <__swbuf_r+0xa0>)
 800a588:	429c      	cmp	r4, r3
 800a58a:	bf08      	it	eq
 800a58c:	68ec      	ldreq	r4, [r5, #12]
 800a58e:	e7ca      	b.n	800a526 <__swbuf_r+0x1a>
 800a590:	4621      	mov	r1, r4
 800a592:	4628      	mov	r0, r5
 800a594:	f000 f80c 	bl	800a5b0 <__swsetup_r>
 800a598:	2800      	cmp	r0, #0
 800a59a:	d0cb      	beq.n	800a534 <__swbuf_r+0x28>
 800a59c:	f04f 37ff 	mov.w	r7, #4294967295
 800a5a0:	e7ea      	b.n	800a578 <__swbuf_r+0x6c>
 800a5a2:	bf00      	nop
 800a5a4:	0800bc24 	.word	0x0800bc24
 800a5a8:	0800bc44 	.word	0x0800bc44
 800a5ac:	0800bc04 	.word	0x0800bc04

0800a5b0 <__swsetup_r>:
 800a5b0:	4b32      	ldr	r3, [pc, #200]	; (800a67c <__swsetup_r+0xcc>)
 800a5b2:	b570      	push	{r4, r5, r6, lr}
 800a5b4:	681d      	ldr	r5, [r3, #0]
 800a5b6:	4606      	mov	r6, r0
 800a5b8:	460c      	mov	r4, r1
 800a5ba:	b125      	cbz	r5, 800a5c6 <__swsetup_r+0x16>
 800a5bc:	69ab      	ldr	r3, [r5, #24]
 800a5be:	b913      	cbnz	r3, 800a5c6 <__swsetup_r+0x16>
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	f000 f97d 	bl	800a8c0 <__sinit>
 800a5c6:	4b2e      	ldr	r3, [pc, #184]	; (800a680 <__swsetup_r+0xd0>)
 800a5c8:	429c      	cmp	r4, r3
 800a5ca:	d10f      	bne.n	800a5ec <__swsetup_r+0x3c>
 800a5cc:	686c      	ldr	r4, [r5, #4]
 800a5ce:	89a3      	ldrh	r3, [r4, #12]
 800a5d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5d4:	0719      	lsls	r1, r3, #28
 800a5d6:	d42c      	bmi.n	800a632 <__swsetup_r+0x82>
 800a5d8:	06dd      	lsls	r5, r3, #27
 800a5da:	d411      	bmi.n	800a600 <__swsetup_r+0x50>
 800a5dc:	2309      	movs	r3, #9
 800a5de:	6033      	str	r3, [r6, #0]
 800a5e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a5e4:	81a3      	strh	r3, [r4, #12]
 800a5e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ea:	e03e      	b.n	800a66a <__swsetup_r+0xba>
 800a5ec:	4b25      	ldr	r3, [pc, #148]	; (800a684 <__swsetup_r+0xd4>)
 800a5ee:	429c      	cmp	r4, r3
 800a5f0:	d101      	bne.n	800a5f6 <__swsetup_r+0x46>
 800a5f2:	68ac      	ldr	r4, [r5, #8]
 800a5f4:	e7eb      	b.n	800a5ce <__swsetup_r+0x1e>
 800a5f6:	4b24      	ldr	r3, [pc, #144]	; (800a688 <__swsetup_r+0xd8>)
 800a5f8:	429c      	cmp	r4, r3
 800a5fa:	bf08      	it	eq
 800a5fc:	68ec      	ldreq	r4, [r5, #12]
 800a5fe:	e7e6      	b.n	800a5ce <__swsetup_r+0x1e>
 800a600:	0758      	lsls	r0, r3, #29
 800a602:	d512      	bpl.n	800a62a <__swsetup_r+0x7a>
 800a604:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a606:	b141      	cbz	r1, 800a61a <__swsetup_r+0x6a>
 800a608:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a60c:	4299      	cmp	r1, r3
 800a60e:	d002      	beq.n	800a616 <__swsetup_r+0x66>
 800a610:	4630      	mov	r0, r6
 800a612:	f000 fa5b 	bl	800aacc <_free_r>
 800a616:	2300      	movs	r3, #0
 800a618:	6363      	str	r3, [r4, #52]	; 0x34
 800a61a:	89a3      	ldrh	r3, [r4, #12]
 800a61c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a620:	81a3      	strh	r3, [r4, #12]
 800a622:	2300      	movs	r3, #0
 800a624:	6063      	str	r3, [r4, #4]
 800a626:	6923      	ldr	r3, [r4, #16]
 800a628:	6023      	str	r3, [r4, #0]
 800a62a:	89a3      	ldrh	r3, [r4, #12]
 800a62c:	f043 0308 	orr.w	r3, r3, #8
 800a630:	81a3      	strh	r3, [r4, #12]
 800a632:	6923      	ldr	r3, [r4, #16]
 800a634:	b94b      	cbnz	r3, 800a64a <__swsetup_r+0x9a>
 800a636:	89a3      	ldrh	r3, [r4, #12]
 800a638:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a63c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a640:	d003      	beq.n	800a64a <__swsetup_r+0x9a>
 800a642:	4621      	mov	r1, r4
 800a644:	4630      	mov	r0, r6
 800a646:	f000 fa01 	bl	800aa4c <__smakebuf_r>
 800a64a:	89a0      	ldrh	r0, [r4, #12]
 800a64c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a650:	f010 0301 	ands.w	r3, r0, #1
 800a654:	d00a      	beq.n	800a66c <__swsetup_r+0xbc>
 800a656:	2300      	movs	r3, #0
 800a658:	60a3      	str	r3, [r4, #8]
 800a65a:	6963      	ldr	r3, [r4, #20]
 800a65c:	425b      	negs	r3, r3
 800a65e:	61a3      	str	r3, [r4, #24]
 800a660:	6923      	ldr	r3, [r4, #16]
 800a662:	b943      	cbnz	r3, 800a676 <__swsetup_r+0xc6>
 800a664:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a668:	d1ba      	bne.n	800a5e0 <__swsetup_r+0x30>
 800a66a:	bd70      	pop	{r4, r5, r6, pc}
 800a66c:	0781      	lsls	r1, r0, #30
 800a66e:	bf58      	it	pl
 800a670:	6963      	ldrpl	r3, [r4, #20]
 800a672:	60a3      	str	r3, [r4, #8]
 800a674:	e7f4      	b.n	800a660 <__swsetup_r+0xb0>
 800a676:	2000      	movs	r0, #0
 800a678:	e7f7      	b.n	800a66a <__swsetup_r+0xba>
 800a67a:	bf00      	nop
 800a67c:	20000024 	.word	0x20000024
 800a680:	0800bc24 	.word	0x0800bc24
 800a684:	0800bc44 	.word	0x0800bc44
 800a688:	0800bc04 	.word	0x0800bc04

0800a68c <__sflush_r>:
 800a68c:	898a      	ldrh	r2, [r1, #12]
 800a68e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a692:	4605      	mov	r5, r0
 800a694:	0710      	lsls	r0, r2, #28
 800a696:	460c      	mov	r4, r1
 800a698:	d458      	bmi.n	800a74c <__sflush_r+0xc0>
 800a69a:	684b      	ldr	r3, [r1, #4]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	dc05      	bgt.n	800a6ac <__sflush_r+0x20>
 800a6a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	dc02      	bgt.n	800a6ac <__sflush_r+0x20>
 800a6a6:	2000      	movs	r0, #0
 800a6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6ae:	2e00      	cmp	r6, #0
 800a6b0:	d0f9      	beq.n	800a6a6 <__sflush_r+0x1a>
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a6b8:	682f      	ldr	r7, [r5, #0]
 800a6ba:	602b      	str	r3, [r5, #0]
 800a6bc:	d032      	beq.n	800a724 <__sflush_r+0x98>
 800a6be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a6c0:	89a3      	ldrh	r3, [r4, #12]
 800a6c2:	075a      	lsls	r2, r3, #29
 800a6c4:	d505      	bpl.n	800a6d2 <__sflush_r+0x46>
 800a6c6:	6863      	ldr	r3, [r4, #4]
 800a6c8:	1ac0      	subs	r0, r0, r3
 800a6ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6cc:	b10b      	cbz	r3, 800a6d2 <__sflush_r+0x46>
 800a6ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6d0:	1ac0      	subs	r0, r0, r3
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6d8:	6a21      	ldr	r1, [r4, #32]
 800a6da:	4628      	mov	r0, r5
 800a6dc:	47b0      	blx	r6
 800a6de:	1c43      	adds	r3, r0, #1
 800a6e0:	89a3      	ldrh	r3, [r4, #12]
 800a6e2:	d106      	bne.n	800a6f2 <__sflush_r+0x66>
 800a6e4:	6829      	ldr	r1, [r5, #0]
 800a6e6:	291d      	cmp	r1, #29
 800a6e8:	d82c      	bhi.n	800a744 <__sflush_r+0xb8>
 800a6ea:	4a2a      	ldr	r2, [pc, #168]	; (800a794 <__sflush_r+0x108>)
 800a6ec:	40ca      	lsrs	r2, r1
 800a6ee:	07d6      	lsls	r6, r2, #31
 800a6f0:	d528      	bpl.n	800a744 <__sflush_r+0xb8>
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	6062      	str	r2, [r4, #4]
 800a6f6:	04d9      	lsls	r1, r3, #19
 800a6f8:	6922      	ldr	r2, [r4, #16]
 800a6fa:	6022      	str	r2, [r4, #0]
 800a6fc:	d504      	bpl.n	800a708 <__sflush_r+0x7c>
 800a6fe:	1c42      	adds	r2, r0, #1
 800a700:	d101      	bne.n	800a706 <__sflush_r+0x7a>
 800a702:	682b      	ldr	r3, [r5, #0]
 800a704:	b903      	cbnz	r3, 800a708 <__sflush_r+0x7c>
 800a706:	6560      	str	r0, [r4, #84]	; 0x54
 800a708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a70a:	602f      	str	r7, [r5, #0]
 800a70c:	2900      	cmp	r1, #0
 800a70e:	d0ca      	beq.n	800a6a6 <__sflush_r+0x1a>
 800a710:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a714:	4299      	cmp	r1, r3
 800a716:	d002      	beq.n	800a71e <__sflush_r+0x92>
 800a718:	4628      	mov	r0, r5
 800a71a:	f000 f9d7 	bl	800aacc <_free_r>
 800a71e:	2000      	movs	r0, #0
 800a720:	6360      	str	r0, [r4, #52]	; 0x34
 800a722:	e7c1      	b.n	800a6a8 <__sflush_r+0x1c>
 800a724:	6a21      	ldr	r1, [r4, #32]
 800a726:	2301      	movs	r3, #1
 800a728:	4628      	mov	r0, r5
 800a72a:	47b0      	blx	r6
 800a72c:	1c41      	adds	r1, r0, #1
 800a72e:	d1c7      	bne.n	800a6c0 <__sflush_r+0x34>
 800a730:	682b      	ldr	r3, [r5, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d0c4      	beq.n	800a6c0 <__sflush_r+0x34>
 800a736:	2b1d      	cmp	r3, #29
 800a738:	d001      	beq.n	800a73e <__sflush_r+0xb2>
 800a73a:	2b16      	cmp	r3, #22
 800a73c:	d101      	bne.n	800a742 <__sflush_r+0xb6>
 800a73e:	602f      	str	r7, [r5, #0]
 800a740:	e7b1      	b.n	800a6a6 <__sflush_r+0x1a>
 800a742:	89a3      	ldrh	r3, [r4, #12]
 800a744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a748:	81a3      	strh	r3, [r4, #12]
 800a74a:	e7ad      	b.n	800a6a8 <__sflush_r+0x1c>
 800a74c:	690f      	ldr	r7, [r1, #16]
 800a74e:	2f00      	cmp	r7, #0
 800a750:	d0a9      	beq.n	800a6a6 <__sflush_r+0x1a>
 800a752:	0793      	lsls	r3, r2, #30
 800a754:	680e      	ldr	r6, [r1, #0]
 800a756:	bf08      	it	eq
 800a758:	694b      	ldreq	r3, [r1, #20]
 800a75a:	600f      	str	r7, [r1, #0]
 800a75c:	bf18      	it	ne
 800a75e:	2300      	movne	r3, #0
 800a760:	eba6 0807 	sub.w	r8, r6, r7
 800a764:	608b      	str	r3, [r1, #8]
 800a766:	f1b8 0f00 	cmp.w	r8, #0
 800a76a:	dd9c      	ble.n	800a6a6 <__sflush_r+0x1a>
 800a76c:	6a21      	ldr	r1, [r4, #32]
 800a76e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a770:	4643      	mov	r3, r8
 800a772:	463a      	mov	r2, r7
 800a774:	4628      	mov	r0, r5
 800a776:	47b0      	blx	r6
 800a778:	2800      	cmp	r0, #0
 800a77a:	dc06      	bgt.n	800a78a <__sflush_r+0xfe>
 800a77c:	89a3      	ldrh	r3, [r4, #12]
 800a77e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a782:	81a3      	strh	r3, [r4, #12]
 800a784:	f04f 30ff 	mov.w	r0, #4294967295
 800a788:	e78e      	b.n	800a6a8 <__sflush_r+0x1c>
 800a78a:	4407      	add	r7, r0
 800a78c:	eba8 0800 	sub.w	r8, r8, r0
 800a790:	e7e9      	b.n	800a766 <__sflush_r+0xda>
 800a792:	bf00      	nop
 800a794:	20400001 	.word	0x20400001

0800a798 <_fflush_r>:
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	690b      	ldr	r3, [r1, #16]
 800a79c:	4605      	mov	r5, r0
 800a79e:	460c      	mov	r4, r1
 800a7a0:	b913      	cbnz	r3, 800a7a8 <_fflush_r+0x10>
 800a7a2:	2500      	movs	r5, #0
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	bd38      	pop	{r3, r4, r5, pc}
 800a7a8:	b118      	cbz	r0, 800a7b2 <_fflush_r+0x1a>
 800a7aa:	6983      	ldr	r3, [r0, #24]
 800a7ac:	b90b      	cbnz	r3, 800a7b2 <_fflush_r+0x1a>
 800a7ae:	f000 f887 	bl	800a8c0 <__sinit>
 800a7b2:	4b14      	ldr	r3, [pc, #80]	; (800a804 <_fflush_r+0x6c>)
 800a7b4:	429c      	cmp	r4, r3
 800a7b6:	d11b      	bne.n	800a7f0 <_fflush_r+0x58>
 800a7b8:	686c      	ldr	r4, [r5, #4]
 800a7ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d0ef      	beq.n	800a7a2 <_fflush_r+0xa>
 800a7c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a7c4:	07d0      	lsls	r0, r2, #31
 800a7c6:	d404      	bmi.n	800a7d2 <_fflush_r+0x3a>
 800a7c8:	0599      	lsls	r1, r3, #22
 800a7ca:	d402      	bmi.n	800a7d2 <_fflush_r+0x3a>
 800a7cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7ce:	f000 f915 	bl	800a9fc <__retarget_lock_acquire_recursive>
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	4621      	mov	r1, r4
 800a7d6:	f7ff ff59 	bl	800a68c <__sflush_r>
 800a7da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7dc:	07da      	lsls	r2, r3, #31
 800a7de:	4605      	mov	r5, r0
 800a7e0:	d4e0      	bmi.n	800a7a4 <_fflush_r+0xc>
 800a7e2:	89a3      	ldrh	r3, [r4, #12]
 800a7e4:	059b      	lsls	r3, r3, #22
 800a7e6:	d4dd      	bmi.n	800a7a4 <_fflush_r+0xc>
 800a7e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7ea:	f000 f908 	bl	800a9fe <__retarget_lock_release_recursive>
 800a7ee:	e7d9      	b.n	800a7a4 <_fflush_r+0xc>
 800a7f0:	4b05      	ldr	r3, [pc, #20]	; (800a808 <_fflush_r+0x70>)
 800a7f2:	429c      	cmp	r4, r3
 800a7f4:	d101      	bne.n	800a7fa <_fflush_r+0x62>
 800a7f6:	68ac      	ldr	r4, [r5, #8]
 800a7f8:	e7df      	b.n	800a7ba <_fflush_r+0x22>
 800a7fa:	4b04      	ldr	r3, [pc, #16]	; (800a80c <_fflush_r+0x74>)
 800a7fc:	429c      	cmp	r4, r3
 800a7fe:	bf08      	it	eq
 800a800:	68ec      	ldreq	r4, [r5, #12]
 800a802:	e7da      	b.n	800a7ba <_fflush_r+0x22>
 800a804:	0800bc24 	.word	0x0800bc24
 800a808:	0800bc44 	.word	0x0800bc44
 800a80c:	0800bc04 	.word	0x0800bc04

0800a810 <std>:
 800a810:	2300      	movs	r3, #0
 800a812:	b510      	push	{r4, lr}
 800a814:	4604      	mov	r4, r0
 800a816:	e9c0 3300 	strd	r3, r3, [r0]
 800a81a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a81e:	6083      	str	r3, [r0, #8]
 800a820:	8181      	strh	r1, [r0, #12]
 800a822:	6643      	str	r3, [r0, #100]	; 0x64
 800a824:	81c2      	strh	r2, [r0, #14]
 800a826:	6183      	str	r3, [r0, #24]
 800a828:	4619      	mov	r1, r3
 800a82a:	2208      	movs	r2, #8
 800a82c:	305c      	adds	r0, #92	; 0x5c
 800a82e:	f7ff fd09 	bl	800a244 <memset>
 800a832:	4b05      	ldr	r3, [pc, #20]	; (800a848 <std+0x38>)
 800a834:	6263      	str	r3, [r4, #36]	; 0x24
 800a836:	4b05      	ldr	r3, [pc, #20]	; (800a84c <std+0x3c>)
 800a838:	62a3      	str	r3, [r4, #40]	; 0x28
 800a83a:	4b05      	ldr	r3, [pc, #20]	; (800a850 <std+0x40>)
 800a83c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a83e:	4b05      	ldr	r3, [pc, #20]	; (800a854 <std+0x44>)
 800a840:	6224      	str	r4, [r4, #32]
 800a842:	6323      	str	r3, [r4, #48]	; 0x30
 800a844:	bd10      	pop	{r4, pc}
 800a846:	bf00      	nop
 800a848:	0800b28d 	.word	0x0800b28d
 800a84c:	0800b2af 	.word	0x0800b2af
 800a850:	0800b2e7 	.word	0x0800b2e7
 800a854:	0800b30b 	.word	0x0800b30b

0800a858 <_cleanup_r>:
 800a858:	4901      	ldr	r1, [pc, #4]	; (800a860 <_cleanup_r+0x8>)
 800a85a:	f000 b8af 	b.w	800a9bc <_fwalk_reent>
 800a85e:	bf00      	nop
 800a860:	0800a799 	.word	0x0800a799

0800a864 <__sfmoreglue>:
 800a864:	b570      	push	{r4, r5, r6, lr}
 800a866:	2268      	movs	r2, #104	; 0x68
 800a868:	1e4d      	subs	r5, r1, #1
 800a86a:	4355      	muls	r5, r2
 800a86c:	460e      	mov	r6, r1
 800a86e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a872:	f000 f997 	bl	800aba4 <_malloc_r>
 800a876:	4604      	mov	r4, r0
 800a878:	b140      	cbz	r0, 800a88c <__sfmoreglue+0x28>
 800a87a:	2100      	movs	r1, #0
 800a87c:	e9c0 1600 	strd	r1, r6, [r0]
 800a880:	300c      	adds	r0, #12
 800a882:	60a0      	str	r0, [r4, #8]
 800a884:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a888:	f7ff fcdc 	bl	800a244 <memset>
 800a88c:	4620      	mov	r0, r4
 800a88e:	bd70      	pop	{r4, r5, r6, pc}

0800a890 <__sfp_lock_acquire>:
 800a890:	4801      	ldr	r0, [pc, #4]	; (800a898 <__sfp_lock_acquire+0x8>)
 800a892:	f000 b8b3 	b.w	800a9fc <__retarget_lock_acquire_recursive>
 800a896:	bf00      	nop
 800a898:	20001e85 	.word	0x20001e85

0800a89c <__sfp_lock_release>:
 800a89c:	4801      	ldr	r0, [pc, #4]	; (800a8a4 <__sfp_lock_release+0x8>)
 800a89e:	f000 b8ae 	b.w	800a9fe <__retarget_lock_release_recursive>
 800a8a2:	bf00      	nop
 800a8a4:	20001e85 	.word	0x20001e85

0800a8a8 <__sinit_lock_acquire>:
 800a8a8:	4801      	ldr	r0, [pc, #4]	; (800a8b0 <__sinit_lock_acquire+0x8>)
 800a8aa:	f000 b8a7 	b.w	800a9fc <__retarget_lock_acquire_recursive>
 800a8ae:	bf00      	nop
 800a8b0:	20001e86 	.word	0x20001e86

0800a8b4 <__sinit_lock_release>:
 800a8b4:	4801      	ldr	r0, [pc, #4]	; (800a8bc <__sinit_lock_release+0x8>)
 800a8b6:	f000 b8a2 	b.w	800a9fe <__retarget_lock_release_recursive>
 800a8ba:	bf00      	nop
 800a8bc:	20001e86 	.word	0x20001e86

0800a8c0 <__sinit>:
 800a8c0:	b510      	push	{r4, lr}
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	f7ff fff0 	bl	800a8a8 <__sinit_lock_acquire>
 800a8c8:	69a3      	ldr	r3, [r4, #24]
 800a8ca:	b11b      	cbz	r3, 800a8d4 <__sinit+0x14>
 800a8cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8d0:	f7ff bff0 	b.w	800a8b4 <__sinit_lock_release>
 800a8d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a8d8:	6523      	str	r3, [r4, #80]	; 0x50
 800a8da:	4b13      	ldr	r3, [pc, #76]	; (800a928 <__sinit+0x68>)
 800a8dc:	4a13      	ldr	r2, [pc, #76]	; (800a92c <__sinit+0x6c>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a8e2:	42a3      	cmp	r3, r4
 800a8e4:	bf04      	itt	eq
 800a8e6:	2301      	moveq	r3, #1
 800a8e8:	61a3      	streq	r3, [r4, #24]
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	f000 f820 	bl	800a930 <__sfp>
 800a8f0:	6060      	str	r0, [r4, #4]
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	f000 f81c 	bl	800a930 <__sfp>
 800a8f8:	60a0      	str	r0, [r4, #8]
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f000 f818 	bl	800a930 <__sfp>
 800a900:	2200      	movs	r2, #0
 800a902:	60e0      	str	r0, [r4, #12]
 800a904:	2104      	movs	r1, #4
 800a906:	6860      	ldr	r0, [r4, #4]
 800a908:	f7ff ff82 	bl	800a810 <std>
 800a90c:	68a0      	ldr	r0, [r4, #8]
 800a90e:	2201      	movs	r2, #1
 800a910:	2109      	movs	r1, #9
 800a912:	f7ff ff7d 	bl	800a810 <std>
 800a916:	68e0      	ldr	r0, [r4, #12]
 800a918:	2202      	movs	r2, #2
 800a91a:	2112      	movs	r1, #18
 800a91c:	f7ff ff78 	bl	800a810 <std>
 800a920:	2301      	movs	r3, #1
 800a922:	61a3      	str	r3, [r4, #24]
 800a924:	e7d2      	b.n	800a8cc <__sinit+0xc>
 800a926:	bf00      	nop
 800a928:	0800bafc 	.word	0x0800bafc
 800a92c:	0800a859 	.word	0x0800a859

0800a930 <__sfp>:
 800a930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a932:	4607      	mov	r7, r0
 800a934:	f7ff ffac 	bl	800a890 <__sfp_lock_acquire>
 800a938:	4b1e      	ldr	r3, [pc, #120]	; (800a9b4 <__sfp+0x84>)
 800a93a:	681e      	ldr	r6, [r3, #0]
 800a93c:	69b3      	ldr	r3, [r6, #24]
 800a93e:	b913      	cbnz	r3, 800a946 <__sfp+0x16>
 800a940:	4630      	mov	r0, r6
 800a942:	f7ff ffbd 	bl	800a8c0 <__sinit>
 800a946:	3648      	adds	r6, #72	; 0x48
 800a948:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a94c:	3b01      	subs	r3, #1
 800a94e:	d503      	bpl.n	800a958 <__sfp+0x28>
 800a950:	6833      	ldr	r3, [r6, #0]
 800a952:	b30b      	cbz	r3, 800a998 <__sfp+0x68>
 800a954:	6836      	ldr	r6, [r6, #0]
 800a956:	e7f7      	b.n	800a948 <__sfp+0x18>
 800a958:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a95c:	b9d5      	cbnz	r5, 800a994 <__sfp+0x64>
 800a95e:	4b16      	ldr	r3, [pc, #88]	; (800a9b8 <__sfp+0x88>)
 800a960:	60e3      	str	r3, [r4, #12]
 800a962:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a966:	6665      	str	r5, [r4, #100]	; 0x64
 800a968:	f000 f847 	bl	800a9fa <__retarget_lock_init_recursive>
 800a96c:	f7ff ff96 	bl	800a89c <__sfp_lock_release>
 800a970:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a974:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a978:	6025      	str	r5, [r4, #0]
 800a97a:	61a5      	str	r5, [r4, #24]
 800a97c:	2208      	movs	r2, #8
 800a97e:	4629      	mov	r1, r5
 800a980:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a984:	f7ff fc5e 	bl	800a244 <memset>
 800a988:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a98c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a990:	4620      	mov	r0, r4
 800a992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a994:	3468      	adds	r4, #104	; 0x68
 800a996:	e7d9      	b.n	800a94c <__sfp+0x1c>
 800a998:	2104      	movs	r1, #4
 800a99a:	4638      	mov	r0, r7
 800a99c:	f7ff ff62 	bl	800a864 <__sfmoreglue>
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	6030      	str	r0, [r6, #0]
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	d1d5      	bne.n	800a954 <__sfp+0x24>
 800a9a8:	f7ff ff78 	bl	800a89c <__sfp_lock_release>
 800a9ac:	230c      	movs	r3, #12
 800a9ae:	603b      	str	r3, [r7, #0]
 800a9b0:	e7ee      	b.n	800a990 <__sfp+0x60>
 800a9b2:	bf00      	nop
 800a9b4:	0800bafc 	.word	0x0800bafc
 800a9b8:	ffff0001 	.word	0xffff0001

0800a9bc <_fwalk_reent>:
 800a9bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9c0:	4606      	mov	r6, r0
 800a9c2:	4688      	mov	r8, r1
 800a9c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a9c8:	2700      	movs	r7, #0
 800a9ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9ce:	f1b9 0901 	subs.w	r9, r9, #1
 800a9d2:	d505      	bpl.n	800a9e0 <_fwalk_reent+0x24>
 800a9d4:	6824      	ldr	r4, [r4, #0]
 800a9d6:	2c00      	cmp	r4, #0
 800a9d8:	d1f7      	bne.n	800a9ca <_fwalk_reent+0xe>
 800a9da:	4638      	mov	r0, r7
 800a9dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9e0:	89ab      	ldrh	r3, [r5, #12]
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d907      	bls.n	800a9f6 <_fwalk_reent+0x3a>
 800a9e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	d003      	beq.n	800a9f6 <_fwalk_reent+0x3a>
 800a9ee:	4629      	mov	r1, r5
 800a9f0:	4630      	mov	r0, r6
 800a9f2:	47c0      	blx	r8
 800a9f4:	4307      	orrs	r7, r0
 800a9f6:	3568      	adds	r5, #104	; 0x68
 800a9f8:	e7e9      	b.n	800a9ce <_fwalk_reent+0x12>

0800a9fa <__retarget_lock_init_recursive>:
 800a9fa:	4770      	bx	lr

0800a9fc <__retarget_lock_acquire_recursive>:
 800a9fc:	4770      	bx	lr

0800a9fe <__retarget_lock_release_recursive>:
 800a9fe:	4770      	bx	lr

0800aa00 <__swhatbuf_r>:
 800aa00:	b570      	push	{r4, r5, r6, lr}
 800aa02:	460e      	mov	r6, r1
 800aa04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa08:	2900      	cmp	r1, #0
 800aa0a:	b096      	sub	sp, #88	; 0x58
 800aa0c:	4614      	mov	r4, r2
 800aa0e:	461d      	mov	r5, r3
 800aa10:	da08      	bge.n	800aa24 <__swhatbuf_r+0x24>
 800aa12:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aa16:	2200      	movs	r2, #0
 800aa18:	602a      	str	r2, [r5, #0]
 800aa1a:	061a      	lsls	r2, r3, #24
 800aa1c:	d410      	bmi.n	800aa40 <__swhatbuf_r+0x40>
 800aa1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa22:	e00e      	b.n	800aa42 <__swhatbuf_r+0x42>
 800aa24:	466a      	mov	r2, sp
 800aa26:	f000 fc97 	bl	800b358 <_fstat_r>
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	dbf1      	blt.n	800aa12 <__swhatbuf_r+0x12>
 800aa2e:	9a01      	ldr	r2, [sp, #4]
 800aa30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aa34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aa38:	425a      	negs	r2, r3
 800aa3a:	415a      	adcs	r2, r3
 800aa3c:	602a      	str	r2, [r5, #0]
 800aa3e:	e7ee      	b.n	800aa1e <__swhatbuf_r+0x1e>
 800aa40:	2340      	movs	r3, #64	; 0x40
 800aa42:	2000      	movs	r0, #0
 800aa44:	6023      	str	r3, [r4, #0]
 800aa46:	b016      	add	sp, #88	; 0x58
 800aa48:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aa4c <__smakebuf_r>:
 800aa4c:	898b      	ldrh	r3, [r1, #12]
 800aa4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa50:	079d      	lsls	r5, r3, #30
 800aa52:	4606      	mov	r6, r0
 800aa54:	460c      	mov	r4, r1
 800aa56:	d507      	bpl.n	800aa68 <__smakebuf_r+0x1c>
 800aa58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa5c:	6023      	str	r3, [r4, #0]
 800aa5e:	6123      	str	r3, [r4, #16]
 800aa60:	2301      	movs	r3, #1
 800aa62:	6163      	str	r3, [r4, #20]
 800aa64:	b002      	add	sp, #8
 800aa66:	bd70      	pop	{r4, r5, r6, pc}
 800aa68:	ab01      	add	r3, sp, #4
 800aa6a:	466a      	mov	r2, sp
 800aa6c:	f7ff ffc8 	bl	800aa00 <__swhatbuf_r>
 800aa70:	9900      	ldr	r1, [sp, #0]
 800aa72:	4605      	mov	r5, r0
 800aa74:	4630      	mov	r0, r6
 800aa76:	f000 f895 	bl	800aba4 <_malloc_r>
 800aa7a:	b948      	cbnz	r0, 800aa90 <__smakebuf_r+0x44>
 800aa7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa80:	059a      	lsls	r2, r3, #22
 800aa82:	d4ef      	bmi.n	800aa64 <__smakebuf_r+0x18>
 800aa84:	f023 0303 	bic.w	r3, r3, #3
 800aa88:	f043 0302 	orr.w	r3, r3, #2
 800aa8c:	81a3      	strh	r3, [r4, #12]
 800aa8e:	e7e3      	b.n	800aa58 <__smakebuf_r+0xc>
 800aa90:	4b0d      	ldr	r3, [pc, #52]	; (800aac8 <__smakebuf_r+0x7c>)
 800aa92:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa94:	89a3      	ldrh	r3, [r4, #12]
 800aa96:	6020      	str	r0, [r4, #0]
 800aa98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa9c:	81a3      	strh	r3, [r4, #12]
 800aa9e:	9b00      	ldr	r3, [sp, #0]
 800aaa0:	6163      	str	r3, [r4, #20]
 800aaa2:	9b01      	ldr	r3, [sp, #4]
 800aaa4:	6120      	str	r0, [r4, #16]
 800aaa6:	b15b      	cbz	r3, 800aac0 <__smakebuf_r+0x74>
 800aaa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aaac:	4630      	mov	r0, r6
 800aaae:	f000 fc65 	bl	800b37c <_isatty_r>
 800aab2:	b128      	cbz	r0, 800aac0 <__smakebuf_r+0x74>
 800aab4:	89a3      	ldrh	r3, [r4, #12]
 800aab6:	f023 0303 	bic.w	r3, r3, #3
 800aaba:	f043 0301 	orr.w	r3, r3, #1
 800aabe:	81a3      	strh	r3, [r4, #12]
 800aac0:	89a0      	ldrh	r0, [r4, #12]
 800aac2:	4305      	orrs	r5, r0
 800aac4:	81a5      	strh	r5, [r4, #12]
 800aac6:	e7cd      	b.n	800aa64 <__smakebuf_r+0x18>
 800aac8:	0800a859 	.word	0x0800a859

0800aacc <_free_r>:
 800aacc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aace:	2900      	cmp	r1, #0
 800aad0:	d044      	beq.n	800ab5c <_free_r+0x90>
 800aad2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aad6:	9001      	str	r0, [sp, #4]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f1a1 0404 	sub.w	r4, r1, #4
 800aade:	bfb8      	it	lt
 800aae0:	18e4      	addlt	r4, r4, r3
 800aae2:	f000 fc87 	bl	800b3f4 <__malloc_lock>
 800aae6:	4a1e      	ldr	r2, [pc, #120]	; (800ab60 <_free_r+0x94>)
 800aae8:	9801      	ldr	r0, [sp, #4]
 800aaea:	6813      	ldr	r3, [r2, #0]
 800aaec:	b933      	cbnz	r3, 800aafc <_free_r+0x30>
 800aaee:	6063      	str	r3, [r4, #4]
 800aaf0:	6014      	str	r4, [r2, #0]
 800aaf2:	b003      	add	sp, #12
 800aaf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aaf8:	f000 bc82 	b.w	800b400 <__malloc_unlock>
 800aafc:	42a3      	cmp	r3, r4
 800aafe:	d908      	bls.n	800ab12 <_free_r+0x46>
 800ab00:	6825      	ldr	r5, [r4, #0]
 800ab02:	1961      	adds	r1, r4, r5
 800ab04:	428b      	cmp	r3, r1
 800ab06:	bf01      	itttt	eq
 800ab08:	6819      	ldreq	r1, [r3, #0]
 800ab0a:	685b      	ldreq	r3, [r3, #4]
 800ab0c:	1949      	addeq	r1, r1, r5
 800ab0e:	6021      	streq	r1, [r4, #0]
 800ab10:	e7ed      	b.n	800aaee <_free_r+0x22>
 800ab12:	461a      	mov	r2, r3
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	b10b      	cbz	r3, 800ab1c <_free_r+0x50>
 800ab18:	42a3      	cmp	r3, r4
 800ab1a:	d9fa      	bls.n	800ab12 <_free_r+0x46>
 800ab1c:	6811      	ldr	r1, [r2, #0]
 800ab1e:	1855      	adds	r5, r2, r1
 800ab20:	42a5      	cmp	r5, r4
 800ab22:	d10b      	bne.n	800ab3c <_free_r+0x70>
 800ab24:	6824      	ldr	r4, [r4, #0]
 800ab26:	4421      	add	r1, r4
 800ab28:	1854      	adds	r4, r2, r1
 800ab2a:	42a3      	cmp	r3, r4
 800ab2c:	6011      	str	r1, [r2, #0]
 800ab2e:	d1e0      	bne.n	800aaf2 <_free_r+0x26>
 800ab30:	681c      	ldr	r4, [r3, #0]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	6053      	str	r3, [r2, #4]
 800ab36:	4421      	add	r1, r4
 800ab38:	6011      	str	r1, [r2, #0]
 800ab3a:	e7da      	b.n	800aaf2 <_free_r+0x26>
 800ab3c:	d902      	bls.n	800ab44 <_free_r+0x78>
 800ab3e:	230c      	movs	r3, #12
 800ab40:	6003      	str	r3, [r0, #0]
 800ab42:	e7d6      	b.n	800aaf2 <_free_r+0x26>
 800ab44:	6825      	ldr	r5, [r4, #0]
 800ab46:	1961      	adds	r1, r4, r5
 800ab48:	428b      	cmp	r3, r1
 800ab4a:	bf04      	itt	eq
 800ab4c:	6819      	ldreq	r1, [r3, #0]
 800ab4e:	685b      	ldreq	r3, [r3, #4]
 800ab50:	6063      	str	r3, [r4, #4]
 800ab52:	bf04      	itt	eq
 800ab54:	1949      	addeq	r1, r1, r5
 800ab56:	6021      	streq	r1, [r4, #0]
 800ab58:	6054      	str	r4, [r2, #4]
 800ab5a:	e7ca      	b.n	800aaf2 <_free_r+0x26>
 800ab5c:	b003      	add	sp, #12
 800ab5e:	bd30      	pop	{r4, r5, pc}
 800ab60:	20001e88 	.word	0x20001e88

0800ab64 <sbrk_aligned>:
 800ab64:	b570      	push	{r4, r5, r6, lr}
 800ab66:	4e0e      	ldr	r6, [pc, #56]	; (800aba0 <sbrk_aligned+0x3c>)
 800ab68:	460c      	mov	r4, r1
 800ab6a:	6831      	ldr	r1, [r6, #0]
 800ab6c:	4605      	mov	r5, r0
 800ab6e:	b911      	cbnz	r1, 800ab76 <sbrk_aligned+0x12>
 800ab70:	f000 fb7c 	bl	800b26c <_sbrk_r>
 800ab74:	6030      	str	r0, [r6, #0]
 800ab76:	4621      	mov	r1, r4
 800ab78:	4628      	mov	r0, r5
 800ab7a:	f000 fb77 	bl	800b26c <_sbrk_r>
 800ab7e:	1c43      	adds	r3, r0, #1
 800ab80:	d00a      	beq.n	800ab98 <sbrk_aligned+0x34>
 800ab82:	1cc4      	adds	r4, r0, #3
 800ab84:	f024 0403 	bic.w	r4, r4, #3
 800ab88:	42a0      	cmp	r0, r4
 800ab8a:	d007      	beq.n	800ab9c <sbrk_aligned+0x38>
 800ab8c:	1a21      	subs	r1, r4, r0
 800ab8e:	4628      	mov	r0, r5
 800ab90:	f000 fb6c 	bl	800b26c <_sbrk_r>
 800ab94:	3001      	adds	r0, #1
 800ab96:	d101      	bne.n	800ab9c <sbrk_aligned+0x38>
 800ab98:	f04f 34ff 	mov.w	r4, #4294967295
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	bd70      	pop	{r4, r5, r6, pc}
 800aba0:	20001e8c 	.word	0x20001e8c

0800aba4 <_malloc_r>:
 800aba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba8:	1ccd      	adds	r5, r1, #3
 800abaa:	f025 0503 	bic.w	r5, r5, #3
 800abae:	3508      	adds	r5, #8
 800abb0:	2d0c      	cmp	r5, #12
 800abb2:	bf38      	it	cc
 800abb4:	250c      	movcc	r5, #12
 800abb6:	2d00      	cmp	r5, #0
 800abb8:	4607      	mov	r7, r0
 800abba:	db01      	blt.n	800abc0 <_malloc_r+0x1c>
 800abbc:	42a9      	cmp	r1, r5
 800abbe:	d905      	bls.n	800abcc <_malloc_r+0x28>
 800abc0:	230c      	movs	r3, #12
 800abc2:	603b      	str	r3, [r7, #0]
 800abc4:	2600      	movs	r6, #0
 800abc6:	4630      	mov	r0, r6
 800abc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abcc:	4e2e      	ldr	r6, [pc, #184]	; (800ac88 <_malloc_r+0xe4>)
 800abce:	f000 fc11 	bl	800b3f4 <__malloc_lock>
 800abd2:	6833      	ldr	r3, [r6, #0]
 800abd4:	461c      	mov	r4, r3
 800abd6:	bb34      	cbnz	r4, 800ac26 <_malloc_r+0x82>
 800abd8:	4629      	mov	r1, r5
 800abda:	4638      	mov	r0, r7
 800abdc:	f7ff ffc2 	bl	800ab64 <sbrk_aligned>
 800abe0:	1c43      	adds	r3, r0, #1
 800abe2:	4604      	mov	r4, r0
 800abe4:	d14d      	bne.n	800ac82 <_malloc_r+0xde>
 800abe6:	6834      	ldr	r4, [r6, #0]
 800abe8:	4626      	mov	r6, r4
 800abea:	2e00      	cmp	r6, #0
 800abec:	d140      	bne.n	800ac70 <_malloc_r+0xcc>
 800abee:	6823      	ldr	r3, [r4, #0]
 800abf0:	4631      	mov	r1, r6
 800abf2:	4638      	mov	r0, r7
 800abf4:	eb04 0803 	add.w	r8, r4, r3
 800abf8:	f000 fb38 	bl	800b26c <_sbrk_r>
 800abfc:	4580      	cmp	r8, r0
 800abfe:	d13a      	bne.n	800ac76 <_malloc_r+0xd2>
 800ac00:	6821      	ldr	r1, [r4, #0]
 800ac02:	3503      	adds	r5, #3
 800ac04:	1a6d      	subs	r5, r5, r1
 800ac06:	f025 0503 	bic.w	r5, r5, #3
 800ac0a:	3508      	adds	r5, #8
 800ac0c:	2d0c      	cmp	r5, #12
 800ac0e:	bf38      	it	cc
 800ac10:	250c      	movcc	r5, #12
 800ac12:	4629      	mov	r1, r5
 800ac14:	4638      	mov	r0, r7
 800ac16:	f7ff ffa5 	bl	800ab64 <sbrk_aligned>
 800ac1a:	3001      	adds	r0, #1
 800ac1c:	d02b      	beq.n	800ac76 <_malloc_r+0xd2>
 800ac1e:	6823      	ldr	r3, [r4, #0]
 800ac20:	442b      	add	r3, r5
 800ac22:	6023      	str	r3, [r4, #0]
 800ac24:	e00e      	b.n	800ac44 <_malloc_r+0xa0>
 800ac26:	6822      	ldr	r2, [r4, #0]
 800ac28:	1b52      	subs	r2, r2, r5
 800ac2a:	d41e      	bmi.n	800ac6a <_malloc_r+0xc6>
 800ac2c:	2a0b      	cmp	r2, #11
 800ac2e:	d916      	bls.n	800ac5e <_malloc_r+0xba>
 800ac30:	1961      	adds	r1, r4, r5
 800ac32:	42a3      	cmp	r3, r4
 800ac34:	6025      	str	r5, [r4, #0]
 800ac36:	bf18      	it	ne
 800ac38:	6059      	strne	r1, [r3, #4]
 800ac3a:	6863      	ldr	r3, [r4, #4]
 800ac3c:	bf08      	it	eq
 800ac3e:	6031      	streq	r1, [r6, #0]
 800ac40:	5162      	str	r2, [r4, r5]
 800ac42:	604b      	str	r3, [r1, #4]
 800ac44:	4638      	mov	r0, r7
 800ac46:	f104 060b 	add.w	r6, r4, #11
 800ac4a:	f000 fbd9 	bl	800b400 <__malloc_unlock>
 800ac4e:	f026 0607 	bic.w	r6, r6, #7
 800ac52:	1d23      	adds	r3, r4, #4
 800ac54:	1af2      	subs	r2, r6, r3
 800ac56:	d0b6      	beq.n	800abc6 <_malloc_r+0x22>
 800ac58:	1b9b      	subs	r3, r3, r6
 800ac5a:	50a3      	str	r3, [r4, r2]
 800ac5c:	e7b3      	b.n	800abc6 <_malloc_r+0x22>
 800ac5e:	6862      	ldr	r2, [r4, #4]
 800ac60:	42a3      	cmp	r3, r4
 800ac62:	bf0c      	ite	eq
 800ac64:	6032      	streq	r2, [r6, #0]
 800ac66:	605a      	strne	r2, [r3, #4]
 800ac68:	e7ec      	b.n	800ac44 <_malloc_r+0xa0>
 800ac6a:	4623      	mov	r3, r4
 800ac6c:	6864      	ldr	r4, [r4, #4]
 800ac6e:	e7b2      	b.n	800abd6 <_malloc_r+0x32>
 800ac70:	4634      	mov	r4, r6
 800ac72:	6876      	ldr	r6, [r6, #4]
 800ac74:	e7b9      	b.n	800abea <_malloc_r+0x46>
 800ac76:	230c      	movs	r3, #12
 800ac78:	603b      	str	r3, [r7, #0]
 800ac7a:	4638      	mov	r0, r7
 800ac7c:	f000 fbc0 	bl	800b400 <__malloc_unlock>
 800ac80:	e7a1      	b.n	800abc6 <_malloc_r+0x22>
 800ac82:	6025      	str	r5, [r4, #0]
 800ac84:	e7de      	b.n	800ac44 <_malloc_r+0xa0>
 800ac86:	bf00      	nop
 800ac88:	20001e88 	.word	0x20001e88

0800ac8c <__ssputs_r>:
 800ac8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac90:	688e      	ldr	r6, [r1, #8]
 800ac92:	429e      	cmp	r6, r3
 800ac94:	4682      	mov	sl, r0
 800ac96:	460c      	mov	r4, r1
 800ac98:	4690      	mov	r8, r2
 800ac9a:	461f      	mov	r7, r3
 800ac9c:	d838      	bhi.n	800ad10 <__ssputs_r+0x84>
 800ac9e:	898a      	ldrh	r2, [r1, #12]
 800aca0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aca4:	d032      	beq.n	800ad0c <__ssputs_r+0x80>
 800aca6:	6825      	ldr	r5, [r4, #0]
 800aca8:	6909      	ldr	r1, [r1, #16]
 800acaa:	eba5 0901 	sub.w	r9, r5, r1
 800acae:	6965      	ldr	r5, [r4, #20]
 800acb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acb8:	3301      	adds	r3, #1
 800acba:	444b      	add	r3, r9
 800acbc:	106d      	asrs	r5, r5, #1
 800acbe:	429d      	cmp	r5, r3
 800acc0:	bf38      	it	cc
 800acc2:	461d      	movcc	r5, r3
 800acc4:	0553      	lsls	r3, r2, #21
 800acc6:	d531      	bpl.n	800ad2c <__ssputs_r+0xa0>
 800acc8:	4629      	mov	r1, r5
 800acca:	f7ff ff6b 	bl	800aba4 <_malloc_r>
 800acce:	4606      	mov	r6, r0
 800acd0:	b950      	cbnz	r0, 800ace8 <__ssputs_r+0x5c>
 800acd2:	230c      	movs	r3, #12
 800acd4:	f8ca 3000 	str.w	r3, [sl]
 800acd8:	89a3      	ldrh	r3, [r4, #12]
 800acda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acde:	81a3      	strh	r3, [r4, #12]
 800ace0:	f04f 30ff 	mov.w	r0, #4294967295
 800ace4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ace8:	6921      	ldr	r1, [r4, #16]
 800acea:	464a      	mov	r2, r9
 800acec:	f7ff fa9c 	bl	800a228 <memcpy>
 800acf0:	89a3      	ldrh	r3, [r4, #12]
 800acf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acfa:	81a3      	strh	r3, [r4, #12]
 800acfc:	6126      	str	r6, [r4, #16]
 800acfe:	6165      	str	r5, [r4, #20]
 800ad00:	444e      	add	r6, r9
 800ad02:	eba5 0509 	sub.w	r5, r5, r9
 800ad06:	6026      	str	r6, [r4, #0]
 800ad08:	60a5      	str	r5, [r4, #8]
 800ad0a:	463e      	mov	r6, r7
 800ad0c:	42be      	cmp	r6, r7
 800ad0e:	d900      	bls.n	800ad12 <__ssputs_r+0x86>
 800ad10:	463e      	mov	r6, r7
 800ad12:	6820      	ldr	r0, [r4, #0]
 800ad14:	4632      	mov	r2, r6
 800ad16:	4641      	mov	r1, r8
 800ad18:	f000 fb52 	bl	800b3c0 <memmove>
 800ad1c:	68a3      	ldr	r3, [r4, #8]
 800ad1e:	1b9b      	subs	r3, r3, r6
 800ad20:	60a3      	str	r3, [r4, #8]
 800ad22:	6823      	ldr	r3, [r4, #0]
 800ad24:	4433      	add	r3, r6
 800ad26:	6023      	str	r3, [r4, #0]
 800ad28:	2000      	movs	r0, #0
 800ad2a:	e7db      	b.n	800ace4 <__ssputs_r+0x58>
 800ad2c:	462a      	mov	r2, r5
 800ad2e:	f000 fb6d 	bl	800b40c <_realloc_r>
 800ad32:	4606      	mov	r6, r0
 800ad34:	2800      	cmp	r0, #0
 800ad36:	d1e1      	bne.n	800acfc <__ssputs_r+0x70>
 800ad38:	6921      	ldr	r1, [r4, #16]
 800ad3a:	4650      	mov	r0, sl
 800ad3c:	f7ff fec6 	bl	800aacc <_free_r>
 800ad40:	e7c7      	b.n	800acd2 <__ssputs_r+0x46>
	...

0800ad44 <_svfiprintf_r>:
 800ad44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad48:	4698      	mov	r8, r3
 800ad4a:	898b      	ldrh	r3, [r1, #12]
 800ad4c:	061b      	lsls	r3, r3, #24
 800ad4e:	b09d      	sub	sp, #116	; 0x74
 800ad50:	4607      	mov	r7, r0
 800ad52:	460d      	mov	r5, r1
 800ad54:	4614      	mov	r4, r2
 800ad56:	d50e      	bpl.n	800ad76 <_svfiprintf_r+0x32>
 800ad58:	690b      	ldr	r3, [r1, #16]
 800ad5a:	b963      	cbnz	r3, 800ad76 <_svfiprintf_r+0x32>
 800ad5c:	2140      	movs	r1, #64	; 0x40
 800ad5e:	f7ff ff21 	bl	800aba4 <_malloc_r>
 800ad62:	6028      	str	r0, [r5, #0]
 800ad64:	6128      	str	r0, [r5, #16]
 800ad66:	b920      	cbnz	r0, 800ad72 <_svfiprintf_r+0x2e>
 800ad68:	230c      	movs	r3, #12
 800ad6a:	603b      	str	r3, [r7, #0]
 800ad6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad70:	e0d1      	b.n	800af16 <_svfiprintf_r+0x1d2>
 800ad72:	2340      	movs	r3, #64	; 0x40
 800ad74:	616b      	str	r3, [r5, #20]
 800ad76:	2300      	movs	r3, #0
 800ad78:	9309      	str	r3, [sp, #36]	; 0x24
 800ad7a:	2320      	movs	r3, #32
 800ad7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad80:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad84:	2330      	movs	r3, #48	; 0x30
 800ad86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800af30 <_svfiprintf_r+0x1ec>
 800ad8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad8e:	f04f 0901 	mov.w	r9, #1
 800ad92:	4623      	mov	r3, r4
 800ad94:	469a      	mov	sl, r3
 800ad96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad9a:	b10a      	cbz	r2, 800ada0 <_svfiprintf_r+0x5c>
 800ad9c:	2a25      	cmp	r2, #37	; 0x25
 800ad9e:	d1f9      	bne.n	800ad94 <_svfiprintf_r+0x50>
 800ada0:	ebba 0b04 	subs.w	fp, sl, r4
 800ada4:	d00b      	beq.n	800adbe <_svfiprintf_r+0x7a>
 800ada6:	465b      	mov	r3, fp
 800ada8:	4622      	mov	r2, r4
 800adaa:	4629      	mov	r1, r5
 800adac:	4638      	mov	r0, r7
 800adae:	f7ff ff6d 	bl	800ac8c <__ssputs_r>
 800adb2:	3001      	adds	r0, #1
 800adb4:	f000 80aa 	beq.w	800af0c <_svfiprintf_r+0x1c8>
 800adb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adba:	445a      	add	r2, fp
 800adbc:	9209      	str	r2, [sp, #36]	; 0x24
 800adbe:	f89a 3000 	ldrb.w	r3, [sl]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f000 80a2 	beq.w	800af0c <_svfiprintf_r+0x1c8>
 800adc8:	2300      	movs	r3, #0
 800adca:	f04f 32ff 	mov.w	r2, #4294967295
 800adce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800add2:	f10a 0a01 	add.w	sl, sl, #1
 800add6:	9304      	str	r3, [sp, #16]
 800add8:	9307      	str	r3, [sp, #28]
 800adda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adde:	931a      	str	r3, [sp, #104]	; 0x68
 800ade0:	4654      	mov	r4, sl
 800ade2:	2205      	movs	r2, #5
 800ade4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ade8:	4851      	ldr	r0, [pc, #324]	; (800af30 <_svfiprintf_r+0x1ec>)
 800adea:	f7f5 fa01 	bl	80001f0 <memchr>
 800adee:	9a04      	ldr	r2, [sp, #16]
 800adf0:	b9d8      	cbnz	r0, 800ae2a <_svfiprintf_r+0xe6>
 800adf2:	06d0      	lsls	r0, r2, #27
 800adf4:	bf44      	itt	mi
 800adf6:	2320      	movmi	r3, #32
 800adf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adfc:	0711      	lsls	r1, r2, #28
 800adfe:	bf44      	itt	mi
 800ae00:	232b      	movmi	r3, #43	; 0x2b
 800ae02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae06:	f89a 3000 	ldrb.w	r3, [sl]
 800ae0a:	2b2a      	cmp	r3, #42	; 0x2a
 800ae0c:	d015      	beq.n	800ae3a <_svfiprintf_r+0xf6>
 800ae0e:	9a07      	ldr	r2, [sp, #28]
 800ae10:	4654      	mov	r4, sl
 800ae12:	2000      	movs	r0, #0
 800ae14:	f04f 0c0a 	mov.w	ip, #10
 800ae18:	4621      	mov	r1, r4
 800ae1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae1e:	3b30      	subs	r3, #48	; 0x30
 800ae20:	2b09      	cmp	r3, #9
 800ae22:	d94e      	bls.n	800aec2 <_svfiprintf_r+0x17e>
 800ae24:	b1b0      	cbz	r0, 800ae54 <_svfiprintf_r+0x110>
 800ae26:	9207      	str	r2, [sp, #28]
 800ae28:	e014      	b.n	800ae54 <_svfiprintf_r+0x110>
 800ae2a:	eba0 0308 	sub.w	r3, r0, r8
 800ae2e:	fa09 f303 	lsl.w	r3, r9, r3
 800ae32:	4313      	orrs	r3, r2
 800ae34:	9304      	str	r3, [sp, #16]
 800ae36:	46a2      	mov	sl, r4
 800ae38:	e7d2      	b.n	800ade0 <_svfiprintf_r+0x9c>
 800ae3a:	9b03      	ldr	r3, [sp, #12]
 800ae3c:	1d19      	adds	r1, r3, #4
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	9103      	str	r1, [sp, #12]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	bfbb      	ittet	lt
 800ae46:	425b      	neglt	r3, r3
 800ae48:	f042 0202 	orrlt.w	r2, r2, #2
 800ae4c:	9307      	strge	r3, [sp, #28]
 800ae4e:	9307      	strlt	r3, [sp, #28]
 800ae50:	bfb8      	it	lt
 800ae52:	9204      	strlt	r2, [sp, #16]
 800ae54:	7823      	ldrb	r3, [r4, #0]
 800ae56:	2b2e      	cmp	r3, #46	; 0x2e
 800ae58:	d10c      	bne.n	800ae74 <_svfiprintf_r+0x130>
 800ae5a:	7863      	ldrb	r3, [r4, #1]
 800ae5c:	2b2a      	cmp	r3, #42	; 0x2a
 800ae5e:	d135      	bne.n	800aecc <_svfiprintf_r+0x188>
 800ae60:	9b03      	ldr	r3, [sp, #12]
 800ae62:	1d1a      	adds	r2, r3, #4
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	9203      	str	r2, [sp, #12]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	bfb8      	it	lt
 800ae6c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae70:	3402      	adds	r4, #2
 800ae72:	9305      	str	r3, [sp, #20]
 800ae74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800af40 <_svfiprintf_r+0x1fc>
 800ae78:	7821      	ldrb	r1, [r4, #0]
 800ae7a:	2203      	movs	r2, #3
 800ae7c:	4650      	mov	r0, sl
 800ae7e:	f7f5 f9b7 	bl	80001f0 <memchr>
 800ae82:	b140      	cbz	r0, 800ae96 <_svfiprintf_r+0x152>
 800ae84:	2340      	movs	r3, #64	; 0x40
 800ae86:	eba0 000a 	sub.w	r0, r0, sl
 800ae8a:	fa03 f000 	lsl.w	r0, r3, r0
 800ae8e:	9b04      	ldr	r3, [sp, #16]
 800ae90:	4303      	orrs	r3, r0
 800ae92:	3401      	adds	r4, #1
 800ae94:	9304      	str	r3, [sp, #16]
 800ae96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae9a:	4826      	ldr	r0, [pc, #152]	; (800af34 <_svfiprintf_r+0x1f0>)
 800ae9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aea0:	2206      	movs	r2, #6
 800aea2:	f7f5 f9a5 	bl	80001f0 <memchr>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d038      	beq.n	800af1c <_svfiprintf_r+0x1d8>
 800aeaa:	4b23      	ldr	r3, [pc, #140]	; (800af38 <_svfiprintf_r+0x1f4>)
 800aeac:	bb1b      	cbnz	r3, 800aef6 <_svfiprintf_r+0x1b2>
 800aeae:	9b03      	ldr	r3, [sp, #12]
 800aeb0:	3307      	adds	r3, #7
 800aeb2:	f023 0307 	bic.w	r3, r3, #7
 800aeb6:	3308      	adds	r3, #8
 800aeb8:	9303      	str	r3, [sp, #12]
 800aeba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aebc:	4433      	add	r3, r6
 800aebe:	9309      	str	r3, [sp, #36]	; 0x24
 800aec0:	e767      	b.n	800ad92 <_svfiprintf_r+0x4e>
 800aec2:	fb0c 3202 	mla	r2, ip, r2, r3
 800aec6:	460c      	mov	r4, r1
 800aec8:	2001      	movs	r0, #1
 800aeca:	e7a5      	b.n	800ae18 <_svfiprintf_r+0xd4>
 800aecc:	2300      	movs	r3, #0
 800aece:	3401      	adds	r4, #1
 800aed0:	9305      	str	r3, [sp, #20]
 800aed2:	4619      	mov	r1, r3
 800aed4:	f04f 0c0a 	mov.w	ip, #10
 800aed8:	4620      	mov	r0, r4
 800aeda:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aede:	3a30      	subs	r2, #48	; 0x30
 800aee0:	2a09      	cmp	r2, #9
 800aee2:	d903      	bls.n	800aeec <_svfiprintf_r+0x1a8>
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d0c5      	beq.n	800ae74 <_svfiprintf_r+0x130>
 800aee8:	9105      	str	r1, [sp, #20]
 800aeea:	e7c3      	b.n	800ae74 <_svfiprintf_r+0x130>
 800aeec:	fb0c 2101 	mla	r1, ip, r1, r2
 800aef0:	4604      	mov	r4, r0
 800aef2:	2301      	movs	r3, #1
 800aef4:	e7f0      	b.n	800aed8 <_svfiprintf_r+0x194>
 800aef6:	ab03      	add	r3, sp, #12
 800aef8:	9300      	str	r3, [sp, #0]
 800aefa:	462a      	mov	r2, r5
 800aefc:	4b0f      	ldr	r3, [pc, #60]	; (800af3c <_svfiprintf_r+0x1f8>)
 800aefe:	a904      	add	r1, sp, #16
 800af00:	4638      	mov	r0, r7
 800af02:	f3af 8000 	nop.w
 800af06:	1c42      	adds	r2, r0, #1
 800af08:	4606      	mov	r6, r0
 800af0a:	d1d6      	bne.n	800aeba <_svfiprintf_r+0x176>
 800af0c:	89ab      	ldrh	r3, [r5, #12]
 800af0e:	065b      	lsls	r3, r3, #25
 800af10:	f53f af2c 	bmi.w	800ad6c <_svfiprintf_r+0x28>
 800af14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af16:	b01d      	add	sp, #116	; 0x74
 800af18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af1c:	ab03      	add	r3, sp, #12
 800af1e:	9300      	str	r3, [sp, #0]
 800af20:	462a      	mov	r2, r5
 800af22:	4b06      	ldr	r3, [pc, #24]	; (800af3c <_svfiprintf_r+0x1f8>)
 800af24:	a904      	add	r1, sp, #16
 800af26:	4638      	mov	r0, r7
 800af28:	f000 f87a 	bl	800b020 <_printf_i>
 800af2c:	e7eb      	b.n	800af06 <_svfiprintf_r+0x1c2>
 800af2e:	bf00      	nop
 800af30:	0800bc64 	.word	0x0800bc64
 800af34:	0800bc6e 	.word	0x0800bc6e
 800af38:	00000000 	.word	0x00000000
 800af3c:	0800ac8d 	.word	0x0800ac8d
 800af40:	0800bc6a 	.word	0x0800bc6a

0800af44 <_printf_common>:
 800af44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af48:	4616      	mov	r6, r2
 800af4a:	4699      	mov	r9, r3
 800af4c:	688a      	ldr	r2, [r1, #8]
 800af4e:	690b      	ldr	r3, [r1, #16]
 800af50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af54:	4293      	cmp	r3, r2
 800af56:	bfb8      	it	lt
 800af58:	4613      	movlt	r3, r2
 800af5a:	6033      	str	r3, [r6, #0]
 800af5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af60:	4607      	mov	r7, r0
 800af62:	460c      	mov	r4, r1
 800af64:	b10a      	cbz	r2, 800af6a <_printf_common+0x26>
 800af66:	3301      	adds	r3, #1
 800af68:	6033      	str	r3, [r6, #0]
 800af6a:	6823      	ldr	r3, [r4, #0]
 800af6c:	0699      	lsls	r1, r3, #26
 800af6e:	bf42      	ittt	mi
 800af70:	6833      	ldrmi	r3, [r6, #0]
 800af72:	3302      	addmi	r3, #2
 800af74:	6033      	strmi	r3, [r6, #0]
 800af76:	6825      	ldr	r5, [r4, #0]
 800af78:	f015 0506 	ands.w	r5, r5, #6
 800af7c:	d106      	bne.n	800af8c <_printf_common+0x48>
 800af7e:	f104 0a19 	add.w	sl, r4, #25
 800af82:	68e3      	ldr	r3, [r4, #12]
 800af84:	6832      	ldr	r2, [r6, #0]
 800af86:	1a9b      	subs	r3, r3, r2
 800af88:	42ab      	cmp	r3, r5
 800af8a:	dc26      	bgt.n	800afda <_printf_common+0x96>
 800af8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af90:	1e13      	subs	r3, r2, #0
 800af92:	6822      	ldr	r2, [r4, #0]
 800af94:	bf18      	it	ne
 800af96:	2301      	movne	r3, #1
 800af98:	0692      	lsls	r2, r2, #26
 800af9a:	d42b      	bmi.n	800aff4 <_printf_common+0xb0>
 800af9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afa0:	4649      	mov	r1, r9
 800afa2:	4638      	mov	r0, r7
 800afa4:	47c0      	blx	r8
 800afa6:	3001      	adds	r0, #1
 800afa8:	d01e      	beq.n	800afe8 <_printf_common+0xa4>
 800afaa:	6823      	ldr	r3, [r4, #0]
 800afac:	68e5      	ldr	r5, [r4, #12]
 800afae:	6832      	ldr	r2, [r6, #0]
 800afb0:	f003 0306 	and.w	r3, r3, #6
 800afb4:	2b04      	cmp	r3, #4
 800afb6:	bf08      	it	eq
 800afb8:	1aad      	subeq	r5, r5, r2
 800afba:	68a3      	ldr	r3, [r4, #8]
 800afbc:	6922      	ldr	r2, [r4, #16]
 800afbe:	bf0c      	ite	eq
 800afc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afc4:	2500      	movne	r5, #0
 800afc6:	4293      	cmp	r3, r2
 800afc8:	bfc4      	itt	gt
 800afca:	1a9b      	subgt	r3, r3, r2
 800afcc:	18ed      	addgt	r5, r5, r3
 800afce:	2600      	movs	r6, #0
 800afd0:	341a      	adds	r4, #26
 800afd2:	42b5      	cmp	r5, r6
 800afd4:	d11a      	bne.n	800b00c <_printf_common+0xc8>
 800afd6:	2000      	movs	r0, #0
 800afd8:	e008      	b.n	800afec <_printf_common+0xa8>
 800afda:	2301      	movs	r3, #1
 800afdc:	4652      	mov	r2, sl
 800afde:	4649      	mov	r1, r9
 800afe0:	4638      	mov	r0, r7
 800afe2:	47c0      	blx	r8
 800afe4:	3001      	adds	r0, #1
 800afe6:	d103      	bne.n	800aff0 <_printf_common+0xac>
 800afe8:	f04f 30ff 	mov.w	r0, #4294967295
 800afec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aff0:	3501      	adds	r5, #1
 800aff2:	e7c6      	b.n	800af82 <_printf_common+0x3e>
 800aff4:	18e1      	adds	r1, r4, r3
 800aff6:	1c5a      	adds	r2, r3, #1
 800aff8:	2030      	movs	r0, #48	; 0x30
 800affa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800affe:	4422      	add	r2, r4
 800b000:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b004:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b008:	3302      	adds	r3, #2
 800b00a:	e7c7      	b.n	800af9c <_printf_common+0x58>
 800b00c:	2301      	movs	r3, #1
 800b00e:	4622      	mov	r2, r4
 800b010:	4649      	mov	r1, r9
 800b012:	4638      	mov	r0, r7
 800b014:	47c0      	blx	r8
 800b016:	3001      	adds	r0, #1
 800b018:	d0e6      	beq.n	800afe8 <_printf_common+0xa4>
 800b01a:	3601      	adds	r6, #1
 800b01c:	e7d9      	b.n	800afd2 <_printf_common+0x8e>
	...

0800b020 <_printf_i>:
 800b020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b024:	7e0f      	ldrb	r7, [r1, #24]
 800b026:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b028:	2f78      	cmp	r7, #120	; 0x78
 800b02a:	4691      	mov	r9, r2
 800b02c:	4680      	mov	r8, r0
 800b02e:	460c      	mov	r4, r1
 800b030:	469a      	mov	sl, r3
 800b032:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b036:	d807      	bhi.n	800b048 <_printf_i+0x28>
 800b038:	2f62      	cmp	r7, #98	; 0x62
 800b03a:	d80a      	bhi.n	800b052 <_printf_i+0x32>
 800b03c:	2f00      	cmp	r7, #0
 800b03e:	f000 80d8 	beq.w	800b1f2 <_printf_i+0x1d2>
 800b042:	2f58      	cmp	r7, #88	; 0x58
 800b044:	f000 80a3 	beq.w	800b18e <_printf_i+0x16e>
 800b048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b04c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b050:	e03a      	b.n	800b0c8 <_printf_i+0xa8>
 800b052:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b056:	2b15      	cmp	r3, #21
 800b058:	d8f6      	bhi.n	800b048 <_printf_i+0x28>
 800b05a:	a101      	add	r1, pc, #4	; (adr r1, 800b060 <_printf_i+0x40>)
 800b05c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b060:	0800b0b9 	.word	0x0800b0b9
 800b064:	0800b0cd 	.word	0x0800b0cd
 800b068:	0800b049 	.word	0x0800b049
 800b06c:	0800b049 	.word	0x0800b049
 800b070:	0800b049 	.word	0x0800b049
 800b074:	0800b049 	.word	0x0800b049
 800b078:	0800b0cd 	.word	0x0800b0cd
 800b07c:	0800b049 	.word	0x0800b049
 800b080:	0800b049 	.word	0x0800b049
 800b084:	0800b049 	.word	0x0800b049
 800b088:	0800b049 	.word	0x0800b049
 800b08c:	0800b1d9 	.word	0x0800b1d9
 800b090:	0800b0fd 	.word	0x0800b0fd
 800b094:	0800b1bb 	.word	0x0800b1bb
 800b098:	0800b049 	.word	0x0800b049
 800b09c:	0800b049 	.word	0x0800b049
 800b0a0:	0800b1fb 	.word	0x0800b1fb
 800b0a4:	0800b049 	.word	0x0800b049
 800b0a8:	0800b0fd 	.word	0x0800b0fd
 800b0ac:	0800b049 	.word	0x0800b049
 800b0b0:	0800b049 	.word	0x0800b049
 800b0b4:	0800b1c3 	.word	0x0800b1c3
 800b0b8:	682b      	ldr	r3, [r5, #0]
 800b0ba:	1d1a      	adds	r2, r3, #4
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	602a      	str	r2, [r5, #0]
 800b0c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	e0a3      	b.n	800b214 <_printf_i+0x1f4>
 800b0cc:	6820      	ldr	r0, [r4, #0]
 800b0ce:	6829      	ldr	r1, [r5, #0]
 800b0d0:	0606      	lsls	r6, r0, #24
 800b0d2:	f101 0304 	add.w	r3, r1, #4
 800b0d6:	d50a      	bpl.n	800b0ee <_printf_i+0xce>
 800b0d8:	680e      	ldr	r6, [r1, #0]
 800b0da:	602b      	str	r3, [r5, #0]
 800b0dc:	2e00      	cmp	r6, #0
 800b0de:	da03      	bge.n	800b0e8 <_printf_i+0xc8>
 800b0e0:	232d      	movs	r3, #45	; 0x2d
 800b0e2:	4276      	negs	r6, r6
 800b0e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0e8:	485e      	ldr	r0, [pc, #376]	; (800b264 <_printf_i+0x244>)
 800b0ea:	230a      	movs	r3, #10
 800b0ec:	e019      	b.n	800b122 <_printf_i+0x102>
 800b0ee:	680e      	ldr	r6, [r1, #0]
 800b0f0:	602b      	str	r3, [r5, #0]
 800b0f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b0f6:	bf18      	it	ne
 800b0f8:	b236      	sxthne	r6, r6
 800b0fa:	e7ef      	b.n	800b0dc <_printf_i+0xbc>
 800b0fc:	682b      	ldr	r3, [r5, #0]
 800b0fe:	6820      	ldr	r0, [r4, #0]
 800b100:	1d19      	adds	r1, r3, #4
 800b102:	6029      	str	r1, [r5, #0]
 800b104:	0601      	lsls	r1, r0, #24
 800b106:	d501      	bpl.n	800b10c <_printf_i+0xec>
 800b108:	681e      	ldr	r6, [r3, #0]
 800b10a:	e002      	b.n	800b112 <_printf_i+0xf2>
 800b10c:	0646      	lsls	r6, r0, #25
 800b10e:	d5fb      	bpl.n	800b108 <_printf_i+0xe8>
 800b110:	881e      	ldrh	r6, [r3, #0]
 800b112:	4854      	ldr	r0, [pc, #336]	; (800b264 <_printf_i+0x244>)
 800b114:	2f6f      	cmp	r7, #111	; 0x6f
 800b116:	bf0c      	ite	eq
 800b118:	2308      	moveq	r3, #8
 800b11a:	230a      	movne	r3, #10
 800b11c:	2100      	movs	r1, #0
 800b11e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b122:	6865      	ldr	r5, [r4, #4]
 800b124:	60a5      	str	r5, [r4, #8]
 800b126:	2d00      	cmp	r5, #0
 800b128:	bfa2      	ittt	ge
 800b12a:	6821      	ldrge	r1, [r4, #0]
 800b12c:	f021 0104 	bicge.w	r1, r1, #4
 800b130:	6021      	strge	r1, [r4, #0]
 800b132:	b90e      	cbnz	r6, 800b138 <_printf_i+0x118>
 800b134:	2d00      	cmp	r5, #0
 800b136:	d04d      	beq.n	800b1d4 <_printf_i+0x1b4>
 800b138:	4615      	mov	r5, r2
 800b13a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b13e:	fb03 6711 	mls	r7, r3, r1, r6
 800b142:	5dc7      	ldrb	r7, [r0, r7]
 800b144:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b148:	4637      	mov	r7, r6
 800b14a:	42bb      	cmp	r3, r7
 800b14c:	460e      	mov	r6, r1
 800b14e:	d9f4      	bls.n	800b13a <_printf_i+0x11a>
 800b150:	2b08      	cmp	r3, #8
 800b152:	d10b      	bne.n	800b16c <_printf_i+0x14c>
 800b154:	6823      	ldr	r3, [r4, #0]
 800b156:	07de      	lsls	r6, r3, #31
 800b158:	d508      	bpl.n	800b16c <_printf_i+0x14c>
 800b15a:	6923      	ldr	r3, [r4, #16]
 800b15c:	6861      	ldr	r1, [r4, #4]
 800b15e:	4299      	cmp	r1, r3
 800b160:	bfde      	ittt	le
 800b162:	2330      	movle	r3, #48	; 0x30
 800b164:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b168:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b16c:	1b52      	subs	r2, r2, r5
 800b16e:	6122      	str	r2, [r4, #16]
 800b170:	f8cd a000 	str.w	sl, [sp]
 800b174:	464b      	mov	r3, r9
 800b176:	aa03      	add	r2, sp, #12
 800b178:	4621      	mov	r1, r4
 800b17a:	4640      	mov	r0, r8
 800b17c:	f7ff fee2 	bl	800af44 <_printf_common>
 800b180:	3001      	adds	r0, #1
 800b182:	d14c      	bne.n	800b21e <_printf_i+0x1fe>
 800b184:	f04f 30ff 	mov.w	r0, #4294967295
 800b188:	b004      	add	sp, #16
 800b18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b18e:	4835      	ldr	r0, [pc, #212]	; (800b264 <_printf_i+0x244>)
 800b190:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b194:	6829      	ldr	r1, [r5, #0]
 800b196:	6823      	ldr	r3, [r4, #0]
 800b198:	f851 6b04 	ldr.w	r6, [r1], #4
 800b19c:	6029      	str	r1, [r5, #0]
 800b19e:	061d      	lsls	r5, r3, #24
 800b1a0:	d514      	bpl.n	800b1cc <_printf_i+0x1ac>
 800b1a2:	07df      	lsls	r7, r3, #31
 800b1a4:	bf44      	itt	mi
 800b1a6:	f043 0320 	orrmi.w	r3, r3, #32
 800b1aa:	6023      	strmi	r3, [r4, #0]
 800b1ac:	b91e      	cbnz	r6, 800b1b6 <_printf_i+0x196>
 800b1ae:	6823      	ldr	r3, [r4, #0]
 800b1b0:	f023 0320 	bic.w	r3, r3, #32
 800b1b4:	6023      	str	r3, [r4, #0]
 800b1b6:	2310      	movs	r3, #16
 800b1b8:	e7b0      	b.n	800b11c <_printf_i+0xfc>
 800b1ba:	6823      	ldr	r3, [r4, #0]
 800b1bc:	f043 0320 	orr.w	r3, r3, #32
 800b1c0:	6023      	str	r3, [r4, #0]
 800b1c2:	2378      	movs	r3, #120	; 0x78
 800b1c4:	4828      	ldr	r0, [pc, #160]	; (800b268 <_printf_i+0x248>)
 800b1c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b1ca:	e7e3      	b.n	800b194 <_printf_i+0x174>
 800b1cc:	0659      	lsls	r1, r3, #25
 800b1ce:	bf48      	it	mi
 800b1d0:	b2b6      	uxthmi	r6, r6
 800b1d2:	e7e6      	b.n	800b1a2 <_printf_i+0x182>
 800b1d4:	4615      	mov	r5, r2
 800b1d6:	e7bb      	b.n	800b150 <_printf_i+0x130>
 800b1d8:	682b      	ldr	r3, [r5, #0]
 800b1da:	6826      	ldr	r6, [r4, #0]
 800b1dc:	6961      	ldr	r1, [r4, #20]
 800b1de:	1d18      	adds	r0, r3, #4
 800b1e0:	6028      	str	r0, [r5, #0]
 800b1e2:	0635      	lsls	r5, r6, #24
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	d501      	bpl.n	800b1ec <_printf_i+0x1cc>
 800b1e8:	6019      	str	r1, [r3, #0]
 800b1ea:	e002      	b.n	800b1f2 <_printf_i+0x1d2>
 800b1ec:	0670      	lsls	r0, r6, #25
 800b1ee:	d5fb      	bpl.n	800b1e8 <_printf_i+0x1c8>
 800b1f0:	8019      	strh	r1, [r3, #0]
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	6123      	str	r3, [r4, #16]
 800b1f6:	4615      	mov	r5, r2
 800b1f8:	e7ba      	b.n	800b170 <_printf_i+0x150>
 800b1fa:	682b      	ldr	r3, [r5, #0]
 800b1fc:	1d1a      	adds	r2, r3, #4
 800b1fe:	602a      	str	r2, [r5, #0]
 800b200:	681d      	ldr	r5, [r3, #0]
 800b202:	6862      	ldr	r2, [r4, #4]
 800b204:	2100      	movs	r1, #0
 800b206:	4628      	mov	r0, r5
 800b208:	f7f4 fff2 	bl	80001f0 <memchr>
 800b20c:	b108      	cbz	r0, 800b212 <_printf_i+0x1f2>
 800b20e:	1b40      	subs	r0, r0, r5
 800b210:	6060      	str	r0, [r4, #4]
 800b212:	6863      	ldr	r3, [r4, #4]
 800b214:	6123      	str	r3, [r4, #16]
 800b216:	2300      	movs	r3, #0
 800b218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b21c:	e7a8      	b.n	800b170 <_printf_i+0x150>
 800b21e:	6923      	ldr	r3, [r4, #16]
 800b220:	462a      	mov	r2, r5
 800b222:	4649      	mov	r1, r9
 800b224:	4640      	mov	r0, r8
 800b226:	47d0      	blx	sl
 800b228:	3001      	adds	r0, #1
 800b22a:	d0ab      	beq.n	800b184 <_printf_i+0x164>
 800b22c:	6823      	ldr	r3, [r4, #0]
 800b22e:	079b      	lsls	r3, r3, #30
 800b230:	d413      	bmi.n	800b25a <_printf_i+0x23a>
 800b232:	68e0      	ldr	r0, [r4, #12]
 800b234:	9b03      	ldr	r3, [sp, #12]
 800b236:	4298      	cmp	r0, r3
 800b238:	bfb8      	it	lt
 800b23a:	4618      	movlt	r0, r3
 800b23c:	e7a4      	b.n	800b188 <_printf_i+0x168>
 800b23e:	2301      	movs	r3, #1
 800b240:	4632      	mov	r2, r6
 800b242:	4649      	mov	r1, r9
 800b244:	4640      	mov	r0, r8
 800b246:	47d0      	blx	sl
 800b248:	3001      	adds	r0, #1
 800b24a:	d09b      	beq.n	800b184 <_printf_i+0x164>
 800b24c:	3501      	adds	r5, #1
 800b24e:	68e3      	ldr	r3, [r4, #12]
 800b250:	9903      	ldr	r1, [sp, #12]
 800b252:	1a5b      	subs	r3, r3, r1
 800b254:	42ab      	cmp	r3, r5
 800b256:	dcf2      	bgt.n	800b23e <_printf_i+0x21e>
 800b258:	e7eb      	b.n	800b232 <_printf_i+0x212>
 800b25a:	2500      	movs	r5, #0
 800b25c:	f104 0619 	add.w	r6, r4, #25
 800b260:	e7f5      	b.n	800b24e <_printf_i+0x22e>
 800b262:	bf00      	nop
 800b264:	0800bc75 	.word	0x0800bc75
 800b268:	0800bc86 	.word	0x0800bc86

0800b26c <_sbrk_r>:
 800b26c:	b538      	push	{r3, r4, r5, lr}
 800b26e:	4d06      	ldr	r5, [pc, #24]	; (800b288 <_sbrk_r+0x1c>)
 800b270:	2300      	movs	r3, #0
 800b272:	4604      	mov	r4, r0
 800b274:	4608      	mov	r0, r1
 800b276:	602b      	str	r3, [r5, #0]
 800b278:	f7f7 faa8 	bl	80027cc <_sbrk>
 800b27c:	1c43      	adds	r3, r0, #1
 800b27e:	d102      	bne.n	800b286 <_sbrk_r+0x1a>
 800b280:	682b      	ldr	r3, [r5, #0]
 800b282:	b103      	cbz	r3, 800b286 <_sbrk_r+0x1a>
 800b284:	6023      	str	r3, [r4, #0]
 800b286:	bd38      	pop	{r3, r4, r5, pc}
 800b288:	20001e90 	.word	0x20001e90

0800b28c <__sread>:
 800b28c:	b510      	push	{r4, lr}
 800b28e:	460c      	mov	r4, r1
 800b290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b294:	f000 f8ea 	bl	800b46c <_read_r>
 800b298:	2800      	cmp	r0, #0
 800b29a:	bfab      	itete	ge
 800b29c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b29e:	89a3      	ldrhlt	r3, [r4, #12]
 800b2a0:	181b      	addge	r3, r3, r0
 800b2a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b2a6:	bfac      	ite	ge
 800b2a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b2aa:	81a3      	strhlt	r3, [r4, #12]
 800b2ac:	bd10      	pop	{r4, pc}

0800b2ae <__swrite>:
 800b2ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b2:	461f      	mov	r7, r3
 800b2b4:	898b      	ldrh	r3, [r1, #12]
 800b2b6:	05db      	lsls	r3, r3, #23
 800b2b8:	4605      	mov	r5, r0
 800b2ba:	460c      	mov	r4, r1
 800b2bc:	4616      	mov	r6, r2
 800b2be:	d505      	bpl.n	800b2cc <__swrite+0x1e>
 800b2c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2c4:	2302      	movs	r3, #2
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f000 f868 	bl	800b39c <_lseek_r>
 800b2cc:	89a3      	ldrh	r3, [r4, #12]
 800b2ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2d6:	81a3      	strh	r3, [r4, #12]
 800b2d8:	4632      	mov	r2, r6
 800b2da:	463b      	mov	r3, r7
 800b2dc:	4628      	mov	r0, r5
 800b2de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e2:	f000 b817 	b.w	800b314 <_write_r>

0800b2e6 <__sseek>:
 800b2e6:	b510      	push	{r4, lr}
 800b2e8:	460c      	mov	r4, r1
 800b2ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ee:	f000 f855 	bl	800b39c <_lseek_r>
 800b2f2:	1c43      	adds	r3, r0, #1
 800b2f4:	89a3      	ldrh	r3, [r4, #12]
 800b2f6:	bf15      	itete	ne
 800b2f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b2fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b2fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b302:	81a3      	strheq	r3, [r4, #12]
 800b304:	bf18      	it	ne
 800b306:	81a3      	strhne	r3, [r4, #12]
 800b308:	bd10      	pop	{r4, pc}

0800b30a <__sclose>:
 800b30a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b30e:	f000 b813 	b.w	800b338 <_close_r>
	...

0800b314 <_write_r>:
 800b314:	b538      	push	{r3, r4, r5, lr}
 800b316:	4d07      	ldr	r5, [pc, #28]	; (800b334 <_write_r+0x20>)
 800b318:	4604      	mov	r4, r0
 800b31a:	4608      	mov	r0, r1
 800b31c:	4611      	mov	r1, r2
 800b31e:	2200      	movs	r2, #0
 800b320:	602a      	str	r2, [r5, #0]
 800b322:	461a      	mov	r2, r3
 800b324:	f7f7 fa01 	bl	800272a <_write>
 800b328:	1c43      	adds	r3, r0, #1
 800b32a:	d102      	bne.n	800b332 <_write_r+0x1e>
 800b32c:	682b      	ldr	r3, [r5, #0]
 800b32e:	b103      	cbz	r3, 800b332 <_write_r+0x1e>
 800b330:	6023      	str	r3, [r4, #0]
 800b332:	bd38      	pop	{r3, r4, r5, pc}
 800b334:	20001e90 	.word	0x20001e90

0800b338 <_close_r>:
 800b338:	b538      	push	{r3, r4, r5, lr}
 800b33a:	4d06      	ldr	r5, [pc, #24]	; (800b354 <_close_r+0x1c>)
 800b33c:	2300      	movs	r3, #0
 800b33e:	4604      	mov	r4, r0
 800b340:	4608      	mov	r0, r1
 800b342:	602b      	str	r3, [r5, #0]
 800b344:	f7f7 fa0d 	bl	8002762 <_close>
 800b348:	1c43      	adds	r3, r0, #1
 800b34a:	d102      	bne.n	800b352 <_close_r+0x1a>
 800b34c:	682b      	ldr	r3, [r5, #0]
 800b34e:	b103      	cbz	r3, 800b352 <_close_r+0x1a>
 800b350:	6023      	str	r3, [r4, #0]
 800b352:	bd38      	pop	{r3, r4, r5, pc}
 800b354:	20001e90 	.word	0x20001e90

0800b358 <_fstat_r>:
 800b358:	b538      	push	{r3, r4, r5, lr}
 800b35a:	4d07      	ldr	r5, [pc, #28]	; (800b378 <_fstat_r+0x20>)
 800b35c:	2300      	movs	r3, #0
 800b35e:	4604      	mov	r4, r0
 800b360:	4608      	mov	r0, r1
 800b362:	4611      	mov	r1, r2
 800b364:	602b      	str	r3, [r5, #0]
 800b366:	f7f7 fa08 	bl	800277a <_fstat>
 800b36a:	1c43      	adds	r3, r0, #1
 800b36c:	d102      	bne.n	800b374 <_fstat_r+0x1c>
 800b36e:	682b      	ldr	r3, [r5, #0]
 800b370:	b103      	cbz	r3, 800b374 <_fstat_r+0x1c>
 800b372:	6023      	str	r3, [r4, #0]
 800b374:	bd38      	pop	{r3, r4, r5, pc}
 800b376:	bf00      	nop
 800b378:	20001e90 	.word	0x20001e90

0800b37c <_isatty_r>:
 800b37c:	b538      	push	{r3, r4, r5, lr}
 800b37e:	4d06      	ldr	r5, [pc, #24]	; (800b398 <_isatty_r+0x1c>)
 800b380:	2300      	movs	r3, #0
 800b382:	4604      	mov	r4, r0
 800b384:	4608      	mov	r0, r1
 800b386:	602b      	str	r3, [r5, #0]
 800b388:	f7f7 fa07 	bl	800279a <_isatty>
 800b38c:	1c43      	adds	r3, r0, #1
 800b38e:	d102      	bne.n	800b396 <_isatty_r+0x1a>
 800b390:	682b      	ldr	r3, [r5, #0]
 800b392:	b103      	cbz	r3, 800b396 <_isatty_r+0x1a>
 800b394:	6023      	str	r3, [r4, #0]
 800b396:	bd38      	pop	{r3, r4, r5, pc}
 800b398:	20001e90 	.word	0x20001e90

0800b39c <_lseek_r>:
 800b39c:	b538      	push	{r3, r4, r5, lr}
 800b39e:	4d07      	ldr	r5, [pc, #28]	; (800b3bc <_lseek_r+0x20>)
 800b3a0:	4604      	mov	r4, r0
 800b3a2:	4608      	mov	r0, r1
 800b3a4:	4611      	mov	r1, r2
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	602a      	str	r2, [r5, #0]
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	f7f7 fa00 	bl	80027b0 <_lseek>
 800b3b0:	1c43      	adds	r3, r0, #1
 800b3b2:	d102      	bne.n	800b3ba <_lseek_r+0x1e>
 800b3b4:	682b      	ldr	r3, [r5, #0]
 800b3b6:	b103      	cbz	r3, 800b3ba <_lseek_r+0x1e>
 800b3b8:	6023      	str	r3, [r4, #0]
 800b3ba:	bd38      	pop	{r3, r4, r5, pc}
 800b3bc:	20001e90 	.word	0x20001e90

0800b3c0 <memmove>:
 800b3c0:	4288      	cmp	r0, r1
 800b3c2:	b510      	push	{r4, lr}
 800b3c4:	eb01 0402 	add.w	r4, r1, r2
 800b3c8:	d902      	bls.n	800b3d0 <memmove+0x10>
 800b3ca:	4284      	cmp	r4, r0
 800b3cc:	4623      	mov	r3, r4
 800b3ce:	d807      	bhi.n	800b3e0 <memmove+0x20>
 800b3d0:	1e43      	subs	r3, r0, #1
 800b3d2:	42a1      	cmp	r1, r4
 800b3d4:	d008      	beq.n	800b3e8 <memmove+0x28>
 800b3d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3de:	e7f8      	b.n	800b3d2 <memmove+0x12>
 800b3e0:	4402      	add	r2, r0
 800b3e2:	4601      	mov	r1, r0
 800b3e4:	428a      	cmp	r2, r1
 800b3e6:	d100      	bne.n	800b3ea <memmove+0x2a>
 800b3e8:	bd10      	pop	{r4, pc}
 800b3ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b3f2:	e7f7      	b.n	800b3e4 <memmove+0x24>

0800b3f4 <__malloc_lock>:
 800b3f4:	4801      	ldr	r0, [pc, #4]	; (800b3fc <__malloc_lock+0x8>)
 800b3f6:	f7ff bb01 	b.w	800a9fc <__retarget_lock_acquire_recursive>
 800b3fa:	bf00      	nop
 800b3fc:	20001e84 	.word	0x20001e84

0800b400 <__malloc_unlock>:
 800b400:	4801      	ldr	r0, [pc, #4]	; (800b408 <__malloc_unlock+0x8>)
 800b402:	f7ff bafc 	b.w	800a9fe <__retarget_lock_release_recursive>
 800b406:	bf00      	nop
 800b408:	20001e84 	.word	0x20001e84

0800b40c <_realloc_r>:
 800b40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b410:	4680      	mov	r8, r0
 800b412:	4614      	mov	r4, r2
 800b414:	460e      	mov	r6, r1
 800b416:	b921      	cbnz	r1, 800b422 <_realloc_r+0x16>
 800b418:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b41c:	4611      	mov	r1, r2
 800b41e:	f7ff bbc1 	b.w	800aba4 <_malloc_r>
 800b422:	b92a      	cbnz	r2, 800b430 <_realloc_r+0x24>
 800b424:	f7ff fb52 	bl	800aacc <_free_r>
 800b428:	4625      	mov	r5, r4
 800b42a:	4628      	mov	r0, r5
 800b42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b430:	f000 f82e 	bl	800b490 <_malloc_usable_size_r>
 800b434:	4284      	cmp	r4, r0
 800b436:	4607      	mov	r7, r0
 800b438:	d802      	bhi.n	800b440 <_realloc_r+0x34>
 800b43a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b43e:	d812      	bhi.n	800b466 <_realloc_r+0x5a>
 800b440:	4621      	mov	r1, r4
 800b442:	4640      	mov	r0, r8
 800b444:	f7ff fbae 	bl	800aba4 <_malloc_r>
 800b448:	4605      	mov	r5, r0
 800b44a:	2800      	cmp	r0, #0
 800b44c:	d0ed      	beq.n	800b42a <_realloc_r+0x1e>
 800b44e:	42bc      	cmp	r4, r7
 800b450:	4622      	mov	r2, r4
 800b452:	4631      	mov	r1, r6
 800b454:	bf28      	it	cs
 800b456:	463a      	movcs	r2, r7
 800b458:	f7fe fee6 	bl	800a228 <memcpy>
 800b45c:	4631      	mov	r1, r6
 800b45e:	4640      	mov	r0, r8
 800b460:	f7ff fb34 	bl	800aacc <_free_r>
 800b464:	e7e1      	b.n	800b42a <_realloc_r+0x1e>
 800b466:	4635      	mov	r5, r6
 800b468:	e7df      	b.n	800b42a <_realloc_r+0x1e>
	...

0800b46c <_read_r>:
 800b46c:	b538      	push	{r3, r4, r5, lr}
 800b46e:	4d07      	ldr	r5, [pc, #28]	; (800b48c <_read_r+0x20>)
 800b470:	4604      	mov	r4, r0
 800b472:	4608      	mov	r0, r1
 800b474:	4611      	mov	r1, r2
 800b476:	2200      	movs	r2, #0
 800b478:	602a      	str	r2, [r5, #0]
 800b47a:	461a      	mov	r2, r3
 800b47c:	f7f7 f938 	bl	80026f0 <_read>
 800b480:	1c43      	adds	r3, r0, #1
 800b482:	d102      	bne.n	800b48a <_read_r+0x1e>
 800b484:	682b      	ldr	r3, [r5, #0]
 800b486:	b103      	cbz	r3, 800b48a <_read_r+0x1e>
 800b488:	6023      	str	r3, [r4, #0]
 800b48a:	bd38      	pop	{r3, r4, r5, pc}
 800b48c:	20001e90 	.word	0x20001e90

0800b490 <_malloc_usable_size_r>:
 800b490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b494:	1f18      	subs	r0, r3, #4
 800b496:	2b00      	cmp	r3, #0
 800b498:	bfbc      	itt	lt
 800b49a:	580b      	ldrlt	r3, [r1, r0]
 800b49c:	18c0      	addlt	r0, r0, r3
 800b49e:	4770      	bx	lr

0800b4a0 <_init>:
 800b4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4a2:	bf00      	nop
 800b4a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4a6:	bc08      	pop	{r3}
 800b4a8:	469e      	mov	lr, r3
 800b4aa:	4770      	bx	lr

0800b4ac <_fini>:
 800b4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ae:	bf00      	nop
 800b4b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4b2:	bc08      	pop	{r3}
 800b4b4:	469e      	mov	lr, r3
 800b4b6:	4770      	bx	lr

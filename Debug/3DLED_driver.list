
3DLED_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  0800895c  0800895c  0001895c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bac  08008bac  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08008bac  08008bac  00018bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bb4  08008bb4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bb4  08008bb4  00018bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bb8  08008bb8  00018bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eac  20000088  08008c44  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f34  08008c44  00020f34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b8a  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e4a  00000000  00000000  00034c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  00037a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  00038cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f2b  00000000  00000000  00039dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a6c  00000000  00000000  00052cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000915c7  00000000  00000000  0006a75f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fbd26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005070  00000000  00000000  000fbd78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008944 	.word	0x08008944

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08008944 	.word	0x08008944

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	f6ad 2d1c 	subw	sp, sp, #2588	; 0xa1c
 800059a:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	Layer1.timer = &htim1;
 800059c:	4bb0      	ldr	r3, [pc, #704]	; (8000860 <main+0x2cc>)
 800059e:	4ab1      	ldr	r2, [pc, #708]	; (8000864 <main+0x2d0>)
 80005a0:	601a      	str	r2, [r3, #0]
	Layer1.dma = &hdma_tim1_ch1;
 80005a2:	4baf      	ldr	r3, [pc, #700]	; (8000860 <main+0x2cc>)
 80005a4:	4ab0      	ldr	r2, [pc, #704]	; (8000868 <main+0x2d4>)
 80005a6:	605a      	str	r2, [r3, #4]
	Layer1.channel = TIM_CHANNEL_1;
 80005a8:	4bad      	ldr	r3, [pc, #692]	; (8000860 <main+0x2cc>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	721a      	strb	r2, [r3, #8]

	Layer2.timer = &htim5;
 80005ae:	4baf      	ldr	r3, [pc, #700]	; (800086c <main+0x2d8>)
 80005b0:	4aaf      	ldr	r2, [pc, #700]	; (8000870 <main+0x2dc>)
 80005b2:	601a      	str	r2, [r3, #0]
	Layer2.dma = &hdma_tim5_ch1;
 80005b4:	4bad      	ldr	r3, [pc, #692]	; (800086c <main+0x2d8>)
 80005b6:	4aaf      	ldr	r2, [pc, #700]	; (8000874 <main+0x2e0>)
 80005b8:	605a      	str	r2, [r3, #4]
	Layer2.channel = TIM_CHANNEL_4;
 80005ba:	4bac      	ldr	r3, [pc, #688]	; (800086c <main+0x2d8>)
 80005bc:	220c      	movs	r2, #12
 80005be:	721a      	strb	r2, [r3, #8]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005c0:	f001 fa24 	bl	8001a0c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005c4:	f000 f95c 	bl	8000880 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005c8:	f000 fb72 	bl	8000cb0 <MX_GPIO_Init>
	MX_DMA_Init();
 80005cc:	f000 fb3a 	bl	8000c44 <MX_DMA_Init>
	MX_TIM1_Init();
 80005d0:	f000 f9f8 	bl	80009c4 <MX_TIM1_Init>
	MX_TIM5_Init();
 80005d4:	f000 fa96 	bl	8000b04 <MX_TIM5_Init>
	MX_FATFS_Init();
 80005d8:	f004 fd4e 	bl	8005078 <MX_FATFS_Init>
	MX_SPI1_Init();
 80005dc:	f000 f9bc 	bl	8000958 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 80005e0:	f000 fb06 	bl	8000bf0 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	ret_status result = STATUS_NULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	f887 3a05 	strb.w	r3, [r7, #2565]	; 0xa05
	sd_card_init();
 80005ea:	f000 fd29 	bl	8001040 <sd_card_init>
	char buff[256];
	strcpy(buff, "0:/");
 80005ee:	f607 1304 	addw	r3, r7, #2308	; 0x904
 80005f2:	4aa1      	ldr	r2, [pc, #644]	; (8000878 <main+0x2e4>)
 80005f4:	601a      	str	r2, [r3, #0]
//	sd_card_scan_file(buff);

	uint8_t walk_array[3][256][3] = {0};
 80005f6:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80005fa:	f6a3 230c 	subw	r3, r3, #2572	; 0xa0c
 80005fe:	4618      	mov	r0, r3
 8000600:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000604:	461a      	mov	r2, r3
 8000606:	2100      	movs	r1, #0
 8000608:	f007 fcec 	bl	8007fe4 <memset>
	result = sd_card_read_data((uint8_t *)walk_array);
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	4618      	mov	r0, r3
 8000610:	f000 fd8c 	bl	800112c <sd_card_read_data>
 8000614:	4603      	mov	r3, r0
 8000616:	f887 3a05 	strb.w	r3, [r7, #2565]	; 0xa05

	sd_card_close();
 800061a:	f000 fd71 	bl	8001100 <sd_card_close>

	if(STATUS_OK != result)
 800061e:	f897 3a05 	ldrb.w	r3, [r7, #2565]	; 0xa05
 8000622:	2b01      	cmp	r3, #1
 8000624:	d000      	beq.n	8000628 <main+0x94>
		while(1);
 8000626:	e7fe      	b.n	8000626 <main+0x92>

	for (size_t i = 0; i < 256; i++)
 8000628:	2300      	movs	r3, #0
 800062a:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
 800062e:	e02e      	b.n	800068e <main+0xfa>
	{
		myprintf("{%d, %d, %d},", walk_array[0][i][0], walk_array[0][i][1], walk_array[0][i][2]);
 8000630:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8000634:	f6a3 210c 	subw	r1, r3, #2572	; 0xa0c
 8000638:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 800063c:	4613      	mov	r3, r2
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	4413      	add	r3, r2
 8000642:	440b      	add	r3, r1
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	4618      	mov	r0, r3
 8000648:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 800064c:	f6a3 210c 	subw	r1, r3, #2572	; 0xa0c
 8000650:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 8000654:	4613      	mov	r3, r2
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	4413      	add	r3, r2
 800065a:	440b      	add	r3, r1
 800065c:	3301      	adds	r3, #1
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	461c      	mov	r4, r3
 8000662:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8000666:	f6a3 210c 	subw	r1, r3, #2572	; 0xa0c
 800066a:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 800066e:	4613      	mov	r3, r2
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	4413      	add	r3, r2
 8000674:	440b      	add	r3, r1
 8000676:	3302      	adds	r3, #2
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	4622      	mov	r2, r4
 800067c:	4601      	mov	r1, r0
 800067e:	487f      	ldr	r0, [pc, #508]	; (800087c <main+0x2e8>)
 8000680:	f000 fcb8 	bl	8000ff4 <myprintf>
	for (size_t i = 0; i < 256; i++)
 8000684:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	; 0xa0c
 8000688:	3301      	adds	r3, #1
 800068a:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
 800068e:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	; 0xa0c
 8000692:	2bff      	cmp	r3, #255	; 0xff
 8000694:	d9cc      	bls.n	8000630 <main+0x9c>
	}


	uint8_t odd = 1;
 8000696:	2301      	movs	r3, #1
 8000698:	f887 3a0b 	strb.w	r3, [r7, #2571]	; 0xa0b
	uint8_t index = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	f887 3a0a 	strb.w	r3, [r7, #2570]	; 0xa0a
	uint8_t counter = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	f887 3a09 	strb.w	r3, [r7, #2569]	; 0xa09
	uint8_t number_of_animation = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	f887 3a08 	strb.w	r3, [r7, #2568]	; 0xa08
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		for (uint16_t i = 0; i < 256; i++) {
 80006ae:	2300      	movs	r3, #0
 80006b0:	f8a7 3a06 	strh.w	r3, [r7, #2566]	; 0xa06
 80006b4:	e0b2      	b.n	800081c <main+0x288>
			if (i % 16 == 0) {
 80006b6:	f8b7 3a06 	ldrh.w	r3, [r7, #2566]	; 0xa06
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	b29b      	uxth	r3, r3
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d10a      	bne.n	80006da <main+0x146>
				odd ^= 1;
 80006c4:	f897 3a0b 	ldrb.w	r3, [r7, #2571]	; 0xa0b
 80006c8:	f083 0301 	eor.w	r3, r3, #1
 80006cc:	f887 3a0b 	strb.w	r3, [r7, #2571]	; 0xa0b
				counter++;
 80006d0:	f897 3a09 	ldrb.w	r3, [r7, #2569]	; 0xa09
 80006d4:	3301      	adds	r3, #1
 80006d6:	f887 3a09 	strb.w	r3, [r7, #2569]	; 0xa09
			}
			if (odd) {
 80006da:	f897 3a0b 	ldrb.w	r3, [r7, #2571]	; 0xa0b
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d00f      	beq.n	8000702 <main+0x16e>
				index = (counter * 16 - 1) - (i % 16);
 80006e2:	f897 3a09 	ldrb.w	r3, [r7, #2569]	; 0xa09
 80006e6:	011b      	lsls	r3, r3, #4
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	f8b7 3a06 	ldrh.w	r3, [r7, #2566]	; 0xa06
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	f003 030f 	and.w	r3, r3, #15
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	3b01      	subs	r3, #1
 80006fc:	f887 3a0a 	strb.w	r3, [r7, #2570]	; 0xa0a
 8000700:	e003      	b.n	800070a <main+0x176>
			} else {
				index = i;
 8000702:	f8b7 3a06 	ldrh.w	r3, [r7, #2566]	; 0xa06
 8000706:	f887 3a0a 	strb.w	r3, [r7, #2570]	; 0xa0a
			}

			led_set_RGB(&Layer1, i, walk_array[number_of_animation][index][0],
 800070a:	f8b7 3a06 	ldrh.w	r3, [r7, #2566]	; 0xa06
 800070e:	b2dc      	uxtb	r4, r3
 8000710:	f897 1a08 	ldrb.w	r1, [r7, #2568]	; 0xa08
 8000714:	f897 3a0a 	ldrb.w	r3, [r7, #2570]	; 0xa0a
 8000718:	f507 6221 	add.w	r2, r7, #2576	; 0xa10
 800071c:	f6a2 200c 	subw	r0, r2, #2572	; 0xa0c
 8000720:	461a      	mov	r2, r3
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	441a      	add	r2, r3
 8000726:	460b      	mov	r3, r1
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	440b      	add	r3, r1
 800072c:	021b      	lsls	r3, r3, #8
 800072e:	4413      	add	r3, r2
 8000730:	4403      	add	r3, r0
 8000732:	781d      	ldrb	r5, [r3, #0]
 8000734:	f897 1a08 	ldrb.w	r1, [r7, #2568]	; 0xa08
 8000738:	f897 3a0a 	ldrb.w	r3, [r7, #2570]	; 0xa0a
 800073c:	f507 6221 	add.w	r2, r7, #2576	; 0xa10
 8000740:	f6a2 200c 	subw	r0, r2, #2572	; 0xa0c
 8000744:	461a      	mov	r2, r3
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	441a      	add	r2, r3
 800074a:	460b      	mov	r3, r1
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	440b      	add	r3, r1
 8000750:	021b      	lsls	r3, r3, #8
 8000752:	4413      	add	r3, r2
 8000754:	4403      	add	r3, r0
 8000756:	3301      	adds	r3, #1
 8000758:	781e      	ldrb	r6, [r3, #0]
 800075a:	f897 1a08 	ldrb.w	r1, [r7, #2568]	; 0xa08
 800075e:	f897 3a0a 	ldrb.w	r3, [r7, #2570]	; 0xa0a
 8000762:	f507 6221 	add.w	r2, r7, #2576	; 0xa10
 8000766:	f6a2 200c 	subw	r0, r2, #2572	; 0xa0c
 800076a:	461a      	mov	r2, r3
 800076c:	0052      	lsls	r2, r2, #1
 800076e:	441a      	add	r2, r3
 8000770:	460b      	mov	r3, r1
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	440b      	add	r3, r1
 8000776:	021b      	lsls	r3, r3, #8
 8000778:	4413      	add	r3, r2
 800077a:	4403      	add	r3, r0
 800077c:	3302      	adds	r3, #2
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	4633      	mov	r3, r6
 8000784:	462a      	mov	r2, r5
 8000786:	4621      	mov	r1, r4
 8000788:	4835      	ldr	r0, [pc, #212]	; (8000860 <main+0x2cc>)
 800078a:	f001 f811 	bl	80017b0 <led_set_RGB>
					walk_array[number_of_animation][index][1],
					walk_array[number_of_animation][index][2]);
			led_set_RGB(&Layer2, i, walk_array[number_of_animation][index][0],
 800078e:	f8b7 3a06 	ldrh.w	r3, [r7, #2566]	; 0xa06
 8000792:	b2dc      	uxtb	r4, r3
 8000794:	f897 1a08 	ldrb.w	r1, [r7, #2568]	; 0xa08
 8000798:	f897 3a0a 	ldrb.w	r3, [r7, #2570]	; 0xa0a
 800079c:	f507 6221 	add.w	r2, r7, #2576	; 0xa10
 80007a0:	f6a2 200c 	subw	r0, r2, #2572	; 0xa0c
 80007a4:	461a      	mov	r2, r3
 80007a6:	0052      	lsls	r2, r2, #1
 80007a8:	441a      	add	r2, r3
 80007aa:	460b      	mov	r3, r1
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	440b      	add	r3, r1
 80007b0:	021b      	lsls	r3, r3, #8
 80007b2:	4413      	add	r3, r2
 80007b4:	4403      	add	r3, r0
 80007b6:	781d      	ldrb	r5, [r3, #0]
 80007b8:	f897 1a08 	ldrb.w	r1, [r7, #2568]	; 0xa08
 80007bc:	f897 3a0a 	ldrb.w	r3, [r7, #2570]	; 0xa0a
 80007c0:	f507 6221 	add.w	r2, r7, #2576	; 0xa10
 80007c4:	f6a2 200c 	subw	r0, r2, #2572	; 0xa0c
 80007c8:	461a      	mov	r2, r3
 80007ca:	0052      	lsls	r2, r2, #1
 80007cc:	441a      	add	r2, r3
 80007ce:	460b      	mov	r3, r1
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	440b      	add	r3, r1
 80007d4:	021b      	lsls	r3, r3, #8
 80007d6:	4413      	add	r3, r2
 80007d8:	4403      	add	r3, r0
 80007da:	3301      	adds	r3, #1
 80007dc:	781e      	ldrb	r6, [r3, #0]
 80007de:	f897 1a08 	ldrb.w	r1, [r7, #2568]	; 0xa08
 80007e2:	f897 3a0a 	ldrb.w	r3, [r7, #2570]	; 0xa0a
 80007e6:	f507 6221 	add.w	r2, r7, #2576	; 0xa10
 80007ea:	f6a2 200c 	subw	r0, r2, #2572	; 0xa0c
 80007ee:	461a      	mov	r2, r3
 80007f0:	0052      	lsls	r2, r2, #1
 80007f2:	441a      	add	r2, r3
 80007f4:	460b      	mov	r3, r1
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	440b      	add	r3, r1
 80007fa:	021b      	lsls	r3, r3, #8
 80007fc:	4413      	add	r3, r2
 80007fe:	4403      	add	r3, r0
 8000800:	3302      	adds	r3, #2
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	4633      	mov	r3, r6
 8000808:	462a      	mov	r2, r5
 800080a:	4621      	mov	r1, r4
 800080c:	4817      	ldr	r0, [pc, #92]	; (800086c <main+0x2d8>)
 800080e:	f000 ffcf 	bl	80017b0 <led_set_RGB>
		for (uint16_t i = 0; i < 256; i++) {
 8000812:	f8b7 3a06 	ldrh.w	r3, [r7, #2566]	; 0xa06
 8000816:	3301      	adds	r3, #1
 8000818:	f8a7 3a06 	strh.w	r3, [r7, #2566]	; 0xa06
 800081c:	f8b7 3a06 	ldrh.w	r3, [r7, #2566]	; 0xa06
 8000820:	2bff      	cmp	r3, #255	; 0xff
 8000822:	f67f af48 	bls.w	80006b6 <main+0x122>
//			led_set_RGB(&Layer4, i, walk_array[number_of_animation][index][0],
//					walk_array[number_of_animation][index][1],
//					walk_array[number_of_animation][index][2]);

		}
		if (++number_of_animation == sizeof(walk_array) / sizeof(walk_array[0]))
 8000826:	f897 3a08 	ldrb.w	r3, [r7, #2568]	; 0xa08
 800082a:	3301      	adds	r3, #1
 800082c:	f887 3a08 	strb.w	r3, [r7, #2568]	; 0xa08
 8000830:	f897 3a08 	ldrb.w	r3, [r7, #2568]	; 0xa08
 8000834:	2b03      	cmp	r3, #3
 8000836:	d102      	bne.n	800083e <main+0x2aa>
			number_of_animation = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	f887 3a08 	strb.w	r3, [r7, #2568]	; 0xa08

		led_render(&Layer1);
 800083e:	4808      	ldr	r0, [pc, #32]	; (8000860 <main+0x2cc>)
 8000840:	f000 ffed 	bl	800181e <led_render>
		HAL_Delay(10);
 8000844:	200a      	movs	r0, #10
 8000846:	f001 f953 	bl	8001af0 <HAL_Delay>
		led_render(&Layer2);
 800084a:	4808      	ldr	r0, [pc, #32]	; (800086c <main+0x2d8>)
 800084c:	f000 ffe7 	bl	800181e <led_render>
		HAL_Delay(10);
 8000850:	200a      	movs	r0, #10
 8000852:	f001 f94d 	bl	8001af0 <HAL_Delay>
//		led_render(&Layer3);
//		HAL_Delay(10);
//		led_render(&Layer4);
		HAL_Delay(500);
 8000856:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800085a:	f001 f949 	bl	8001af0 <HAL_Delay>
		for (uint16_t i = 0; i < 256; i++) {
 800085e:	e726      	b.n	80006ae <main+0x11a>
 8000860:	20000290 	.word	0x20000290
 8000864:	200000fc 	.word	0x200000fc
 8000868:	2000018c 	.word	0x2000018c
 800086c:	20000600 	.word	0x20000600
 8000870:	20000144 	.word	0x20000144
 8000874:	200001ec 	.word	0x200001ec
 8000878:	002f3a30 	.word	0x002f3a30
 800087c:	0800895c 	.word	0x0800895c

08000880 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b094      	sub	sp, #80	; 0x50
 8000884:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2230      	movs	r2, #48	; 0x30
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f007 fba8 	bl	8007fe4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80008a4:	2300      	movs	r3, #0
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	4b29      	ldr	r3, [pc, #164]	; (8000950 <SystemClock_Config+0xd0>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	4a28      	ldr	r2, [pc, #160]	; (8000950 <SystemClock_Config+0xd0>)
 80008ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b2:	6413      	str	r3, [r2, #64]	; 0x40
 80008b4:	4b26      	ldr	r3, [pc, #152]	; (8000950 <SystemClock_Config+0xd0>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	4b23      	ldr	r3, [pc, #140]	; (8000954 <SystemClock_Config+0xd4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008cc:	4a21      	ldr	r2, [pc, #132]	; (8000954 <SystemClock_Config+0xd4>)
 80008ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <SystemClock_Config+0xd4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e4:	2301      	movs	r3, #1
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e8:	2310      	movs	r3, #16
 80008ea:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ec:	2302      	movs	r3, #2
 80008ee:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f0:	2300      	movs	r3, #0
 80008f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80008f4:	2308      	movs	r3, #8
 80008f6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 80008f8:	2354      	movs	r3, #84	; 0x54
 80008fa:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8000900:	2303      	movs	r3, #3
 8000902:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000904:	f107 0320 	add.w	r3, r7, #32
 8000908:	4618      	mov	r0, r3
 800090a:	f001 ff57 	bl	80027bc <HAL_RCC_OscConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0x98>
		Error_Handler();
 8000914:	f000 fb68 	bl	8000fe8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000918:	230f      	movs	r3, #15
 800091a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091c:	2302      	movs	r3, #2
 800091e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000928:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800092a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	2102      	movs	r1, #2
 8000936:	4618      	mov	r0, r3
 8000938:	f002 f9b8 	bl	8002cac <HAL_RCC_ClockConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0xc6>
		Error_Handler();
 8000942:	f000 fb51 	bl	8000fe8 <Error_Handler>
	}
}
 8000946:	bf00      	nop
 8000948:	3750      	adds	r7, #80	; 0x50
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40007000 	.word	0x40007000

08000958 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_SPI1_Init+0x64>)
 800095e:	4a18      	ldr	r2, [pc, #96]	; (80009c0 <MX_SPI1_Init+0x68>)
 8000960:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <MX_SPI1_Init+0x64>)
 8000964:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000968:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_SPI1_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_SPI1_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_SPI1_Init+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_SPI1_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_SPI1_Init+0x64>)
 8000984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000988:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_SPI1_Init+0x64>)
 800098c:	2238      	movs	r2, #56	; 0x38
 800098e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <MX_SPI1_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_SPI1_Init+0x64>)
 8000998:	2200      	movs	r2, #0
 800099a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <MX_SPI1_Init+0x64>)
 800099e:	2200      	movs	r2, #0
 80009a0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_SPI1_Init+0x64>)
 80009a4:	220a      	movs	r2, #10
 80009a6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_SPI1_Init+0x64>)
 80009aa:	f002 fb9f 	bl	80030ec <HAL_SPI_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_SPI1_Init+0x60>
		Error_Handler();
 80009b4:	f000 fb18 	bl	8000fe8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200000a4 	.word	0x200000a4
 80009c0:	40013000 	.word	0x40013000

080009c4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b096      	sub	sp, #88	; 0x58
 80009c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80009ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80009d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80009e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]
 80009f2:	615a      	str	r2, [r3, #20]
 80009f4:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2220      	movs	r2, #32
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f007 faf1 	bl	8007fe4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000a02:	4b3e      	ldr	r3, [pc, #248]	; (8000afc <MX_TIM1_Init+0x138>)
 8000a04:	4a3e      	ldr	r2, [pc, #248]	; (8000b00 <MX_TIM1_Init+0x13c>)
 8000a06:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000a08:	4b3c      	ldr	r3, [pc, #240]	; (8000afc <MX_TIM1_Init+0x138>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0e:	4b3b      	ldr	r3, [pc, #236]	; (8000afc <MX_TIM1_Init+0x138>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 104;
 8000a14:	4b39      	ldr	r3, [pc, #228]	; (8000afc <MX_TIM1_Init+0x138>)
 8000a16:	2268      	movs	r2, #104	; 0x68
 8000a18:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1a:	4b38      	ldr	r3, [pc, #224]	; (8000afc <MX_TIM1_Init+0x138>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000a20:	4b36      	ldr	r3, [pc, #216]	; (8000afc <MX_TIM1_Init+0x138>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a26:	4b35      	ldr	r3, [pc, #212]	; (8000afc <MX_TIM1_Init+0x138>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000a2c:	4833      	ldr	r0, [pc, #204]	; (8000afc <MX_TIM1_Init+0x138>)
 8000a2e:	f002 fe53 	bl	80036d8 <HAL_TIM_Base_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM1_Init+0x78>
		Error_Handler();
 8000a38:	f000 fad6 	bl	8000fe8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a40:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000a42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a46:	4619      	mov	r1, r3
 8000a48:	482c      	ldr	r0, [pc, #176]	; (8000afc <MX_TIM1_Init+0x138>)
 8000a4a:	f003 fa25 	bl	8003e98 <HAL_TIM_ConfigClockSource>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM1_Init+0x94>
		Error_Handler();
 8000a54:	f000 fac8 	bl	8000fe8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000a58:	4828      	ldr	r0, [pc, #160]	; (8000afc <MX_TIM1_Init+0x138>)
 8000a5a:	f002 fe8c 	bl	8003776 <HAL_TIM_PWM_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM1_Init+0xa4>
		Error_Handler();
 8000a64:	f000 fac0 	bl	8000fe8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000a70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a74:	4619      	mov	r1, r3
 8000a76:	4821      	ldr	r0, [pc, #132]	; (8000afc <MX_TIM1_Init+0x138>)
 8000a78:	f003 fe7c 	bl	8004774 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM1_Init+0xc2>
			!= HAL_OK) {
		Error_Handler();
 8000a82:	f000 fab1 	bl	8000fe8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a86:	2360      	movs	r3, #96	; 0x60
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a92:	2300      	movs	r3, #0
 8000a94:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4814      	ldr	r0, [pc, #80]	; (8000afc <MX_TIM1_Init+0x138>)
 8000aac:	f003 f932 	bl	8003d14 <HAL_TIM_PWM_ConfigChannel>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM1_Init+0xf6>
			!= HAL_OK) {
		Error_Handler();
 8000ab6:	f000 fa97 	bl	8000fe8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ace:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad2:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	4619      	mov	r1, r3
 8000adc:	4807      	ldr	r0, [pc, #28]	; (8000afc <MX_TIM1_Init+0x138>)
 8000ade:	f003 feb7 	bl	8004850 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM1_Init+0x128>
			!= HAL_OK) {
		Error_Handler();
 8000ae8:	f000 fa7e 	bl	8000fe8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000aec:	4803      	ldr	r0, [pc, #12]	; (8000afc <MX_TIM1_Init+0x138>)
 8000aee:	f000 fd1d 	bl	800152c <HAL_TIM_MspPostInit>

}
 8000af2:	bf00      	nop
 8000af4:	3758      	adds	r7, #88	; 0x58
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200000fc 	.word	0x200000fc
 8000b00:	40010000 	.word	0x40010000

08000b04 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000b0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b18:	f107 0320 	add.w	r3, r7, #32
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
 8000b30:	615a      	str	r2, [r3, #20]
 8000b32:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8000b34:	4b2c      	ldr	r3, [pc, #176]	; (8000be8 <MX_TIM5_Init+0xe4>)
 8000b36:	4a2d      	ldr	r2, [pc, #180]	; (8000bec <MX_TIM5_Init+0xe8>)
 8000b38:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8000b3a:	4b2b      	ldr	r3, [pc, #172]	; (8000be8 <MX_TIM5_Init+0xe4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b40:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <MX_TIM5_Init+0xe4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 104;
 8000b46:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <MX_TIM5_Init+0xe4>)
 8000b48:	2268      	movs	r2, #104	; 0x68
 8000b4a:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4c:	4b26      	ldr	r3, [pc, #152]	; (8000be8 <MX_TIM5_Init+0xe4>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b52:	4b25      	ldr	r3, [pc, #148]	; (8000be8 <MX_TIM5_Init+0xe4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8000b58:	4823      	ldr	r0, [pc, #140]	; (8000be8 <MX_TIM5_Init+0xe4>)
 8000b5a:	f002 fdbd 	bl	80036d8 <HAL_TIM_Base_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM5_Init+0x64>
		Error_Handler();
 8000b64:	f000 fa40 	bl	8000fe8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8000b6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b72:	4619      	mov	r1, r3
 8000b74:	481c      	ldr	r0, [pc, #112]	; (8000be8 <MX_TIM5_Init+0xe4>)
 8000b76:	f003 f98f 	bl	8003e98 <HAL_TIM_ConfigClockSource>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM5_Init+0x80>
		Error_Handler();
 8000b80:	f000 fa32 	bl	8000fe8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 8000b84:	4818      	ldr	r0, [pc, #96]	; (8000be8 <MX_TIM5_Init+0xe4>)
 8000b86:	f002 fdf6 	bl	8003776 <HAL_TIM_PWM_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM5_Init+0x90>
		Error_Handler();
 8000b90:	f000 fa2a 	bl	8000fe8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b94:	2300      	movs	r3, #0
 8000b96:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8000b9c:	f107 0320 	add.w	r3, r7, #32
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4811      	ldr	r0, [pc, #68]	; (8000be8 <MX_TIM5_Init+0xe4>)
 8000ba4:	f003 fde6 	bl	8004774 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM5_Init+0xae>
			!= HAL_OK) {
		Error_Handler();
 8000bae:	f000 fa1b 	bl	8000fe8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bb2:	2360      	movs	r3, #96	; 0x60
 8000bb4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1)
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4807      	ldr	r0, [pc, #28]	; (8000be8 <MX_TIM5_Init+0xe4>)
 8000bca:	f003 f8a3 	bl	8003d14 <HAL_TIM_PWM_ConfigChannel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM5_Init+0xd4>
			!= HAL_OK) {
		Error_Handler();
 8000bd4:	f000 fa08 	bl	8000fe8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 8000bd8:	4803      	ldr	r0, [pc, #12]	; (8000be8 <MX_TIM5_Init+0xe4>)
 8000bda:	f000 fca7 	bl	800152c <HAL_TIM_MspPostInit>

}
 8000bde:	bf00      	nop
 8000be0:	3738      	adds	r7, #56	; 0x38
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000144 	.word	0x20000144
 8000bec:	40000c00 	.word	0x40000c00

08000bf0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <MX_USART2_UART_Init+0x50>)
 8000bf8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000bfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c00:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c16:	220c      	movs	r2, #12
 8000c18:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c28:	f003 fe64 	bl	80048f4 <HAL_UART_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000c32:	f000 f9d9 	bl	8000fe8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000024c 	.word	0x2000024c
 8000c40:	40004400 	.word	0x40004400

08000c44 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <MX_DMA_Init+0x68>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a16      	ldr	r2, [pc, #88]	; (8000cac <MX_DMA_Init+0x68>)
 8000c54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_DMA_Init+0x68>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	603b      	str	r3, [r7, #0]
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <MX_DMA_Init+0x68>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <MX_DMA_Init+0x68>)
 8000c70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <MX_DMA_Init+0x68>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	200d      	movs	r0, #13
 8000c88:	f001 f831 	bl	8001cee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000c8c:	200d      	movs	r0, #13
 8000c8e:	f001 f84a 	bl	8001d26 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	2039      	movs	r0, #57	; 0x39
 8000c98:	f001 f829 	bl	8001cee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000c9c:	2039      	movs	r0, #57	; 0x39
 8000c9e:	f001 f842 	bl	8001d26 <HAL_NVIC_EnableIRQ>

}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800

08000cb0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_GPIO_Init+0x60>)
 8000cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ccc:	4a10      	ldr	r2, [pc, #64]	; (8000d10 <MX_GPIO_Init+0x60>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MX_GPIO_Init+0x60>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ce6:	480b      	ldr	r0, [pc, #44]	; (8000d14 <MX_GPIO_Init+0x64>)
 8000ce8:	f001 fd4e 	bl	8002788 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SD_CS_Pin */
	GPIO_InitStruct.Pin = SD_CS_Pin;
 8000cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	4619      	mov	r1, r3
 8000d02:	4804      	ldr	r0, [pc, #16]	; (8000d14 <MX_GPIO_Init+0x64>)
 8000d04:	f001 fbbc 	bl	8002480 <HAL_GPIO_Init>

}
 8000d08:	bf00      	nop
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020000 	.word	0x40020000

08000d18 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

	return (((uint32_t) r + m) << 16) | (((uint32_t) g + m) << 8)
			| ((uint32_t) b + m);
}

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8000d18:	b480      	push	{r7}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]

	Layers *layer;

	if (htim == &htim1) {
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a50      	ldr	r2, [pc, #320]	; (8000e64 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x14c>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d102      	bne.n	8000d2e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
		layer = &Layer1;
 8000d28:	4b4f      	ldr	r3, [pc, #316]	; (8000e68 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x150>)
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	e006      	b.n	8000d3c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x24>
	} else if (htim == &htim5) {
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a4e      	ldr	r2, [pc, #312]	; (8000e6c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x154>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	f040 808f 	bne.w	8000e56 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x13e>
		layer = &Layer2;
 8000d38:	4b4d      	ldr	r3, [pc, #308]	; (8000e70 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x158>)
 8000d3a:	617b      	str	r3, [r7, #20]
//		layer = &Layer4;
	} else
		return;

	// DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
	if (layer->wr_buf_p < NUM_PIXELS) {
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8000d42:	2bff      	cmp	r3, #255	; 0xff
 8000d44:	d868      	bhi.n	8000e18 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x100>
		// We're in. Fill the even buffer
		for (uint_fast8_t i = 0; i < 8; ++i) {
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	e05a      	b.n	8000e02 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xea>
			layer->wr_buf[i] =
			PWM_LO << (((layer->rgb_arr[3 * layer->wr_buf_p] << i) & 0x80) > 0);
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 8000d52:	4613      	mov	r3, r2
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	4413      	add	r3, r2
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	7a5b      	ldrb	r3, [r3, #9]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
			layer->wr_buf[i] =
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	dd01      	ble.n	8000d72 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x5a>
 8000d6e:	2142      	movs	r1, #66	; 0x42
 8000d70:	e000      	b.n	8000d74 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x5c>
 8000d72:	2121      	movs	r1, #33	; 0x21
 8000d74:	697a      	ldr	r2, [r7, #20]
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	4413      	add	r3, r2
 8000d80:	460a      	mov	r2, r1
 8000d82:	805a      	strh	r2, [r3, #2]
			layer->wr_buf[i + 8] = PWM_LO
					<< (((layer->rgb_arr[3 * layer->wr_buf_p + 1] << i) & 0x80)
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	4413      	add	r3, r2
 8000d90:	3301      	adds	r3, #1
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	4413      	add	r3, r2
 8000d96:	7a5b      	ldrb	r3, [r3, #9]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
			layer->wr_buf[i + 8] = PWM_LO
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	dd01      	ble.n	8000dac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x94>
 8000da8:	2142      	movs	r1, #66	; 0x42
 8000daa:	e000      	b.n	8000dae <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 8000dac:	2121      	movs	r1, #33	; 0x21
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	3308      	adds	r3, #8
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	4413      	add	r3, r2
 8000dbc:	460a      	mov	r2, r1
 8000dbe:	805a      	strh	r2, [r3, #2]
							> 0);
			layer->wr_buf[i + 16] = PWM_LO
					<< (((layer->rgb_arr[3 * layer->wr_buf_p + 2] << i) & 0x80)
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	4413      	add	r3, r2
 8000dcc:	3302      	adds	r3, #2
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	7a5b      	ldrb	r3, [r3, #9]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
			layer->wr_buf[i + 16] = PWM_LO
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	dd01      	ble.n	8000de8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd0>
 8000de4:	2142      	movs	r1, #66	; 0x42
 8000de6:	e000      	b.n	8000dea <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd2>
 8000de8:	2121      	movs	r1, #33	; 0x21
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	3310      	adds	r3, #16
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4413      	add	r3, r2
 8000df8:	460a      	mov	r2, r1
 8000dfa:	805a      	strh	r2, [r3, #2]
		for (uint_fast8_t i = 0; i < 8; ++i) {
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	2b07      	cmp	r3, #7
 8000e06:	d9a1      	bls.n	8000d4c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x34>
							> 0);
		}
		layer->wr_buf_p++;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 8000e16:	e01f      	b.n	8000e58 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x140>
	} else if (layer->wr_buf_p < NUM_PIXELS + 2) {
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8000e1e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8000e22:	d219      	bcs.n	8000e58 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x140>
		// Last two transfers are resets.
		//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
		// First half reset zero fill
		for (uint8_t i = 0; i < WR_BUF_LEN / 2; ++i)
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]
 8000e28:	e00a      	b.n	8000e40 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x128>
			layer->wr_buf[i] = 0;
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4413      	add	r3, r2
 8000e36:	2200      	movs	r2, #0
 8000e38:	805a      	strh	r2, [r3, #2]
		for (uint8_t i = 0; i < WR_BUF_LEN / 2; ++i)
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	73fb      	strb	r3, [r7, #15]
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	2b17      	cmp	r3, #23
 8000e44:	d9f1      	bls.n	8000e2a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x112>
		layer->wr_buf_p++;
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8000e4c:	1c5a      	adds	r2, r3, #1
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 8000e54:	e000      	b.n	8000e58 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x140>
		return;
 8000e56:	bf00      	nop
	}
}
 8000e58:	371c      	adds	r7, #28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	200000fc 	.word	0x200000fc
 8000e68:	20000290 	.word	0x20000290
 8000e6c:	20000144 	.word	0x20000144
 8000e70:	20000600 	.word	0x20000600

08000e74 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

	Layers *layer;

	if (htim == &htim1) {
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a56      	ldr	r2, [pc, #344]	; (8000fd8 <HAL_TIM_PWM_PulseFinishedCallback+0x164>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d102      	bne.n	8000e8a <HAL_TIM_PWM_PulseFinishedCallback+0x16>
		layer = &Layer1;
 8000e84:	4b55      	ldr	r3, [pc, #340]	; (8000fdc <HAL_TIM_PWM_PulseFinishedCallback+0x168>)
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	e006      	b.n	8000e98 <HAL_TIM_PWM_PulseFinishedCallback+0x24>
	} else if (htim == &htim5) {
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a54      	ldr	r2, [pc, #336]	; (8000fe0 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	f040 809d 	bne.w	8000fce <HAL_TIM_PWM_PulseFinishedCallback+0x15a>
		layer = &Layer2;
 8000e94:	4b53      	ldr	r3, [pc, #332]	; (8000fe4 <HAL_TIM_PWM_PulseFinishedCallback+0x170>)
 8000e96:	617b      	str	r3, [r7, #20]
//		layer = &Layer4;
	} else
		return;

	// DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
	if (layer->wr_buf_p < NUM_PIXELS) {
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8000e9e:	2bff      	cmp	r3, #255	; 0xff
 8000ea0:	d869      	bhi.n	8000f76 <HAL_TIM_PWM_PulseFinishedCallback+0x102>
		// We're in. Fill the odd buffer
		for (uint_fast8_t i = 0; i < 8; ++i) {
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	e05b      	b.n	8000f60 <HAL_TIM_PWM_PulseFinishedCallback+0xec>
			layer->wr_buf[i + 24] =
			PWM_LO << (((layer->rgb_arr[3 * layer->wr_buf_p] << i) & 0x80) > 0);
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 8000eae:	4613      	mov	r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	4413      	add	r3, r2
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	7a5b      	ldrb	r3, [r3, #9]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
			layer->wr_buf[i + 24] =
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	dd01      	ble.n	8000ece <HAL_TIM_PWM_PulseFinishedCallback+0x5a>
 8000eca:	2142      	movs	r1, #66	; 0x42
 8000ecc:	e000      	b.n	8000ed0 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>
 8000ece:	2121      	movs	r1, #33	; 0x21
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	3318      	adds	r3, #24
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4413      	add	r3, r2
 8000ede:	460a      	mov	r2, r1
 8000ee0:	805a      	strh	r2, [r3, #2]
			layer->wr_buf[i + 32] = PWM_LO
					<< (((layer->rgb_arr[3 * layer->wr_buf_p + 1] << i) & 0x80)
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 8000ee8:	4613      	mov	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	4413      	add	r3, r2
 8000eee:	3301      	adds	r3, #1
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	7a5b      	ldrb	r3, [r3, #9]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
			layer->wr_buf[i + 32] = PWM_LO
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	dd01      	ble.n	8000f0a <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 8000f06:	2142      	movs	r1, #66	; 0x42
 8000f08:	e000      	b.n	8000f0c <HAL_TIM_PWM_PulseFinishedCallback+0x98>
 8000f0a:	2121      	movs	r1, #33	; 0x21
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	3320      	adds	r3, #32
 8000f10:	697a      	ldr	r2, [r7, #20]
 8000f12:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	4413      	add	r3, r2
 8000f1a:	460a      	mov	r2, r1
 8000f1c:	805a      	strh	r2, [r3, #2]
							> 0);
			layer->wr_buf[i + 40] = PWM_LO
					<< (((layer->rgb_arr[3 * layer->wr_buf_p + 2] << i) & 0x80)
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 8000f24:	4613      	mov	r3, r2
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	4413      	add	r3, r2
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	4413      	add	r3, r2
 8000f30:	7a5b      	ldrb	r3, [r3, #9]
 8000f32:	461a      	mov	r2, r3
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
			layer->wr_buf[i + 40] = PWM_LO
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	dd01      	ble.n	8000f46 <HAL_TIM_PWM_PulseFinishedCallback+0xd2>
 8000f42:	2142      	movs	r1, #66	; 0x42
 8000f44:	e000      	b.n	8000f48 <HAL_TIM_PWM_PulseFinishedCallback+0xd4>
 8000f46:	2121      	movs	r1, #33	; 0x21
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	3328      	adds	r3, #40	; 0x28
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4413      	add	r3, r2
 8000f56:	460a      	mov	r2, r1
 8000f58:	805a      	strh	r2, [r3, #2]
		for (uint_fast8_t i = 0; i < 8; ++i) {
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	2b07      	cmp	r3, #7
 8000f64:	d9a0      	bls.n	8000ea8 <HAL_TIM_PWM_PulseFinishedCallback+0x34>
							> 0);
		}

		layer->wr_buf_p++;
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8000f6c:	1c5a      	adds	r2, r3, #1
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 8000f74:	e02c      	b.n	8000fd0 <HAL_TIM_PWM_PulseFinishedCallback+0x15c>

	} else if (layer->wr_buf_p < NUM_PIXELS + 2) {
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8000f7c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8000f80:	d218      	bcs.n	8000fb4 <HAL_TIM_PWM_PulseFinishedCallback+0x140>
		// Second half reset zero fill
		for (uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i)
 8000f82:	2318      	movs	r3, #24
 8000f84:	73fb      	strb	r3, [r7, #15]
 8000f86:	e00a      	b.n	8000f9e <HAL_TIM_PWM_PulseFinishedCallback+0x12a>
			layer->wr_buf[i] = 0;
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4413      	add	r3, r2
 8000f94:	2200      	movs	r2, #0
 8000f96:	805a      	strh	r2, [r3, #2]
		for (uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i)
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	73fb      	strb	r3, [r7, #15]
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	2b2f      	cmp	r3, #47	; 0x2f
 8000fa2:	d9f1      	bls.n	8000f88 <HAL_TIM_PWM_PulseFinishedCallback+0x114>
		++layer->wr_buf_p;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8000faa:	1c5a      	adds	r2, r3, #1
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 8000fb2:	e00d      	b.n	8000fd0 <HAL_TIM_PWM_PulseFinishedCallback+0x15c>
	} else {
		// We're done. Lean back and until next time!
		layer->wr_buf_p = 0;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
		HAL_TIM_PWM_Stop_DMA(layer->timer, layer->channel);
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	7a1b      	ldrb	r3, [r3, #8]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	f002 fdde 	bl	8003b88 <HAL_TIM_PWM_Stop_DMA>
 8000fcc:	e000      	b.n	8000fd0 <HAL_TIM_PWM_PulseFinishedCallback+0x15c>
		return;
 8000fce:	bf00      	nop
	}
}
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200000fc 	.word	0x200000fc
 8000fdc:	20000290 	.word	0x20000290
 8000fe0:	20000144 	.word	0x20000144
 8000fe4:	20000600 	.word	0x20000600

08000fe8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fec:	b672      	cpsid	i
}
 8000fee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ff0:	e7fe      	b.n	8000ff0 <Error_Handler+0x8>
	...

08000ff4 <myprintf>:
#include "fatfs.h"

extern SPI_HandleTypeDef hspi1;
extern UART_HandleTypeDef huart2;

void myprintf(const char *fmt, ...) {
 8000ff4:	b40f      	push	{r0, r1, r2, r3}
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	f44f 7180 	mov.w	r1, #256	; 0x100
 800100a:	480b      	ldr	r0, [pc, #44]	; (8001038 <myprintf+0x44>)
 800100c:	f007 f83e 	bl	800808c <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 8001010:	4809      	ldr	r0, [pc, #36]	; (8001038 <myprintf+0x44>)
 8001012:	f7ff f8e5 	bl	80001e0 <strlen>
 8001016:	4603      	mov	r3, r0
 8001018:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) buffer, len, -1);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	b29a      	uxth	r2, r3
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	4905      	ldr	r1, [pc, #20]	; (8001038 <myprintf+0x44>)
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <myprintf+0x48>)
 8001026:	f003 fcb2 	bl	800498e <HAL_UART_Transmit>

}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001034:	b004      	add	sp, #16
 8001036:	4770      	bx	lr
 8001038:	20000dd4 	.word	0x20000dd4
 800103c:	2000024c 	.word	0x2000024c

08001040 <sd_card_init>:
FATFS FatFs; 	//Fatfs handle
FIL fil; 		//File handle
FRESULT fres; //Result after operations

ret_status sd_card_init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
	myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 8001046:	4827      	ldr	r0, [pc, #156]	; (80010e4 <sd_card_init+0xa4>)
 8001048:	f7ff ffd4 	bl	8000ff4 <myprintf>

	HAL_Delay(1000); //a short delay is important to let the SD card settle
 800104c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001050:	f000 fd4e 	bl	8001af0 <HAL_Delay>

	fres = f_mount(&FatFs, "", 1); //1=mount now
 8001054:	2201      	movs	r2, #1
 8001056:	4924      	ldr	r1, [pc, #144]	; (80010e8 <sd_card_init+0xa8>)
 8001058:	4824      	ldr	r0, [pc, #144]	; (80010ec <sd_card_init+0xac>)
 800105a:	f006 fa9d 	bl	8007598 <f_mount>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <sd_card_init+0xb0>)
 8001064:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8001066:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <sd_card_init+0xb0>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d007      	beq.n	800107e <sd_card_init+0x3e>
		myprintf("f_mount error (%i)\r\n", fres);
 800106e:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <sd_card_init+0xb0>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	4619      	mov	r1, r3
 8001074:	481f      	ldr	r0, [pc, #124]	; (80010f4 <sd_card_init+0xb4>)
 8001076:	f7ff ffbd 	bl	8000ff4 <myprintf>
		return STATUS_ERROR;
 800107a:	2302      	movs	r3, #2
 800107c:	e02d      	b.n	80010da <sd_card_init+0x9a>
	}
	DWORD free_clusters, free_sectors, total_sectors;

	FATFS *getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 800107e:	463a      	mov	r2, r7
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	4619      	mov	r1, r3
 8001084:	4818      	ldr	r0, [pc, #96]	; (80010e8 <sd_card_init+0xa8>)
 8001086:	f006 fe72 	bl	8007d6e <f_getfree>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <sd_card_init+0xb0>)
 8001090:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <sd_card_init+0xb0>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d007      	beq.n	80010aa <sd_card_init+0x6a>
		myprintf("f_getfree error (%i)\r\n", fres);
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <sd_card_init+0xb0>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	4619      	mov	r1, r3
 80010a0:	4815      	ldr	r0, [pc, #84]	; (80010f8 <sd_card_init+0xb8>)
 80010a2:	f7ff ffa7 	bl	8000ff4 <myprintf>

		return STATUS_ERROR;
 80010a6:	2302      	movs	r3, #2
 80010a8:	e017      	b.n	80010da <sd_card_init+0x9a>
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	3b02      	subs	r3, #2
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	8952      	ldrh	r2, [r2, #10]
 80010b4:	fb02 f303 	mul.w	r3, r2, r3
 80010b8:	60fb      	str	r3, [r7, #12]
	free_sectors = free_clusters * getFreeFs->csize;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	895b      	ldrh	r3, [r3, #10]
 80010be:	461a      	mov	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	fb02 f303 	mul.w	r3, r2, r3
 80010c6:	60bb      	str	r3, [r7, #8]

	myprintf(
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	0859      	lsrs	r1, r3, #1
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	085b      	lsrs	r3, r3, #1
 80010d0:	461a      	mov	r2, r3
 80010d2:	480a      	ldr	r0, [pc, #40]	; (80010fc <sd_card_init+0xbc>)
 80010d4:	f7ff ff8e 	bl	8000ff4 <myprintf>
//	} else {
//		myprintf("f_write error (%i)\r\n", fres);
//	}
//

	return STATUS_OK;
 80010d8:	2301      	movs	r3, #1
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	0800896c 	.word	0x0800896c
 80010e8:	0800898c 	.word	0x0800898c
 80010ec:	20000970 	.word	0x20000970
 80010f0:	20000dd0 	.word	0x20000dd0
 80010f4:	08008990 	.word	0x08008990
 80010f8:	080089a8 	.word	0x080089a8
 80010fc:	080089c0 	.word	0x080089c0

08001100 <sd_card_close>:
	return res;

}

ret_status sd_card_close(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	f_close(&fil);
 8001104:	4806      	ldr	r0, [pc, #24]	; (8001120 <sd_card_close+0x20>)
 8001106:	f006 fe08 	bl	8007d1a <f_close>
	f_mount(NULL, "", 0);
 800110a:	2200      	movs	r2, #0
 800110c:	4905      	ldr	r1, [pc, #20]	; (8001124 <sd_card_close+0x24>)
 800110e:	2000      	movs	r0, #0
 8001110:	f006 fa42 	bl	8007598 <f_mount>
	myprintf("\r\nSD card is UNMOUNTED\r\n");
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <sd_card_close+0x28>)
 8001116:	f7ff ff6d 	bl	8000ff4 <myprintf>
	return STATUS_ERROR;
 800111a:	2302      	movs	r3, #2
}
 800111c:	4618      	mov	r0, r3
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000ba0 	.word	0x20000ba0
 8001124:	0800898c 	.word	0x0800898c
 8001128:	08008a30 	.word	0x08008a30

0800112c <sd_card_read_data>:

ret_status sd_card_read_data(uint8_t * data)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	f5ad 6d25 	sub.w	sp, sp, #2640	; 0xa50
 8001132:	af00      	add	r7, sp, #0
 8001134:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8001138:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800113c:	6018      	str	r0, [r3, #0]
#define SIZE_OF_BUFFER 16*16*8
	FIL fp;
	uint8_t buff[SIZE_OF_BUFFER] = {0};
 800113e:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8001142:	f6a3 2338 	subw	r3, r3, #2616	; 0xa38
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	3304      	adds	r3, #4
 800114c:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f006 ff46 	bl	8007fe4 <memset>
	UINT br = 0;
 8001158:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 800115c:	f6a3 233c 	subw	r3, r3, #2620	; 0xa3c
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]

//	int width, height, bpp;
	char name[5] = {0};
 8001164:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8001168:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	2200      	movs	r2, #0
 8001172:	711a      	strb	r2, [r3, #4]
	for(uint8_t image = 0; image < 2; image++)
 8001174:	2300      	movs	r3, #0
 8001176:	f887 3a4f 	strb.w	r3, [r7, #2639]	; 0xa4f
 800117a:	e0af      	b.n	80012dc <sd_card_read_data+0x1b0>
	{
		sprintf(&name, "%d.bmp", image);
 800117c:	f897 2a4f 	ldrb.w	r2, [r7, #2639]	; 0xa4f
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	495b      	ldr	r1, [pc, #364]	; (80012f4 <sd_card_read_data+0x1c8>)
 8001186:	4618      	mov	r0, r3
 8001188:	f006 ff34 	bl	8007ff4 <siprintf>
		myprintf("Try to read image %d\r\n", image);
 800118c:	f897 3a4f 	ldrb.w	r3, [r7, #2639]	; 0xa4f
 8001190:	4619      	mov	r1, r3
 8001192:	4859      	ldr	r0, [pc, #356]	; (80012f8 <sd_card_read_data+0x1cc>)
 8001194:	f7ff ff2e 	bl	8000ff4 <myprintf>
		fres = f_open(&fp, name, FA_READ);
 8001198:	f107 010c 	add.w	r1, r7, #12
 800119c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80011a0:	2201      	movs	r2, #1
 80011a2:	4618      	mov	r0, r3
 80011a4:	f006 fa3e 	bl	8007624 <f_open>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b53      	ldr	r3, [pc, #332]	; (80012fc <sd_card_read_data+0x1d0>)
 80011ae:	701a      	strb	r2, [r3, #0]
		if (fres != FR_OK) {
 80011b0:	4b52      	ldr	r3, [pc, #328]	; (80012fc <sd_card_read_data+0x1d0>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d007      	beq.n	80011c8 <sd_card_read_data+0x9c>
			myprintf("f_open error (%i)\r\n", fres);
 80011b8:	4b50      	ldr	r3, [pc, #320]	; (80012fc <sd_card_read_data+0x1d0>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	4850      	ldr	r0, [pc, #320]	; (8001300 <sd_card_read_data+0x1d4>)
 80011c0:	f7ff ff18 	bl	8000ff4 <myprintf>
			return STATUS_ERROR;
 80011c4:	2302      	movs	r3, #2
 80011c6:	e08f      	b.n	80012e8 <sd_card_read_data+0x1bc>
		}

		fres = f_read(&fp, buff, SIZE_OF_BUFFER, &br);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	f107 0118 	add.w	r1, r7, #24
 80011d0:	f607 0018 	addw	r0, r7, #2072	; 0x818
 80011d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011d8:	f006 fbe2 	bl	80079a0 <f_read>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	4b46      	ldr	r3, [pc, #280]	; (80012fc <sd_card_read_data+0x1d0>)
 80011e2:	701a      	strb	r2, [r3, #0]
		if (fres != FR_OK) {
 80011e4:	4b45      	ldr	r3, [pc, #276]	; (80012fc <sd_card_read_data+0x1d0>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d007      	beq.n	80011fc <sd_card_read_data+0xd0>
			myprintf("f_read error (%i)\r\n", fres);
 80011ec:	4b43      	ldr	r3, [pc, #268]	; (80012fc <sd_card_read_data+0x1d0>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	4844      	ldr	r0, [pc, #272]	; (8001304 <sd_card_read_data+0x1d8>)
 80011f4:	f7ff fefe 	bl	8000ff4 <myprintf>
			return STATUS_ERROR;
 80011f8:	2302      	movs	r3, #2
 80011fa:	e075      	b.n	80012e8 <sd_card_read_data+0x1bc>
		}

//		uint8_t* rgb_image = stbi_load(name, &width, &height, &bpp, 3);


		uint16_t index = 56;
 80011fc:	2338      	movs	r3, #56	; 0x38
 80011fe:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c

		for (int i = 1; i <= 16*16; ++i)
 8001202:	2301      	movs	r3, #1
 8001204:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
 8001208:	e05b      	b.n	80012c2 <sd_card_read_data+0x196>
		{
			*(data + (image*br) + index + 0) = buff[index];
 800120a:	f8b7 2a4c 	ldrh.w	r2, [r7, #2636]	; 0xa4c
 800120e:	f897 3a4f 	ldrb.w	r3, [r7, #2639]	; 0xa4f
 8001212:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 8001216:	f6a1 213c 	subw	r1, r1, #2620	; 0xa3c
 800121a:	6809      	ldr	r1, [r1, #0]
 800121c:	fb03 f101 	mul.w	r1, r3, r1
 8001220:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 8001224:	440b      	add	r3, r1
 8001226:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 800122a:	f6a1 214c 	subw	r1, r1, #2636	; 0xa4c
 800122e:	6809      	ldr	r1, [r1, #0]
 8001230:	440b      	add	r3, r1
 8001232:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 8001236:	f6a1 2138 	subw	r1, r1, #2616	; 0xa38
 800123a:	5c8a      	ldrb	r2, [r1, r2]
 800123c:	701a      	strb	r2, [r3, #0]
			*(data + (image*br) + index + 1) = buff[index+1];
 800123e:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	f897 3a4f 	ldrb.w	r3, [r7, #2639]	; 0xa4f
 8001248:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 800124c:	f6a1 213c 	subw	r1, r1, #2620	; 0xa3c
 8001250:	6809      	ldr	r1, [r1, #0]
 8001252:	fb03 f101 	mul.w	r1, r3, r1
 8001256:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800125a:	440b      	add	r3, r1
 800125c:	3301      	adds	r3, #1
 800125e:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 8001262:	f6a1 214c 	subw	r1, r1, #2636	; 0xa4c
 8001266:	6809      	ldr	r1, [r1, #0]
 8001268:	440b      	add	r3, r1
 800126a:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 800126e:	f6a1 2138 	subw	r1, r1, #2616	; 0xa38
 8001272:	5c8a      	ldrb	r2, [r1, r2]
 8001274:	701a      	strb	r2, [r3, #0]
			*(data + (image*br) + index + 2) = buff[index+2];
 8001276:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800127a:	1c9a      	adds	r2, r3, #2
 800127c:	f897 3a4f 	ldrb.w	r3, [r7, #2639]	; 0xa4f
 8001280:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 8001284:	f6a1 213c 	subw	r1, r1, #2620	; 0xa3c
 8001288:	6809      	ldr	r1, [r1, #0]
 800128a:	fb03 f101 	mul.w	r1, r3, r1
 800128e:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 8001292:	440b      	add	r3, r1
 8001294:	3302      	adds	r3, #2
 8001296:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 800129a:	f6a1 214c 	subw	r1, r1, #2636	; 0xa4c
 800129e:	6809      	ldr	r1, [r1, #0]
 80012a0:	440b      	add	r3, r1
 80012a2:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 80012a6:	f6a1 2138 	subw	r1, r1, #2616	; 0xa38
 80012aa:	5c8a      	ldrb	r2, [r1, r2]
 80012ac:	701a      	strb	r2, [r3, #0]
			index += 3;
 80012ae:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 80012b2:	3303      	adds	r3, #3
 80012b4:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
		for (int i = 1; i <= 16*16; ++i)
 80012b8:	f8d7 3a48 	ldr.w	r3, [r7, #2632]	; 0xa48
 80012bc:	3301      	adds	r3, #1
 80012be:	f8c7 3a48 	str.w	r3, [r7, #2632]	; 0xa48
 80012c2:	f8d7 3a48 	ldr.w	r3, [r7, #2632]	; 0xa48
 80012c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012ca:	dd9e      	ble.n	800120a <sd_card_read_data+0xde>
		}

//		stbi_image_free(rgb_image);
		f_close(&fil);
 80012cc:	480e      	ldr	r0, [pc, #56]	; (8001308 <sd_card_read_data+0x1dc>)
 80012ce:	f006 fd24 	bl	8007d1a <f_close>
	for(uint8_t image = 0; image < 2; image++)
 80012d2:	f897 3a4f 	ldrb.w	r3, [r7, #2639]	; 0xa4f
 80012d6:	3301      	adds	r3, #1
 80012d8:	f887 3a4f 	strb.w	r3, [r7, #2639]	; 0xa4f
 80012dc:	f897 3a4f 	ldrb.w	r3, [r7, #2639]	; 0xa4f
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	f67f af4b 	bls.w	800117c <sd_card_read_data+0x50>

	}
	return STATUS_OK;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	f507 6725 	add.w	r7, r7, #2640	; 0xa50
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	08008a4c 	.word	0x08008a4c
 80012f8:	08008a54 	.word	0x08008a54
 80012fc:	20000dd0 	.word	0x20000dd0
 8001300:	08008a6c 	.word	0x08008a6c
 8001304:	08008a80 	.word	0x08008a80
 8001308:	20000ba0 	.word	0x20000ba0

0800130c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <HAL_MspInit+0x4c>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a0f      	ldr	r2, [pc, #60]	; (8001358 <HAL_MspInit+0x4c>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <HAL_MspInit+0x4c>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	603b      	str	r3, [r7, #0]
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_MspInit+0x4c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	4a08      	ldr	r2, [pc, #32]	; (8001358 <HAL_MspInit+0x4c>)
 8001338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800133c:	6413      	str	r3, [r2, #64]	; 0x40
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_MspInit+0x4c>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40023800 	.word	0x40023800

0800135c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a19      	ldr	r2, [pc, #100]	; (80013e0 <HAL_SPI_MspInit+0x84>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d12b      	bne.n	80013d6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <HAL_SPI_MspInit+0x88>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	4a17      	ldr	r2, [pc, #92]	; (80013e4 <HAL_SPI_MspInit+0x88>)
 8001388:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800138c:	6453      	str	r3, [r2, #68]	; 0x44
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_SPI_MspInit+0x88>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <HAL_SPI_MspInit+0x88>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a10      	ldr	r2, [pc, #64]	; (80013e4 <HAL_SPI_MspInit+0x88>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <HAL_SPI_MspInit+0x88>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013b6:	23e0      	movs	r3, #224	; 0xe0
 80013b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013c6:	2305      	movs	r3, #5
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	4805      	ldr	r0, [pc, #20]	; (80013e8 <HAL_SPI_MspInit+0x8c>)
 80013d2:	f001 f855 	bl	8002480 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013d6:	bf00      	nop
 80013d8:	3728      	adds	r7, #40	; 0x28
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40013000 	.word	0x40013000
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020000 	.word	0x40020000

080013ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a45      	ldr	r2, [pc, #276]	; (8001510 <HAL_TIM_Base_MspInit+0x124>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d13f      	bne.n	800147e <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b44      	ldr	r3, [pc, #272]	; (8001514 <HAL_TIM_Base_MspInit+0x128>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	4a43      	ldr	r2, [pc, #268]	; (8001514 <HAL_TIM_Base_MspInit+0x128>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6453      	str	r3, [r2, #68]	; 0x44
 800140e:	4b41      	ldr	r3, [pc, #260]	; (8001514 <HAL_TIM_Base_MspInit+0x128>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800141a:	4b3f      	ldr	r3, [pc, #252]	; (8001518 <HAL_TIM_Base_MspInit+0x12c>)
 800141c:	4a3f      	ldr	r2, [pc, #252]	; (800151c <HAL_TIM_Base_MspInit+0x130>)
 800141e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001420:	4b3d      	ldr	r3, [pc, #244]	; (8001518 <HAL_TIM_Base_MspInit+0x12c>)
 8001422:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001426:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001428:	4b3b      	ldr	r3, [pc, #236]	; (8001518 <HAL_TIM_Base_MspInit+0x12c>)
 800142a:	2240      	movs	r2, #64	; 0x40
 800142c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800142e:	4b3a      	ldr	r3, [pc, #232]	; (8001518 <HAL_TIM_Base_MspInit+0x12c>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001434:	4b38      	ldr	r3, [pc, #224]	; (8001518 <HAL_TIM_Base_MspInit+0x12c>)
 8001436:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800143a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800143c:	4b36      	ldr	r3, [pc, #216]	; (8001518 <HAL_TIM_Base_MspInit+0x12c>)
 800143e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001442:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001444:	4b34      	ldr	r3, [pc, #208]	; (8001518 <HAL_TIM_Base_MspInit+0x12c>)
 8001446:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800144a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 800144c:	4b32      	ldr	r3, [pc, #200]	; (8001518 <HAL_TIM_Base_MspInit+0x12c>)
 800144e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001452:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001454:	4b30      	ldr	r3, [pc, #192]	; (8001518 <HAL_TIM_Base_MspInit+0x12c>)
 8001456:	2200      	movs	r2, #0
 8001458:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800145a:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <HAL_TIM_Base_MspInit+0x12c>)
 800145c:	2200      	movs	r2, #0
 800145e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001460:	482d      	ldr	r0, [pc, #180]	; (8001518 <HAL_TIM_Base_MspInit+0x12c>)
 8001462:	f000 fc7b 	bl	8001d5c <HAL_DMA_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 800146c:	f7ff fdbc 	bl	8000fe8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a29      	ldr	r2, [pc, #164]	; (8001518 <HAL_TIM_Base_MspInit+0x12c>)
 8001474:	625a      	str	r2, [r3, #36]	; 0x24
 8001476:	4a28      	ldr	r2, [pc, #160]	; (8001518 <HAL_TIM_Base_MspInit+0x12c>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800147c:	e043      	b.n	8001506 <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM5)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a27      	ldr	r2, [pc, #156]	; (8001520 <HAL_TIM_Base_MspInit+0x134>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d13e      	bne.n	8001506 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	4b21      	ldr	r3, [pc, #132]	; (8001514 <HAL_TIM_Base_MspInit+0x128>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	4a20      	ldr	r2, [pc, #128]	; (8001514 <HAL_TIM_Base_MspInit+0x128>)
 8001492:	f043 0308 	orr.w	r3, r3, #8
 8001496:	6413      	str	r3, [r2, #64]	; 0x40
 8001498:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <HAL_TIM_Base_MspInit+0x128>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	f003 0308 	and.w	r3, r3, #8
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 80014a4:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <HAL_TIM_Base_MspInit+0x138>)
 80014a6:	4a20      	ldr	r2, [pc, #128]	; (8001528 <HAL_TIM_Base_MspInit+0x13c>)
 80014a8:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 80014aa:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <HAL_TIM_Base_MspInit+0x138>)
 80014ac:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80014b0:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014b2:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <HAL_TIM_Base_MspInit+0x138>)
 80014b4:	2240      	movs	r2, #64	; 0x40
 80014b6:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <HAL_TIM_Base_MspInit+0x138>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80014be:	4b19      	ldr	r3, [pc, #100]	; (8001524 <HAL_TIM_Base_MspInit+0x138>)
 80014c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014c4:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014c6:	4b17      	ldr	r3, [pc, #92]	; (8001524 <HAL_TIM_Base_MspInit+0x138>)
 80014c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014cc:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <HAL_TIM_Base_MspInit+0x138>)
 80014d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d4:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_CIRCULAR;
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <HAL_TIM_Base_MspInit+0x138>)
 80014d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014dc:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <HAL_TIM_Base_MspInit+0x138>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <HAL_TIM_Base_MspInit+0x138>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 80014ea:	480e      	ldr	r0, [pc, #56]	; (8001524 <HAL_TIM_Base_MspInit+0x138>)
 80014ec:	f000 fc36 	bl	8001d5c <HAL_DMA_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_TIM_Base_MspInit+0x10e>
      Error_Handler();
 80014f6:	f7ff fd77 	bl	8000fe8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a09      	ldr	r2, [pc, #36]	; (8001524 <HAL_TIM_Base_MspInit+0x138>)
 80014fe:	625a      	str	r2, [r3, #36]	; 0x24
 8001500:	4a08      	ldr	r2, [pc, #32]	; (8001524 <HAL_TIM_Base_MspInit+0x138>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40010000 	.word	0x40010000
 8001514:	40023800 	.word	0x40023800
 8001518:	2000018c 	.word	0x2000018c
 800151c:	40026428 	.word	0x40026428
 8001520:	40000c00 	.word	0x40000c00
 8001524:	200001ec 	.word	0x200001ec
 8001528:	40026040 	.word	0x40026040

0800152c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	; 0x28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a24      	ldr	r2, [pc, #144]	; (80015dc <HAL_TIM_MspPostInit+0xb0>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d11f      	bne.n	800158e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <HAL_TIM_MspPostInit+0xb4>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a22      	ldr	r2, [pc, #136]	; (80015e0 <HAL_TIM_MspPostInit+0xb4>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b20      	ldr	r3, [pc, #128]	; (80015e0 <HAL_TIM_MspPostInit+0xb4>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800156a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800157c:	2301      	movs	r3, #1
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	4817      	ldr	r0, [pc, #92]	; (80015e4 <HAL_TIM_MspPostInit+0xb8>)
 8001588:	f000 ff7a 	bl	8002480 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800158c:	e022      	b.n	80015d4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM5)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a15      	ldr	r2, [pc, #84]	; (80015e8 <HAL_TIM_MspPostInit+0xbc>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d11d      	bne.n	80015d4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <HAL_TIM_MspPostInit+0xb4>)
 800159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a0:	4a0f      	ldr	r2, [pc, #60]	; (80015e0 <HAL_TIM_MspPostInit+0xb4>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6313      	str	r3, [r2, #48]	; 0x30
 80015a8:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <HAL_TIM_MspPostInit+0xb4>)
 80015aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015b4:	2301      	movs	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80015c4:	2302      	movs	r3, #2
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <HAL_TIM_MspPostInit+0xb8>)
 80015d0:	f000 ff56 	bl	8002480 <HAL_GPIO_Init>
}
 80015d4:	bf00      	nop
 80015d6:	3728      	adds	r7, #40	; 0x28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40010000 	.word	0x40010000
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020000 	.word	0x40020000
 80015e8:	40000c00 	.word	0x40000c00

080015ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	; 0x28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a19      	ldr	r2, [pc, #100]	; (8001670 <HAL_UART_MspInit+0x84>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d12b      	bne.n	8001666 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	4b18      	ldr	r3, [pc, #96]	; (8001674 <HAL_UART_MspInit+0x88>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	4a17      	ldr	r2, [pc, #92]	; (8001674 <HAL_UART_MspInit+0x88>)
 8001618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800161c:	6413      	str	r3, [r2, #64]	; 0x40
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_UART_MspInit+0x88>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <HAL_UART_MspInit+0x88>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a10      	ldr	r2, [pc, #64]	; (8001674 <HAL_UART_MspInit+0x88>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <HAL_UART_MspInit+0x88>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001646:	230c      	movs	r3, #12
 8001648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001652:	2303      	movs	r3, #3
 8001654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001656:	2307      	movs	r3, #7
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <HAL_UART_MspInit+0x8c>)
 8001662:	f000 ff0d 	bl	8002480 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001666:	bf00      	nop
 8001668:	3728      	adds	r7, #40	; 0x28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40004400 	.word	0x40004400
 8001674:	40023800 	.word	0x40023800
 8001678:	40020000 	.word	0x40020000

0800167c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <NMI_Handler+0x4>

08001682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001686:	e7fe      	b.n	8001686 <HardFault_Handler+0x4>

08001688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800168c:	e7fe      	b.n	800168c <MemManage_Handler+0x4>

0800168e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001692:	e7fe      	b.n	8001692 <BusFault_Handler+0x4>

08001694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <UsageFault_Handler+0x4>

0800169a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c8:	f000 f9f2 	bl	8001ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <DMA1_Stream2_IRQHandler+0x10>)
 80016d6:	f000 fc69 	bl	8001fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200001ec 	.word	0x200001ec

080016e4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <DMA2_Stream1_IRQHandler+0x10>)
 80016ea:	f000 fc5f 	bl	8001fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	2000018c 	.word	0x2000018c

080016f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001700:	4a14      	ldr	r2, [pc, #80]	; (8001754 <_sbrk+0x5c>)
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <_sbrk+0x60>)
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800170c:	4b13      	ldr	r3, [pc, #76]	; (800175c <_sbrk+0x64>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d102      	bne.n	800171a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <_sbrk+0x64>)
 8001716:	4a12      	ldr	r2, [pc, #72]	; (8001760 <_sbrk+0x68>)
 8001718:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <_sbrk+0x64>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	429a      	cmp	r2, r3
 8001726:	d207      	bcs.n	8001738 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001728:	f006 fc32 	bl	8007f90 <__errno>
 800172c:	4603      	mov	r3, r0
 800172e:	220c      	movs	r2, #12
 8001730:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001732:	f04f 33ff 	mov.w	r3, #4294967295
 8001736:	e009      	b.n	800174c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001738:	4b08      	ldr	r3, [pc, #32]	; (800175c <_sbrk+0x64>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800173e:	4b07      	ldr	r3, [pc, #28]	; (800175c <_sbrk+0x64>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <_sbrk+0x64>)
 8001748:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800174a:	68fb      	ldr	r3, [r7, #12]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20018000 	.word	0x20018000
 8001758:	00000400 	.word	0x00000400
 800175c:	20000ed4 	.word	0x20000ed4
 8001760:	20000f38 	.word	0x20000f38

08001764 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <SystemInit+0x20>)
 800176a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800176e:	4a05      	ldr	r2, [pc, #20]	; (8001784 <SystemInit+0x20>)
 8001770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001774:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <scale8>:

#include "ws2812b.h"



static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	460a      	mov	r2, r1
 8001792:	71fb      	strb	r3, [r7, #7]
 8001794:	4613      	mov	r3, r2
 8001796:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	79ba      	ldrb	r2, [r7, #6]
 800179c:	fb02 f303 	mul.w	r3, r2, r3
 80017a0:	121b      	asrs	r3, r3, #8
 80017a2:	b2db      	uxtb	r3, r3
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(Layers *layer, uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	4608      	mov	r0, r1
 80017ba:	4611      	mov	r1, r2
 80017bc:	461a      	mov	r2, r3
 80017be:	4603      	mov	r3, r0
 80017c0:	70fb      	strb	r3, [r7, #3]
 80017c2:	460b      	mov	r3, r1
 80017c4:	70bb      	strb	r3, [r7, #2]
 80017c6:	4613      	mov	r3, r2
 80017c8:	707b      	strb	r3, [r7, #1]
	layer->rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 80017ca:	78fa      	ldrb	r2, [r7, #3]
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	189c      	adds	r4, r3, r2
 80017d2:	787b      	ldrb	r3, [r7, #1]
 80017d4:	21b0      	movs	r1, #176	; 0xb0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ffd6 	bl	8001788 <scale8>
 80017dc:	4603      	mov	r3, r0
 80017de:	461a      	mov	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4423      	add	r3, r4
 80017e4:	725a      	strb	r2, [r3, #9]
	layer->rgb_arr[3 * index + 1] = r;
 80017e6:	78fa      	ldrb	r2, [r7, #3]
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	3301      	adds	r3, #1
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4413      	add	r3, r2
 80017f4:	78ba      	ldrb	r2, [r7, #2]
 80017f6:	725a      	strb	r2, [r3, #9]
	layer->rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 80017f8:	78fa      	ldrb	r2, [r7, #3]
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	1c9c      	adds	r4, r3, #2
 8001802:	7e3b      	ldrb	r3, [r7, #24]
 8001804:	21f0      	movs	r1, #240	; 0xf0
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff ffbe 	bl	8001788 <scale8>
 800180c:	4603      	mov	r3, r0
 800180e:	461a      	mov	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4423      	add	r3, r4
 8001814:	725a      	strb	r2, [r3, #9]
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bd90      	pop	{r4, r7, pc}

0800181e <led_render>:
void led_set_all_RGB(Layers *layer, uint8_t r, uint8_t g, uint8_t b) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGB(layer, i, r, g, b);
}

// Shuttle the data to the LEDs!
void led_render(Layers *layer) {
 800181e:	b580      	push	{r7, lr}
 8001820:	b084      	sub	sp, #16
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  if(layer->wr_buf_p != 0 || layer->dma->State != HAL_DMA_STATE_READY) {
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 800182c:	2b00      	cmp	r3, #0
 800182e:	d106      	bne.n	800183e <led_render+0x20>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b01      	cmp	r3, #1
 800183c:	d01d      	beq.n	800187a <led_render+0x5c>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) layer->wr_buf[i] = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	73fb      	strb	r3, [r7, #15]
 8001842:	e00a      	b.n	800185a <led_render+0x3c>
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	2200      	movs	r2, #0
 8001852:	805a      	strh	r2, [r3, #2]
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	3301      	adds	r3, #1
 8001858:	73fb      	strb	r3, [r7, #15]
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	2b2f      	cmp	r3, #47	; 0x2f
 800185e:	d9f1      	bls.n	8001844 <led_render+0x26>
    layer->wr_buf_p = 0;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
    HAL_TIM_PWM_Stop_DMA(layer->timer, layer->channel);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7a1b      	ldrb	r3, [r3, #8]
 8001870:	4619      	mov	r1, r3
 8001872:	4610      	mov	r0, r2
 8001874:	f002 f988 	bl	8003b88 <HAL_TIM_PWM_Stop_DMA>
    return;
 8001878:	e09b      	b.n	80019b2 <led_render+0x194>
  }
  // Ooh boi the first data buffer half (and the second!)
  for(uint_fast8_t i = 0; i < 8; ++i) {
 800187a:	2300      	movs	r3, #0
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	e085      	b.n	800198c <led_render+0x16e>
	  layer->wr_buf[i     ] = PWM_LO << (((layer->rgb_arr[0] << i) & 0x80) > 0);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7a5b      	ldrb	r3, [r3, #9]
 8001884:	461a      	mov	r2, r3
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001890:	2b00      	cmp	r3, #0
 8001892:	dd01      	ble.n	8001898 <led_render+0x7a>
 8001894:	2142      	movs	r1, #66	; 0x42
 8001896:	e000      	b.n	800189a <led_render+0x7c>
 8001898:	2121      	movs	r1, #33	; 0x21
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	460a      	mov	r2, r1
 80018a8:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i +  8] = PWM_LO << (((layer->rgb_arr[1] << i) & 0x80) > 0);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	7a9b      	ldrb	r3, [r3, #10]
 80018ae:	461a      	mov	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	dd01      	ble.n	80018c2 <led_render+0xa4>
 80018be:	2142      	movs	r1, #66	; 0x42
 80018c0:	e000      	b.n	80018c4 <led_render+0xa6>
 80018c2:	2121      	movs	r1, #33	; 0x21
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	3308      	adds	r3, #8
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	460a      	mov	r2, r1
 80018d4:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i + 16] = PWM_LO << (((layer->rgb_arr[2] << i) & 0x80) > 0);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	7adb      	ldrb	r3, [r3, #11]
 80018da:	461a      	mov	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	dd01      	ble.n	80018ee <led_render+0xd0>
 80018ea:	2142      	movs	r1, #66	; 0x42
 80018ec:	e000      	b.n	80018f0 <led_render+0xd2>
 80018ee:	2121      	movs	r1, #33	; 0x21
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	3310      	adds	r3, #16
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	460a      	mov	r2, r1
 8001900:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i + 24] = PWM_LO << (((layer->rgb_arr[3] << i) & 0x80) > 0);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	7b1b      	ldrb	r3, [r3, #12]
 8001906:	461a      	mov	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001912:	2b00      	cmp	r3, #0
 8001914:	dd01      	ble.n	800191a <led_render+0xfc>
 8001916:	2142      	movs	r1, #66	; 0x42
 8001918:	e000      	b.n	800191c <led_render+0xfe>
 800191a:	2121      	movs	r1, #33	; 0x21
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	3318      	adds	r3, #24
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	460a      	mov	r2, r1
 800192c:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i + 32] = PWM_LO << (((layer->rgb_arr[4] << i) & 0x80) > 0);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	7b5b      	ldrb	r3, [r3, #13]
 8001932:	461a      	mov	r2, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800193e:	2b00      	cmp	r3, #0
 8001940:	dd01      	ble.n	8001946 <led_render+0x128>
 8001942:	2142      	movs	r1, #66	; 0x42
 8001944:	e000      	b.n	8001948 <led_render+0x12a>
 8001946:	2121      	movs	r1, #33	; 0x21
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	3320      	adds	r3, #32
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	460a      	mov	r2, r1
 8001958:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i + 40] = PWM_LO << (((layer->rgb_arr[5] << i) & 0x80) > 0);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	7b9b      	ldrb	r3, [r3, #14]
 800195e:	461a      	mov	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800196a:	2b00      	cmp	r3, #0
 800196c:	dd01      	ble.n	8001972 <led_render+0x154>
 800196e:	2142      	movs	r1, #66	; 0x42
 8001970:	e000      	b.n	8001974 <led_render+0x156>
 8001972:	2121      	movs	r1, #33	; 0x21
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	3328      	adds	r3, #40	; 0x28
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	460a      	mov	r2, r1
 8001984:	805a      	strh	r2, [r3, #2]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	3301      	adds	r3, #1
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	2b07      	cmp	r3, #7
 8001990:	f67f af76 	bls.w	8001880 <led_render+0x62>
  }
  HAL_TIM_PWM_Start_DMA(layer->timer, layer->channel, (uint32_t *)layer->wr_buf, WR_BUF_LEN);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	7a1b      	ldrb	r3, [r3, #8]
 800199c:	4619      	mov	r1, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f203 320a 	addw	r2, r3, #778	; 0x30a
 80019a4:	2330      	movs	r3, #48	; 0x30
 80019a6:	f001 ff3f 	bl	8003828 <HAL_TIM_PWM_Start_DMA>
  layer->wr_buf_p = 2; // Since we're ready for the next buffer
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2202      	movs	r2, #2
 80019ae:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
}
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019bc:	480d      	ldr	r0, [pc, #52]	; (80019f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019be:	490e      	ldr	r1, [pc, #56]	; (80019f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019c0:	4a0e      	ldr	r2, [pc, #56]	; (80019fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c4:	e002      	b.n	80019cc <LoopCopyDataInit>

080019c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ca:	3304      	adds	r3, #4

080019cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d0:	d3f9      	bcc.n	80019c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d2:	4a0b      	ldr	r2, [pc, #44]	; (8001a00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019d4:	4c0b      	ldr	r4, [pc, #44]	; (8001a04 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d8:	e001      	b.n	80019de <LoopFillZerobss>

080019da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019dc:	3204      	adds	r2, #4

080019de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e0:	d3fb      	bcc.n	80019da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019e2:	f7ff febf 	bl	8001764 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019e6:	f006 fad9 	bl	8007f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ea:	f7fe fdd3 	bl	8000594 <main>
  bx  lr    
 80019ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80019fc:	08008bbc 	.word	0x08008bbc
  ldr r2, =_sbss
 8001a00:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001a04:	20000f34 	.word	0x20000f34

08001a08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC_IRQHandler>
	...

08001a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a10:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <HAL_Init+0x40>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <HAL_Init+0x40>)
 8001a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <HAL_Init+0x40>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <HAL_Init+0x40>)
 8001a22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <HAL_Init+0x40>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a07      	ldr	r2, [pc, #28]	; (8001a4c <HAL_Init+0x40>)
 8001a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a34:	2003      	movs	r0, #3
 8001a36:	f000 f94f 	bl	8001cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f000 f808 	bl	8001a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a40:	f7ff fc64 	bl	800130c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023c00 	.word	0x40023c00

08001a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_InitTick+0x54>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_InitTick+0x58>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4619      	mov	r1, r3
 8001a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f967 	bl	8001d42 <HAL_SYSTICK_Config>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00e      	b.n	8001a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b0f      	cmp	r3, #15
 8001a82:	d80a      	bhi.n	8001a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a84:	2200      	movs	r2, #0
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8c:	f000 f92f 	bl	8001cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a90:	4a06      	ldr	r2, [pc, #24]	; (8001aac <HAL_InitTick+0x5c>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e000      	b.n	8001a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	20000008 	.word	0x20000008
 8001aac:	20000004 	.word	0x20000004

08001ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_IncTick+0x20>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_IncTick+0x24>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <HAL_IncTick+0x24>)
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	20000ed8 	.word	0x20000ed8

08001ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <HAL_GetTick+0x14>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000ed8 	.word	0x20000ed8

08001af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af8:	f7ff ffee 	bl	8001ad8 <HAL_GetTick>
 8001afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b08:	d005      	beq.n	8001b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <HAL_Delay+0x44>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4413      	add	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b16:	bf00      	nop
 8001b18:	f7ff ffde 	bl	8001ad8 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d8f7      	bhi.n	8001b18 <HAL_Delay+0x28>
  {
  }
}
 8001b28:	bf00      	nop
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000008 	.word	0x20000008

08001b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b54:	4013      	ands	r3, r2
 8001b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6a:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	60d3      	str	r3, [r2, #12]
}
 8001b70:	bf00      	nop
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <__NVIC_GetPriorityGrouping+0x18>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	f003 0307 	and.w	r3, r3, #7
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	db0b      	blt.n	8001bc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	f003 021f 	and.w	r2, r3, #31
 8001bb4:	4907      	ldr	r1, [pc, #28]	; (8001bd4 <__NVIC_EnableIRQ+0x38>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	095b      	lsrs	r3, r3, #5
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000e100 	.word	0xe000e100

08001bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	6039      	str	r1, [r7, #0]
 8001be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	db0a      	blt.n	8001c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	490c      	ldr	r1, [pc, #48]	; (8001c24 <__NVIC_SetPriority+0x4c>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	0112      	lsls	r2, r2, #4
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c00:	e00a      	b.n	8001c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4908      	ldr	r1, [pc, #32]	; (8001c28 <__NVIC_SetPriority+0x50>)
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	3b04      	subs	r3, #4
 8001c10:	0112      	lsls	r2, r2, #4
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	440b      	add	r3, r1
 8001c16:	761a      	strb	r2, [r3, #24]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000e100 	.word	0xe000e100
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	; 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f1c3 0307 	rsb	r3, r3, #7
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	bf28      	it	cs
 8001c4a:	2304      	movcs	r3, #4
 8001c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3304      	adds	r3, #4
 8001c52:	2b06      	cmp	r3, #6
 8001c54:	d902      	bls.n	8001c5c <NVIC_EncodePriority+0x30>
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3b03      	subs	r3, #3
 8001c5a:	e000      	b.n	8001c5e <NVIC_EncodePriority+0x32>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	f04f 32ff 	mov.w	r2, #4294967295
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	401a      	ands	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c74:	f04f 31ff 	mov.w	r1, #4294967295
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7e:	43d9      	mvns	r1, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c84:	4313      	orrs	r3, r2
         );
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3724      	adds	r7, #36	; 0x24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ca4:	d301      	bcc.n	8001caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e00f      	b.n	8001cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <SysTick_Config+0x40>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb2:	210f      	movs	r1, #15
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb8:	f7ff ff8e 	bl	8001bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <SysTick_Config+0x40>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc2:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <SysTick_Config+0x40>)
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	e000e010 	.word	0xe000e010

08001cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff ff29 	bl	8001b38 <__NVIC_SetPriorityGrouping>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b086      	sub	sp, #24
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d00:	f7ff ff3e 	bl	8001b80 <__NVIC_GetPriorityGrouping>
 8001d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	6978      	ldr	r0, [r7, #20]
 8001d0c:	f7ff ff8e 	bl	8001c2c <NVIC_EncodePriority>
 8001d10:	4602      	mov	r2, r0
 8001d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d16:	4611      	mov	r1, r2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff5d 	bl	8001bd8 <__NVIC_SetPriority>
}
 8001d1e:	bf00      	nop
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff31 	bl	8001b9c <__NVIC_EnableIRQ>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff ffa2 	bl	8001c94 <SysTick_Config>
 8001d50:	4603      	mov	r3, r0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d68:	f7ff feb6 	bl	8001ad8 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e099      	b.n	8001eac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0201 	bic.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d98:	e00f      	b.n	8001dba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d9a:	f7ff fe9d 	bl	8001ad8 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b05      	cmp	r3, #5
 8001da6:	d908      	bls.n	8001dba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2220      	movs	r2, #32
 8001dac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2203      	movs	r2, #3
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e078      	b.n	8001eac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1e8      	bne.n	8001d9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	4b38      	ldr	r3, [pc, #224]	; (8001eb4 <HAL_DMA_Init+0x158>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d107      	bne.n	8001e24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f023 0307 	bic.w	r3, r3, #7
 8001e3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d117      	bne.n	8001e7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00e      	beq.n	8001e7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 fa91 	bl	8002388 <DMA_CheckFifoParam>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d008      	beq.n	8001e7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2240      	movs	r2, #64	; 0x40
 8001e70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e016      	b.n	8001eac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 fa48 	bl	800231c <DMA_CalcBaseAndBitshift>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e94:	223f      	movs	r2, #63	; 0x3f
 8001e96:	409a      	lsls	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	f010803f 	.word	0xf010803f

08001eb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ece:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_DMA_Start_IT+0x26>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e040      	b.n	8001f60 <HAL_DMA_Start_IT+0xa8>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d12f      	bne.n	8001f52 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f000 f9da 	bl	80022c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f10:	223f      	movs	r2, #63	; 0x3f
 8001f12:	409a      	lsls	r2, r3
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0216 	orr.w	r2, r2, #22
 8001f26:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d007      	beq.n	8001f40 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0208 	orr.w	r2, r2, #8
 8001f3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0201 	orr.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	e005      	b.n	8001f5e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d004      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2280      	movs	r2, #128	; 0x80
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e00c      	b.n	8001fa0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2205      	movs	r2, #5
 8001f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0201 	bic.w	r2, r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fb8:	4b8e      	ldr	r3, [pc, #568]	; (80021f4 <HAL_DMA_IRQHandler+0x248>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a8e      	ldr	r2, [pc, #568]	; (80021f8 <HAL_DMA_IRQHandler+0x24c>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	0a9b      	lsrs	r3, r3, #10
 8001fc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d01a      	beq.n	8002018 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d013      	beq.n	8002018 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 0204 	bic.w	r2, r2, #4
 8001ffe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002004:	2208      	movs	r2, #8
 8002006:	409a      	lsls	r2, r3
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	f043 0201 	orr.w	r2, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201c:	2201      	movs	r2, #1
 800201e:	409a      	lsls	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d012      	beq.n	800204e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00b      	beq.n	800204e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203a:	2201      	movs	r2, #1
 800203c:	409a      	lsls	r2, r3
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	f043 0202 	orr.w	r2, r3, #2
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002052:	2204      	movs	r2, #4
 8002054:	409a      	lsls	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4013      	ands	r3, r2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d012      	beq.n	8002084 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00b      	beq.n	8002084 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002070:	2204      	movs	r2, #4
 8002072:	409a      	lsls	r2, r3
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207c:	f043 0204 	orr.w	r2, r3, #4
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002088:	2210      	movs	r2, #16
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d043      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d03c      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a6:	2210      	movs	r2, #16
 80020a8:	409a      	lsls	r2, r3
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d018      	beq.n	80020ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d108      	bne.n	80020dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d024      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	4798      	blx	r3
 80020da:	e01f      	b.n	800211c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01b      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	4798      	blx	r3
 80020ec:	e016      	b.n	800211c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d107      	bne.n	800210c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0208 	bic.w	r2, r2, #8
 800210a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	2220      	movs	r2, #32
 8002122:	409a      	lsls	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 808f 	beq.w	800224c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 8087 	beq.w	800224c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	2220      	movs	r2, #32
 8002144:	409a      	lsls	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b05      	cmp	r3, #5
 8002154:	d136      	bne.n	80021c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0216 	bic.w	r2, r2, #22
 8002164:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002174:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d103      	bne.n	8002186 <HAL_DMA_IRQHandler+0x1da>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002182:	2b00      	cmp	r3, #0
 8002184:	d007      	beq.n	8002196 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0208 	bic.w	r2, r2, #8
 8002194:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219a:	223f      	movs	r2, #63	; 0x3f
 800219c:	409a      	lsls	r2, r3
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d07e      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	4798      	blx	r3
        }
        return;
 80021c2:	e079      	b.n	80022b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d01d      	beq.n	800220e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10d      	bne.n	80021fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d031      	beq.n	800224c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	4798      	blx	r3
 80021f0:	e02c      	b.n	800224c <HAL_DMA_IRQHandler+0x2a0>
 80021f2:	bf00      	nop
 80021f4:	20000000 	.word	0x20000000
 80021f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002200:	2b00      	cmp	r3, #0
 8002202:	d023      	beq.n	800224c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	4798      	blx	r3
 800220c:	e01e      	b.n	800224c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10f      	bne.n	800223c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0210 	bic.w	r2, r2, #16
 800222a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002250:	2b00      	cmp	r3, #0
 8002252:	d032      	beq.n	80022ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d022      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2205      	movs	r2, #5
 8002264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0201 	bic.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	3301      	adds	r3, #1
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	429a      	cmp	r2, r3
 8002282:	d307      	bcc.n	8002294 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f2      	bne.n	8002278 <HAL_DMA_IRQHandler+0x2cc>
 8002292:	e000      	b.n	8002296 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002294:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d005      	beq.n	80022ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	4798      	blx	r3
 80022b6:	e000      	b.n	80022ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80022b8:	bf00      	nop
    }
  }
}
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b40      	cmp	r3, #64	; 0x40
 80022ec:	d108      	bne.n	8002300 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022fe:	e007      	b.n	8002310 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	60da      	str	r2, [r3, #12]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	3b10      	subs	r3, #16
 800232c:	4a14      	ldr	r2, [pc, #80]	; (8002380 <DMA_CalcBaseAndBitshift+0x64>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002336:	4a13      	ldr	r2, [pc, #76]	; (8002384 <DMA_CalcBaseAndBitshift+0x68>)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4413      	add	r3, r2
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2b03      	cmp	r3, #3
 8002348:	d909      	bls.n	800235e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002352:	f023 0303 	bic.w	r3, r3, #3
 8002356:	1d1a      	adds	r2, r3, #4
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	659a      	str	r2, [r3, #88]	; 0x58
 800235c:	e007      	b.n	800236e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002366:	f023 0303 	bic.w	r3, r3, #3
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	aaaaaaab 	.word	0xaaaaaaab
 8002384:	08008af0 	.word	0x08008af0

08002388 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d11f      	bne.n	80023e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d856      	bhi.n	8002456 <DMA_CheckFifoParam+0xce>
 80023a8:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <DMA_CheckFifoParam+0x28>)
 80023aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ae:	bf00      	nop
 80023b0:	080023c1 	.word	0x080023c1
 80023b4:	080023d3 	.word	0x080023d3
 80023b8:	080023c1 	.word	0x080023c1
 80023bc:	08002457 	.word	0x08002457
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d046      	beq.n	800245a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d0:	e043      	b.n	800245a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023da:	d140      	bne.n	800245e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e0:	e03d      	b.n	800245e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ea:	d121      	bne.n	8002430 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d837      	bhi.n	8002462 <DMA_CheckFifoParam+0xda>
 80023f2:	a201      	add	r2, pc, #4	; (adr r2, 80023f8 <DMA_CheckFifoParam+0x70>)
 80023f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f8:	08002409 	.word	0x08002409
 80023fc:	0800240f 	.word	0x0800240f
 8002400:	08002409 	.word	0x08002409
 8002404:	08002421 	.word	0x08002421
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
      break;
 800240c:	e030      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d025      	beq.n	8002466 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800241e:	e022      	b.n	8002466 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002428:	d11f      	bne.n	800246a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800242e:	e01c      	b.n	800246a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d903      	bls.n	800243e <DMA_CheckFifoParam+0xb6>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b03      	cmp	r3, #3
 800243a:	d003      	beq.n	8002444 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800243c:	e018      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	73fb      	strb	r3, [r7, #15]
      break;
 8002442:	e015      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00e      	beq.n	800246e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
      break;
 8002454:	e00b      	b.n	800246e <DMA_CheckFifoParam+0xe6>
      break;
 8002456:	bf00      	nop
 8002458:	e00a      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      break;
 800245a:	bf00      	nop
 800245c:	e008      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      break;
 800245e:	bf00      	nop
 8002460:	e006      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      break;
 8002462:	bf00      	nop
 8002464:	e004      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      break;
 8002466:	bf00      	nop
 8002468:	e002      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      break;   
 800246a:	bf00      	nop
 800246c:	e000      	b.n	8002470 <DMA_CheckFifoParam+0xe8>
      break;
 800246e:	bf00      	nop
    }
  } 
  
  return status; 
 8002470:	7bfb      	ldrb	r3, [r7, #15]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop

08002480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002480:	b480      	push	{r7}
 8002482:	b089      	sub	sp, #36	; 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
 800249a:	e159      	b.n	8002750 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800249c:	2201      	movs	r2, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	f040 8148 	bne.w	800274a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d005      	beq.n	80024d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d130      	bne.n	8002534 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	2203      	movs	r2, #3
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002508:	2201      	movs	r2, #1
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 0201 	and.w	r2, r3, #1
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b03      	cmp	r3, #3
 800253e:	d017      	beq.n	8002570 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	2203      	movs	r2, #3
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d123      	bne.n	80025c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	08da      	lsrs	r2, r3, #3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3208      	adds	r2, #8
 8002584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	220f      	movs	r2, #15
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	08da      	lsrs	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3208      	adds	r2, #8
 80025be:	69b9      	ldr	r1, [r7, #24]
 80025c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	2203      	movs	r2, #3
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0203 	and.w	r2, r3, #3
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 80a2 	beq.w	800274a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	4b57      	ldr	r3, [pc, #348]	; (8002768 <HAL_GPIO_Init+0x2e8>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	4a56      	ldr	r2, [pc, #344]	; (8002768 <HAL_GPIO_Init+0x2e8>)
 8002610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002614:	6453      	str	r3, [r2, #68]	; 0x44
 8002616:	4b54      	ldr	r3, [pc, #336]	; (8002768 <HAL_GPIO_Init+0x2e8>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002622:	4a52      	ldr	r2, [pc, #328]	; (800276c <HAL_GPIO_Init+0x2ec>)
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	089b      	lsrs	r3, r3, #2
 8002628:	3302      	adds	r3, #2
 800262a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	220f      	movs	r2, #15
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a49      	ldr	r2, [pc, #292]	; (8002770 <HAL_GPIO_Init+0x2f0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d019      	beq.n	8002682 <HAL_GPIO_Init+0x202>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a48      	ldr	r2, [pc, #288]	; (8002774 <HAL_GPIO_Init+0x2f4>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d013      	beq.n	800267e <HAL_GPIO_Init+0x1fe>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a47      	ldr	r2, [pc, #284]	; (8002778 <HAL_GPIO_Init+0x2f8>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00d      	beq.n	800267a <HAL_GPIO_Init+0x1fa>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a46      	ldr	r2, [pc, #280]	; (800277c <HAL_GPIO_Init+0x2fc>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d007      	beq.n	8002676 <HAL_GPIO_Init+0x1f6>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a45      	ldr	r2, [pc, #276]	; (8002780 <HAL_GPIO_Init+0x300>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d101      	bne.n	8002672 <HAL_GPIO_Init+0x1f2>
 800266e:	2304      	movs	r3, #4
 8002670:	e008      	b.n	8002684 <HAL_GPIO_Init+0x204>
 8002672:	2307      	movs	r3, #7
 8002674:	e006      	b.n	8002684 <HAL_GPIO_Init+0x204>
 8002676:	2303      	movs	r3, #3
 8002678:	e004      	b.n	8002684 <HAL_GPIO_Init+0x204>
 800267a:	2302      	movs	r3, #2
 800267c:	e002      	b.n	8002684 <HAL_GPIO_Init+0x204>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <HAL_GPIO_Init+0x204>
 8002682:	2300      	movs	r3, #0
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	f002 0203 	and.w	r2, r2, #3
 800268a:	0092      	lsls	r2, r2, #2
 800268c:	4093      	lsls	r3, r2
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002694:	4935      	ldr	r1, [pc, #212]	; (800276c <HAL_GPIO_Init+0x2ec>)
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	089b      	lsrs	r3, r3, #2
 800269a:	3302      	adds	r3, #2
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026a2:	4b38      	ldr	r3, [pc, #224]	; (8002784 <HAL_GPIO_Init+0x304>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026c6:	4a2f      	ldr	r2, [pc, #188]	; (8002784 <HAL_GPIO_Init+0x304>)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026cc:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <HAL_GPIO_Init+0x304>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026f0:	4a24      	ldr	r2, [pc, #144]	; (8002784 <HAL_GPIO_Init+0x304>)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026f6:	4b23      	ldr	r3, [pc, #140]	; (8002784 <HAL_GPIO_Init+0x304>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800271a:	4a1a      	ldr	r2, [pc, #104]	; (8002784 <HAL_GPIO_Init+0x304>)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002720:	4b18      	ldr	r3, [pc, #96]	; (8002784 <HAL_GPIO_Init+0x304>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002744:	4a0f      	ldr	r2, [pc, #60]	; (8002784 <HAL_GPIO_Init+0x304>)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3301      	adds	r3, #1
 800274e:	61fb      	str	r3, [r7, #28]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	2b0f      	cmp	r3, #15
 8002754:	f67f aea2 	bls.w	800249c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	3724      	adds	r7, #36	; 0x24
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800
 800276c:	40013800 	.word	0x40013800
 8002770:	40020000 	.word	0x40020000
 8002774:	40020400 	.word	0x40020400
 8002778:	40020800 	.word	0x40020800
 800277c:	40020c00 	.word	0x40020c00
 8002780:	40021000 	.word	0x40021000
 8002784:	40013c00 	.word	0x40013c00

08002788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	807b      	strh	r3, [r7, #2]
 8002794:	4613      	mov	r3, r2
 8002796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002798:	787b      	ldrb	r3, [r7, #1]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800279e:	887a      	ldrh	r2, [r7, #2]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027a4:	e003      	b.n	80027ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027a6:	887b      	ldrh	r3, [r7, #2]
 80027a8:	041a      	lsls	r2, r3, #16
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	619a      	str	r2, [r3, #24]
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
	...

080027bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e267      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d075      	beq.n	80028c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027da:	4b88      	ldr	r3, [pc, #544]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d00c      	beq.n	8002800 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027e6:	4b85      	ldr	r3, [pc, #532]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d112      	bne.n	8002818 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027f2:	4b82      	ldr	r3, [pc, #520]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027fe:	d10b      	bne.n	8002818 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002800:	4b7e      	ldr	r3, [pc, #504]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d05b      	beq.n	80028c4 <HAL_RCC_OscConfig+0x108>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d157      	bne.n	80028c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e242      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002820:	d106      	bne.n	8002830 <HAL_RCC_OscConfig+0x74>
 8002822:	4b76      	ldr	r3, [pc, #472]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a75      	ldr	r2, [pc, #468]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 8002828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	e01d      	b.n	800286c <HAL_RCC_OscConfig+0xb0>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002838:	d10c      	bne.n	8002854 <HAL_RCC_OscConfig+0x98>
 800283a:	4b70      	ldr	r3, [pc, #448]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a6f      	ldr	r2, [pc, #444]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 8002840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	4b6d      	ldr	r3, [pc, #436]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a6c      	ldr	r2, [pc, #432]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 800284c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e00b      	b.n	800286c <HAL_RCC_OscConfig+0xb0>
 8002854:	4b69      	ldr	r3, [pc, #420]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a68      	ldr	r2, [pc, #416]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 800285a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b66      	ldr	r3, [pc, #408]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a65      	ldr	r2, [pc, #404]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 8002866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800286a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d013      	beq.n	800289c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7ff f930 	bl	8001ad8 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800287c:	f7ff f92c 	bl	8001ad8 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e207      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	4b5b      	ldr	r3, [pc, #364]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0xc0>
 800289a:	e014      	b.n	80028c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7ff f91c 	bl	8001ad8 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028a4:	f7ff f918 	bl	8001ad8 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	; 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e1f3      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b6:	4b51      	ldr	r3, [pc, #324]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0xe8>
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d063      	beq.n	800299a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028d2:	4b4a      	ldr	r3, [pc, #296]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028de:	4b47      	ldr	r3, [pc, #284]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d11c      	bne.n	8002924 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ea:	4b44      	ldr	r3, [pc, #272]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d116      	bne.n	8002924 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f6:	4b41      	ldr	r3, [pc, #260]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_RCC_OscConfig+0x152>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d001      	beq.n	800290e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e1c7      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290e:	4b3b      	ldr	r3, [pc, #236]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4937      	ldr	r1, [pc, #220]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002922:	e03a      	b.n	800299a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d020      	beq.n	800296e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800292c:	4b34      	ldr	r3, [pc, #208]	; (8002a00 <HAL_RCC_OscConfig+0x244>)
 800292e:	2201      	movs	r2, #1
 8002930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002932:	f7ff f8d1 	bl	8001ad8 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800293a:	f7ff f8cd 	bl	8001ad8 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e1a8      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294c:	4b2b      	ldr	r3, [pc, #172]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002958:	4b28      	ldr	r3, [pc, #160]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4925      	ldr	r1, [pc, #148]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 8002968:	4313      	orrs	r3, r2
 800296a:	600b      	str	r3, [r1, #0]
 800296c:	e015      	b.n	800299a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800296e:	4b24      	ldr	r3, [pc, #144]	; (8002a00 <HAL_RCC_OscConfig+0x244>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7ff f8b0 	bl	8001ad8 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800297c:	f7ff f8ac 	bl	8001ad8 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e187      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298e:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d036      	beq.n	8002a14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d016      	beq.n	80029dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ae:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <HAL_RCC_OscConfig+0x248>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b4:	f7ff f890 	bl	8001ad8 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029bc:	f7ff f88c 	bl	8001ad8 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e167      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ce:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <HAL_RCC_OscConfig+0x240>)
 80029d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0x200>
 80029da:	e01b      	b.n	8002a14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029dc:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <HAL_RCC_OscConfig+0x248>)
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e2:	f7ff f879 	bl	8001ad8 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e8:	e00e      	b.n	8002a08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ea:	f7ff f875 	bl	8001ad8 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d907      	bls.n	8002a08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e150      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
 80029fc:	40023800 	.word	0x40023800
 8002a00:	42470000 	.word	0x42470000
 8002a04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a08:	4b88      	ldr	r3, [pc, #544]	; (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1ea      	bne.n	80029ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8097 	beq.w	8002b50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a22:	2300      	movs	r3, #0
 8002a24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a26:	4b81      	ldr	r3, [pc, #516]	; (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10f      	bne.n	8002a52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	4b7d      	ldr	r3, [pc, #500]	; (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	4a7c      	ldr	r2, [pc, #496]	; (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a40:	6413      	str	r3, [r2, #64]	; 0x40
 8002a42:	4b7a      	ldr	r3, [pc, #488]	; (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a52:	4b77      	ldr	r3, [pc, #476]	; (8002c30 <HAL_RCC_OscConfig+0x474>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d118      	bne.n	8002a90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a5e:	4b74      	ldr	r3, [pc, #464]	; (8002c30 <HAL_RCC_OscConfig+0x474>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a73      	ldr	r2, [pc, #460]	; (8002c30 <HAL_RCC_OscConfig+0x474>)
 8002a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6a:	f7ff f835 	bl	8001ad8 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a72:	f7ff f831 	bl	8001ad8 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e10c      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a84:	4b6a      	ldr	r3, [pc, #424]	; (8002c30 <HAL_RCC_OscConfig+0x474>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d106      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x2ea>
 8002a98:	4b64      	ldr	r3, [pc, #400]	; (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9c:	4a63      	ldr	r2, [pc, #396]	; (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa4:	e01c      	b.n	8002ae0 <HAL_RCC_OscConfig+0x324>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b05      	cmp	r3, #5
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x30c>
 8002aae:	4b5f      	ldr	r3, [pc, #380]	; (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab2:	4a5e      	ldr	r2, [pc, #376]	; (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002ab4:	f043 0304 	orr.w	r3, r3, #4
 8002ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aba:	4b5c      	ldr	r3, [pc, #368]	; (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abe:	4a5b      	ldr	r2, [pc, #364]	; (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac6:	e00b      	b.n	8002ae0 <HAL_RCC_OscConfig+0x324>
 8002ac8:	4b58      	ldr	r3, [pc, #352]	; (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	4a57      	ldr	r2, [pc, #348]	; (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad4:	4b55      	ldr	r3, [pc, #340]	; (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad8:	4a54      	ldr	r2, [pc, #336]	; (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002ada:	f023 0304 	bic.w	r3, r3, #4
 8002ade:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d015      	beq.n	8002b14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae8:	f7fe fff6 	bl	8001ad8 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aee:	e00a      	b.n	8002b06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af0:	f7fe fff2 	bl	8001ad8 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e0cb      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b06:	4b49      	ldr	r3, [pc, #292]	; (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0ee      	beq.n	8002af0 <HAL_RCC_OscConfig+0x334>
 8002b12:	e014      	b.n	8002b3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b14:	f7fe ffe0 	bl	8001ad8 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1a:	e00a      	b.n	8002b32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b1c:	f7fe ffdc 	bl	8001ad8 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e0b5      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b32:	4b3e      	ldr	r3, [pc, #248]	; (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1ee      	bne.n	8002b1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b3e:	7dfb      	ldrb	r3, [r7, #23]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d105      	bne.n	8002b50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b44:	4b39      	ldr	r3, [pc, #228]	; (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	4a38      	ldr	r2, [pc, #224]	; (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002b4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80a1 	beq.w	8002c9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b5a:	4b34      	ldr	r3, [pc, #208]	; (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d05c      	beq.n	8002c20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d141      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6e:	4b31      	ldr	r3, [pc, #196]	; (8002c34 <HAL_RCC_OscConfig+0x478>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7fe ffb0 	bl	8001ad8 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7fe ffac 	bl	8001ad8 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e087      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8e:	4b27      	ldr	r3, [pc, #156]	; (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69da      	ldr	r2, [r3, #28]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	019b      	lsls	r3, r3, #6
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb0:	085b      	lsrs	r3, r3, #1
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	041b      	lsls	r3, r3, #16
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	061b      	lsls	r3, r3, #24
 8002bbe:	491b      	ldr	r1, [pc, #108]	; (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc4:	4b1b      	ldr	r3, [pc, #108]	; (8002c34 <HAL_RCC_OscConfig+0x478>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bca:	f7fe ff85 	bl	8001ad8 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd2:	f7fe ff81 	bl	8001ad8 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e05c      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be4:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0f0      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x416>
 8002bf0:	e054      	b.n	8002c9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf2:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <HAL_RCC_OscConfig+0x478>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7fe ff6e 	bl	8001ad8 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c00:	f7fe ff6a 	bl	8001ad8 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e045      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x444>
 8002c1e:	e03d      	b.n	8002c9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d107      	bne.n	8002c38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e038      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40007000 	.word	0x40007000
 8002c34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c38:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <HAL_RCC_OscConfig+0x4ec>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d028      	beq.n	8002c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d121      	bne.n	8002c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d11a      	bne.n	8002c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c68:	4013      	ands	r3, r2
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d111      	bne.n	8002c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	085b      	lsrs	r3, r3, #1
 8002c80:	3b01      	subs	r3, #1
 8002c82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d107      	bne.n	8002c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800

08002cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0cc      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc0:	4b68      	ldr	r3, [pc, #416]	; (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d90c      	bls.n	8002ce8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cce:	4b65      	ldr	r3, [pc, #404]	; (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd6:	4b63      	ldr	r3, [pc, #396]	; (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0b8      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d020      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d00:	4b59      	ldr	r3, [pc, #356]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	4a58      	ldr	r2, [pc, #352]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d18:	4b53      	ldr	r3, [pc, #332]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4a52      	ldr	r2, [pc, #328]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d24:	4b50      	ldr	r3, [pc, #320]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	494d      	ldr	r1, [pc, #308]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d044      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d107      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	4b47      	ldr	r3, [pc, #284]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d119      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e07f      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d003      	beq.n	8002d6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d107      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6a:	4b3f      	ldr	r3, [pc, #252]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e06f      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7a:	4b3b      	ldr	r3, [pc, #236]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e067      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d8a:	4b37      	ldr	r3, [pc, #220]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f023 0203 	bic.w	r2, r3, #3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	4934      	ldr	r1, [pc, #208]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d9c:	f7fe fe9c 	bl	8001ad8 <HAL_GetTick>
 8002da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da2:	e00a      	b.n	8002dba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da4:	f7fe fe98 	bl	8001ad8 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e04f      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dba:	4b2b      	ldr	r3, [pc, #172]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 020c 	and.w	r2, r3, #12
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d1eb      	bne.n	8002da4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dcc:	4b25      	ldr	r3, [pc, #148]	; (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d20c      	bcs.n	8002df4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dda:	4b22      	ldr	r3, [pc, #136]	; (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de2:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e032      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e00:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	4916      	ldr	r1, [pc, #88]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d009      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e1e:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	490e      	ldr	r1, [pc, #56]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e32:	f000 f821 	bl	8002e78 <HAL_RCC_GetSysClockFreq>
 8002e36:	4602      	mov	r2, r0
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	490a      	ldr	r1, [pc, #40]	; (8002e6c <HAL_RCC_ClockConfig+0x1c0>)
 8002e44:	5ccb      	ldrb	r3, [r1, r3]
 8002e46:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4a:	4a09      	ldr	r2, [pc, #36]	; (8002e70 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e4e:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <HAL_RCC_ClockConfig+0x1c8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fdfc 	bl	8001a50 <HAL_InitTick>

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40023c00 	.word	0x40023c00
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	08008ad8 	.word	0x08008ad8
 8002e70:	20000000 	.word	0x20000000
 8002e74:	20000004 	.word	0x20000004

08002e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e7c:	b094      	sub	sp, #80	; 0x50
 8002e7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	647b      	str	r3, [r7, #68]	; 0x44
 8002e84:	2300      	movs	r3, #0
 8002e86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e88:	2300      	movs	r3, #0
 8002e8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e90:	4b79      	ldr	r3, [pc, #484]	; (8003078 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 030c 	and.w	r3, r3, #12
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d00d      	beq.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x40>
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	f200 80e1 	bhi.w	8003064 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <HAL_RCC_GetSysClockFreq+0x34>
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d003      	beq.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eaa:	e0db      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002eac:	4b73      	ldr	r3, [pc, #460]	; (800307c <HAL_RCC_GetSysClockFreq+0x204>)
 8002eae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002eb0:	e0db      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eb2:	4b73      	ldr	r3, [pc, #460]	; (8003080 <HAL_RCC_GetSysClockFreq+0x208>)
 8002eb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eb6:	e0d8      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb8:	4b6f      	ldr	r3, [pc, #444]	; (8003078 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ec0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ec2:	4b6d      	ldr	r3, [pc, #436]	; (8003078 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d063      	beq.n	8002f96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ece:	4b6a      	ldr	r3, [pc, #424]	; (8003078 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	099b      	lsrs	r3, r3, #6
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ed8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ee6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002eea:	4622      	mov	r2, r4
 8002eec:	462b      	mov	r3, r5
 8002eee:	f04f 0000 	mov.w	r0, #0
 8002ef2:	f04f 0100 	mov.w	r1, #0
 8002ef6:	0159      	lsls	r1, r3, #5
 8002ef8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002efc:	0150      	lsls	r0, r2, #5
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4621      	mov	r1, r4
 8002f04:	1a51      	subs	r1, r2, r1
 8002f06:	6139      	str	r1, [r7, #16]
 8002f08:	4629      	mov	r1, r5
 8002f0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f1c:	4659      	mov	r1, fp
 8002f1e:	018b      	lsls	r3, r1, #6
 8002f20:	4651      	mov	r1, sl
 8002f22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f26:	4651      	mov	r1, sl
 8002f28:	018a      	lsls	r2, r1, #6
 8002f2a:	4651      	mov	r1, sl
 8002f2c:	ebb2 0801 	subs.w	r8, r2, r1
 8002f30:	4659      	mov	r1, fp
 8002f32:	eb63 0901 	sbc.w	r9, r3, r1
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f4a:	4690      	mov	r8, r2
 8002f4c:	4699      	mov	r9, r3
 8002f4e:	4623      	mov	r3, r4
 8002f50:	eb18 0303 	adds.w	r3, r8, r3
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	462b      	mov	r3, r5
 8002f58:	eb49 0303 	adc.w	r3, r9, r3
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f6a:	4629      	mov	r1, r5
 8002f6c:	024b      	lsls	r3, r1, #9
 8002f6e:	4621      	mov	r1, r4
 8002f70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f74:	4621      	mov	r1, r4
 8002f76:	024a      	lsls	r2, r1, #9
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f7e:	2200      	movs	r2, #0
 8002f80:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f88:	f7fd f982 	bl	8000290 <__aeabi_uldivmod>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4613      	mov	r3, r2
 8002f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f94:	e058      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f96:	4b38      	ldr	r3, [pc, #224]	; (8003078 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	099b      	lsrs	r3, r3, #6
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fa6:	623b      	str	r3, [r7, #32]
 8002fa8:	2300      	movs	r3, #0
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
 8002fac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fb0:	4642      	mov	r2, r8
 8002fb2:	464b      	mov	r3, r9
 8002fb4:	f04f 0000 	mov.w	r0, #0
 8002fb8:	f04f 0100 	mov.w	r1, #0
 8002fbc:	0159      	lsls	r1, r3, #5
 8002fbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fc2:	0150      	lsls	r0, r2, #5
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4641      	mov	r1, r8
 8002fca:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fce:	4649      	mov	r1, r9
 8002fd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fe0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fe4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fe8:	ebb2 040a 	subs.w	r4, r2, sl
 8002fec:	eb63 050b 	sbc.w	r5, r3, fp
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	00eb      	lsls	r3, r5, #3
 8002ffa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ffe:	00e2      	lsls	r2, r4, #3
 8003000:	4614      	mov	r4, r2
 8003002:	461d      	mov	r5, r3
 8003004:	4643      	mov	r3, r8
 8003006:	18e3      	adds	r3, r4, r3
 8003008:	603b      	str	r3, [r7, #0]
 800300a:	464b      	mov	r3, r9
 800300c:	eb45 0303 	adc.w	r3, r5, r3
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800301e:	4629      	mov	r1, r5
 8003020:	028b      	lsls	r3, r1, #10
 8003022:	4621      	mov	r1, r4
 8003024:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003028:	4621      	mov	r1, r4
 800302a:	028a      	lsls	r2, r1, #10
 800302c:	4610      	mov	r0, r2
 800302e:	4619      	mov	r1, r3
 8003030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003032:	2200      	movs	r2, #0
 8003034:	61bb      	str	r3, [r7, #24]
 8003036:	61fa      	str	r2, [r7, #28]
 8003038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800303c:	f7fd f928 	bl	8000290 <__aeabi_uldivmod>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4613      	mov	r3, r2
 8003046:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_RCC_GetSysClockFreq+0x200>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	0c1b      	lsrs	r3, r3, #16
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	3301      	adds	r3, #1
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003058:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800305a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800305c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003060:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003062:	e002      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <HAL_RCC_GetSysClockFreq+0x204>)
 8003066:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800306a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800306c:	4618      	mov	r0, r3
 800306e:	3750      	adds	r7, #80	; 0x50
 8003070:	46bd      	mov	sp, r7
 8003072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800
 800307c:	00f42400 	.word	0x00f42400
 8003080:	007a1200 	.word	0x007a1200

08003084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003088:	4b03      	ldr	r3, [pc, #12]	; (8003098 <HAL_RCC_GetHCLKFreq+0x14>)
 800308a:	681b      	ldr	r3, [r3, #0]
}
 800308c:	4618      	mov	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	20000000 	.word	0x20000000

0800309c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030a0:	f7ff fff0 	bl	8003084 <HAL_RCC_GetHCLKFreq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b05      	ldr	r3, [pc, #20]	; (80030bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	0a9b      	lsrs	r3, r3, #10
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	4903      	ldr	r1, [pc, #12]	; (80030c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030b2:	5ccb      	ldrb	r3, [r1, r3]
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40023800 	.word	0x40023800
 80030c0:	08008ae8 	.word	0x08008ae8

080030c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030c8:	f7ff ffdc 	bl	8003084 <HAL_RCC_GetHCLKFreq>
 80030cc:	4602      	mov	r2, r0
 80030ce:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	0b5b      	lsrs	r3, r3, #13
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	4903      	ldr	r1, [pc, #12]	; (80030e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030da:	5ccb      	ldrb	r3, [r1, r3]
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40023800 	.word	0x40023800
 80030e8:	08008ae8 	.word	0x08008ae8

080030ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e07b      	b.n	80031f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	2b00      	cmp	r3, #0
 8003104:	d108      	bne.n	8003118 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800310e:	d009      	beq.n	8003124 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	61da      	str	r2, [r3, #28]
 8003116:	e005      	b.n	8003124 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fe f90c 	bl	800135c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800315a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a8:	ea42 0103 	orr.w	r1, r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	0c1b      	lsrs	r3, r3, #16
 80031c2:	f003 0104 	and.w	r1, r3, #4
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	f003 0210 	and.w	r2, r3, #16
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69da      	ldr	r2, [r3, #28]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b08c      	sub	sp, #48	; 0x30
 8003202:	af00      	add	r7, sp, #0
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	607a      	str	r2, [r7, #4]
 800320a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800320c:	2301      	movs	r3, #1
 800320e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_SPI_TransmitReceive+0x26>
 8003220:	2302      	movs	r3, #2
 8003222:	e18a      	b.n	800353a <HAL_SPI_TransmitReceive+0x33c>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800322c:	f7fe fc54 	bl	8001ad8 <HAL_GetTick>
 8003230:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003238:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003242:	887b      	ldrh	r3, [r7, #2]
 8003244:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003246:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800324a:	2b01      	cmp	r3, #1
 800324c:	d00f      	beq.n	800326e <HAL_SPI_TransmitReceive+0x70>
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003254:	d107      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d103      	bne.n	8003266 <HAL_SPI_TransmitReceive+0x68>
 800325e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003262:	2b04      	cmp	r3, #4
 8003264:	d003      	beq.n	800326e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003266:	2302      	movs	r3, #2
 8003268:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800326c:	e15b      	b.n	8003526 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_SPI_TransmitReceive+0x82>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <HAL_SPI_TransmitReceive+0x82>
 800327a:	887b      	ldrh	r3, [r7, #2]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d103      	bne.n	8003288 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003286:	e14e      	b.n	8003526 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b04      	cmp	r3, #4
 8003292:	d003      	beq.n	800329c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2205      	movs	r2, #5
 8003298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	887a      	ldrh	r2, [r7, #2]
 80032ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	887a      	ldrh	r2, [r7, #2]
 80032b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	887a      	ldrh	r2, [r7, #2]
 80032be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	887a      	ldrh	r2, [r7, #2]
 80032c4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032dc:	2b40      	cmp	r3, #64	; 0x40
 80032de:	d007      	beq.n	80032f0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f8:	d178      	bne.n	80033ec <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d002      	beq.n	8003308 <HAL_SPI_TransmitReceive+0x10a>
 8003302:	8b7b      	ldrh	r3, [r7, #26]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d166      	bne.n	80033d6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	881a      	ldrh	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	1c9a      	adds	r2, r3, #2
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800332c:	e053      	b.n	80033d6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b02      	cmp	r3, #2
 800333a:	d11b      	bne.n	8003374 <HAL_SPI_TransmitReceive+0x176>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d016      	beq.n	8003374 <HAL_SPI_TransmitReceive+0x176>
 8003346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003348:	2b01      	cmp	r3, #1
 800334a:	d113      	bne.n	8003374 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003350:	881a      	ldrh	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	1c9a      	adds	r2, r3, #2
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b01      	cmp	r3, #1
 8003380:	d119      	bne.n	80033b6 <HAL_SPI_TransmitReceive+0x1b8>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d014      	beq.n	80033b6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003396:	b292      	uxth	r2, r2
 8003398:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	1c9a      	adds	r2, r3, #2
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033b2:	2301      	movs	r3, #1
 80033b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033b6:	f7fe fb8f 	bl	8001ad8 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d807      	bhi.n	80033d6 <HAL_SPI_TransmitReceive+0x1d8>
 80033c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033cc:	d003      	beq.n	80033d6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80033d4:	e0a7      	b.n	8003526 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033da:	b29b      	uxth	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1a6      	bne.n	800332e <HAL_SPI_TransmitReceive+0x130>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1a1      	bne.n	800332e <HAL_SPI_TransmitReceive+0x130>
 80033ea:	e07c      	b.n	80034e6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <HAL_SPI_TransmitReceive+0x1fc>
 80033f4:	8b7b      	ldrh	r3, [r7, #26]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d16b      	bne.n	80034d2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	330c      	adds	r3, #12
 8003404:	7812      	ldrb	r2, [r2, #0]
 8003406:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003420:	e057      	b.n	80034d2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b02      	cmp	r3, #2
 800342e:	d11c      	bne.n	800346a <HAL_SPI_TransmitReceive+0x26c>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003434:	b29b      	uxth	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d017      	beq.n	800346a <HAL_SPI_TransmitReceive+0x26c>
 800343a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343c:	2b01      	cmp	r3, #1
 800343e:	d114      	bne.n	800346a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	330c      	adds	r3, #12
 800344a:	7812      	ldrb	r2, [r2, #0]
 800344c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800345c:	b29b      	uxth	r3, r3
 800345e:	3b01      	subs	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b01      	cmp	r3, #1
 8003476:	d119      	bne.n	80034ac <HAL_SPI_TransmitReceive+0x2ae>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d014      	beq.n	80034ac <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034a8:	2301      	movs	r3, #1
 80034aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034ac:	f7fe fb14 	bl	8001ad8 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d803      	bhi.n	80034c4 <HAL_SPI_TransmitReceive+0x2c6>
 80034bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c2:	d102      	bne.n	80034ca <HAL_SPI_TransmitReceive+0x2cc>
 80034c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d103      	bne.n	80034d2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034d0:	e029      	b.n	8003526 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1a2      	bne.n	8003422 <HAL_SPI_TransmitReceive+0x224>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d19d      	bne.n	8003422 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 f8b2 	bl	8003654 <SPI_EndRxTxTransaction>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d006      	beq.n	8003504 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2220      	movs	r2, #32
 8003500:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003502:	e010      	b.n	8003526 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10b      	bne.n	8003524 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	e000      	b.n	8003526 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003524:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003536:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800353a:	4618      	mov	r0, r3
 800353c:	3730      	adds	r7, #48	; 0x30
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	4613      	mov	r3, r2
 8003552:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003554:	f7fe fac0 	bl	8001ad8 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	4413      	add	r3, r2
 8003562:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003564:	f7fe fab8 	bl	8001ad8 <HAL_GetTick>
 8003568:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800356a:	4b39      	ldr	r3, [pc, #228]	; (8003650 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	015b      	lsls	r3, r3, #5
 8003570:	0d1b      	lsrs	r3, r3, #20
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	fb02 f303 	mul.w	r3, r2, r3
 8003578:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800357a:	e054      	b.n	8003626 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003582:	d050      	beq.n	8003626 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003584:	f7fe faa8 	bl	8001ad8 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	69fa      	ldr	r2, [r7, #28]
 8003590:	429a      	cmp	r2, r3
 8003592:	d902      	bls.n	800359a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d13d      	bne.n	8003616 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035b2:	d111      	bne.n	80035d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035bc:	d004      	beq.n	80035c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c6:	d107      	bne.n	80035d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e0:	d10f      	bne.n	8003602 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003600:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e017      	b.n	8003646 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	3b01      	subs	r3, #1
 8003624:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	4013      	ands	r3, r2
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	429a      	cmp	r2, r3
 8003634:	bf0c      	ite	eq
 8003636:	2301      	moveq	r3, #1
 8003638:	2300      	movne	r3, #0
 800363a:	b2db      	uxtb	r3, r3
 800363c:	461a      	mov	r2, r3
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	429a      	cmp	r2, r3
 8003642:	d19b      	bne.n	800357c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3720      	adds	r7, #32
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	20000000 	.word	0x20000000

08003654 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af02      	add	r7, sp, #8
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003660:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <SPI_EndRxTxTransaction+0x7c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a1b      	ldr	r2, [pc, #108]	; (80036d4 <SPI_EndRxTxTransaction+0x80>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	0d5b      	lsrs	r3, r3, #21
 800366c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003670:	fb02 f303 	mul.w	r3, r2, r3
 8003674:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800367e:	d112      	bne.n	80036a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2200      	movs	r2, #0
 8003688:	2180      	movs	r1, #128	; 0x80
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f7ff ff5a 	bl	8003544 <SPI_WaitFlagStateUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d016      	beq.n	80036c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369a:	f043 0220 	orr.w	r2, r3, #32
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e00f      	b.n	80036c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036bc:	2b80      	cmp	r3, #128	; 0x80
 80036be:	d0f2      	beq.n	80036a6 <SPI_EndRxTxTransaction+0x52>
 80036c0:	e000      	b.n	80036c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80036c2:	bf00      	nop
  }

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000000 	.word	0x20000000
 80036d4:	165e9f81 	.word	0x165e9f81

080036d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e041      	b.n	800376e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d106      	bne.n	8003704 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7fd fe74 	bl	80013ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3304      	adds	r3, #4
 8003714:	4619      	mov	r1, r3
 8003716:	4610      	mov	r0, r2
 8003718:	f000 fd60 	bl	80041dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e041      	b.n	800380c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d106      	bne.n	80037a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f839 	bl	8003814 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2202      	movs	r2, #2
 80037a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3304      	adds	r3, #4
 80037b2:	4619      	mov	r1, r3
 80037b4:	4610      	mov	r0, r2
 80037b6:	f000 fd11 	bl	80041dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d109      	bne.n	8003854 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	bf0c      	ite	eq
 800384c:	2301      	moveq	r3, #1
 800384e:	2300      	movne	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	e022      	b.n	800389a <HAL_TIM_PWM_Start_DMA+0x72>
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2b04      	cmp	r3, #4
 8003858:	d109      	bne.n	800386e <HAL_TIM_PWM_Start_DMA+0x46>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	bf0c      	ite	eq
 8003866:	2301      	moveq	r3, #1
 8003868:	2300      	movne	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	e015      	b.n	800389a <HAL_TIM_PWM_Start_DMA+0x72>
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b08      	cmp	r3, #8
 8003872:	d109      	bne.n	8003888 <HAL_TIM_PWM_Start_DMA+0x60>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	bf0c      	ite	eq
 8003880:	2301      	moveq	r3, #1
 8003882:	2300      	movne	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	e008      	b.n	800389a <HAL_TIM_PWM_Start_DMA+0x72>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800389e:	2302      	movs	r3, #2
 80038a0:	e15d      	b.n	8003b5e <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d109      	bne.n	80038bc <HAL_TIM_PWM_Start_DMA+0x94>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	bf0c      	ite	eq
 80038b4:	2301      	moveq	r3, #1
 80038b6:	2300      	movne	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	e022      	b.n	8003902 <HAL_TIM_PWM_Start_DMA+0xda>
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d109      	bne.n	80038d6 <HAL_TIM_PWM_Start_DMA+0xae>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	bf0c      	ite	eq
 80038ce:	2301      	moveq	r3, #1
 80038d0:	2300      	movne	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	e015      	b.n	8003902 <HAL_TIM_PWM_Start_DMA+0xda>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d109      	bne.n	80038f0 <HAL_TIM_PWM_Start_DMA+0xc8>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	bf0c      	ite	eq
 80038e8:	2301      	moveq	r3, #1
 80038ea:	2300      	movne	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	e008      	b.n	8003902 <HAL_TIM_PWM_Start_DMA+0xda>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	bf0c      	ite	eq
 80038fc:	2301      	moveq	r3, #1
 80038fe:	2300      	movne	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d024      	beq.n	8003950 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d104      	bne.n	8003916 <HAL_TIM_PWM_Start_DMA+0xee>
 800390c:	887b      	ldrh	r3, [r7, #2]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e123      	b.n	8003b5e <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d104      	bne.n	8003926 <HAL_TIM_PWM_Start_DMA+0xfe>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003924:	e016      	b.n	8003954 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b04      	cmp	r3, #4
 800392a:	d104      	bne.n	8003936 <HAL_TIM_PWM_Start_DMA+0x10e>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003934:	e00e      	b.n	8003954 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b08      	cmp	r3, #8
 800393a:	d104      	bne.n	8003946 <HAL_TIM_PWM_Start_DMA+0x11e>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003944:	e006      	b.n	8003954 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2202      	movs	r2, #2
 800394a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800394e:	e001      	b.n	8003954 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e104      	b.n	8003b5e <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b0c      	cmp	r3, #12
 8003958:	f200 80ae 	bhi.w	8003ab8 <HAL_TIM_PWM_Start_DMA+0x290>
 800395c:	a201      	add	r2, pc, #4	; (adr r2, 8003964 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800395e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003962:	bf00      	nop
 8003964:	08003999 	.word	0x08003999
 8003968:	08003ab9 	.word	0x08003ab9
 800396c:	08003ab9 	.word	0x08003ab9
 8003970:	08003ab9 	.word	0x08003ab9
 8003974:	080039e1 	.word	0x080039e1
 8003978:	08003ab9 	.word	0x08003ab9
 800397c:	08003ab9 	.word	0x08003ab9
 8003980:	08003ab9 	.word	0x08003ab9
 8003984:	08003a29 	.word	0x08003a29
 8003988:	08003ab9 	.word	0x08003ab9
 800398c:	08003ab9 	.word	0x08003ab9
 8003990:	08003ab9 	.word	0x08003ab9
 8003994:	08003a71 	.word	0x08003a71
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	4a72      	ldr	r2, [pc, #456]	; (8003b68 <HAL_TIM_PWM_Start_DMA+0x340>)
 800399e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	4a71      	ldr	r2, [pc, #452]	; (8003b6c <HAL_TIM_PWM_Start_DMA+0x344>)
 80039a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	4a70      	ldr	r2, [pc, #448]	; (8003b70 <HAL_TIM_PWM_Start_DMA+0x348>)
 80039ae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3334      	adds	r3, #52	; 0x34
 80039bc:	461a      	mov	r2, r3
 80039be:	887b      	ldrh	r3, [r7, #2]
 80039c0:	f7fe fa7a 	bl	8001eb8 <HAL_DMA_Start_IT>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e0c7      	b.n	8003b5e <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039dc:	60da      	str	r2, [r3, #12]
      break;
 80039de:	e06e      	b.n	8003abe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e4:	4a60      	ldr	r2, [pc, #384]	; (8003b68 <HAL_TIM_PWM_Start_DMA+0x340>)
 80039e6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	4a5f      	ldr	r2, [pc, #380]	; (8003b6c <HAL_TIM_PWM_Start_DMA+0x344>)
 80039ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f4:	4a5e      	ldr	r2, [pc, #376]	; (8003b70 <HAL_TIM_PWM_Start_DMA+0x348>)
 80039f6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	3338      	adds	r3, #56	; 0x38
 8003a04:	461a      	mov	r2, r3
 8003a06:	887b      	ldrh	r3, [r7, #2]
 8003a08:	f7fe fa56 	bl	8001eb8 <HAL_DMA_Start_IT>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e0a3      	b.n	8003b5e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a24:	60da      	str	r2, [r3, #12]
      break;
 8003a26:	e04a      	b.n	8003abe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	4a4e      	ldr	r2, [pc, #312]	; (8003b68 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003a2e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	4a4d      	ldr	r2, [pc, #308]	; (8003b6c <HAL_TIM_PWM_Start_DMA+0x344>)
 8003a36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	4a4c      	ldr	r2, [pc, #304]	; (8003b70 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003a3e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	333c      	adds	r3, #60	; 0x3c
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	887b      	ldrh	r3, [r7, #2]
 8003a50:	f7fe fa32 	bl	8001eb8 <HAL_DMA_Start_IT>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e07f      	b.n	8003b5e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a6c:	60da      	str	r2, [r3, #12]
      break;
 8003a6e:	e026      	b.n	8003abe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	4a3c      	ldr	r2, [pc, #240]	; (8003b68 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003a76:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	4a3b      	ldr	r2, [pc, #236]	; (8003b6c <HAL_TIM_PWM_Start_DMA+0x344>)
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	4a3a      	ldr	r2, [pc, #232]	; (8003b70 <HAL_TIM_PWM_Start_DMA+0x348>)
 8003a86:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	3340      	adds	r3, #64	; 0x40
 8003a94:	461a      	mov	r2, r3
 8003a96:	887b      	ldrh	r3, [r7, #2]
 8003a98:	f7fe fa0e 	bl	8001eb8 <HAL_DMA_Start_IT>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e05b      	b.n	8003b5e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ab4:	60da      	str	r2, [r3, #12]
      break;
 8003ab6:	e002      	b.n	8003abe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	75fb      	strb	r3, [r7, #23]
      break;
 8003abc:	bf00      	nop
  }

  if (status == HAL_OK)
 8003abe:	7dfb      	ldrb	r3, [r7, #23]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d14b      	bne.n	8003b5c <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	68b9      	ldr	r1, [r7, #8]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 fe2b 	bl	8004728 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a27      	ldr	r2, [pc, #156]	; (8003b74 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d107      	bne.n	8003aec <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a20      	ldr	r2, [pc, #128]	; (8003b74 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d018      	beq.n	8003b28 <HAL_TIM_PWM_Start_DMA+0x300>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afe:	d013      	beq.n	8003b28 <HAL_TIM_PWM_Start_DMA+0x300>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1c      	ldr	r2, [pc, #112]	; (8003b78 <HAL_TIM_PWM_Start_DMA+0x350>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00e      	beq.n	8003b28 <HAL_TIM_PWM_Start_DMA+0x300>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a1b      	ldr	r2, [pc, #108]	; (8003b7c <HAL_TIM_PWM_Start_DMA+0x354>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d009      	beq.n	8003b28 <HAL_TIM_PWM_Start_DMA+0x300>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a19      	ldr	r2, [pc, #100]	; (8003b80 <HAL_TIM_PWM_Start_DMA+0x358>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d004      	beq.n	8003b28 <HAL_TIM_PWM_Start_DMA+0x300>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a18      	ldr	r2, [pc, #96]	; (8003b84 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d111      	bne.n	8003b4c <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	2b06      	cmp	r3, #6
 8003b38:	d010      	beq.n	8003b5c <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f042 0201 	orr.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b4a:	e007      	b.n	8003b5c <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0201 	orr.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	080040cd 	.word	0x080040cd
 8003b6c:	08004175 	.word	0x08004175
 8003b70:	0800403b 	.word	0x0800403b
 8003b74:	40010000 	.word	0x40010000
 8003b78:	40000400 	.word	0x40000400
 8003b7c:	40000800 	.word	0x40000800
 8003b80:	40000c00 	.word	0x40000c00
 8003b84:	40014000 	.word	0x40014000

08003b88 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b0c      	cmp	r3, #12
 8003b9a:	d855      	bhi.n	8003c48 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003b9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ba4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba2:	bf00      	nop
 8003ba4:	08003bd9 	.word	0x08003bd9
 8003ba8:	08003c49 	.word	0x08003c49
 8003bac:	08003c49 	.word	0x08003c49
 8003bb0:	08003c49 	.word	0x08003c49
 8003bb4:	08003bf5 	.word	0x08003bf5
 8003bb8:	08003c49 	.word	0x08003c49
 8003bbc:	08003c49 	.word	0x08003c49
 8003bc0:	08003c49 	.word	0x08003c49
 8003bc4:	08003c11 	.word	0x08003c11
 8003bc8:	08003c49 	.word	0x08003c49
 8003bcc:	08003c49 	.word	0x08003c49
 8003bd0:	08003c49 	.word	0x08003c49
 8003bd4:	08003c2d 	.word	0x08003c2d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003be6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7fe f9bb 	bl	8001f68 <HAL_DMA_Abort_IT>
      break;
 8003bf2:	e02c      	b.n	8003c4e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c02:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fe f9ad 	bl	8001f68 <HAL_DMA_Abort_IT>
      break;
 8003c0e:	e01e      	b.n	8003c4e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c1e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7fe f99f 	bl	8001f68 <HAL_DMA_Abort_IT>
      break;
 8003c2a:	e010      	b.n	8003c4e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c3a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fe f991 	bl	8001f68 <HAL_DMA_Abort_IT>
      break;
 8003c46:	e002      	b.n	8003c4e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c4c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d157      	bne.n	8003d04 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	6839      	ldr	r1, [r7, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 fd63 	bl	8004728 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a2a      	ldr	r2, [pc, #168]	; (8003d10 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d117      	bne.n	8003c9c <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6a1a      	ldr	r2, [r3, #32]
 8003c72:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c76:	4013      	ands	r3, r2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10f      	bne.n	8003c9c <HAL_TIM_PWM_Stop_DMA+0x114>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6a1a      	ldr	r2, [r3, #32]
 8003c82:	f240 4344 	movw	r3, #1092	; 0x444
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d107      	bne.n	8003c9c <HAL_TIM_PWM_Stop_DMA+0x114>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c9a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6a1a      	ldr	r2, [r3, #32]
 8003ca2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10f      	bne.n	8003ccc <HAL_TIM_PWM_Stop_DMA+0x144>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6a1a      	ldr	r2, [r3, #32]
 8003cb2:	f240 4344 	movw	r3, #1092	; 0x444
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d107      	bne.n	8003ccc <HAL_TIM_PWM_Stop_DMA+0x144>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0201 	bic.w	r2, r2, #1
 8003cca:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d104      	bne.n	8003cdc <HAL_TIM_PWM_Stop_DMA+0x154>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cda:	e013      	b.n	8003d04 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d104      	bne.n	8003cec <HAL_TIM_PWM_Stop_DMA+0x164>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cea:	e00b      	b.n	8003d04 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d104      	bne.n	8003cfc <HAL_TIM_PWM_Stop_DMA+0x174>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cfa:	e003      	b.n	8003d04 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40010000 	.word	0x40010000

08003d14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e0ae      	b.n	8003e90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b0c      	cmp	r3, #12
 8003d3e:	f200 809f 	bhi.w	8003e80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d42:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d48:	08003d7d 	.word	0x08003d7d
 8003d4c:	08003e81 	.word	0x08003e81
 8003d50:	08003e81 	.word	0x08003e81
 8003d54:	08003e81 	.word	0x08003e81
 8003d58:	08003dbd 	.word	0x08003dbd
 8003d5c:	08003e81 	.word	0x08003e81
 8003d60:	08003e81 	.word	0x08003e81
 8003d64:	08003e81 	.word	0x08003e81
 8003d68:	08003dff 	.word	0x08003dff
 8003d6c:	08003e81 	.word	0x08003e81
 8003d70:	08003e81 	.word	0x08003e81
 8003d74:	08003e81 	.word	0x08003e81
 8003d78:	08003e3f 	.word	0x08003e3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68b9      	ldr	r1, [r7, #8]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 faaa 	bl	80042dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0208 	orr.w	r2, r2, #8
 8003d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0204 	bic.w	r2, r2, #4
 8003da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6999      	ldr	r1, [r3, #24]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	691a      	ldr	r2, [r3, #16]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	619a      	str	r2, [r3, #24]
      break;
 8003dba:	e064      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 faf0 	bl	80043a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699a      	ldr	r2, [r3, #24]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6999      	ldr	r1, [r3, #24]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	021a      	lsls	r2, r3, #8
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	619a      	str	r2, [r3, #24]
      break;
 8003dfc:	e043      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 fb3b 	bl	8004480 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69da      	ldr	r2, [r3, #28]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0208 	orr.w	r2, r2, #8
 8003e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69da      	ldr	r2, [r3, #28]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0204 	bic.w	r2, r2, #4
 8003e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69d9      	ldr	r1, [r3, #28]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	61da      	str	r2, [r3, #28]
      break;
 8003e3c:	e023      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68b9      	ldr	r1, [r7, #8]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fb85 	bl	8004554 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	69da      	ldr	r2, [r3, #28]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69da      	ldr	r2, [r3, #28]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69d9      	ldr	r1, [r3, #28]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	021a      	lsls	r2, r3, #8
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	61da      	str	r2, [r3, #28]
      break;
 8003e7e:	e002      	b.n	8003e86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	75fb      	strb	r3, [r7, #23]
      break;
 8003e84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_TIM_ConfigClockSource+0x1c>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e0b4      	b.n	800401e <HAL_TIM_ConfigClockSource+0x186>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eec:	d03e      	beq.n	8003f6c <HAL_TIM_ConfigClockSource+0xd4>
 8003eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef2:	f200 8087 	bhi.w	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efa:	f000 8086 	beq.w	800400a <HAL_TIM_ConfigClockSource+0x172>
 8003efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f02:	d87f      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f04:	2b70      	cmp	r3, #112	; 0x70
 8003f06:	d01a      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0xa6>
 8003f08:	2b70      	cmp	r3, #112	; 0x70
 8003f0a:	d87b      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f0c:	2b60      	cmp	r3, #96	; 0x60
 8003f0e:	d050      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x11a>
 8003f10:	2b60      	cmp	r3, #96	; 0x60
 8003f12:	d877      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f14:	2b50      	cmp	r3, #80	; 0x50
 8003f16:	d03c      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0xfa>
 8003f18:	2b50      	cmp	r3, #80	; 0x50
 8003f1a:	d873      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f1c:	2b40      	cmp	r3, #64	; 0x40
 8003f1e:	d058      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0x13a>
 8003f20:	2b40      	cmp	r3, #64	; 0x40
 8003f22:	d86f      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f24:	2b30      	cmp	r3, #48	; 0x30
 8003f26:	d064      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f28:	2b30      	cmp	r3, #48	; 0x30
 8003f2a:	d86b      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d060      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f30:	2b20      	cmp	r3, #32
 8003f32:	d867      	bhi.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d05c      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f38:	2b10      	cmp	r3, #16
 8003f3a:	d05a      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f3c:	e062      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6899      	ldr	r1, [r3, #8]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f000 fbcb 	bl	80046e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	609a      	str	r2, [r3, #8]
      break;
 8003f6a:	e04f      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6818      	ldr	r0, [r3, #0]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	6899      	ldr	r1, [r3, #8]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f000 fbb4 	bl	80046e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f8e:	609a      	str	r2, [r3, #8]
      break;
 8003f90:	e03c      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6859      	ldr	r1, [r3, #4]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f000 fb28 	bl	80045f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2150      	movs	r1, #80	; 0x50
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fb81 	bl	80046b2 <TIM_ITRx_SetConfig>
      break;
 8003fb0:	e02c      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6818      	ldr	r0, [r3, #0]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	6859      	ldr	r1, [r3, #4]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f000 fb47 	bl	8004652 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2160      	movs	r1, #96	; 0x60
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fb71 	bl	80046b2 <TIM_ITRx_SetConfig>
      break;
 8003fd0:	e01c      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6818      	ldr	r0, [r3, #0]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	6859      	ldr	r1, [r3, #4]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f000 fb08 	bl	80045f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2140      	movs	r1, #64	; 0x40
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fb61 	bl	80046b2 <TIM_ITRx_SetConfig>
      break;
 8003ff0:	e00c      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	f000 fb58 	bl	80046b2 <TIM_ITRx_SetConfig>
      break;
 8004002:	e003      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
      break;
 8004008:	e000      	b.n	800400c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800400a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800401c:	7bfb      	ldrb	r3, [r7, #15]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	429a      	cmp	r2, r3
 8004050:	d107      	bne.n	8004062 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2201      	movs	r2, #1
 8004056:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004060:	e02a      	b.n	80040b8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	429a      	cmp	r2, r3
 800406a:	d107      	bne.n	800407c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2202      	movs	r2, #2
 8004070:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800407a:	e01d      	b.n	80040b8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	429a      	cmp	r2, r3
 8004084:	d107      	bne.n	8004096 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2204      	movs	r2, #4
 800408a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004094:	e010      	b.n	80040b8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	429a      	cmp	r2, r3
 800409e:	d107      	bne.n	80040b0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2208      	movs	r2, #8
 80040a4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040ae:	e003      	b.n	80040b8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f7ff ffb4 	bl	8004026 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	771a      	strb	r2, [r3, #28]
}
 80040c4:	bf00      	nop
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d10b      	bne.n	80040fc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2201      	movs	r2, #1
 80040e8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d136      	bne.n	8004160 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040fa:	e031      	b.n	8004160 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	429a      	cmp	r2, r3
 8004104:	d10b      	bne.n	800411e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2202      	movs	r2, #2
 800410a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d125      	bne.n	8004160 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800411c:	e020      	b.n	8004160 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	429a      	cmp	r2, r3
 8004126:	d10b      	bne.n	8004140 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2204      	movs	r2, #4
 800412c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d114      	bne.n	8004160 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800413e:	e00f      	b.n	8004160 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	429a      	cmp	r2, r3
 8004148:	d10a      	bne.n	8004160 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2208      	movs	r2, #8
 800414e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d103      	bne.n	8004160 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f7fc fe87 	bl	8000e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	771a      	strb	r2, [r3, #28]
}
 800416c:	bf00      	nop
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004180:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	429a      	cmp	r2, r3
 800418a:	d103      	bne.n	8004194 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2201      	movs	r2, #1
 8004190:	771a      	strb	r2, [r3, #28]
 8004192:	e019      	b.n	80041c8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	429a      	cmp	r2, r3
 800419c:	d103      	bne.n	80041a6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2202      	movs	r2, #2
 80041a2:	771a      	strb	r2, [r3, #28]
 80041a4:	e010      	b.n	80041c8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d103      	bne.n	80041b8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2204      	movs	r2, #4
 80041b4:	771a      	strb	r2, [r3, #28]
 80041b6:	e007      	b.n	80041c8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d102      	bne.n	80041c8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2208      	movs	r2, #8
 80041c6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f7fc fda5 	bl	8000d18 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	771a      	strb	r2, [r3, #28]
}
 80041d4:	bf00      	nop
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a34      	ldr	r2, [pc, #208]	; (80042c0 <TIM_Base_SetConfig+0xe4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00f      	beq.n	8004214 <TIM_Base_SetConfig+0x38>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041fa:	d00b      	beq.n	8004214 <TIM_Base_SetConfig+0x38>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a31      	ldr	r2, [pc, #196]	; (80042c4 <TIM_Base_SetConfig+0xe8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d007      	beq.n	8004214 <TIM_Base_SetConfig+0x38>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a30      	ldr	r2, [pc, #192]	; (80042c8 <TIM_Base_SetConfig+0xec>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d003      	beq.n	8004214 <TIM_Base_SetConfig+0x38>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a2f      	ldr	r2, [pc, #188]	; (80042cc <TIM_Base_SetConfig+0xf0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d108      	bne.n	8004226 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a25      	ldr	r2, [pc, #148]	; (80042c0 <TIM_Base_SetConfig+0xe4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d01b      	beq.n	8004266 <TIM_Base_SetConfig+0x8a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004234:	d017      	beq.n	8004266 <TIM_Base_SetConfig+0x8a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a22      	ldr	r2, [pc, #136]	; (80042c4 <TIM_Base_SetConfig+0xe8>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d013      	beq.n	8004266 <TIM_Base_SetConfig+0x8a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a21      	ldr	r2, [pc, #132]	; (80042c8 <TIM_Base_SetConfig+0xec>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d00f      	beq.n	8004266 <TIM_Base_SetConfig+0x8a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a20      	ldr	r2, [pc, #128]	; (80042cc <TIM_Base_SetConfig+0xf0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00b      	beq.n	8004266 <TIM_Base_SetConfig+0x8a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a1f      	ldr	r2, [pc, #124]	; (80042d0 <TIM_Base_SetConfig+0xf4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d007      	beq.n	8004266 <TIM_Base_SetConfig+0x8a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a1e      	ldr	r2, [pc, #120]	; (80042d4 <TIM_Base_SetConfig+0xf8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d003      	beq.n	8004266 <TIM_Base_SetConfig+0x8a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a1d      	ldr	r2, [pc, #116]	; (80042d8 <TIM_Base_SetConfig+0xfc>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d108      	bne.n	8004278 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a08      	ldr	r2, [pc, #32]	; (80042c0 <TIM_Base_SetConfig+0xe4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d103      	bne.n	80042ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	615a      	str	r2, [r3, #20]
}
 80042b2:	bf00      	nop
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40010000 	.word	0x40010000
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40000800 	.word	0x40000800
 80042cc:	40000c00 	.word	0x40000c00
 80042d0:	40014000 	.word	0x40014000
 80042d4:	40014400 	.word	0x40014400
 80042d8:	40014800 	.word	0x40014800

080042dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	f023 0201 	bic.w	r2, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0303 	bic.w	r3, r3, #3
 8004312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	4313      	orrs	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f023 0302 	bic.w	r3, r3, #2
 8004324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	4313      	orrs	r3, r2
 800432e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a1c      	ldr	r2, [pc, #112]	; (80043a4 <TIM_OC1_SetConfig+0xc8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d10c      	bne.n	8004352 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f023 0308 	bic.w	r3, r3, #8
 800433e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	4313      	orrs	r3, r2
 8004348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f023 0304 	bic.w	r3, r3, #4
 8004350:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a13      	ldr	r2, [pc, #76]	; (80043a4 <TIM_OC1_SetConfig+0xc8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d111      	bne.n	800437e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	4313      	orrs	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	621a      	str	r2, [r3, #32]
}
 8004398:	bf00      	nop
 800439a:	371c      	adds	r7, #28
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	40010000 	.word	0x40010000

080043a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	f023 0210 	bic.w	r2, r3, #16
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	021b      	lsls	r3, r3, #8
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f023 0320 	bic.w	r3, r3, #32
 80043f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a1e      	ldr	r2, [pc, #120]	; (800447c <TIM_OC2_SetConfig+0xd4>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d10d      	bne.n	8004424 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800440e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	4313      	orrs	r3, r2
 800441a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004422:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a15      	ldr	r2, [pc, #84]	; (800447c <TIM_OC2_SetConfig+0xd4>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d113      	bne.n	8004454 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004432:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800443a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	621a      	str	r2, [r3, #32]
}
 800446e:	bf00      	nop
 8004470:	371c      	adds	r7, #28
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40010000 	.word	0x40010000

08004480 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0303 	bic.w	r3, r3, #3
 80044b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	021b      	lsls	r3, r3, #8
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a1d      	ldr	r2, [pc, #116]	; (8004550 <TIM_OC3_SetConfig+0xd0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d10d      	bne.n	80044fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	021b      	lsls	r3, r3, #8
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a14      	ldr	r2, [pc, #80]	; (8004550 <TIM_OC3_SetConfig+0xd0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d113      	bne.n	800452a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4313      	orrs	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	4313      	orrs	r3, r2
 8004528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	621a      	str	r2, [r3, #32]
}
 8004544:	bf00      	nop
 8004546:	371c      	adds	r7, #28
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	40010000 	.word	0x40010000

08004554 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800458a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	021b      	lsls	r3, r3, #8
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	4313      	orrs	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800459e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	031b      	lsls	r3, r3, #12
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a10      	ldr	r2, [pc, #64]	; (80045f0 <TIM_OC4_SetConfig+0x9c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d109      	bne.n	80045c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	019b      	lsls	r3, r3, #6
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	621a      	str	r2, [r3, #32]
}
 80045e2:	bf00      	nop
 80045e4:	371c      	adds	r7, #28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40010000 	.word	0x40010000

080045f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	f023 0201 	bic.w	r2, r3, #1
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800461e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4313      	orrs	r3, r2
 8004628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f023 030a 	bic.w	r3, r3, #10
 8004630:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4313      	orrs	r3, r2
 8004638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	621a      	str	r2, [r3, #32]
}
 8004646:	bf00      	nop
 8004648:	371c      	adds	r7, #28
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004652:	b480      	push	{r7}
 8004654:	b087      	sub	sp, #28
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	f023 0210 	bic.w	r2, r3, #16
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800467c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	031b      	lsls	r3, r3, #12
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	4313      	orrs	r3, r2
 8004686:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800468e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	011b      	lsls	r3, r3, #4
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	4313      	orrs	r3, r2
 8004698:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	621a      	str	r2, [r3, #32]
}
 80046a6:	bf00      	nop
 80046a8:	371c      	adds	r7, #28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b085      	sub	sp, #20
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
 80046ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f043 0307 	orr.w	r3, r3, #7
 80046d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	609a      	str	r2, [r3, #8]
}
 80046dc:	bf00      	nop
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004702:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	021a      	lsls	r2, r3, #8
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	431a      	orrs	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4313      	orrs	r3, r2
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	609a      	str	r2, [r3, #8]
}
 800471c:	bf00      	nop
 800471e:	371c      	adds	r7, #28
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f003 031f 	and.w	r3, r3, #31
 800473a:	2201      	movs	r2, #1
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6a1a      	ldr	r2, [r3, #32]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	43db      	mvns	r3, r3
 800474a:	401a      	ands	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a1a      	ldr	r2, [r3, #32]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	fa01 f303 	lsl.w	r3, r1, r3
 8004760:	431a      	orrs	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	621a      	str	r2, [r3, #32]
}
 8004766:	bf00      	nop
 8004768:	371c      	adds	r7, #28
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
	...

08004774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004784:	2b01      	cmp	r3, #1
 8004786:	d101      	bne.n	800478c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004788:	2302      	movs	r3, #2
 800478a:	e050      	b.n	800482e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1c      	ldr	r2, [pc, #112]	; (800483c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d018      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d8:	d013      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a18      	ldr	r2, [pc, #96]	; (8004840 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00e      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a16      	ldr	r2, [pc, #88]	; (8004844 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d009      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a15      	ldr	r2, [pc, #84]	; (8004848 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d004      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a13      	ldr	r2, [pc, #76]	; (800484c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d10c      	bne.n	800481c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004808:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	4313      	orrs	r3, r2
 8004812:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40010000 	.word	0x40010000
 8004840:	40000400 	.word	0x40000400
 8004844:	40000800 	.word	0x40000800
 8004848:	40000c00 	.word	0x40000c00
 800484c:	40014000 	.word	0x40014000

08004850 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800485a:	2300      	movs	r3, #0
 800485c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004864:	2b01      	cmp	r3, #1
 8004866:	d101      	bne.n	800486c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004868:	2302      	movs	r3, #2
 800486a:	e03d      	b.n	80048e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	4313      	orrs	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e03f      	b.n	8004986 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7fc fe66 	bl	80015ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2224      	movs	r2, #36	; 0x24
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004936:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f929 	bl	8004b90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800494c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695a      	ldr	r2, [r3, #20]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800495c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800496c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2220      	movs	r2, #32
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b08a      	sub	sp, #40	; 0x28
 8004992:	af02      	add	r7, sp, #8
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	603b      	str	r3, [r7, #0]
 800499a:	4613      	mov	r3, r2
 800499c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b20      	cmp	r3, #32
 80049ac:	d17c      	bne.n	8004aa8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <HAL_UART_Transmit+0x2c>
 80049b4:	88fb      	ldrh	r3, [r7, #6]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e075      	b.n	8004aaa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_UART_Transmit+0x3e>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e06e      	b.n	8004aaa <HAL_UART_Transmit+0x11c>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2221      	movs	r2, #33	; 0x21
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049e2:	f7fd f879 	bl	8001ad8 <HAL_GetTick>
 80049e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	88fa      	ldrh	r2, [r7, #6]
 80049ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	88fa      	ldrh	r2, [r7, #6]
 80049f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049fc:	d108      	bne.n	8004a10 <HAL_UART_Transmit+0x82>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d104      	bne.n	8004a10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	61bb      	str	r3, [r7, #24]
 8004a0e:	e003      	b.n	8004a18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a14:	2300      	movs	r3, #0
 8004a16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a20:	e02a      	b.n	8004a78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	2180      	movs	r1, #128	; 0x80
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 f840 	bl	8004ab2 <UART_WaitOnFlagUntilTimeout>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e036      	b.n	8004aaa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10b      	bne.n	8004a5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	3302      	adds	r3, #2
 8004a56:	61bb      	str	r3, [r7, #24]
 8004a58:	e007      	b.n	8004a6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	781a      	ldrb	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	3301      	adds	r3, #1
 8004a68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1cf      	bne.n	8004a22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	2140      	movs	r1, #64	; 0x40
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 f810 	bl	8004ab2 <UART_WaitOnFlagUntilTimeout>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e006      	b.n	8004aaa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	e000      	b.n	8004aaa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004aa8:	2302      	movs	r3, #2
  }
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3720      	adds	r7, #32
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b090      	sub	sp, #64	; 0x40
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	603b      	str	r3, [r7, #0]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ac2:	e050      	b.n	8004b66 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aca:	d04c      	beq.n	8004b66 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d007      	beq.n	8004ae2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ad2:	f7fd f801 	bl	8001ad8 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d241      	bcs.n	8004b66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	330c      	adds	r3, #12
 8004ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aec:	e853 3f00 	ldrex	r3, [r3]
 8004af0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	330c      	adds	r3, #12
 8004b00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b02:	637a      	str	r2, [r7, #52]	; 0x34
 8004b04:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b0a:	e841 2300 	strex	r3, r2, [r1]
 8004b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1e5      	bne.n	8004ae2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3314      	adds	r3, #20
 8004b1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	e853 3f00 	ldrex	r3, [r3]
 8004b24:	613b      	str	r3, [r7, #16]
   return(result);
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	f023 0301 	bic.w	r3, r3, #1
 8004b2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3314      	adds	r3, #20
 8004b34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b36:	623a      	str	r2, [r7, #32]
 8004b38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	69f9      	ldr	r1, [r7, #28]
 8004b3c:	6a3a      	ldr	r2, [r7, #32]
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e5      	bne.n	8004b16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2220      	movs	r2, #32
 8004b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e00f      	b.n	8004b86 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	bf0c      	ite	eq
 8004b76:	2301      	moveq	r3, #1
 8004b78:	2300      	movne	r3, #0
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	79fb      	ldrb	r3, [r7, #7]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d09f      	beq.n	8004ac4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3740      	adds	r7, #64	; 0x40
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b94:	b0c0      	sub	sp, #256	; 0x100
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bac:	68d9      	ldr	r1, [r3, #12]
 8004bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	ea40 0301 	orr.w	r3, r0, r1
 8004bb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004be8:	f021 010c 	bic.w	r1, r1, #12
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004bf6:	430b      	orrs	r3, r1
 8004bf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0a:	6999      	ldr	r1, [r3, #24]
 8004c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	ea40 0301 	orr.w	r3, r0, r1
 8004c16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	4b8f      	ldr	r3, [pc, #572]	; (8004e5c <UART_SetConfig+0x2cc>)
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d005      	beq.n	8004c30 <UART_SetConfig+0xa0>
 8004c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	4b8d      	ldr	r3, [pc, #564]	; (8004e60 <UART_SetConfig+0x2d0>)
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d104      	bne.n	8004c3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c30:	f7fe fa48 	bl	80030c4 <HAL_RCC_GetPCLK2Freq>
 8004c34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c38:	e003      	b.n	8004c42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c3a:	f7fe fa2f 	bl	800309c <HAL_RCC_GetPCLK1Freq>
 8004c3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c4c:	f040 810c 	bne.w	8004e68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c54:	2200      	movs	r2, #0
 8004c56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c62:	4622      	mov	r2, r4
 8004c64:	462b      	mov	r3, r5
 8004c66:	1891      	adds	r1, r2, r2
 8004c68:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c6a:	415b      	adcs	r3, r3
 8004c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c72:	4621      	mov	r1, r4
 8004c74:	eb12 0801 	adds.w	r8, r2, r1
 8004c78:	4629      	mov	r1, r5
 8004c7a:	eb43 0901 	adc.w	r9, r3, r1
 8004c7e:	f04f 0200 	mov.w	r2, #0
 8004c82:	f04f 0300 	mov.w	r3, #0
 8004c86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c92:	4690      	mov	r8, r2
 8004c94:	4699      	mov	r9, r3
 8004c96:	4623      	mov	r3, r4
 8004c98:	eb18 0303 	adds.w	r3, r8, r3
 8004c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ca0:	462b      	mov	r3, r5
 8004ca2:	eb49 0303 	adc.w	r3, r9, r3
 8004ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004cb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004cba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	18db      	adds	r3, r3, r3
 8004cc2:	653b      	str	r3, [r7, #80]	; 0x50
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	eb42 0303 	adc.w	r3, r2, r3
 8004cca:	657b      	str	r3, [r7, #84]	; 0x54
 8004ccc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004cd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004cd4:	f7fb fadc 	bl	8000290 <__aeabi_uldivmod>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4b61      	ldr	r3, [pc, #388]	; (8004e64 <UART_SetConfig+0x2d4>)
 8004cde:	fba3 2302 	umull	r2, r3, r3, r2
 8004ce2:	095b      	lsrs	r3, r3, #5
 8004ce4:	011c      	lsls	r4, r3, #4
 8004ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cea:	2200      	movs	r2, #0
 8004cec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cf0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004cf4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	464b      	mov	r3, r9
 8004cfc:	1891      	adds	r1, r2, r2
 8004cfe:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d00:	415b      	adcs	r3, r3
 8004d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d08:	4641      	mov	r1, r8
 8004d0a:	eb12 0a01 	adds.w	sl, r2, r1
 8004d0e:	4649      	mov	r1, r9
 8004d10:	eb43 0b01 	adc.w	fp, r3, r1
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d28:	4692      	mov	sl, r2
 8004d2a:	469b      	mov	fp, r3
 8004d2c:	4643      	mov	r3, r8
 8004d2e:	eb1a 0303 	adds.w	r3, sl, r3
 8004d32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d36:	464b      	mov	r3, r9
 8004d38:	eb4b 0303 	adc.w	r3, fp, r3
 8004d3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d54:	460b      	mov	r3, r1
 8004d56:	18db      	adds	r3, r3, r3
 8004d58:	643b      	str	r3, [r7, #64]	; 0x40
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	eb42 0303 	adc.w	r3, r2, r3
 8004d60:	647b      	str	r3, [r7, #68]	; 0x44
 8004d62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d6a:	f7fb fa91 	bl	8000290 <__aeabi_uldivmod>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4611      	mov	r1, r2
 8004d74:	4b3b      	ldr	r3, [pc, #236]	; (8004e64 <UART_SetConfig+0x2d4>)
 8004d76:	fba3 2301 	umull	r2, r3, r3, r1
 8004d7a:	095b      	lsrs	r3, r3, #5
 8004d7c:	2264      	movs	r2, #100	; 0x64
 8004d7e:	fb02 f303 	mul.w	r3, r2, r3
 8004d82:	1acb      	subs	r3, r1, r3
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d8a:	4b36      	ldr	r3, [pc, #216]	; (8004e64 <UART_SetConfig+0x2d4>)
 8004d8c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d90:	095b      	lsrs	r3, r3, #5
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d98:	441c      	add	r4, r3
 8004d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004da4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004da8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004dac:	4642      	mov	r2, r8
 8004dae:	464b      	mov	r3, r9
 8004db0:	1891      	adds	r1, r2, r2
 8004db2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004db4:	415b      	adcs	r3, r3
 8004db6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004db8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004dbc:	4641      	mov	r1, r8
 8004dbe:	1851      	adds	r1, r2, r1
 8004dc0:	6339      	str	r1, [r7, #48]	; 0x30
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	414b      	adcs	r3, r1
 8004dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004dd4:	4659      	mov	r1, fp
 8004dd6:	00cb      	lsls	r3, r1, #3
 8004dd8:	4651      	mov	r1, sl
 8004dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dde:	4651      	mov	r1, sl
 8004de0:	00ca      	lsls	r2, r1, #3
 8004de2:	4610      	mov	r0, r2
 8004de4:	4619      	mov	r1, r3
 8004de6:	4603      	mov	r3, r0
 8004de8:	4642      	mov	r2, r8
 8004dea:	189b      	adds	r3, r3, r2
 8004dec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004df0:	464b      	mov	r3, r9
 8004df2:	460a      	mov	r2, r1
 8004df4:	eb42 0303 	adc.w	r3, r2, r3
 8004df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e10:	460b      	mov	r3, r1
 8004e12:	18db      	adds	r3, r3, r3
 8004e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e16:	4613      	mov	r3, r2
 8004e18:	eb42 0303 	adc.w	r3, r2, r3
 8004e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e26:	f7fb fa33 	bl	8000290 <__aeabi_uldivmod>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4b0d      	ldr	r3, [pc, #52]	; (8004e64 <UART_SetConfig+0x2d4>)
 8004e30:	fba3 1302 	umull	r1, r3, r3, r2
 8004e34:	095b      	lsrs	r3, r3, #5
 8004e36:	2164      	movs	r1, #100	; 0x64
 8004e38:	fb01 f303 	mul.w	r3, r1, r3
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	3332      	adds	r3, #50	; 0x32
 8004e42:	4a08      	ldr	r2, [pc, #32]	; (8004e64 <UART_SetConfig+0x2d4>)
 8004e44:	fba2 2303 	umull	r2, r3, r2, r3
 8004e48:	095b      	lsrs	r3, r3, #5
 8004e4a:	f003 0207 	and.w	r2, r3, #7
 8004e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4422      	add	r2, r4
 8004e56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e58:	e105      	b.n	8005066 <UART_SetConfig+0x4d6>
 8004e5a:	bf00      	nop
 8004e5c:	40011000 	.word	0x40011000
 8004e60:	40011400 	.word	0x40011400
 8004e64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e7a:	4642      	mov	r2, r8
 8004e7c:	464b      	mov	r3, r9
 8004e7e:	1891      	adds	r1, r2, r2
 8004e80:	6239      	str	r1, [r7, #32]
 8004e82:	415b      	adcs	r3, r3
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24
 8004e86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e8a:	4641      	mov	r1, r8
 8004e8c:	1854      	adds	r4, r2, r1
 8004e8e:	4649      	mov	r1, r9
 8004e90:	eb43 0501 	adc.w	r5, r3, r1
 8004e94:	f04f 0200 	mov.w	r2, #0
 8004e98:	f04f 0300 	mov.w	r3, #0
 8004e9c:	00eb      	lsls	r3, r5, #3
 8004e9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ea2:	00e2      	lsls	r2, r4, #3
 8004ea4:	4614      	mov	r4, r2
 8004ea6:	461d      	mov	r5, r3
 8004ea8:	4643      	mov	r3, r8
 8004eaa:	18e3      	adds	r3, r4, r3
 8004eac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004eb0:	464b      	mov	r3, r9
 8004eb2:	eb45 0303 	adc.w	r3, r5, r3
 8004eb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ec6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004eca:	f04f 0200 	mov.w	r2, #0
 8004ece:	f04f 0300 	mov.w	r3, #0
 8004ed2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ed6:	4629      	mov	r1, r5
 8004ed8:	008b      	lsls	r3, r1, #2
 8004eda:	4621      	mov	r1, r4
 8004edc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ee0:	4621      	mov	r1, r4
 8004ee2:	008a      	lsls	r2, r1, #2
 8004ee4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ee8:	f7fb f9d2 	bl	8000290 <__aeabi_uldivmod>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4b60      	ldr	r3, [pc, #384]	; (8005074 <UART_SetConfig+0x4e4>)
 8004ef2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	011c      	lsls	r4, r3, #4
 8004efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f0c:	4642      	mov	r2, r8
 8004f0e:	464b      	mov	r3, r9
 8004f10:	1891      	adds	r1, r2, r2
 8004f12:	61b9      	str	r1, [r7, #24]
 8004f14:	415b      	adcs	r3, r3
 8004f16:	61fb      	str	r3, [r7, #28]
 8004f18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f1c:	4641      	mov	r1, r8
 8004f1e:	1851      	adds	r1, r2, r1
 8004f20:	6139      	str	r1, [r7, #16]
 8004f22:	4649      	mov	r1, r9
 8004f24:	414b      	adcs	r3, r1
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f34:	4659      	mov	r1, fp
 8004f36:	00cb      	lsls	r3, r1, #3
 8004f38:	4651      	mov	r1, sl
 8004f3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f3e:	4651      	mov	r1, sl
 8004f40:	00ca      	lsls	r2, r1, #3
 8004f42:	4610      	mov	r0, r2
 8004f44:	4619      	mov	r1, r3
 8004f46:	4603      	mov	r3, r0
 8004f48:	4642      	mov	r2, r8
 8004f4a:	189b      	adds	r3, r3, r2
 8004f4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f50:	464b      	mov	r3, r9
 8004f52:	460a      	mov	r2, r1
 8004f54:	eb42 0303 	adc.w	r3, r2, r3
 8004f58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	f04f 0300 	mov.w	r3, #0
 8004f70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f74:	4649      	mov	r1, r9
 8004f76:	008b      	lsls	r3, r1, #2
 8004f78:	4641      	mov	r1, r8
 8004f7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f7e:	4641      	mov	r1, r8
 8004f80:	008a      	lsls	r2, r1, #2
 8004f82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f86:	f7fb f983 	bl	8000290 <__aeabi_uldivmod>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	4b39      	ldr	r3, [pc, #228]	; (8005074 <UART_SetConfig+0x4e4>)
 8004f90:	fba3 1302 	umull	r1, r3, r3, r2
 8004f94:	095b      	lsrs	r3, r3, #5
 8004f96:	2164      	movs	r1, #100	; 0x64
 8004f98:	fb01 f303 	mul.w	r3, r1, r3
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	3332      	adds	r3, #50	; 0x32
 8004fa2:	4a34      	ldr	r2, [pc, #208]	; (8005074 <UART_SetConfig+0x4e4>)
 8004fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa8:	095b      	lsrs	r3, r3, #5
 8004faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fae:	441c      	add	r4, r3
 8004fb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	673b      	str	r3, [r7, #112]	; 0x70
 8004fb8:	677a      	str	r2, [r7, #116]	; 0x74
 8004fba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004fbe:	4642      	mov	r2, r8
 8004fc0:	464b      	mov	r3, r9
 8004fc2:	1891      	adds	r1, r2, r2
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	415b      	adcs	r3, r3
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fce:	4641      	mov	r1, r8
 8004fd0:	1851      	adds	r1, r2, r1
 8004fd2:	6039      	str	r1, [r7, #0]
 8004fd4:	4649      	mov	r1, r9
 8004fd6:	414b      	adcs	r3, r1
 8004fd8:	607b      	str	r3, [r7, #4]
 8004fda:	f04f 0200 	mov.w	r2, #0
 8004fde:	f04f 0300 	mov.w	r3, #0
 8004fe2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fe6:	4659      	mov	r1, fp
 8004fe8:	00cb      	lsls	r3, r1, #3
 8004fea:	4651      	mov	r1, sl
 8004fec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ff0:	4651      	mov	r1, sl
 8004ff2:	00ca      	lsls	r2, r1, #3
 8004ff4:	4610      	mov	r0, r2
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	4642      	mov	r2, r8
 8004ffc:	189b      	adds	r3, r3, r2
 8004ffe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005000:	464b      	mov	r3, r9
 8005002:	460a      	mov	r2, r1
 8005004:	eb42 0303 	adc.w	r3, r2, r3
 8005008:	66fb      	str	r3, [r7, #108]	; 0x6c
 800500a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	663b      	str	r3, [r7, #96]	; 0x60
 8005014:	667a      	str	r2, [r7, #100]	; 0x64
 8005016:	f04f 0200 	mov.w	r2, #0
 800501a:	f04f 0300 	mov.w	r3, #0
 800501e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005022:	4649      	mov	r1, r9
 8005024:	008b      	lsls	r3, r1, #2
 8005026:	4641      	mov	r1, r8
 8005028:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800502c:	4641      	mov	r1, r8
 800502e:	008a      	lsls	r2, r1, #2
 8005030:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005034:	f7fb f92c 	bl	8000290 <__aeabi_uldivmod>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4b0d      	ldr	r3, [pc, #52]	; (8005074 <UART_SetConfig+0x4e4>)
 800503e:	fba3 1302 	umull	r1, r3, r3, r2
 8005042:	095b      	lsrs	r3, r3, #5
 8005044:	2164      	movs	r1, #100	; 0x64
 8005046:	fb01 f303 	mul.w	r3, r1, r3
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	3332      	adds	r3, #50	; 0x32
 8005050:	4a08      	ldr	r2, [pc, #32]	; (8005074 <UART_SetConfig+0x4e4>)
 8005052:	fba2 2303 	umull	r2, r3, r2, r3
 8005056:	095b      	lsrs	r3, r3, #5
 8005058:	f003 020f 	and.w	r2, r3, #15
 800505c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4422      	add	r2, r4
 8005064:	609a      	str	r2, [r3, #8]
}
 8005066:	bf00      	nop
 8005068:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800506c:	46bd      	mov	sp, r7
 800506e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005072:	bf00      	nop
 8005074:	51eb851f 	.word	0x51eb851f

08005078 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800507c:	4904      	ldr	r1, [pc, #16]	; (8005090 <MX_FATFS_Init+0x18>)
 800507e:	4805      	ldr	r0, [pc, #20]	; (8005094 <MX_FATFS_Init+0x1c>)
 8005080:	f002 ff76 	bl	8007f70 <FATFS_LinkDriver>
 8005084:	4603      	mov	r3, r0
 8005086:	461a      	mov	r2, r3
 8005088:	4b03      	ldr	r3, [pc, #12]	; (8005098 <MX_FATFS_Init+0x20>)
 800508a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800508c:	bf00      	nop
 800508e:	bd80      	pop	{r7, pc}
 8005090:	20000ee0 	.word	0x20000ee0
 8005094:	2000000c 	.word	0x2000000c
 8005098:	20000edc 	.word	0x20000edc

0800509c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80050a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	4603      	mov	r3, r0
 80050b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80050b6:	79fb      	ldrb	r3, [r7, #7]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 f9dd 	bl	8005478 <USER_SPI_initialize>
 80050be:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	4603      	mov	r3, r0
 80050d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 fab9 	bl	800564c <USER_SPI_status>
 80050da:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	607a      	str	r2, [r7, #4]
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	4603      	mov	r3, r0
 80050f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 80050f4:	7bf8      	ldrb	r0, [r7, #15]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	68b9      	ldr	r1, [r7, #8]
 80050fc:	f000 fabc 	bl	8005678 <USER_SPI_read>
 8005100:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b084      	sub	sp, #16
 800510e:	af00      	add	r7, sp, #0
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	603b      	str	r3, [r7, #0]
 8005116:	4603      	mov	r3, r0
 8005118:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 800511a:	7bf8      	ldrb	r0, [r7, #15]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	68b9      	ldr	r1, [r7, #8]
 8005122:	f000 fb0f 	bl	8005744 <USER_SPI_write>
 8005126:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	603a      	str	r2, [r7, #0]
 800513a:	71fb      	strb	r3, [r7, #7]
 800513c:	460b      	mov	r3, r1
 800513e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8005140:	79b9      	ldrb	r1, [r7, #6]
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fb78 	bl	800583c <USER_SPI_ioctl>
 800514c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800514e:	4618      	mov	r0, r3
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8005160:	f7fc fcba 	bl	8001ad8 <HAL_GetTick>
 8005164:	4603      	mov	r3, r0
 8005166:	4a04      	ldr	r2, [pc, #16]	; (8005178 <SPI_Timer_On+0x20>)
 8005168:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800516a:	4a04      	ldr	r2, [pc, #16]	; (800517c <SPI_Timer_On+0x24>)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6013      	str	r3, [r2, #0]
}
 8005170:	bf00      	nop
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	20000ee8 	.word	0x20000ee8
 800517c:	20000eec 	.word	0x20000eec

08005180 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005184:	f7fc fca8 	bl	8001ad8 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	4b06      	ldr	r3, [pc, #24]	; (80051a4 <SPI_Timer_Status+0x24>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	1ad2      	subs	r2, r2, r3
 8005190:	4b05      	ldr	r3, [pc, #20]	; (80051a8 <SPI_Timer_Status+0x28>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	429a      	cmp	r2, r3
 8005196:	bf34      	ite	cc
 8005198:	2301      	movcc	r3, #1
 800519a:	2300      	movcs	r3, #0
 800519c:	b2db      	uxtb	r3, r3
}
 800519e:	4618      	mov	r0, r3
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	20000ee8 	.word	0x20000ee8
 80051a8:	20000eec 	.word	0x20000eec

080051ac <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	4603      	mov	r3, r0
 80051b4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80051b6:	f107 020f 	add.w	r2, r7, #15
 80051ba:	1df9      	adds	r1, r7, #7
 80051bc:	2332      	movs	r3, #50	; 0x32
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	2301      	movs	r3, #1
 80051c2:	4804      	ldr	r0, [pc, #16]	; (80051d4 <xchg_spi+0x28>)
 80051c4:	f7fe f81b 	bl	80031fe <HAL_SPI_TransmitReceive>
    return rxDat;
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	200000a4 	.word	0x200000a4

080051d8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80051d8:	b590      	push	{r4, r7, lr}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80051e2:	2300      	movs	r3, #0
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	e00a      	b.n	80051fe <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	18d4      	adds	r4, r2, r3
 80051ee:	20ff      	movs	r0, #255	; 0xff
 80051f0:	f7ff ffdc 	bl	80051ac <xchg_spi>
 80051f4:	4603      	mov	r3, r0
 80051f6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	3301      	adds	r3, #1
 80051fc:	60fb      	str	r3, [r7, #12]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	429a      	cmp	r2, r3
 8005204:	d3f0      	bcc.n	80051e8 <rcvr_spi_multi+0x10>
	}
}
 8005206:	bf00      	nop
 8005208:	bf00      	nop
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	bd90      	pop	{r4, r7, pc}

08005210 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]
 800521e:	e009      	b.n	8005234 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4413      	add	r3, r2
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	4618      	mov	r0, r3
 800522a:	f7ff ffbf 	bl	80051ac <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	3301      	adds	r3, #1
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d3f1      	bcc.n	8005220 <xmit_spi_multi+0x10>
	}
}
 800523c:	bf00      	nop
 800523e:	bf00      	nop
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b086      	sub	sp, #24
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800524e:	f7fc fc43 	bl	8001ad8 <HAL_GetTick>
 8005252:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8005258:	20ff      	movs	r0, #255	; 0xff
 800525a:	f7ff ffa7 	bl	80051ac <xchg_spi>
 800525e:	4603      	mov	r3, r0
 8005260:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8005262:	7bfb      	ldrb	r3, [r7, #15]
 8005264:	2bff      	cmp	r3, #255	; 0xff
 8005266:	d007      	beq.n	8005278 <wait_ready+0x32>
 8005268:	f7fc fc36 	bl	8001ad8 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	429a      	cmp	r2, r3
 8005276:	d8ef      	bhi.n	8005258 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8005278:	7bfb      	ldrb	r3, [r7, #15]
 800527a:	2bff      	cmp	r3, #255	; 0xff
 800527c:	bf0c      	ite	eq
 800527e:	2301      	moveq	r3, #1
 8005280:	2300      	movne	r3, #0
 8005282:	b2db      	uxtb	r3, r3
}
 8005284:	4618      	mov	r0, r3
 8005286:	3718      	adds	r7, #24
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8005290:	2201      	movs	r2, #1
 8005292:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005296:	4804      	ldr	r0, [pc, #16]	; (80052a8 <despiselect+0x1c>)
 8005298:	f7fd fa76 	bl	8002788 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800529c:	20ff      	movs	r0, #255	; 0xff
 800529e:	f7ff ff85 	bl	80051ac <xchg_spi>

}
 80052a2:	bf00      	nop
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	40020000 	.word	0x40020000

080052ac <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80052b0:	2200      	movs	r2, #0
 80052b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052b6:	480a      	ldr	r0, [pc, #40]	; (80052e0 <spiselect+0x34>)
 80052b8:	f7fd fa66 	bl	8002788 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80052bc:	20ff      	movs	r0, #255	; 0xff
 80052be:	f7ff ff75 	bl	80051ac <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80052c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80052c6:	f7ff ffbe 	bl	8005246 <wait_ready>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <spiselect+0x28>
 80052d0:	2301      	movs	r3, #1
 80052d2:	e002      	b.n	80052da <spiselect+0x2e>

	despiselect();
 80052d4:	f7ff ffda 	bl	800528c <despiselect>
	return 0;	/* Timeout */
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	40020000 	.word	0x40020000

080052e4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80052ee:	20c8      	movs	r0, #200	; 0xc8
 80052f0:	f7ff ff32 	bl	8005158 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80052f4:	20ff      	movs	r0, #255	; 0xff
 80052f6:	f7ff ff59 	bl	80051ac <xchg_spi>
 80052fa:	4603      	mov	r3, r0
 80052fc:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
 8005300:	2bff      	cmp	r3, #255	; 0xff
 8005302:	d104      	bne.n	800530e <rcvr_datablock+0x2a>
 8005304:	f7ff ff3c 	bl	8005180 <SPI_Timer_Status>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1f2      	bne.n	80052f4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800530e:	7bfb      	ldrb	r3, [r7, #15]
 8005310:	2bfe      	cmp	r3, #254	; 0xfe
 8005312:	d001      	beq.n	8005318 <rcvr_datablock+0x34>
 8005314:	2300      	movs	r3, #0
 8005316:	e00a      	b.n	800532e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8005318:	6839      	ldr	r1, [r7, #0]
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7ff ff5c 	bl	80051d8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8005320:	20ff      	movs	r0, #255	; 0xff
 8005322:	f7ff ff43 	bl	80051ac <xchg_spi>
 8005326:	20ff      	movs	r0, #255	; 0xff
 8005328:	f7ff ff40 	bl	80051ac <xchg_spi>

	return 1;						/* Function succeeded */
 800532c:	2301      	movs	r3, #1
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
 800533e:	460b      	mov	r3, r1
 8005340:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8005342:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005346:	f7ff ff7e 	bl	8005246 <wait_ready>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <xmit_datablock+0x1e>
 8005350:	2300      	movs	r3, #0
 8005352:	e01e      	b.n	8005392 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8005354:	78fb      	ldrb	r3, [r7, #3]
 8005356:	4618      	mov	r0, r3
 8005358:	f7ff ff28 	bl	80051ac <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800535c:	78fb      	ldrb	r3, [r7, #3]
 800535e:	2bfd      	cmp	r3, #253	; 0xfd
 8005360:	d016      	beq.n	8005390 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8005362:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7ff ff52 	bl	8005210 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800536c:	20ff      	movs	r0, #255	; 0xff
 800536e:	f7ff ff1d 	bl	80051ac <xchg_spi>
 8005372:	20ff      	movs	r0, #255	; 0xff
 8005374:	f7ff ff1a 	bl	80051ac <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8005378:	20ff      	movs	r0, #255	; 0xff
 800537a:	f7ff ff17 	bl	80051ac <xchg_spi>
 800537e:	4603      	mov	r3, r0
 8005380:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8005382:	7bfb      	ldrb	r3, [r7, #15]
 8005384:	f003 031f 	and.w	r3, r3, #31
 8005388:	2b05      	cmp	r3, #5
 800538a:	d001      	beq.n	8005390 <xmit_datablock+0x5a>
 800538c:	2300      	movs	r3, #0
 800538e:	e000      	b.n	8005392 <xmit_datablock+0x5c>
	}
	return 1;
 8005390:	2301      	movs	r3, #1
}
 8005392:	4618      	mov	r0, r3
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b084      	sub	sp, #16
 800539e:	af00      	add	r7, sp, #0
 80053a0:	4603      	mov	r3, r0
 80053a2:	6039      	str	r1, [r7, #0]
 80053a4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80053a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	da0e      	bge.n	80053cc <send_cmd+0x32>
		cmd &= 0x7F;
 80053ae:	79fb      	ldrb	r3, [r7, #7]
 80053b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053b4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80053b6:	2100      	movs	r1, #0
 80053b8:	2037      	movs	r0, #55	; 0x37
 80053ba:	f7ff ffee 	bl	800539a <send_cmd>
 80053be:	4603      	mov	r3, r0
 80053c0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80053c2:	7bbb      	ldrb	r3, [r7, #14]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d901      	bls.n	80053cc <send_cmd+0x32>
 80053c8:	7bbb      	ldrb	r3, [r7, #14]
 80053ca:	e051      	b.n	8005470 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80053cc:	79fb      	ldrb	r3, [r7, #7]
 80053ce:	2b0c      	cmp	r3, #12
 80053d0:	d008      	beq.n	80053e4 <send_cmd+0x4a>
		despiselect();
 80053d2:	f7ff ff5b 	bl	800528c <despiselect>
		if (!spiselect()) return 0xFF;
 80053d6:	f7ff ff69 	bl	80052ac <spiselect>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <send_cmd+0x4a>
 80053e0:	23ff      	movs	r3, #255	; 0xff
 80053e2:	e045      	b.n	8005470 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80053e4:	79fb      	ldrb	r3, [r7, #7]
 80053e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7ff fedd 	bl	80051ac <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	0e1b      	lsrs	r3, r3, #24
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff fed7 	bl	80051ac <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	0c1b      	lsrs	r3, r3, #16
 8005402:	b2db      	uxtb	r3, r3
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff fed1 	bl	80051ac <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	0a1b      	lsrs	r3, r3, #8
 800540e:	b2db      	uxtb	r3, r3
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff fecb 	bl	80051ac <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	b2db      	uxtb	r3, r3
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff fec6 	bl	80051ac <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8005420:	2301      	movs	r3, #1
 8005422:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <send_cmd+0x94>
 800542a:	2395      	movs	r3, #149	; 0x95
 800542c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800542e:	79fb      	ldrb	r3, [r7, #7]
 8005430:	2b08      	cmp	r3, #8
 8005432:	d101      	bne.n	8005438 <send_cmd+0x9e>
 8005434:	2387      	movs	r3, #135	; 0x87
 8005436:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8005438:	7bfb      	ldrb	r3, [r7, #15]
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff feb6 	bl	80051ac <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8005440:	79fb      	ldrb	r3, [r7, #7]
 8005442:	2b0c      	cmp	r3, #12
 8005444:	d102      	bne.n	800544c <send_cmd+0xb2>
 8005446:	20ff      	movs	r0, #255	; 0xff
 8005448:	f7ff feb0 	bl	80051ac <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800544c:	230a      	movs	r3, #10
 800544e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8005450:	20ff      	movs	r0, #255	; 0xff
 8005452:	f7ff feab 	bl	80051ac <xchg_spi>
 8005456:	4603      	mov	r3, r0
 8005458:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800545a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800545e:	2b00      	cmp	r3, #0
 8005460:	da05      	bge.n	800546e <send_cmd+0xd4>
 8005462:	7bfb      	ldrb	r3, [r7, #15]
 8005464:	3b01      	subs	r3, #1
 8005466:	73fb      	strb	r3, [r7, #15]
 8005468:	7bfb      	ldrb	r3, [r7, #15]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1f0      	bne.n	8005450 <send_cmd+0xb6>

	return res;							/* Return received response */
 800546e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005478:	b590      	push	{r4, r7, lr}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	4603      	mov	r3, r0
 8005480:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8005482:	79fb      	ldrb	r3, [r7, #7]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <USER_SPI_initialize+0x14>
 8005488:	2301      	movs	r3, #1
 800548a:	e0d4      	b.n	8005636 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800548c:	4b6c      	ldr	r3, [pc, #432]	; (8005640 <USER_SPI_initialize+0x1c8>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	b2db      	uxtb	r3, r3
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <USER_SPI_initialize+0x2a>
 800549a:	4b69      	ldr	r3, [pc, #420]	; (8005640 <USER_SPI_initialize+0x1c8>)
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	e0c9      	b.n	8005636 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 80054a2:	4b68      	ldr	r3, [pc, #416]	; (8005644 <USER_SPI_initialize+0x1cc>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	4b66      	ldr	r3, [pc, #408]	; (8005644 <USER_SPI_initialize+0x1cc>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 80054b0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80054b2:	230a      	movs	r3, #10
 80054b4:	73fb      	strb	r3, [r7, #15]
 80054b6:	e005      	b.n	80054c4 <USER_SPI_initialize+0x4c>
 80054b8:	20ff      	movs	r0, #255	; 0xff
 80054ba:	f7ff fe77 	bl	80051ac <xchg_spi>
 80054be:	7bfb      	ldrb	r3, [r7, #15]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	73fb      	strb	r3, [r7, #15]
 80054c4:	7bfb      	ldrb	r3, [r7, #15]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1f6      	bne.n	80054b8 <USER_SPI_initialize+0x40>

	ty = 0;
 80054ca:	2300      	movs	r3, #0
 80054cc:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80054ce:	2100      	movs	r1, #0
 80054d0:	2000      	movs	r0, #0
 80054d2:	f7ff ff62 	bl	800539a <send_cmd>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b01      	cmp	r3, #1
 80054da:	f040 808b 	bne.w	80055f4 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80054de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80054e2:	f7ff fe39 	bl	8005158 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80054e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80054ea:	2008      	movs	r0, #8
 80054ec:	f7ff ff55 	bl	800539a <send_cmd>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d151      	bne.n	800559a <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80054f6:	2300      	movs	r3, #0
 80054f8:	73fb      	strb	r3, [r7, #15]
 80054fa:	e00d      	b.n	8005518 <USER_SPI_initialize+0xa0>
 80054fc:	7bfc      	ldrb	r4, [r7, #15]
 80054fe:	20ff      	movs	r0, #255	; 0xff
 8005500:	f7ff fe54 	bl	80051ac <xchg_spi>
 8005504:	4603      	mov	r3, r0
 8005506:	461a      	mov	r2, r3
 8005508:	f104 0310 	add.w	r3, r4, #16
 800550c:	443b      	add	r3, r7
 800550e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005512:	7bfb      	ldrb	r3, [r7, #15]
 8005514:	3301      	adds	r3, #1
 8005516:	73fb      	strb	r3, [r7, #15]
 8005518:	7bfb      	ldrb	r3, [r7, #15]
 800551a:	2b03      	cmp	r3, #3
 800551c:	d9ee      	bls.n	80054fc <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800551e:	7abb      	ldrb	r3, [r7, #10]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d167      	bne.n	80055f4 <USER_SPI_initialize+0x17c>
 8005524:	7afb      	ldrb	r3, [r7, #11]
 8005526:	2baa      	cmp	r3, #170	; 0xaa
 8005528:	d164      	bne.n	80055f4 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800552a:	bf00      	nop
 800552c:	f7ff fe28 	bl	8005180 <SPI_Timer_Status>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d007      	beq.n	8005546 <USER_SPI_initialize+0xce>
 8005536:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800553a:	20a9      	movs	r0, #169	; 0xa9
 800553c:	f7ff ff2d 	bl	800539a <send_cmd>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1f2      	bne.n	800552c <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8005546:	f7ff fe1b 	bl	8005180 <SPI_Timer_Status>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d051      	beq.n	80055f4 <USER_SPI_initialize+0x17c>
 8005550:	2100      	movs	r1, #0
 8005552:	203a      	movs	r0, #58	; 0x3a
 8005554:	f7ff ff21 	bl	800539a <send_cmd>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d14a      	bne.n	80055f4 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800555e:	2300      	movs	r3, #0
 8005560:	73fb      	strb	r3, [r7, #15]
 8005562:	e00d      	b.n	8005580 <USER_SPI_initialize+0x108>
 8005564:	7bfc      	ldrb	r4, [r7, #15]
 8005566:	20ff      	movs	r0, #255	; 0xff
 8005568:	f7ff fe20 	bl	80051ac <xchg_spi>
 800556c:	4603      	mov	r3, r0
 800556e:	461a      	mov	r2, r3
 8005570:	f104 0310 	add.w	r3, r4, #16
 8005574:	443b      	add	r3, r7
 8005576:	f803 2c08 	strb.w	r2, [r3, #-8]
 800557a:	7bfb      	ldrb	r3, [r7, #15]
 800557c:	3301      	adds	r3, #1
 800557e:	73fb      	strb	r3, [r7, #15]
 8005580:	7bfb      	ldrb	r3, [r7, #15]
 8005582:	2b03      	cmp	r3, #3
 8005584:	d9ee      	bls.n	8005564 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8005586:	7a3b      	ldrb	r3, [r7, #8]
 8005588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <USER_SPI_initialize+0x11c>
 8005590:	230c      	movs	r3, #12
 8005592:	e000      	b.n	8005596 <USER_SPI_initialize+0x11e>
 8005594:	2304      	movs	r3, #4
 8005596:	737b      	strb	r3, [r7, #13]
 8005598:	e02c      	b.n	80055f4 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800559a:	2100      	movs	r1, #0
 800559c:	20a9      	movs	r0, #169	; 0xa9
 800559e:	f7ff fefc 	bl	800539a <send_cmd>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d804      	bhi.n	80055b2 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80055a8:	2302      	movs	r3, #2
 80055aa:	737b      	strb	r3, [r7, #13]
 80055ac:	23a9      	movs	r3, #169	; 0xa9
 80055ae:	73bb      	strb	r3, [r7, #14]
 80055b0:	e003      	b.n	80055ba <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80055b2:	2301      	movs	r3, #1
 80055b4:	737b      	strb	r3, [r7, #13]
 80055b6:	2301      	movs	r3, #1
 80055b8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80055ba:	bf00      	nop
 80055bc:	f7ff fde0 	bl	8005180 <SPI_Timer_Status>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d007      	beq.n	80055d6 <USER_SPI_initialize+0x15e>
 80055c6:	7bbb      	ldrb	r3, [r7, #14]
 80055c8:	2100      	movs	r1, #0
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7ff fee5 	bl	800539a <send_cmd>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1f2      	bne.n	80055bc <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80055d6:	f7ff fdd3 	bl	8005180 <SPI_Timer_Status>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d007      	beq.n	80055f0 <USER_SPI_initialize+0x178>
 80055e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055e4:	2010      	movs	r0, #16
 80055e6:	f7ff fed8 	bl	800539a <send_cmd>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <USER_SPI_initialize+0x17c>
				ty = 0;
 80055f0:	2300      	movs	r3, #0
 80055f2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80055f4:	4a14      	ldr	r2, [pc, #80]	; (8005648 <USER_SPI_initialize+0x1d0>)
 80055f6:	7b7b      	ldrb	r3, [r7, #13]
 80055f8:	7013      	strb	r3, [r2, #0]
	despiselect();
 80055fa:	f7ff fe47 	bl	800528c <despiselect>

	if (ty) {			/* OK */
 80055fe:	7b7b      	ldrb	r3, [r7, #13]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d012      	beq.n	800562a <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8005604:	4b0f      	ldr	r3, [pc, #60]	; (8005644 <USER_SPI_initialize+0x1cc>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800560e:	4b0d      	ldr	r3, [pc, #52]	; (8005644 <USER_SPI_initialize+0x1cc>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0218 	orr.w	r2, r2, #24
 8005616:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8005618:	4b09      	ldr	r3, [pc, #36]	; (8005640 <USER_SPI_initialize+0x1c8>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	b2db      	uxtb	r3, r3
 800561e:	f023 0301 	bic.w	r3, r3, #1
 8005622:	b2da      	uxtb	r2, r3
 8005624:	4b06      	ldr	r3, [pc, #24]	; (8005640 <USER_SPI_initialize+0x1c8>)
 8005626:	701a      	strb	r2, [r3, #0]
 8005628:	e002      	b.n	8005630 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800562a:	4b05      	ldr	r3, [pc, #20]	; (8005640 <USER_SPI_initialize+0x1c8>)
 800562c:	2201      	movs	r2, #1
 800562e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8005630:	4b03      	ldr	r3, [pc, #12]	; (8005640 <USER_SPI_initialize+0x1c8>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	b2db      	uxtb	r3, r3
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	bd90      	pop	{r4, r7, pc}
 800563e:	bf00      	nop
 8005640:	20000020 	.word	0x20000020
 8005644:	200000a4 	.word	0x200000a4
 8005648:	20000ee4 	.word	0x20000ee4

0800564c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	4603      	mov	r3, r0
 8005654:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8005656:	79fb      	ldrb	r3, [r7, #7]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <USER_SPI_status+0x14>
 800565c:	2301      	movs	r3, #1
 800565e:	e002      	b.n	8005666 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8005660:	4b04      	ldr	r3, [pc, #16]	; (8005674 <USER_SPI_status+0x28>)
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	b2db      	uxtb	r3, r3
}
 8005666:	4618      	mov	r0, r3
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	20000020 	.word	0x20000020

08005678 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	60b9      	str	r1, [r7, #8]
 8005680:	607a      	str	r2, [r7, #4]
 8005682:	603b      	str	r3, [r7, #0]
 8005684:	4603      	mov	r3, r0
 8005686:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d102      	bne.n	8005694 <USER_SPI_read+0x1c>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <USER_SPI_read+0x20>
 8005694:	2304      	movs	r3, #4
 8005696:	e04d      	b.n	8005734 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005698:	4b28      	ldr	r3, [pc, #160]	; (800573c <USER_SPI_read+0xc4>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	b2db      	uxtb	r3, r3
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <USER_SPI_read+0x32>
 80056a6:	2303      	movs	r3, #3
 80056a8:	e044      	b.n	8005734 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80056aa:	4b25      	ldr	r3, [pc, #148]	; (8005740 <USER_SPI_read+0xc8>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	f003 0308 	and.w	r3, r3, #8
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d102      	bne.n	80056bc <USER_SPI_read+0x44>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	025b      	lsls	r3, r3, #9
 80056ba:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d111      	bne.n	80056e6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	2011      	movs	r0, #17
 80056c6:	f7ff fe68 	bl	800539a <send_cmd>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d129      	bne.n	8005724 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80056d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056d4:	68b8      	ldr	r0, [r7, #8]
 80056d6:	f7ff fe05 	bl	80052e4 <rcvr_datablock>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d021      	beq.n	8005724 <USER_SPI_read+0xac>
			count = 0;
 80056e0:	2300      	movs	r3, #0
 80056e2:	603b      	str	r3, [r7, #0]
 80056e4:	e01e      	b.n	8005724 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	2012      	movs	r0, #18
 80056ea:	f7ff fe56 	bl	800539a <send_cmd>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d117      	bne.n	8005724 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80056f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056f8:	68b8      	ldr	r0, [r7, #8]
 80056fa:	f7ff fdf3 	bl	80052e4 <rcvr_datablock>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00a      	beq.n	800571a <USER_SPI_read+0xa2>
				buff += 512;
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800570a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	3b01      	subs	r3, #1
 8005710:	603b      	str	r3, [r7, #0]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1ed      	bne.n	80056f4 <USER_SPI_read+0x7c>
 8005718:	e000      	b.n	800571c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800571a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800571c:	2100      	movs	r1, #0
 800571e:	200c      	movs	r0, #12
 8005720:	f7ff fe3b 	bl	800539a <send_cmd>
		}
	}
	despiselect();
 8005724:	f7ff fdb2 	bl	800528c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	bf14      	ite	ne
 800572e:	2301      	movne	r3, #1
 8005730:	2300      	moveq	r3, #0
 8005732:	b2db      	uxtb	r3, r3
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	20000020 	.word	0x20000020
 8005740:	20000ee4 	.word	0x20000ee4

08005744 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	607a      	str	r2, [r7, #4]
 800574e:	603b      	str	r3, [r7, #0]
 8005750:	4603      	mov	r3, r0
 8005752:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005754:	7bfb      	ldrb	r3, [r7, #15]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d102      	bne.n	8005760 <USER_SPI_write+0x1c>
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <USER_SPI_write+0x20>
 8005760:	2304      	movs	r3, #4
 8005762:	e063      	b.n	800582c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005764:	4b33      	ldr	r3, [pc, #204]	; (8005834 <USER_SPI_write+0xf0>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	b2db      	uxtb	r3, r3
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <USER_SPI_write+0x32>
 8005772:	2303      	movs	r3, #3
 8005774:	e05a      	b.n	800582c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8005776:	4b2f      	ldr	r3, [pc, #188]	; (8005834 <USER_SPI_write+0xf0>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	b2db      	uxtb	r3, r3
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <USER_SPI_write+0x44>
 8005784:	2302      	movs	r3, #2
 8005786:	e051      	b.n	800582c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8005788:	4b2b      	ldr	r3, [pc, #172]	; (8005838 <USER_SPI_write+0xf4>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	2b00      	cmp	r3, #0
 8005792:	d102      	bne.n	800579a <USER_SPI_write+0x56>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	025b      	lsls	r3, r3, #9
 8005798:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d110      	bne.n	80057c2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	2018      	movs	r0, #24
 80057a4:	f7ff fdf9 	bl	800539a <send_cmd>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d136      	bne.n	800581c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80057ae:	21fe      	movs	r1, #254	; 0xfe
 80057b0:	68b8      	ldr	r0, [r7, #8]
 80057b2:	f7ff fdc0 	bl	8005336 <xmit_datablock>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d02f      	beq.n	800581c <USER_SPI_write+0xd8>
			count = 0;
 80057bc:	2300      	movs	r3, #0
 80057be:	603b      	str	r3, [r7, #0]
 80057c0:	e02c      	b.n	800581c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80057c2:	4b1d      	ldr	r3, [pc, #116]	; (8005838 <USER_SPI_write+0xf4>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	f003 0306 	and.w	r3, r3, #6
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <USER_SPI_write+0x92>
 80057ce:	6839      	ldr	r1, [r7, #0]
 80057d0:	2097      	movs	r0, #151	; 0x97
 80057d2:	f7ff fde2 	bl	800539a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80057d6:	6879      	ldr	r1, [r7, #4]
 80057d8:	2019      	movs	r0, #25
 80057da:	f7ff fdde 	bl	800539a <send_cmd>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d11b      	bne.n	800581c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80057e4:	21fc      	movs	r1, #252	; 0xfc
 80057e6:	68b8      	ldr	r0, [r7, #8]
 80057e8:	f7ff fda5 	bl	8005336 <xmit_datablock>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <USER_SPI_write+0xc4>
				buff += 512;
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80057f8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	603b      	str	r3, [r7, #0]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1ee      	bne.n	80057e4 <USER_SPI_write+0xa0>
 8005806:	e000      	b.n	800580a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8005808:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800580a:	21fd      	movs	r1, #253	; 0xfd
 800580c:	2000      	movs	r0, #0
 800580e:	f7ff fd92 	bl	8005336 <xmit_datablock>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <USER_SPI_write+0xd8>
 8005818:	2301      	movs	r3, #1
 800581a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800581c:	f7ff fd36 	bl	800528c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	bf14      	ite	ne
 8005826:	2301      	movne	r3, #1
 8005828:	2300      	moveq	r3, #0
 800582a:	b2db      	uxtb	r3, r3
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	20000020 	.word	0x20000020
 8005838:	20000ee4 	.word	0x20000ee4

0800583c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08c      	sub	sp, #48	; 0x30
 8005840:	af00      	add	r7, sp, #0
 8005842:	4603      	mov	r3, r0
 8005844:	603a      	str	r2, [r7, #0]
 8005846:	71fb      	strb	r3, [r7, #7]
 8005848:	460b      	mov	r3, r1
 800584a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800584c:	79fb      	ldrb	r3, [r7, #7]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <USER_SPI_ioctl+0x1a>
 8005852:	2304      	movs	r3, #4
 8005854:	e15a      	b.n	8005b0c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005856:	4baf      	ldr	r3, [pc, #700]	; (8005b14 <USER_SPI_ioctl+0x2d8>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	b2db      	uxtb	r3, r3
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <USER_SPI_ioctl+0x2c>
 8005864:	2303      	movs	r3, #3
 8005866:	e151      	b.n	8005b0c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800586e:	79bb      	ldrb	r3, [r7, #6]
 8005870:	2b04      	cmp	r3, #4
 8005872:	f200 8136 	bhi.w	8005ae2 <USER_SPI_ioctl+0x2a6>
 8005876:	a201      	add	r2, pc, #4	; (adr r2, 800587c <USER_SPI_ioctl+0x40>)
 8005878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587c:	08005891 	.word	0x08005891
 8005880:	080058a5 	.word	0x080058a5
 8005884:	08005ae3 	.word	0x08005ae3
 8005888:	08005951 	.word	0x08005951
 800588c:	08005a47 	.word	0x08005a47
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005890:	f7ff fd0c 	bl	80052ac <spiselect>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 8127 	beq.w	8005aea <USER_SPI_ioctl+0x2ae>
 800589c:	2300      	movs	r3, #0
 800589e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80058a2:	e122      	b.n	8005aea <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80058a4:	2100      	movs	r1, #0
 80058a6:	2009      	movs	r0, #9
 80058a8:	f7ff fd77 	bl	800539a <send_cmd>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f040 811d 	bne.w	8005aee <USER_SPI_ioctl+0x2b2>
 80058b4:	f107 030c 	add.w	r3, r7, #12
 80058b8:	2110      	movs	r1, #16
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7ff fd12 	bl	80052e4 <rcvr_datablock>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 8113 	beq.w	8005aee <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80058c8:	7b3b      	ldrb	r3, [r7, #12]
 80058ca:	099b      	lsrs	r3, r3, #6
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d111      	bne.n	80058f6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80058d2:	7d7b      	ldrb	r3, [r7, #21]
 80058d4:	461a      	mov	r2, r3
 80058d6:	7d3b      	ldrb	r3, [r7, #20]
 80058d8:	021b      	lsls	r3, r3, #8
 80058da:	4413      	add	r3, r2
 80058dc:	461a      	mov	r2, r3
 80058de:	7cfb      	ldrb	r3, [r7, #19]
 80058e0:	041b      	lsls	r3, r3, #16
 80058e2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80058e6:	4413      	add	r3, r2
 80058e8:	3301      	adds	r3, #1
 80058ea:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	029a      	lsls	r2, r3, #10
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	e028      	b.n	8005948 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80058f6:	7c7b      	ldrb	r3, [r7, #17]
 80058f8:	f003 030f 	and.w	r3, r3, #15
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	7dbb      	ldrb	r3, [r7, #22]
 8005900:	09db      	lsrs	r3, r3, #7
 8005902:	b2db      	uxtb	r3, r3
 8005904:	4413      	add	r3, r2
 8005906:	b2da      	uxtb	r2, r3
 8005908:	7d7b      	ldrb	r3, [r7, #21]
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	b2db      	uxtb	r3, r3
 800590e:	f003 0306 	and.w	r3, r3, #6
 8005912:	b2db      	uxtb	r3, r3
 8005914:	4413      	add	r3, r2
 8005916:	b2db      	uxtb	r3, r3
 8005918:	3302      	adds	r3, #2
 800591a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800591e:	7d3b      	ldrb	r3, [r7, #20]
 8005920:	099b      	lsrs	r3, r3, #6
 8005922:	b2db      	uxtb	r3, r3
 8005924:	461a      	mov	r2, r3
 8005926:	7cfb      	ldrb	r3, [r7, #19]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	441a      	add	r2, r3
 800592c:	7cbb      	ldrb	r3, [r7, #18]
 800592e:	029b      	lsls	r3, r3, #10
 8005930:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005934:	4413      	add	r3, r2
 8005936:	3301      	adds	r3, #1
 8005938:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800593a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800593e:	3b09      	subs	r3, #9
 8005940:	69fa      	ldr	r2, [r7, #28]
 8005942:	409a      	lsls	r2, r3
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8005948:	2300      	movs	r3, #0
 800594a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800594e:	e0ce      	b.n	8005aee <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005950:	4b71      	ldr	r3, [pc, #452]	; (8005b18 <USER_SPI_ioctl+0x2dc>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	f003 0304 	and.w	r3, r3, #4
 8005958:	2b00      	cmp	r3, #0
 800595a:	d031      	beq.n	80059c0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800595c:	2100      	movs	r1, #0
 800595e:	208d      	movs	r0, #141	; 0x8d
 8005960:	f7ff fd1b 	bl	800539a <send_cmd>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	f040 80c3 	bne.w	8005af2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800596c:	20ff      	movs	r0, #255	; 0xff
 800596e:	f7ff fc1d 	bl	80051ac <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005972:	f107 030c 	add.w	r3, r7, #12
 8005976:	2110      	movs	r1, #16
 8005978:	4618      	mov	r0, r3
 800597a:	f7ff fcb3 	bl	80052e4 <rcvr_datablock>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 80b6 	beq.w	8005af2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005986:	2330      	movs	r3, #48	; 0x30
 8005988:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800598c:	e007      	b.n	800599e <USER_SPI_ioctl+0x162>
 800598e:	20ff      	movs	r0, #255	; 0xff
 8005990:	f7ff fc0c 	bl	80051ac <xchg_spi>
 8005994:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005998:	3b01      	subs	r3, #1
 800599a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800599e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1f3      	bne.n	800598e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80059a6:	7dbb      	ldrb	r3, [r7, #22]
 80059a8:	091b      	lsrs	r3, r3, #4
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	461a      	mov	r2, r3
 80059ae:	2310      	movs	r3, #16
 80059b0:	fa03 f202 	lsl.w	r2, r3, r2
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80059b8:	2300      	movs	r3, #0
 80059ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80059be:	e098      	b.n	8005af2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80059c0:	2100      	movs	r1, #0
 80059c2:	2009      	movs	r0, #9
 80059c4:	f7ff fce9 	bl	800539a <send_cmd>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f040 8091 	bne.w	8005af2 <USER_SPI_ioctl+0x2b6>
 80059d0:	f107 030c 	add.w	r3, r7, #12
 80059d4:	2110      	movs	r1, #16
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7ff fc84 	bl	80052e4 <rcvr_datablock>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 8087 	beq.w	8005af2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80059e4:	4b4c      	ldr	r3, [pc, #304]	; (8005b18 <USER_SPI_ioctl+0x2dc>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	f003 0302 	and.w	r3, r3, #2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d012      	beq.n	8005a16 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80059f0:	7dbb      	ldrb	r3, [r7, #22]
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80059f8:	7dfa      	ldrb	r2, [r7, #23]
 80059fa:	09d2      	lsrs	r2, r2, #7
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	4413      	add	r3, r2
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	7e7b      	ldrb	r3, [r7, #25]
 8005a04:	099b      	lsrs	r3, r3, #6
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	461a      	mov	r2, r3
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	e013      	b.n	8005a3e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8005a16:	7dbb      	ldrb	r3, [r7, #22]
 8005a18:	109b      	asrs	r3, r3, #2
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	f003 031f 	and.w	r3, r3, #31
 8005a20:	3301      	adds	r3, #1
 8005a22:	7dfa      	ldrb	r2, [r7, #23]
 8005a24:	00d2      	lsls	r2, r2, #3
 8005a26:	f002 0218 	and.w	r2, r2, #24
 8005a2a:	7df9      	ldrb	r1, [r7, #23]
 8005a2c:	0949      	lsrs	r1, r1, #5
 8005a2e:	b2c9      	uxtb	r1, r1
 8005a30:	440a      	add	r2, r1
 8005a32:	3201      	adds	r2, #1
 8005a34:	fb02 f303 	mul.w	r3, r2, r3
 8005a38:	461a      	mov	r2, r3
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005a44:	e055      	b.n	8005af2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005a46:	4b34      	ldr	r3, [pc, #208]	; (8005b18 <USER_SPI_ioctl+0x2dc>)
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	f003 0306 	and.w	r3, r3, #6
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d051      	beq.n	8005af6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005a52:	f107 020c 	add.w	r2, r7, #12
 8005a56:	79fb      	ldrb	r3, [r7, #7]
 8005a58:	210b      	movs	r1, #11
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7ff feee 	bl	800583c <USER_SPI_ioctl>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d149      	bne.n	8005afa <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005a66:	7b3b      	ldrb	r3, [r7, #12]
 8005a68:	099b      	lsrs	r3, r3, #6
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d104      	bne.n	8005a7a <USER_SPI_ioctl+0x23e>
 8005a70:	7dbb      	ldrb	r3, [r7, #22]
 8005a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d041      	beq.n	8005afe <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	623b      	str	r3, [r7, #32]
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8005a8a:	4b23      	ldr	r3, [pc, #140]	; (8005b18 <USER_SPI_ioctl+0x2dc>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	f003 0308 	and.w	r3, r3, #8
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d105      	bne.n	8005aa2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8005a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a98:	025b      	lsls	r3, r3, #9
 8005a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	025b      	lsls	r3, r3, #9
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8005aa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aa4:	2020      	movs	r0, #32
 8005aa6:	f7ff fc78 	bl	800539a <send_cmd>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d128      	bne.n	8005b02 <USER_SPI_ioctl+0x2c6>
 8005ab0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ab2:	2021      	movs	r0, #33	; 0x21
 8005ab4:	f7ff fc71 	bl	800539a <send_cmd>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d121      	bne.n	8005b02 <USER_SPI_ioctl+0x2c6>
 8005abe:	2100      	movs	r1, #0
 8005ac0:	2026      	movs	r0, #38	; 0x26
 8005ac2:	f7ff fc6a 	bl	800539a <send_cmd>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d11a      	bne.n	8005b02 <USER_SPI_ioctl+0x2c6>
 8005acc:	f247 5030 	movw	r0, #30000	; 0x7530
 8005ad0:	f7ff fbb9 	bl	8005246 <wait_ready>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d013      	beq.n	8005b02 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8005ada:	2300      	movs	r3, #0
 8005adc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8005ae0:	e00f      	b.n	8005b02 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8005ae2:	2304      	movs	r3, #4
 8005ae4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005ae8:	e00c      	b.n	8005b04 <USER_SPI_ioctl+0x2c8>
		break;
 8005aea:	bf00      	nop
 8005aec:	e00a      	b.n	8005b04 <USER_SPI_ioctl+0x2c8>
		break;
 8005aee:	bf00      	nop
 8005af0:	e008      	b.n	8005b04 <USER_SPI_ioctl+0x2c8>
		break;
 8005af2:	bf00      	nop
 8005af4:	e006      	b.n	8005b04 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005af6:	bf00      	nop
 8005af8:	e004      	b.n	8005b04 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005afa:	bf00      	nop
 8005afc:	e002      	b.n	8005b04 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005afe:	bf00      	nop
 8005b00:	e000      	b.n	8005b04 <USER_SPI_ioctl+0x2c8>
		break;
 8005b02:	bf00      	nop
	}

	despiselect();
 8005b04:	f7ff fbc2 	bl	800528c <despiselect>

	return res;
 8005b08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3730      	adds	r7, #48	; 0x30
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	20000020 	.word	0x20000020
 8005b18:	20000ee4 	.word	0x20000ee4

08005b1c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	4603      	mov	r3, r0
 8005b24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005b26:	79fb      	ldrb	r3, [r7, #7]
 8005b28:	4a08      	ldr	r2, [pc, #32]	; (8005b4c <disk_status+0x30>)
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	79fa      	ldrb	r2, [r7, #7]
 8005b34:	4905      	ldr	r1, [pc, #20]	; (8005b4c <disk_status+0x30>)
 8005b36:	440a      	add	r2, r1
 8005b38:	7a12      	ldrb	r2, [r2, #8]
 8005b3a:	4610      	mov	r0, r2
 8005b3c:	4798      	blx	r3
 8005b3e:	4603      	mov	r3, r0
 8005b40:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	20000f18 	.word	0x20000f18

08005b50 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	4603      	mov	r3, r0
 8005b58:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005b5e:	79fb      	ldrb	r3, [r7, #7]
 8005b60:	4a0d      	ldr	r2, [pc, #52]	; (8005b98 <disk_initialize+0x48>)
 8005b62:	5cd3      	ldrb	r3, [r2, r3]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d111      	bne.n	8005b8c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005b68:	79fb      	ldrb	r3, [r7, #7]
 8005b6a:	4a0b      	ldr	r2, [pc, #44]	; (8005b98 <disk_initialize+0x48>)
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005b70:	79fb      	ldrb	r3, [r7, #7]
 8005b72:	4a09      	ldr	r2, [pc, #36]	; (8005b98 <disk_initialize+0x48>)
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	79fa      	ldrb	r2, [r7, #7]
 8005b7e:	4906      	ldr	r1, [pc, #24]	; (8005b98 <disk_initialize+0x48>)
 8005b80:	440a      	add	r2, r1
 8005b82:	7a12      	ldrb	r2, [r2, #8]
 8005b84:	4610      	mov	r0, r2
 8005b86:	4798      	blx	r3
 8005b88:	4603      	mov	r3, r0
 8005b8a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	20000f18 	.word	0x20000f18

08005b9c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005b9c:	b590      	push	{r4, r7, lr}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60b9      	str	r1, [r7, #8]
 8005ba4:	607a      	str	r2, [r7, #4]
 8005ba6:	603b      	str	r3, [r7, #0]
 8005ba8:	4603      	mov	r3, r0
 8005baa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
 8005bae:	4a0a      	ldr	r2, [pc, #40]	; (8005bd8 <disk_read+0x3c>)
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	689c      	ldr	r4, [r3, #8]
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
 8005bba:	4a07      	ldr	r2, [pc, #28]	; (8005bd8 <disk_read+0x3c>)
 8005bbc:	4413      	add	r3, r2
 8005bbe:	7a18      	ldrb	r0, [r3, #8]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	68b9      	ldr	r1, [r7, #8]
 8005bc6:	47a0      	blx	r4
 8005bc8:	4603      	mov	r3, r0
 8005bca:	75fb      	strb	r3, [r7, #23]
  return res;
 8005bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd90      	pop	{r4, r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20000f18 	.word	0x20000f18

08005bdc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005bdc:	b590      	push	{r4, r7, lr}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	607a      	str	r2, [r7, #4]
 8005be6:	603b      	str	r3, [r7, #0]
 8005be8:	4603      	mov	r3, r0
 8005bea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005bec:	7bfb      	ldrb	r3, [r7, #15]
 8005bee:	4a0a      	ldr	r2, [pc, #40]	; (8005c18 <disk_write+0x3c>)
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4413      	add	r3, r2
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	68dc      	ldr	r4, [r3, #12]
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
 8005bfa:	4a07      	ldr	r2, [pc, #28]	; (8005c18 <disk_write+0x3c>)
 8005bfc:	4413      	add	r3, r2
 8005bfe:	7a18      	ldrb	r0, [r3, #8]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	68b9      	ldr	r1, [r7, #8]
 8005c06:	47a0      	blx	r4
 8005c08:	4603      	mov	r3, r0
 8005c0a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd90      	pop	{r4, r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20000f18 	.word	0x20000f18

08005c1c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	4603      	mov	r3, r0
 8005c24:	603a      	str	r2, [r7, #0]
 8005c26:	71fb      	strb	r3, [r7, #7]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005c2c:	79fb      	ldrb	r3, [r7, #7]
 8005c2e:	4a09      	ldr	r2, [pc, #36]	; (8005c54 <disk_ioctl+0x38>)
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	79fa      	ldrb	r2, [r7, #7]
 8005c3a:	4906      	ldr	r1, [pc, #24]	; (8005c54 <disk_ioctl+0x38>)
 8005c3c:	440a      	add	r2, r1
 8005c3e:	7a10      	ldrb	r0, [r2, #8]
 8005c40:	79b9      	ldrb	r1, [r7, #6]
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	4798      	blx	r3
 8005c46:	4603      	mov	r3, r0
 8005c48:	73fb      	strb	r3, [r7, #15]
  return res;
 8005c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	20000f18 	.word	0x20000f18

08005c58 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3301      	adds	r3, #1
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005c68:	89fb      	ldrh	r3, [r7, #14]
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	b21a      	sxth	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	b21b      	sxth	r3, r3
 8005c74:	4313      	orrs	r3, r2
 8005c76:	b21b      	sxth	r3, r3
 8005c78:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005c7a:	89fb      	ldrh	r3, [r7, #14]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3303      	adds	r3, #3
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	021b      	lsls	r3, r3, #8
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	3202      	adds	r2, #2
 8005ca0:	7812      	ldrb	r2, [r2, #0]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	021b      	lsls	r3, r3, #8
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	3201      	adds	r2, #1
 8005cae:	7812      	ldrb	r2, [r2, #0]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	7812      	ldrb	r2, [r2, #0]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
	return rv;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	887a      	ldrh	r2, [r7, #2]
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	701a      	strb	r2, [r3, #0]
 8005ce6:	887b      	ldrh	r3, [r7, #2]
 8005ce8:	0a1b      	lsrs	r3, r3, #8
 8005cea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	607a      	str	r2, [r7, #4]
 8005cf2:	887a      	ldrh	r2, [r7, #2]
 8005cf4:	b2d2      	uxtb	r2, r2
 8005cf6:	701a      	strb	r2, [r3, #0]
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	701a      	strb	r2, [r3, #0]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	0a1b      	lsrs	r3, r3, #8
 8005d1e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	607a      	str	r2, [r7, #4]
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	b2d2      	uxtb	r2, r2
 8005d2a:	701a      	strb	r2, [r3, #0]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	0a1b      	lsrs	r3, r3, #8
 8005d30:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	607a      	str	r2, [r7, #4]
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	701a      	strb	r2, [r3, #0]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	0a1b      	lsrs	r3, r3, #8
 8005d42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	1c5a      	adds	r2, r3, #1
 8005d48:	607a      	str	r2, [r7, #4]
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	b2d2      	uxtb	r2, r2
 8005d4e:	701a      	strb	r2, [r3, #0]
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00d      	beq.n	8005d92 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	1c53      	adds	r3, r2, #1
 8005d7a:	613b      	str	r3, [r7, #16]
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	1c59      	adds	r1, r3, #1
 8005d80:	6179      	str	r1, [r7, #20]
 8005d82:	7812      	ldrb	r2, [r2, #0]
 8005d84:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	607b      	str	r3, [r7, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1f1      	bne.n	8005d76 <mem_cpy+0x1a>
	}
}
 8005d92:	bf00      	nop
 8005d94:	371c      	adds	r7, #28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005d9e:	b480      	push	{r7}
 8005da0:	b087      	sub	sp, #28
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	60f8      	str	r0, [r7, #12]
 8005da6:	60b9      	str	r1, [r7, #8]
 8005da8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	617a      	str	r2, [r7, #20]
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	b2d2      	uxtb	r2, r2
 8005db8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	607b      	str	r3, [r7, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1f3      	bne.n	8005dae <mem_set+0x10>
}
 8005dc6:	bf00      	nop
 8005dc8:	bf00      	nop
 8005dca:	371c      	adds	r7, #28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005dd4:	b480      	push	{r7}
 8005dd6:	b089      	sub	sp, #36	; 0x24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	61fb      	str	r3, [r7, #28]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005de8:	2300      	movs	r3, #0
 8005dea:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	1c5a      	adds	r2, r3, #1
 8005df0:	61fa      	str	r2, [r7, #28]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	4619      	mov	r1, r3
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	61ba      	str	r2, [r7, #24]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	1acb      	subs	r3, r1, r3
 8005e00:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3b01      	subs	r3, #1
 8005e06:	607b      	str	r3, [r7, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <mem_cmp+0x40>
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0eb      	beq.n	8005dec <mem_cmp+0x18>

	return r;
 8005e14:	697b      	ldr	r3, [r7, #20]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3724      	adds	r7, #36	; 0x24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005e2c:	e002      	b.n	8005e34 <chk_chr+0x12>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3301      	adds	r3, #1
 8005e32:	607b      	str	r3, [r7, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d005      	beq.n	8005e48 <chk_chr+0x26>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	461a      	mov	r2, r3
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d1f2      	bne.n	8005e2e <chk_chr+0xc>
	return *str;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005e62:	2300      	movs	r3, #0
 8005e64:	60bb      	str	r3, [r7, #8]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	e029      	b.n	8005ec0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005e6c:	4a27      	ldr	r2, [pc, #156]	; (8005f0c <chk_lock+0xb4>)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	011b      	lsls	r3, r3, #4
 8005e72:	4413      	add	r3, r2
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d01d      	beq.n	8005eb6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005e7a:	4a24      	ldr	r2, [pc, #144]	; (8005f0c <chk_lock+0xb4>)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	011b      	lsls	r3, r3, #4
 8005e80:	4413      	add	r3, r2
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d116      	bne.n	8005eba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005e8c:	4a1f      	ldr	r2, [pc, #124]	; (8005f0c <chk_lock+0xb4>)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	011b      	lsls	r3, r3, #4
 8005e92:	4413      	add	r3, r2
 8005e94:	3304      	adds	r3, #4
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d10c      	bne.n	8005eba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005ea0:	4a1a      	ldr	r2, [pc, #104]	; (8005f0c <chk_lock+0xb4>)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	011b      	lsls	r3, r3, #4
 8005ea6:	4413      	add	r3, r2
 8005ea8:	3308      	adds	r3, #8
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d102      	bne.n	8005eba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005eb4:	e007      	b.n	8005ec6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d9d2      	bls.n	8005e6c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d109      	bne.n	8005ee0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d102      	bne.n	8005ed8 <chk_lock+0x80>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d101      	bne.n	8005edc <chk_lock+0x84>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e010      	b.n	8005efe <chk_lock+0xa6>
 8005edc:	2312      	movs	r3, #18
 8005ede:	e00e      	b.n	8005efe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d108      	bne.n	8005ef8 <chk_lock+0xa0>
 8005ee6:	4a09      	ldr	r2, [pc, #36]	; (8005f0c <chk_lock+0xb4>)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	011b      	lsls	r3, r3, #4
 8005eec:	4413      	add	r3, r2
 8005eee:	330c      	adds	r3, #12
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ef6:	d101      	bne.n	8005efc <chk_lock+0xa4>
 8005ef8:	2310      	movs	r3, #16
 8005efa:	e000      	b.n	8005efe <chk_lock+0xa6>
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	20000ef8 	.word	0x20000ef8

08005f10 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005f16:	2300      	movs	r3, #0
 8005f18:	607b      	str	r3, [r7, #4]
 8005f1a:	e002      	b.n	8005f22 <enq_lock+0x12>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	607b      	str	r3, [r7, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d806      	bhi.n	8005f36 <enq_lock+0x26>
 8005f28:	4a09      	ldr	r2, [pc, #36]	; (8005f50 <enq_lock+0x40>)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	011b      	lsls	r3, r3, #4
 8005f2e:	4413      	add	r3, r2
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1f2      	bne.n	8005f1c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	bf14      	ite	ne
 8005f3c:	2301      	movne	r3, #1
 8005f3e:	2300      	moveq	r3, #0
 8005f40:	b2db      	uxtb	r3, r3
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	20000ef8 	.word	0x20000ef8

08005f54 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	e01f      	b.n	8005fa4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005f64:	4a41      	ldr	r2, [pc, #260]	; (800606c <inc_lock+0x118>)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	011b      	lsls	r3, r3, #4
 8005f6a:	4413      	add	r3, r2
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d113      	bne.n	8005f9e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005f76:	4a3d      	ldr	r2, [pc, #244]	; (800606c <inc_lock+0x118>)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	4413      	add	r3, r2
 8005f7e:	3304      	adds	r3, #4
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d109      	bne.n	8005f9e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005f8a:	4a38      	ldr	r2, [pc, #224]	; (800606c <inc_lock+0x118>)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	011b      	lsls	r3, r3, #4
 8005f90:	4413      	add	r3, r2
 8005f92:	3308      	adds	r3, #8
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d006      	beq.n	8005fac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d9dc      	bls.n	8005f64 <inc_lock+0x10>
 8005faa:	e000      	b.n	8005fae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005fac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d132      	bne.n	800601a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	e002      	b.n	8005fc0 <inc_lock+0x6c>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d806      	bhi.n	8005fd4 <inc_lock+0x80>
 8005fc6:	4a29      	ldr	r2, [pc, #164]	; (800606c <inc_lock+0x118>)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	4413      	add	r3, r2
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1f2      	bne.n	8005fba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d101      	bne.n	8005fde <inc_lock+0x8a>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	e040      	b.n	8006060 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	4922      	ldr	r1, [pc, #136]	; (800606c <inc_lock+0x118>)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	011b      	lsls	r3, r3, #4
 8005fe8:	440b      	add	r3, r1
 8005fea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	491e      	ldr	r1, [pc, #120]	; (800606c <inc_lock+0x118>)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	011b      	lsls	r3, r3, #4
 8005ff6:	440b      	add	r3, r1
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	695a      	ldr	r2, [r3, #20]
 8006000:	491a      	ldr	r1, [pc, #104]	; (800606c <inc_lock+0x118>)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	011b      	lsls	r3, r3, #4
 8006006:	440b      	add	r3, r1
 8006008:	3308      	adds	r3, #8
 800600a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800600c:	4a17      	ldr	r2, [pc, #92]	; (800606c <inc_lock+0x118>)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	011b      	lsls	r3, r3, #4
 8006012:	4413      	add	r3, r2
 8006014:	330c      	adds	r3, #12
 8006016:	2200      	movs	r2, #0
 8006018:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d009      	beq.n	8006034 <inc_lock+0xe0>
 8006020:	4a12      	ldr	r2, [pc, #72]	; (800606c <inc_lock+0x118>)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	4413      	add	r3, r2
 8006028:	330c      	adds	r3, #12
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d001      	beq.n	8006034 <inc_lock+0xe0>
 8006030:	2300      	movs	r3, #0
 8006032:	e015      	b.n	8006060 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d108      	bne.n	800604c <inc_lock+0xf8>
 800603a:	4a0c      	ldr	r2, [pc, #48]	; (800606c <inc_lock+0x118>)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	011b      	lsls	r3, r3, #4
 8006040:	4413      	add	r3, r2
 8006042:	330c      	adds	r3, #12
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	3301      	adds	r3, #1
 8006048:	b29a      	uxth	r2, r3
 800604a:	e001      	b.n	8006050 <inc_lock+0xfc>
 800604c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006050:	4906      	ldr	r1, [pc, #24]	; (800606c <inc_lock+0x118>)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	011b      	lsls	r3, r3, #4
 8006056:	440b      	add	r3, r1
 8006058:	330c      	adds	r3, #12
 800605a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	3301      	adds	r3, #1
}
 8006060:	4618      	mov	r0, r3
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	20000ef8 	.word	0x20000ef8

08006070 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3b01      	subs	r3, #1
 800607c:	607b      	str	r3, [r7, #4]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d825      	bhi.n	80060d0 <dec_lock+0x60>
		n = Files[i].ctr;
 8006084:	4a17      	ldr	r2, [pc, #92]	; (80060e4 <dec_lock+0x74>)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	011b      	lsls	r3, r3, #4
 800608a:	4413      	add	r3, r2
 800608c:	330c      	adds	r3, #12
 800608e:	881b      	ldrh	r3, [r3, #0]
 8006090:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006092:	89fb      	ldrh	r3, [r7, #14]
 8006094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006098:	d101      	bne.n	800609e <dec_lock+0x2e>
 800609a:	2300      	movs	r3, #0
 800609c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800609e:	89fb      	ldrh	r3, [r7, #14]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d002      	beq.n	80060aa <dec_lock+0x3a>
 80060a4:	89fb      	ldrh	r3, [r7, #14]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80060aa:	4a0e      	ldr	r2, [pc, #56]	; (80060e4 <dec_lock+0x74>)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	011b      	lsls	r3, r3, #4
 80060b0:	4413      	add	r3, r2
 80060b2:	330c      	adds	r3, #12
 80060b4:	89fa      	ldrh	r2, [r7, #14]
 80060b6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80060b8:	89fb      	ldrh	r3, [r7, #14]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d105      	bne.n	80060ca <dec_lock+0x5a>
 80060be:	4a09      	ldr	r2, [pc, #36]	; (80060e4 <dec_lock+0x74>)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	4413      	add	r3, r2
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	737b      	strb	r3, [r7, #13]
 80060ce:	e001      	b.n	80060d4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80060d0:	2302      	movs	r3, #2
 80060d2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80060d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	20000ef8 	.word	0x20000ef8

080060e8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80060f0:	2300      	movs	r3, #0
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	e010      	b.n	8006118 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80060f6:	4a0d      	ldr	r2, [pc, #52]	; (800612c <clear_lock+0x44>)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	011b      	lsls	r3, r3, #4
 80060fc:	4413      	add	r3, r2
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	429a      	cmp	r2, r3
 8006104:	d105      	bne.n	8006112 <clear_lock+0x2a>
 8006106:	4a09      	ldr	r2, [pc, #36]	; (800612c <clear_lock+0x44>)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	4413      	add	r3, r2
 800610e:	2200      	movs	r2, #0
 8006110:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	3301      	adds	r3, #1
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d9eb      	bls.n	80060f6 <clear_lock+0xe>
	}
}
 800611e:	bf00      	nop
 8006120:	bf00      	nop
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	20000ef8 	.word	0x20000ef8

08006130 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006138:	2300      	movs	r3, #0
 800613a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	78db      	ldrb	r3, [r3, #3]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d034      	beq.n	80061ae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006148:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	7858      	ldrb	r0, [r3, #1]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006154:	2301      	movs	r3, #1
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	f7ff fd40 	bl	8005bdc <disk_write>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006162:	2301      	movs	r3, #1
 8006164:	73fb      	strb	r3, [r7, #15]
 8006166:	e022      	b.n	80061ae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	1ad2      	subs	r2, r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	429a      	cmp	r2, r3
 800617c:	d217      	bcs.n	80061ae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	789b      	ldrb	r3, [r3, #2]
 8006182:	613b      	str	r3, [r7, #16]
 8006184:	e010      	b.n	80061a8 <sync_window+0x78>
					wsect += fs->fsize;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	4413      	add	r3, r2
 800618e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	7858      	ldrb	r0, [r3, #1]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800619a:	2301      	movs	r3, #1
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	f7ff fd1d 	bl	8005bdc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	3b01      	subs	r3, #1
 80061a6:	613b      	str	r3, [r7, #16]
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d8eb      	bhi.n	8006186 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3718      	adds	r7, #24
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80061c2:	2300      	movs	r3, #0
 80061c4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d01b      	beq.n	8006208 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff ffad 	bl	8006130 <sync_window>
 80061d6:	4603      	mov	r3, r0
 80061d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80061da:	7bfb      	ldrb	r3, [r7, #15]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d113      	bne.n	8006208 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	7858      	ldrb	r0, [r3, #1]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80061ea:	2301      	movs	r3, #1
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	f7ff fcd5 	bl	8005b9c <disk_read>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d004      	beq.n	8006202 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80061f8:	f04f 33ff 	mov.w	r3, #4294967295
 80061fc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80061fe:	2301      	movs	r3, #1
 8006200:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8006208:	7bfb      	ldrb	r3, [r7, #15]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff ff87 	bl	8006130 <sync_window>
 8006222:	4603      	mov	r3, r0
 8006224:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006226:	7bfb      	ldrb	r3, [r7, #15]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d158      	bne.n	80062de <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	2b03      	cmp	r3, #3
 8006232:	d148      	bne.n	80062c6 <sync_fs+0xb2>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	791b      	ldrb	r3, [r3, #4]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d144      	bne.n	80062c6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3330      	adds	r3, #48	; 0x30
 8006240:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006244:	2100      	movs	r1, #0
 8006246:	4618      	mov	r0, r3
 8006248:	f7ff fda9 	bl	8005d9e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	3330      	adds	r3, #48	; 0x30
 8006250:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006254:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006258:	4618      	mov	r0, r3
 800625a:	f7ff fd38 	bl	8005cce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	3330      	adds	r3, #48	; 0x30
 8006262:	4921      	ldr	r1, [pc, #132]	; (80062e8 <sync_fs+0xd4>)
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff fd4d 	bl	8005d04 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	3330      	adds	r3, #48	; 0x30
 800626e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006272:	491e      	ldr	r1, [pc, #120]	; (80062ec <sync_fs+0xd8>)
 8006274:	4618      	mov	r0, r3
 8006276:	f7ff fd45 	bl	8005d04 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	3330      	adds	r3, #48	; 0x30
 800627e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	4619      	mov	r1, r3
 8006288:	4610      	mov	r0, r2
 800628a:	f7ff fd3b 	bl	8005d04 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	3330      	adds	r3, #48	; 0x30
 8006292:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	4619      	mov	r1, r3
 800629c:	4610      	mov	r0, r2
 800629e:	f7ff fd31 	bl	8005d04 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	1c5a      	adds	r2, r3, #1
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	7858      	ldrb	r0, [r3, #1]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ba:	2301      	movs	r3, #1
 80062bc:	f7ff fc8e 	bl	8005bdc <disk_write>
			fs->fsi_flag = 0;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	785b      	ldrb	r3, [r3, #1]
 80062ca:	2200      	movs	r2, #0
 80062cc:	2100      	movs	r1, #0
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff fca4 	bl	8005c1c <disk_ioctl>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <sync_fs+0xca>
 80062da:	2301      	movs	r3, #1
 80062dc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80062de:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	41615252 	.word	0x41615252
 80062ec:	61417272 	.word	0x61417272

080062f0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	3b02      	subs	r3, #2
 80062fe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	3b02      	subs	r3, #2
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	429a      	cmp	r2, r3
 800630a:	d301      	bcc.n	8006310 <clust2sect+0x20>
 800630c:	2300      	movs	r3, #0
 800630e:	e008      	b.n	8006322 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	895b      	ldrh	r3, [r3, #10]
 8006314:	461a      	mov	r2, r3
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	fb03 f202 	mul.w	r2, r3, r2
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006320:	4413      	add	r3, r2
}
 8006322:	4618      	mov	r0, r3
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b086      	sub	sp, #24
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d904      	bls.n	800634e <get_fat+0x20>
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	429a      	cmp	r2, r3
 800634c:	d302      	bcc.n	8006354 <get_fat+0x26>
		val = 1;	/* Internal error */
 800634e:	2301      	movs	r3, #1
 8006350:	617b      	str	r3, [r7, #20]
 8006352:	e08f      	b.n	8006474 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006354:	f04f 33ff 	mov.w	r3, #4294967295
 8006358:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	2b03      	cmp	r3, #3
 8006360:	d062      	beq.n	8006428 <get_fat+0xfa>
 8006362:	2b03      	cmp	r3, #3
 8006364:	dc7c      	bgt.n	8006460 <get_fat+0x132>
 8006366:	2b01      	cmp	r3, #1
 8006368:	d002      	beq.n	8006370 <get_fat+0x42>
 800636a:	2b02      	cmp	r3, #2
 800636c:	d042      	beq.n	80063f4 <get_fat+0xc6>
 800636e:	e077      	b.n	8006460 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	60fb      	str	r3, [r7, #12]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	085b      	lsrs	r3, r3, #1
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	4413      	add	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	6a1a      	ldr	r2, [r3, #32]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	0a5b      	lsrs	r3, r3, #9
 8006386:	4413      	add	r3, r2
 8006388:	4619      	mov	r1, r3
 800638a:	6938      	ldr	r0, [r7, #16]
 800638c:	f7ff ff14 	bl	80061b8 <move_window>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d167      	bne.n	8006466 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	60fa      	str	r2, [r7, #12]
 800639c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	4413      	add	r3, r2
 80063a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80063a8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	6a1a      	ldr	r2, [r3, #32]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	0a5b      	lsrs	r3, r3, #9
 80063b2:	4413      	add	r3, r2
 80063b4:	4619      	mov	r1, r3
 80063b6:	6938      	ldr	r0, [r7, #16]
 80063b8:	f7ff fefe 	bl	80061b8 <move_window>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d153      	bne.n	800646a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	4413      	add	r3, r2
 80063cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80063d0:	021b      	lsls	r3, r3, #8
 80063d2:	461a      	mov	r2, r3
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <get_fat+0xbc>
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	091b      	lsrs	r3, r3, #4
 80063e8:	e002      	b.n	80063f0 <get_fat+0xc2>
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063f0:	617b      	str	r3, [r7, #20]
			break;
 80063f2:	e03f      	b.n	8006474 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	6a1a      	ldr	r2, [r3, #32]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	0a1b      	lsrs	r3, r3, #8
 80063fc:	4413      	add	r3, r2
 80063fe:	4619      	mov	r1, r3
 8006400:	6938      	ldr	r0, [r7, #16]
 8006402:	f7ff fed9 	bl	80061b8 <move_window>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d130      	bne.n	800646e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	005b      	lsls	r3, r3, #1
 8006416:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800641a:	4413      	add	r3, r2
 800641c:	4618      	mov	r0, r3
 800641e:	f7ff fc1b 	bl	8005c58 <ld_word>
 8006422:	4603      	mov	r3, r0
 8006424:	617b      	str	r3, [r7, #20]
			break;
 8006426:	e025      	b.n	8006474 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	6a1a      	ldr	r2, [r3, #32]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	09db      	lsrs	r3, r3, #7
 8006430:	4413      	add	r3, r2
 8006432:	4619      	mov	r1, r3
 8006434:	6938      	ldr	r0, [r7, #16]
 8006436:	f7ff febf 	bl	80061b8 <move_window>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d118      	bne.n	8006472 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800644e:	4413      	add	r3, r2
 8006450:	4618      	mov	r0, r3
 8006452:	f7ff fc19 	bl	8005c88 <ld_dword>
 8006456:	4603      	mov	r3, r0
 8006458:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800645c:	617b      	str	r3, [r7, #20]
			break;
 800645e:	e009      	b.n	8006474 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006460:	2301      	movs	r3, #1
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	e006      	b.n	8006474 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006466:	bf00      	nop
 8006468:	e004      	b.n	8006474 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800646a:	bf00      	nop
 800646c:	e002      	b.n	8006474 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800646e:	bf00      	nop
 8006470:	e000      	b.n	8006474 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006472:	bf00      	nop
		}
	}

	return val;
 8006474:	697b      	ldr	r3, [r7, #20]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800647e:	b590      	push	{r4, r7, lr}
 8006480:	b089      	sub	sp, #36	; 0x24
 8006482:	af00      	add	r7, sp, #0
 8006484:	60f8      	str	r0, [r7, #12]
 8006486:	60b9      	str	r1, [r7, #8]
 8006488:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800648a:	2302      	movs	r3, #2
 800648c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2b01      	cmp	r3, #1
 8006492:	f240 80d2 	bls.w	800663a <put_fat+0x1bc>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	429a      	cmp	r2, r3
 800649e:	f080 80cc 	bcs.w	800663a <put_fat+0x1bc>
		switch (fs->fs_type) {
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	2b03      	cmp	r3, #3
 80064a8:	f000 8096 	beq.w	80065d8 <put_fat+0x15a>
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	f300 80cd 	bgt.w	800664c <put_fat+0x1ce>
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d002      	beq.n	80064bc <put_fat+0x3e>
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d06e      	beq.n	8006598 <put_fat+0x11a>
 80064ba:	e0c7      	b.n	800664c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	61bb      	str	r3, [r7, #24]
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	085b      	lsrs	r3, r3, #1
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	4413      	add	r3, r2
 80064c8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6a1a      	ldr	r2, [r3, #32]
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	0a5b      	lsrs	r3, r3, #9
 80064d2:	4413      	add	r3, r2
 80064d4:	4619      	mov	r1, r3
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f7ff fe6e 	bl	80061b8 <move_window>
 80064dc:	4603      	mov	r3, r0
 80064de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80064e0:	7ffb      	ldrb	r3, [r7, #31]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f040 80ab 	bne.w	800663e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	1c59      	adds	r1, r3, #1
 80064f2:	61b9      	str	r1, [r7, #24]
 80064f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f8:	4413      	add	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00d      	beq.n	8006522 <put_fat+0xa4>
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	b25b      	sxtb	r3, r3
 800650c:	f003 030f 	and.w	r3, r3, #15
 8006510:	b25a      	sxtb	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	b2db      	uxtb	r3, r3
 8006516:	011b      	lsls	r3, r3, #4
 8006518:	b25b      	sxtb	r3, r3
 800651a:	4313      	orrs	r3, r2
 800651c:	b25b      	sxtb	r3, r3
 800651e:	b2db      	uxtb	r3, r3
 8006520:	e001      	b.n	8006526 <put_fat+0xa8>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	b2db      	uxtb	r3, r3
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2201      	movs	r2, #1
 800652e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6a1a      	ldr	r2, [r3, #32]
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	0a5b      	lsrs	r3, r3, #9
 8006538:	4413      	add	r3, r2
 800653a:	4619      	mov	r1, r3
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f7ff fe3b 	bl	80061b8 <move_window>
 8006542:	4603      	mov	r3, r0
 8006544:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006546:	7ffb      	ldrb	r3, [r7, #31]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d17a      	bne.n	8006642 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006558:	4413      	add	r3, r2
 800655a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <put_fat+0xf0>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	091b      	lsrs	r3, r3, #4
 800656a:	b2db      	uxtb	r3, r3
 800656c:	e00e      	b.n	800658c <put_fat+0x10e>
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	b25b      	sxtb	r3, r3
 8006574:	f023 030f 	bic.w	r3, r3, #15
 8006578:	b25a      	sxtb	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	0a1b      	lsrs	r3, r3, #8
 800657e:	b25b      	sxtb	r3, r3
 8006580:	f003 030f 	and.w	r3, r3, #15
 8006584:	b25b      	sxtb	r3, r3
 8006586:	4313      	orrs	r3, r2
 8006588:	b25b      	sxtb	r3, r3
 800658a:	b2db      	uxtb	r3, r3
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2201      	movs	r2, #1
 8006594:	70da      	strb	r2, [r3, #3]
			break;
 8006596:	e059      	b.n	800664c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6a1a      	ldr	r2, [r3, #32]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	0a1b      	lsrs	r3, r3, #8
 80065a0:	4413      	add	r3, r2
 80065a2:	4619      	mov	r1, r3
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f7ff fe07 	bl	80061b8 <move_window>
 80065aa:	4603      	mov	r3, r0
 80065ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80065ae:	7ffb      	ldrb	r3, [r7, #31]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d148      	bne.n	8006646 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80065c2:	4413      	add	r3, r2
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	b292      	uxth	r2, r2
 80065c8:	4611      	mov	r1, r2
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff fb7f 	bl	8005cce <st_word>
			fs->wflag = 1;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2201      	movs	r2, #1
 80065d4:	70da      	strb	r2, [r3, #3]
			break;
 80065d6:	e039      	b.n	800664c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6a1a      	ldr	r2, [r3, #32]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	09db      	lsrs	r3, r3, #7
 80065e0:	4413      	add	r3, r2
 80065e2:	4619      	mov	r1, r3
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f7ff fde7 	bl	80061b8 <move_window>
 80065ea:	4603      	mov	r3, r0
 80065ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80065ee:	7ffb      	ldrb	r3, [r7, #31]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d12a      	bne.n	800664a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006608:	4413      	add	r3, r2
 800660a:	4618      	mov	r0, r3
 800660c:	f7ff fb3c 	bl	8005c88 <ld_dword>
 8006610:	4603      	mov	r3, r0
 8006612:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006616:	4323      	orrs	r3, r4
 8006618:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006628:	4413      	add	r3, r2
 800662a:	6879      	ldr	r1, [r7, #4]
 800662c:	4618      	mov	r0, r3
 800662e:	f7ff fb69 	bl	8005d04 <st_dword>
			fs->wflag = 1;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2201      	movs	r2, #1
 8006636:	70da      	strb	r2, [r3, #3]
			break;
 8006638:	e008      	b.n	800664c <put_fat+0x1ce>
		}
	}
 800663a:	bf00      	nop
 800663c:	e006      	b.n	800664c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800663e:	bf00      	nop
 8006640:	e004      	b.n	800664c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006642:	bf00      	nop
 8006644:	e002      	b.n	800664c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006646:	bf00      	nop
 8006648:	e000      	b.n	800664c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800664a:	bf00      	nop
	return res;
 800664c:	7ffb      	ldrb	r3, [r7, #31]
}
 800664e:	4618      	mov	r0, r3
 8006650:	3724      	adds	r7, #36	; 0x24
 8006652:	46bd      	mov	sp, r7
 8006654:	bd90      	pop	{r4, r7, pc}

08006656 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b088      	sub	sp, #32
 800665a:	af00      	add	r7, sp, #0
 800665c:	60f8      	str	r0, [r7, #12]
 800665e:	60b9      	str	r1, [r7, #8]
 8006660:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006662:	2300      	movs	r3, #0
 8006664:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d904      	bls.n	800667c <remove_chain+0x26>
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	429a      	cmp	r2, r3
 800667a:	d301      	bcc.n	8006680 <remove_chain+0x2a>
 800667c:	2302      	movs	r3, #2
 800667e:	e04b      	b.n	8006718 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00c      	beq.n	80066a0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006686:	f04f 32ff 	mov.w	r2, #4294967295
 800668a:	6879      	ldr	r1, [r7, #4]
 800668c:	69b8      	ldr	r0, [r7, #24]
 800668e:	f7ff fef6 	bl	800647e <put_fat>
 8006692:	4603      	mov	r3, r0
 8006694:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006696:	7ffb      	ldrb	r3, [r7, #31]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d001      	beq.n	80066a0 <remove_chain+0x4a>
 800669c:	7ffb      	ldrb	r3, [r7, #31]
 800669e:	e03b      	b.n	8006718 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80066a0:	68b9      	ldr	r1, [r7, #8]
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f7ff fe43 	bl	800632e <get_fat>
 80066a8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d031      	beq.n	8006714 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d101      	bne.n	80066ba <remove_chain+0x64>
 80066b6:	2302      	movs	r3, #2
 80066b8:	e02e      	b.n	8006718 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c0:	d101      	bne.n	80066c6 <remove_chain+0x70>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e028      	b.n	8006718 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80066c6:	2200      	movs	r2, #0
 80066c8:	68b9      	ldr	r1, [r7, #8]
 80066ca:	69b8      	ldr	r0, [r7, #24]
 80066cc:	f7ff fed7 	bl	800647e <put_fat>
 80066d0:	4603      	mov	r3, r0
 80066d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80066d4:	7ffb      	ldrb	r3, [r7, #31]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <remove_chain+0x88>
 80066da:	7ffb      	ldrb	r3, [r7, #31]
 80066dc:	e01c      	b.n	8006718 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	691a      	ldr	r2, [r3, #16]
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	3b02      	subs	r3, #2
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d20b      	bcs.n	8006704 <remove_chain+0xae>
			fs->free_clst++;
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	791b      	ldrb	r3, [r3, #4]
 80066fa:	f043 0301 	orr.w	r3, r3, #1
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	429a      	cmp	r2, r3
 8006710:	d3c6      	bcc.n	80066a0 <remove_chain+0x4a>
 8006712:	e000      	b.n	8006716 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006714:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3720      	adds	r7, #32
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b088      	sub	sp, #32
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10d      	bne.n	8006752 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d004      	beq.n	800674c <create_chain+0x2c>
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	69ba      	ldr	r2, [r7, #24]
 8006748:	429a      	cmp	r2, r3
 800674a:	d31b      	bcc.n	8006784 <create_chain+0x64>
 800674c:	2301      	movs	r3, #1
 800674e:	61bb      	str	r3, [r7, #24]
 8006750:	e018      	b.n	8006784 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006752:	6839      	ldr	r1, [r7, #0]
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7ff fdea 	bl	800632e <get_fat>
 800675a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d801      	bhi.n	8006766 <create_chain+0x46>
 8006762:	2301      	movs	r3, #1
 8006764:	e070      	b.n	8006848 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676c:	d101      	bne.n	8006772 <create_chain+0x52>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	e06a      	b.n	8006848 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	429a      	cmp	r2, r3
 800677a:	d201      	bcs.n	8006780 <create_chain+0x60>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	e063      	b.n	8006848 <create_chain+0x128>
		scl = clst;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	3301      	adds	r3, #1
 800678c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	69fa      	ldr	r2, [r7, #28]
 8006794:	429a      	cmp	r2, r3
 8006796:	d307      	bcc.n	80067a8 <create_chain+0x88>
				ncl = 2;
 8006798:	2302      	movs	r3, #2
 800679a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800679c:	69fa      	ldr	r2, [r7, #28]
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d901      	bls.n	80067a8 <create_chain+0x88>
 80067a4:	2300      	movs	r3, #0
 80067a6:	e04f      	b.n	8006848 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80067a8:	69f9      	ldr	r1, [r7, #28]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7ff fdbf 	bl	800632e <get_fat>
 80067b0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00e      	beq.n	80067d6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d003      	beq.n	80067c6 <create_chain+0xa6>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c4:	d101      	bne.n	80067ca <create_chain+0xaa>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	e03e      	b.n	8006848 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80067ca:	69fa      	ldr	r2, [r7, #28]
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d1da      	bne.n	8006788 <create_chain+0x68>
 80067d2:	2300      	movs	r3, #0
 80067d4:	e038      	b.n	8006848 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80067d6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80067d8:	f04f 32ff 	mov.w	r2, #4294967295
 80067dc:	69f9      	ldr	r1, [r7, #28]
 80067de:	6938      	ldr	r0, [r7, #16]
 80067e0:	f7ff fe4d 	bl	800647e <put_fat>
 80067e4:	4603      	mov	r3, r0
 80067e6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d109      	bne.n	8006802 <create_chain+0xe2>
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d006      	beq.n	8006802 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80067f4:	69fa      	ldr	r2, [r7, #28]
 80067f6:	6839      	ldr	r1, [r7, #0]
 80067f8:	6938      	ldr	r0, [r7, #16]
 80067fa:	f7ff fe40 	bl	800647e <put_fat>
 80067fe:	4603      	mov	r3, r0
 8006800:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006802:	7dfb      	ldrb	r3, [r7, #23]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d116      	bne.n	8006836 <create_chain+0x116>
		fs->last_clst = ncl;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	69fa      	ldr	r2, [r7, #28]
 800680c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	691a      	ldr	r2, [r3, #16]
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	3b02      	subs	r3, #2
 8006818:	429a      	cmp	r2, r3
 800681a:	d804      	bhi.n	8006826 <create_chain+0x106>
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	1e5a      	subs	r2, r3, #1
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	791b      	ldrb	r3, [r3, #4]
 800682a:	f043 0301 	orr.w	r3, r3, #1
 800682e:	b2da      	uxtb	r2, r3
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	711a      	strb	r2, [r3, #4]
 8006834:	e007      	b.n	8006846 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006836:	7dfb      	ldrb	r3, [r7, #23]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d102      	bne.n	8006842 <create_chain+0x122>
 800683c:	f04f 33ff 	mov.w	r3, #4294967295
 8006840:	e000      	b.n	8006844 <create_chain+0x124>
 8006842:	2301      	movs	r3, #1
 8006844:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006846:	69fb      	ldr	r3, [r7, #28]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3720      	adds	r7, #32
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006864:	3304      	adds	r3, #4
 8006866:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	0a5b      	lsrs	r3, r3, #9
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	8952      	ldrh	r2, [r2, #10]
 8006870:	fbb3 f3f2 	udiv	r3, r3, r2
 8006874:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	1d1a      	adds	r2, r3, #4
 800687a:	613a      	str	r2, [r7, #16]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <clmt_clust+0x3a>
 8006886:	2300      	movs	r3, #0
 8006888:	e010      	b.n	80068ac <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	429a      	cmp	r2, r3
 8006890:	d307      	bcc.n	80068a2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	617b      	str	r3, [r7, #20]
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	3304      	adds	r3, #4
 800689e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80068a0:	e7e9      	b.n	8006876 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80068a2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	4413      	add	r3, r2
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	371c      	adds	r7, #28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068ce:	d204      	bcs.n	80068da <dir_sdi+0x22>
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	f003 031f 	and.w	r3, r3, #31
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <dir_sdi+0x26>
		return FR_INT_ERR;
 80068da:	2302      	movs	r3, #2
 80068dc:	e063      	b.n	80069a6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	683a      	ldr	r2, [r7, #0]
 80068e2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d106      	bne.n	80068fe <dir_sdi+0x46>
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d902      	bls.n	80068fe <dir_sdi+0x46>
		clst = fs->dirbase;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10c      	bne.n	800691e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	095b      	lsrs	r3, r3, #5
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	8912      	ldrh	r2, [r2, #8]
 800690c:	4293      	cmp	r3, r2
 800690e:	d301      	bcc.n	8006914 <dir_sdi+0x5c>
 8006910:	2302      	movs	r3, #2
 8006912:	e048      	b.n	80069a6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	61da      	str	r2, [r3, #28]
 800691c:	e029      	b.n	8006972 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	895b      	ldrh	r3, [r3, #10]
 8006922:	025b      	lsls	r3, r3, #9
 8006924:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006926:	e019      	b.n	800695c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6979      	ldr	r1, [r7, #20]
 800692c:	4618      	mov	r0, r3
 800692e:	f7ff fcfe 	bl	800632e <get_fat>
 8006932:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693a:	d101      	bne.n	8006940 <dir_sdi+0x88>
 800693c:	2301      	movs	r3, #1
 800693e:	e032      	b.n	80069a6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d904      	bls.n	8006950 <dir_sdi+0x98>
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	429a      	cmp	r2, r3
 800694e:	d301      	bcc.n	8006954 <dir_sdi+0x9c>
 8006950:	2302      	movs	r3, #2
 8006952:	e028      	b.n	80069a6 <dir_sdi+0xee>
			ofs -= csz;
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	429a      	cmp	r2, r3
 8006962:	d2e1      	bcs.n	8006928 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006964:	6979      	ldr	r1, [r7, #20]
 8006966:	6938      	ldr	r0, [r7, #16]
 8006968:	f7ff fcc2 	bl	80062f0 <clust2sect>
 800696c:	4602      	mov	r2, r0
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d101      	bne.n	8006984 <dir_sdi+0xcc>
 8006980:	2302      	movs	r3, #2
 8006982:	e010      	b.n	80069a6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	69da      	ldr	r2, [r3, #28]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	0a5b      	lsrs	r3, r3, #9
 800698c:	441a      	add	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800699e:	441a      	add	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b086      	sub	sp, #24
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	3320      	adds	r3, #32
 80069c4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <dir_next+0x28>
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069d4:	d301      	bcc.n	80069da <dir_next+0x2c>
 80069d6:	2304      	movs	r3, #4
 80069d8:	e0aa      	b.n	8006b30 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f040 8098 	bne.w	8006b16 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	1c5a      	adds	r2, r3, #1
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10b      	bne.n	8006a10 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	095b      	lsrs	r3, r3, #5
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	8912      	ldrh	r2, [r2, #8]
 8006a00:	4293      	cmp	r3, r2
 8006a02:	f0c0 8088 	bcc.w	8006b16 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	61da      	str	r2, [r3, #28]
 8006a0c:	2304      	movs	r3, #4
 8006a0e:	e08f      	b.n	8006b30 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	0a5b      	lsrs	r3, r3, #9
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	8952      	ldrh	r2, [r2, #10]
 8006a18:	3a01      	subs	r2, #1
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d17a      	bne.n	8006b16 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	4619      	mov	r1, r3
 8006a28:	4610      	mov	r0, r2
 8006a2a:	f7ff fc80 	bl	800632e <get_fat>
 8006a2e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d801      	bhi.n	8006a3a <dir_next+0x8c>
 8006a36:	2302      	movs	r3, #2
 8006a38:	e07a      	b.n	8006b30 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a40:	d101      	bne.n	8006a46 <dir_next+0x98>
 8006a42:	2301      	movs	r3, #1
 8006a44:	e074      	b.n	8006b30 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d358      	bcc.n	8006b02 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d104      	bne.n	8006a60 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	61da      	str	r2, [r3, #28]
 8006a5c:	2304      	movs	r3, #4
 8006a5e:	e067      	b.n	8006b30 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	4619      	mov	r1, r3
 8006a68:	4610      	mov	r0, r2
 8006a6a:	f7ff fe59 	bl	8006720 <create_chain>
 8006a6e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <dir_next+0xcc>
 8006a76:	2307      	movs	r3, #7
 8006a78:	e05a      	b.n	8006b30 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d101      	bne.n	8006a84 <dir_next+0xd6>
 8006a80:	2302      	movs	r3, #2
 8006a82:	e055      	b.n	8006b30 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8a:	d101      	bne.n	8006a90 <dir_next+0xe2>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e04f      	b.n	8006b30 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f7ff fb4d 	bl	8006130 <sync_window>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <dir_next+0xf2>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e047      	b.n	8006b30 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	3330      	adds	r3, #48	; 0x30
 8006aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7ff f977 	bl	8005d9e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	613b      	str	r3, [r7, #16]
 8006ab4:	6979      	ldr	r1, [r7, #20]
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f7ff fc1a 	bl	80062f0 <clust2sect>
 8006abc:	4602      	mov	r2, r0
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	62da      	str	r2, [r3, #44]	; 0x2c
 8006ac2:	e012      	b.n	8006aea <dir_next+0x13c>
						fs->wflag = 1;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f7ff fb30 	bl	8006130 <sync_window>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <dir_next+0x12c>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e02a      	b.n	8006b30 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	3301      	adds	r3, #1
 8006ade:	613b      	str	r3, [r7, #16]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	62da      	str	r2, [r3, #44]	; 0x2c
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	895b      	ldrh	r3, [r3, #10]
 8006aee:	461a      	mov	r2, r3
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d3e6      	bcc.n	8006ac4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	1ad2      	subs	r2, r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006b08:	6979      	ldr	r1, [r7, #20]
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f7ff fbf0 	bl	80062f0 <clust2sect>
 8006b10:	4602      	mov	r2, r0
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b28:	441a      	add	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3718      	adds	r7, #24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006b48:	2100      	movs	r1, #0
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7ff feb4 	bl	80068b8 <dir_sdi>
 8006b50:	4603      	mov	r3, r0
 8006b52:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006b54:	7dfb      	ldrb	r3, [r7, #23]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d12b      	bne.n	8006bb2 <dir_alloc+0x7a>
		n = 0;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	4619      	mov	r1, r3
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f7ff fb27 	bl	80061b8 <move_window>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006b6e:	7dfb      	ldrb	r3, [r7, #23]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d11d      	bne.n	8006bb0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	2be5      	cmp	r3, #229	; 0xe5
 8006b7c:	d004      	beq.n	8006b88 <dir_alloc+0x50>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d107      	bne.n	8006b98 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	613b      	str	r3, [r7, #16]
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d102      	bne.n	8006b9c <dir_alloc+0x64>
 8006b96:	e00c      	b.n	8006bb2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006b98:	2300      	movs	r3, #0
 8006b9a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006b9c:	2101      	movs	r1, #1
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7ff ff05 	bl	80069ae <dir_next>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006ba8:	7dfb      	ldrb	r3, [r7, #23]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0d7      	beq.n	8006b5e <dir_alloc+0x26>
 8006bae:	e000      	b.n	8006bb2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006bb0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006bb2:	7dfb      	ldrb	r3, [r7, #23]
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	d101      	bne.n	8006bbc <dir_alloc+0x84>
 8006bb8:	2307      	movs	r3, #7
 8006bba:	75fb      	strb	r3, [r7, #23]
	return res;
 8006bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3718      	adds	r7, #24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	331a      	adds	r3, #26
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7ff f83f 	bl	8005c58 <ld_word>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	d109      	bne.n	8006bfa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	3314      	adds	r3, #20
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7ff f834 	bl	8005c58 <ld_word>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	041b      	lsls	r3, r3, #16
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	331a      	adds	r3, #26
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	b292      	uxth	r2, r2
 8006c18:	4611      	mov	r1, r2
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7ff f857 	bl	8005cce <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	2b03      	cmp	r3, #3
 8006c26:	d109      	bne.n	8006c3c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f103 0214 	add.w	r2, r3, #20
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	0c1b      	lsrs	r3, r3, #16
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	4619      	mov	r1, r3
 8006c36:	4610      	mov	r0, r2
 8006c38:	f7ff f849 	bl	8005cce <st_word>
	}
}
 8006c3c:	bf00      	nop
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006c52:	2100      	movs	r1, #0
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7ff fe2f 	bl	80068b8 <dir_sdi>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006c5e:	7dfb      	ldrb	r3, [r7, #23]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d001      	beq.n	8006c68 <dir_find+0x24>
 8006c64:	7dfb      	ldrb	r3, [r7, #23]
 8006c66:	e03e      	b.n	8006ce6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	69db      	ldr	r3, [r3, #28]
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	6938      	ldr	r0, [r7, #16]
 8006c70:	f7ff faa2 	bl	80061b8 <move_window>
 8006c74:	4603      	mov	r3, r0
 8006c76:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006c78:	7dfb      	ldrb	r3, [r7, #23]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d12f      	bne.n	8006cde <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d102      	bne.n	8006c92 <dir_find+0x4e>
 8006c8c:	2304      	movs	r3, #4
 8006c8e:	75fb      	strb	r3, [r7, #23]
 8006c90:	e028      	b.n	8006ce4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	330b      	adds	r3, #11
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	330b      	adds	r3, #11
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	f003 0308 	and.w	r3, r3, #8
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10a      	bne.n	8006cca <dir_find+0x86>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a18      	ldr	r0, [r3, #32]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	3324      	adds	r3, #36	; 0x24
 8006cbc:	220b      	movs	r2, #11
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	f7ff f888 	bl	8005dd4 <mem_cmp>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00b      	beq.n	8006ce2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006cca:	2100      	movs	r1, #0
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f7ff fe6e 	bl	80069ae <dir_next>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006cd6:	7dfb      	ldrb	r3, [r7, #23]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d0c5      	beq.n	8006c68 <dir_find+0x24>
 8006cdc:	e002      	b.n	8006ce4 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006cde:	bf00      	nop
 8006ce0:	e000      	b.n	8006ce4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006ce2:	bf00      	nop

	return res;
 8006ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7ff ff1a 	bl	8006b38 <dir_alloc>
 8006d04:	4603      	mov	r3, r0
 8006d06:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d11c      	bne.n	8006d48 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	4619      	mov	r1, r3
 8006d14:	68b8      	ldr	r0, [r7, #8]
 8006d16:	f7ff fa4f 	bl	80061b8 <move_window>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d111      	bne.n	8006d48 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7ff f836 	bl	8005d9e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a18      	ldr	r0, [r3, #32]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	3324      	adds	r3, #36	; 0x24
 8006d3a:	220b      	movs	r2, #11
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	f7ff f80d 	bl	8005d5c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2201      	movs	r2, #1
 8006d46:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
	...

08006d54 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b088      	sub	sp, #32
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	60fb      	str	r3, [r7, #12]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	3324      	adds	r3, #36	; 0x24
 8006d68:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006d6a:	220b      	movs	r2, #11
 8006d6c:	2120      	movs	r1, #32
 8006d6e:	68b8      	ldr	r0, [r7, #8]
 8006d70:	f7ff f815 	bl	8005d9e <mem_set>
	si = i = 0; ni = 8;
 8006d74:	2300      	movs	r3, #0
 8006d76:	613b      	str	r3, [r7, #16]
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	61fb      	str	r3, [r7, #28]
 8006d7c:	2308      	movs	r3, #8
 8006d7e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	61fa      	str	r2, [r7, #28]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	4413      	add	r3, r2
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006d8e:	7efb      	ldrb	r3, [r7, #27]
 8006d90:	2b20      	cmp	r3, #32
 8006d92:	d94e      	bls.n	8006e32 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006d94:	7efb      	ldrb	r3, [r7, #27]
 8006d96:	2b2f      	cmp	r3, #47	; 0x2f
 8006d98:	d006      	beq.n	8006da8 <create_name+0x54>
 8006d9a:	7efb      	ldrb	r3, [r7, #27]
 8006d9c:	2b5c      	cmp	r3, #92	; 0x5c
 8006d9e:	d110      	bne.n	8006dc2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006da0:	e002      	b.n	8006da8 <create_name+0x54>
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	3301      	adds	r3, #1
 8006da6:	61fb      	str	r3, [r7, #28]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	4413      	add	r3, r2
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	2b2f      	cmp	r3, #47	; 0x2f
 8006db2:	d0f6      	beq.n	8006da2 <create_name+0x4e>
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	4413      	add	r3, r2
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	2b5c      	cmp	r3, #92	; 0x5c
 8006dbe:	d0f0      	beq.n	8006da2 <create_name+0x4e>
			break;
 8006dc0:	e038      	b.n	8006e34 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006dc2:	7efb      	ldrb	r3, [r7, #27]
 8006dc4:	2b2e      	cmp	r3, #46	; 0x2e
 8006dc6:	d003      	beq.n	8006dd0 <create_name+0x7c>
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d30c      	bcc.n	8006dea <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	2b0b      	cmp	r3, #11
 8006dd4:	d002      	beq.n	8006ddc <create_name+0x88>
 8006dd6:	7efb      	ldrb	r3, [r7, #27]
 8006dd8:	2b2e      	cmp	r3, #46	; 0x2e
 8006dda:	d001      	beq.n	8006de0 <create_name+0x8c>
 8006ddc:	2306      	movs	r3, #6
 8006dde:	e044      	b.n	8006e6a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006de0:	2308      	movs	r3, #8
 8006de2:	613b      	str	r3, [r7, #16]
 8006de4:	230b      	movs	r3, #11
 8006de6:	617b      	str	r3, [r7, #20]
			continue;
 8006de8:	e022      	b.n	8006e30 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006dea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	da04      	bge.n	8006dfc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006df2:	7efb      	ldrb	r3, [r7, #27]
 8006df4:	3b80      	subs	r3, #128	; 0x80
 8006df6:	4a1f      	ldr	r2, [pc, #124]	; (8006e74 <create_name+0x120>)
 8006df8:	5cd3      	ldrb	r3, [r2, r3]
 8006dfa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006dfc:	7efb      	ldrb	r3, [r7, #27]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	481d      	ldr	r0, [pc, #116]	; (8006e78 <create_name+0x124>)
 8006e02:	f7ff f80e 	bl	8005e22 <chk_chr>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <create_name+0xbc>
 8006e0c:	2306      	movs	r3, #6
 8006e0e:	e02c      	b.n	8006e6a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006e10:	7efb      	ldrb	r3, [r7, #27]
 8006e12:	2b60      	cmp	r3, #96	; 0x60
 8006e14:	d905      	bls.n	8006e22 <create_name+0xce>
 8006e16:	7efb      	ldrb	r3, [r7, #27]
 8006e18:	2b7a      	cmp	r3, #122	; 0x7a
 8006e1a:	d802      	bhi.n	8006e22 <create_name+0xce>
 8006e1c:	7efb      	ldrb	r3, [r7, #27]
 8006e1e:	3b20      	subs	r3, #32
 8006e20:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	1c5a      	adds	r2, r3, #1
 8006e26:	613a      	str	r2, [r7, #16]
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	7efa      	ldrb	r2, [r7, #27]
 8006e2e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006e30:	e7a6      	b.n	8006d80 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006e32:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	441a      	add	r2, r3
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <create_name+0xf4>
 8006e44:	2306      	movs	r3, #6
 8006e46:	e010      	b.n	8006e6a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	2be5      	cmp	r3, #229	; 0xe5
 8006e4e:	d102      	bne.n	8006e56 <create_name+0x102>
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	2205      	movs	r2, #5
 8006e54:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006e56:	7efb      	ldrb	r3, [r7, #27]
 8006e58:	2b20      	cmp	r3, #32
 8006e5a:	d801      	bhi.n	8006e60 <create_name+0x10c>
 8006e5c:	2204      	movs	r2, #4
 8006e5e:	e000      	b.n	8006e62 <create_name+0x10e>
 8006e60:	2200      	movs	r2, #0
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	330b      	adds	r3, #11
 8006e66:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006e68:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3720      	adds	r7, #32
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	08008af8 	.word	0x08008af8
 8006e78:	08008a94 	.word	0x08008a94

08006e7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006e90:	e002      	b.n	8006e98 <follow_path+0x1c>
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	3301      	adds	r3, #1
 8006e96:	603b      	str	r3, [r7, #0]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	2b2f      	cmp	r3, #47	; 0x2f
 8006e9e:	d0f8      	beq.n	8006e92 <follow_path+0x16>
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	2b5c      	cmp	r3, #92	; 0x5c
 8006ea6:	d0f4      	beq.n	8006e92 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	2b1f      	cmp	r3, #31
 8006eb4:	d80a      	bhi.n	8006ecc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2280      	movs	r2, #128	; 0x80
 8006eba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f7ff fcf9 	bl	80068b8 <dir_sdi>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	75fb      	strb	r3, [r7, #23]
 8006eca:	e043      	b.n	8006f54 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006ecc:	463b      	mov	r3, r7
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f7ff ff3f 	bl	8006d54 <create_name>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d134      	bne.n	8006f4a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7ff feaf 	bl	8006c44 <dir_find>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006ef0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006ef2:	7dfb      	ldrb	r3, [r7, #23]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00a      	beq.n	8006f0e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	d127      	bne.n	8006f4e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006efe:	7afb      	ldrb	r3, [r7, #11]
 8006f00:	f003 0304 	and.w	r3, r3, #4
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d122      	bne.n	8006f4e <follow_path+0xd2>
 8006f08:	2305      	movs	r3, #5
 8006f0a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006f0c:	e01f      	b.n	8006f4e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006f0e:	7afb      	ldrb	r3, [r7, #11]
 8006f10:	f003 0304 	and.w	r3, r3, #4
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d11c      	bne.n	8006f52 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	799b      	ldrb	r3, [r3, #6]
 8006f1c:	f003 0310 	and.w	r3, r3, #16
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d102      	bne.n	8006f2a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006f24:	2305      	movs	r3, #5
 8006f26:	75fb      	strb	r3, [r7, #23]
 8006f28:	e014      	b.n	8006f54 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	695b      	ldr	r3, [r3, #20]
 8006f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f38:	4413      	add	r3, r2
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f7ff fe42 	bl	8006bc6 <ld_clust>
 8006f42:	4602      	mov	r2, r0
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006f48:	e7c0      	b.n	8006ecc <follow_path+0x50>
			if (res != FR_OK) break;
 8006f4a:	bf00      	nop
 8006f4c:	e002      	b.n	8006f54 <follow_path+0xd8>
				break;
 8006f4e:	bf00      	nop
 8006f50:	e000      	b.n	8006f54 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006f52:	bf00      	nop
			}
		}
	}

	return res;
 8006f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3718      	adds	r7, #24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b087      	sub	sp, #28
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006f66:	f04f 33ff 	mov.w	r3, #4294967295
 8006f6a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d031      	beq.n	8006fd8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	617b      	str	r3, [r7, #20]
 8006f7a:	e002      	b.n	8006f82 <get_ldnumber+0x24>
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	617b      	str	r3, [r7, #20]
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	2b20      	cmp	r3, #32
 8006f88:	d903      	bls.n	8006f92 <get_ldnumber+0x34>
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	2b3a      	cmp	r3, #58	; 0x3a
 8006f90:	d1f4      	bne.n	8006f7c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2b3a      	cmp	r3, #58	; 0x3a
 8006f98:	d11c      	bne.n	8006fd4 <get_ldnumber+0x76>
			tp = *path;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	60fa      	str	r2, [r7, #12]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	3b30      	subs	r3, #48	; 0x30
 8006faa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2b09      	cmp	r3, #9
 8006fb0:	d80e      	bhi.n	8006fd0 <get_ldnumber+0x72>
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d10a      	bne.n	8006fd0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d107      	bne.n	8006fd0 <get_ldnumber+0x72>
					vol = (int)i;
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	e002      	b.n	8006fda <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006fd8:	693b      	ldr	r3, [r7, #16]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	371c      	adds	r7, #28
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
	...

08006fe8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	70da      	strb	r2, [r3, #3]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8006ffe:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7ff f8d8 	bl	80061b8 <move_window>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <check_fs+0x2a>
 800700e:	2304      	movs	r3, #4
 8007010:	e038      	b.n	8007084 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	3330      	adds	r3, #48	; 0x30
 8007016:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe fe1c 	bl	8005c58 <ld_word>
 8007020:	4603      	mov	r3, r0
 8007022:	461a      	mov	r2, r3
 8007024:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007028:	429a      	cmp	r2, r3
 800702a:	d001      	beq.n	8007030 <check_fs+0x48>
 800702c:	2303      	movs	r3, #3
 800702e:	e029      	b.n	8007084 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007036:	2be9      	cmp	r3, #233	; 0xe9
 8007038:	d009      	beq.n	800704e <check_fs+0x66>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007040:	2beb      	cmp	r3, #235	; 0xeb
 8007042:	d11e      	bne.n	8007082 <check_fs+0x9a>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800704a:	2b90      	cmp	r3, #144	; 0x90
 800704c:	d119      	bne.n	8007082 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	3330      	adds	r3, #48	; 0x30
 8007052:	3336      	adds	r3, #54	; 0x36
 8007054:	4618      	mov	r0, r3
 8007056:	f7fe fe17 	bl	8005c88 <ld_dword>
 800705a:	4603      	mov	r3, r0
 800705c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007060:	4a0a      	ldr	r2, [pc, #40]	; (800708c <check_fs+0xa4>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d101      	bne.n	800706a <check_fs+0x82>
 8007066:	2300      	movs	r3, #0
 8007068:	e00c      	b.n	8007084 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	3330      	adds	r3, #48	; 0x30
 800706e:	3352      	adds	r3, #82	; 0x52
 8007070:	4618      	mov	r0, r3
 8007072:	f7fe fe09 	bl	8005c88 <ld_dword>
 8007076:	4603      	mov	r3, r0
 8007078:	4a05      	ldr	r2, [pc, #20]	; (8007090 <check_fs+0xa8>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d101      	bne.n	8007082 <check_fs+0x9a>
 800707e:	2300      	movs	r3, #0
 8007080:	e000      	b.n	8007084 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007082:	2302      	movs	r3, #2
}
 8007084:	4618      	mov	r0, r3
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	00544146 	.word	0x00544146
 8007090:	33544146 	.word	0x33544146

08007094 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b096      	sub	sp, #88	; 0x58
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	4613      	mov	r3, r2
 80070a0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2200      	movs	r2, #0
 80070a6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f7ff ff58 	bl	8006f5e <get_ldnumber>
 80070ae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80070b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	da01      	bge.n	80070ba <find_volume+0x26>
 80070b6:	230b      	movs	r3, #11
 80070b8:	e22d      	b.n	8007516 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80070ba:	4aa1      	ldr	r2, [pc, #644]	; (8007340 <find_volume+0x2ac>)
 80070bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070c2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80070c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <find_volume+0x3a>
 80070ca:	230c      	movs	r3, #12
 80070cc:	e223      	b.n	8007516 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070d2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80070d4:	79fb      	ldrb	r3, [r7, #7]
 80070d6:	f023 0301 	bic.w	r3, r3, #1
 80070da:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80070dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d01a      	beq.n	800711a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80070e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e6:	785b      	ldrb	r3, [r3, #1]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fe fd17 	bl	8005b1c <disk_status>
 80070ee:	4603      	mov	r3, r0
 80070f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80070f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80070f8:	f003 0301 	and.w	r3, r3, #1
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10c      	bne.n	800711a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d007      	beq.n	8007116 <find_volume+0x82>
 8007106:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800710a:	f003 0304 	and.w	r3, r3, #4
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007112:	230a      	movs	r3, #10
 8007114:	e1ff      	b.n	8007516 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007116:	2300      	movs	r3, #0
 8007118:	e1fd      	b.n	8007516 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800711a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711c:	2200      	movs	r2, #0
 800711e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007122:	b2da      	uxtb	r2, r3
 8007124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007126:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712a:	785b      	ldrb	r3, [r3, #1]
 800712c:	4618      	mov	r0, r3
 800712e:	f7fe fd0f 	bl	8005b50 <disk_initialize>
 8007132:	4603      	mov	r3, r0
 8007134:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007138:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800713c:	f003 0301 	and.w	r3, r3, #1
 8007140:	2b00      	cmp	r3, #0
 8007142:	d001      	beq.n	8007148 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007144:	2303      	movs	r3, #3
 8007146:	e1e6      	b.n	8007516 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007148:	79fb      	ldrb	r3, [r7, #7]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d007      	beq.n	800715e <find_volume+0xca>
 800714e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007152:	f003 0304 	and.w	r3, r3, #4
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800715a:	230a      	movs	r3, #10
 800715c:	e1db      	b.n	8007516 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800715e:	2300      	movs	r3, #0
 8007160:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007162:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007164:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007166:	f7ff ff3f 	bl	8006fe8 <check_fs>
 800716a:	4603      	mov	r3, r0
 800716c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007170:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007174:	2b02      	cmp	r3, #2
 8007176:	d149      	bne.n	800720c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007178:	2300      	movs	r3, #0
 800717a:	643b      	str	r3, [r7, #64]	; 0x40
 800717c:	e01e      	b.n	80071bc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800717e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007180:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007186:	011b      	lsls	r3, r3, #4
 8007188:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800718c:	4413      	add	r3, r2
 800718e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	3304      	adds	r3, #4
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d006      	beq.n	80071a8 <find_volume+0x114>
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	3308      	adds	r3, #8
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fe fd72 	bl	8005c88 <ld_dword>
 80071a4:	4602      	mov	r2, r0
 80071a6:	e000      	b.n	80071aa <find_volume+0x116>
 80071a8:	2200      	movs	r2, #0
 80071aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	3358      	adds	r3, #88	; 0x58
 80071b0:	443b      	add	r3, r7
 80071b2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80071b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071b8:	3301      	adds	r3, #1
 80071ba:	643b      	str	r3, [r7, #64]	; 0x40
 80071bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071be:	2b03      	cmp	r3, #3
 80071c0:	d9dd      	bls.n	800717e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80071c2:	2300      	movs	r3, #0
 80071c4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80071c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d002      	beq.n	80071d2 <find_volume+0x13e>
 80071cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071ce:	3b01      	subs	r3, #1
 80071d0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80071d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	3358      	adds	r3, #88	; 0x58
 80071d8:	443b      	add	r3, r7
 80071da:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80071de:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80071e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d005      	beq.n	80071f2 <find_volume+0x15e>
 80071e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80071e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80071ea:	f7ff fefd 	bl	8006fe8 <check_fs>
 80071ee:	4603      	mov	r3, r0
 80071f0:	e000      	b.n	80071f4 <find_volume+0x160>
 80071f2:	2303      	movs	r3, #3
 80071f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80071f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d905      	bls.n	800720c <find_volume+0x178>
 8007200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007202:	3301      	adds	r3, #1
 8007204:	643b      	str	r3, [r7, #64]	; 0x40
 8007206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007208:	2b03      	cmp	r3, #3
 800720a:	d9e2      	bls.n	80071d2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800720c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007210:	2b04      	cmp	r3, #4
 8007212:	d101      	bne.n	8007218 <find_volume+0x184>
 8007214:	2301      	movs	r3, #1
 8007216:	e17e      	b.n	8007516 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007218:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800721c:	2b01      	cmp	r3, #1
 800721e:	d901      	bls.n	8007224 <find_volume+0x190>
 8007220:	230d      	movs	r3, #13
 8007222:	e178      	b.n	8007516 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007226:	3330      	adds	r3, #48	; 0x30
 8007228:	330b      	adds	r3, #11
 800722a:	4618      	mov	r0, r3
 800722c:	f7fe fd14 	bl	8005c58 <ld_word>
 8007230:	4603      	mov	r3, r0
 8007232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007236:	d001      	beq.n	800723c <find_volume+0x1a8>
 8007238:	230d      	movs	r3, #13
 800723a:	e16c      	b.n	8007516 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800723c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723e:	3330      	adds	r3, #48	; 0x30
 8007240:	3316      	adds	r3, #22
 8007242:	4618      	mov	r0, r3
 8007244:	f7fe fd08 	bl	8005c58 <ld_word>
 8007248:	4603      	mov	r3, r0
 800724a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800724c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800724e:	2b00      	cmp	r3, #0
 8007250:	d106      	bne.n	8007260 <find_volume+0x1cc>
 8007252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007254:	3330      	adds	r3, #48	; 0x30
 8007256:	3324      	adds	r3, #36	; 0x24
 8007258:	4618      	mov	r0, r3
 800725a:	f7fe fd15 	bl	8005c88 <ld_dword>
 800725e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007262:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007264:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007268:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800726c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007272:	789b      	ldrb	r3, [r3, #2]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d005      	beq.n	8007284 <find_volume+0x1f0>
 8007278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727a:	789b      	ldrb	r3, [r3, #2]
 800727c:	2b02      	cmp	r3, #2
 800727e:	d001      	beq.n	8007284 <find_volume+0x1f0>
 8007280:	230d      	movs	r3, #13
 8007282:	e148      	b.n	8007516 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007286:	789b      	ldrb	r3, [r3, #2]
 8007288:	461a      	mov	r2, r3
 800728a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800728c:	fb02 f303 	mul.w	r3, r2, r3
 8007290:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007298:	b29a      	uxth	r2, r3
 800729a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800729e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a0:	895b      	ldrh	r3, [r3, #10]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d008      	beq.n	80072b8 <find_volume+0x224>
 80072a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a8:	895b      	ldrh	r3, [r3, #10]
 80072aa:	461a      	mov	r2, r3
 80072ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ae:	895b      	ldrh	r3, [r3, #10]
 80072b0:	3b01      	subs	r3, #1
 80072b2:	4013      	ands	r3, r2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d001      	beq.n	80072bc <find_volume+0x228>
 80072b8:	230d      	movs	r3, #13
 80072ba:	e12c      	b.n	8007516 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80072bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072be:	3330      	adds	r3, #48	; 0x30
 80072c0:	3311      	adds	r3, #17
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fe fcc8 	bl	8005c58 <ld_word>
 80072c8:	4603      	mov	r3, r0
 80072ca:	461a      	mov	r2, r3
 80072cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80072d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d2:	891b      	ldrh	r3, [r3, #8]
 80072d4:	f003 030f 	and.w	r3, r3, #15
 80072d8:	b29b      	uxth	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <find_volume+0x24e>
 80072de:	230d      	movs	r3, #13
 80072e0:	e119      	b.n	8007516 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80072e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e4:	3330      	adds	r3, #48	; 0x30
 80072e6:	3313      	adds	r3, #19
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fe fcb5 	bl	8005c58 <ld_word>
 80072ee:	4603      	mov	r3, r0
 80072f0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80072f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d106      	bne.n	8007306 <find_volume+0x272>
 80072f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fa:	3330      	adds	r3, #48	; 0x30
 80072fc:	3320      	adds	r3, #32
 80072fe:	4618      	mov	r0, r3
 8007300:	f7fe fcc2 	bl	8005c88 <ld_dword>
 8007304:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007308:	3330      	adds	r3, #48	; 0x30
 800730a:	330e      	adds	r3, #14
 800730c:	4618      	mov	r0, r3
 800730e:	f7fe fca3 	bl	8005c58 <ld_word>
 8007312:	4603      	mov	r3, r0
 8007314:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007316:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <find_volume+0x28c>
 800731c:	230d      	movs	r3, #13
 800731e:	e0fa      	b.n	8007516 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007320:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007324:	4413      	add	r3, r2
 8007326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007328:	8912      	ldrh	r2, [r2, #8]
 800732a:	0912      	lsrs	r2, r2, #4
 800732c:	b292      	uxth	r2, r2
 800732e:	4413      	add	r3, r2
 8007330:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007332:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007336:	429a      	cmp	r2, r3
 8007338:	d204      	bcs.n	8007344 <find_volume+0x2b0>
 800733a:	230d      	movs	r3, #13
 800733c:	e0eb      	b.n	8007516 <find_volume+0x482>
 800733e:	bf00      	nop
 8007340:	20000ef0 	.word	0x20000ef0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007344:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800734c:	8952      	ldrh	r2, [r2, #10]
 800734e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007352:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <find_volume+0x2ca>
 800735a:	230d      	movs	r3, #13
 800735c:	e0db      	b.n	8007516 <find_volume+0x482>
		fmt = FS_FAT32;
 800735e:	2303      	movs	r3, #3
 8007360:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800736a:	4293      	cmp	r3, r2
 800736c:	d802      	bhi.n	8007374 <find_volume+0x2e0>
 800736e:	2302      	movs	r3, #2
 8007370:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	f640 72f5 	movw	r2, #4085	; 0xff5
 800737a:	4293      	cmp	r3, r2
 800737c:	d802      	bhi.n	8007384 <find_volume+0x2f0>
 800737e:	2301      	movs	r3, #1
 8007380:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	1c9a      	adds	r2, r3, #2
 8007388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800738c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007390:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007392:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007396:	441a      	add	r2, r3
 8007398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800739c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800739e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a0:	441a      	add	r2, r3
 80073a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a4:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80073a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d11e      	bne.n	80073ec <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80073ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b0:	3330      	adds	r3, #48	; 0x30
 80073b2:	332a      	adds	r3, #42	; 0x2a
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7fe fc4f 	bl	8005c58 <ld_word>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d001      	beq.n	80073c4 <find_volume+0x330>
 80073c0:	230d      	movs	r3, #13
 80073c2:	e0a8      	b.n	8007516 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80073c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c6:	891b      	ldrh	r3, [r3, #8]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <find_volume+0x33c>
 80073cc:	230d      	movs	r3, #13
 80073ce:	e0a2      	b.n	8007516 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80073d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d2:	3330      	adds	r3, #48	; 0x30
 80073d4:	332c      	adds	r3, #44	; 0x2c
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7fe fc56 	bl	8005c88 <ld_dword>
 80073dc:	4602      	mov	r2, r0
 80073de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80073e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	647b      	str	r3, [r7, #68]	; 0x44
 80073ea:	e01f      	b.n	800742c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80073ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ee:	891b      	ldrh	r3, [r3, #8]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <find_volume+0x364>
 80073f4:	230d      	movs	r3, #13
 80073f6:	e08e      	b.n	8007516 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80073f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fa:	6a1a      	ldr	r2, [r3, #32]
 80073fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073fe:	441a      	add	r2, r3
 8007400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007402:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007404:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007408:	2b02      	cmp	r3, #2
 800740a:	d103      	bne.n	8007414 <find_volume+0x380>
 800740c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740e:	695b      	ldr	r3, [r3, #20]
 8007410:	005b      	lsls	r3, r3, #1
 8007412:	e00a      	b.n	800742a <find_volume+0x396>
 8007414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007416:	695a      	ldr	r2, [r3, #20]
 8007418:	4613      	mov	r3, r2
 800741a:	005b      	lsls	r3, r3, #1
 800741c:	4413      	add	r3, r2
 800741e:	085a      	lsrs	r2, r3, #1
 8007420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007422:	695b      	ldr	r3, [r3, #20]
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800742a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800742c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742e:	699a      	ldr	r2, [r3, #24]
 8007430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007432:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007436:	0a5b      	lsrs	r3, r3, #9
 8007438:	429a      	cmp	r2, r3
 800743a:	d201      	bcs.n	8007440 <find_volume+0x3ac>
 800743c:	230d      	movs	r3, #13
 800743e:	e06a      	b.n	8007516 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007442:	f04f 32ff 	mov.w	r2, #4294967295
 8007446:	611a      	str	r2, [r3, #16]
 8007448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744a:	691a      	ldr	r2, [r3, #16]
 800744c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007452:	2280      	movs	r2, #128	; 0x80
 8007454:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007456:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800745a:	2b03      	cmp	r3, #3
 800745c:	d149      	bne.n	80074f2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800745e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007460:	3330      	adds	r3, #48	; 0x30
 8007462:	3330      	adds	r3, #48	; 0x30
 8007464:	4618      	mov	r0, r3
 8007466:	f7fe fbf7 	bl	8005c58 <ld_word>
 800746a:	4603      	mov	r3, r0
 800746c:	2b01      	cmp	r3, #1
 800746e:	d140      	bne.n	80074f2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007472:	3301      	adds	r3, #1
 8007474:	4619      	mov	r1, r3
 8007476:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007478:	f7fe fe9e 	bl	80061b8 <move_window>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d137      	bne.n	80074f2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007484:	2200      	movs	r2, #0
 8007486:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748a:	3330      	adds	r3, #48	; 0x30
 800748c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007490:	4618      	mov	r0, r3
 8007492:	f7fe fbe1 	bl	8005c58 <ld_word>
 8007496:	4603      	mov	r3, r0
 8007498:	461a      	mov	r2, r3
 800749a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800749e:	429a      	cmp	r2, r3
 80074a0:	d127      	bne.n	80074f2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80074a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a4:	3330      	adds	r3, #48	; 0x30
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fe fbee 	bl	8005c88 <ld_dword>
 80074ac:	4603      	mov	r3, r0
 80074ae:	4a1c      	ldr	r2, [pc, #112]	; (8007520 <find_volume+0x48c>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d11e      	bne.n	80074f2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80074b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b6:	3330      	adds	r3, #48	; 0x30
 80074b8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80074bc:	4618      	mov	r0, r3
 80074be:	f7fe fbe3 	bl	8005c88 <ld_dword>
 80074c2:	4603      	mov	r3, r0
 80074c4:	4a17      	ldr	r2, [pc, #92]	; (8007524 <find_volume+0x490>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d113      	bne.n	80074f2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80074ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074cc:	3330      	adds	r3, #48	; 0x30
 80074ce:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fe fbd8 	bl	8005c88 <ld_dword>
 80074d8:	4602      	mov	r2, r0
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80074de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e0:	3330      	adds	r3, #48	; 0x30
 80074e2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7fe fbce 	bl	8005c88 <ld_dword>
 80074ec:	4602      	mov	r2, r0
 80074ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80074f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80074f8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80074fa:	4b0b      	ldr	r3, [pc, #44]	; (8007528 <find_volume+0x494>)
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	3301      	adds	r3, #1
 8007500:	b29a      	uxth	r2, r3
 8007502:	4b09      	ldr	r3, [pc, #36]	; (8007528 <find_volume+0x494>)
 8007504:	801a      	strh	r2, [r3, #0]
 8007506:	4b08      	ldr	r3, [pc, #32]	; (8007528 <find_volume+0x494>)
 8007508:	881a      	ldrh	r2, [r3, #0]
 800750a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800750e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007510:	f7fe fdea 	bl	80060e8 <clear_lock>
#endif
	return FR_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3758      	adds	r7, #88	; 0x58
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	41615252 	.word	0x41615252
 8007524:	61417272 	.word	0x61417272
 8007528:	20000ef4 	.word	0x20000ef4

0800752c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007536:	2309      	movs	r3, #9
 8007538:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d01c      	beq.n	800757a <validate+0x4e>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d018      	beq.n	800757a <validate+0x4e>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d013      	beq.n	800757a <validate+0x4e>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	889a      	ldrh	r2, [r3, #4]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	88db      	ldrh	r3, [r3, #6]
 800755c:	429a      	cmp	r2, r3
 800755e:	d10c      	bne.n	800757a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	785b      	ldrb	r3, [r3, #1]
 8007566:	4618      	mov	r0, r3
 8007568:	f7fe fad8 	bl	8005b1c <disk_status>
 800756c:	4603      	mov	r3, r0
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	2b00      	cmp	r3, #0
 8007574:	d101      	bne.n	800757a <validate+0x4e>
			res = FR_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800757a:	7bfb      	ldrb	r3, [r7, #15]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d102      	bne.n	8007586 <validate+0x5a>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	e000      	b.n	8007588 <validate+0x5c>
 8007586:	2300      	movs	r3, #0
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	6013      	str	r3, [r2, #0]
	return res;
 800758c:	7bfb      	ldrb	r3, [r7, #15]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b088      	sub	sp, #32
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	4613      	mov	r3, r2
 80075a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80075aa:	f107 0310 	add.w	r3, r7, #16
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7ff fcd5 	bl	8006f5e <get_ldnumber>
 80075b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	da01      	bge.n	80075c0 <f_mount+0x28>
 80075bc:	230b      	movs	r3, #11
 80075be:	e02b      	b.n	8007618 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80075c0:	4a17      	ldr	r2, [pc, #92]	; (8007620 <f_mount+0x88>)
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d005      	beq.n	80075dc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80075d0:	69b8      	ldr	r0, [r7, #24]
 80075d2:	f7fe fd89 	bl	80060e8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	2200      	movs	r2, #0
 80075da:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d002      	beq.n	80075e8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	490d      	ldr	r1, [pc, #52]	; (8007620 <f_mount+0x88>)
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <f_mount+0x66>
 80075f8:	79fb      	ldrb	r3, [r7, #7]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d001      	beq.n	8007602 <f_mount+0x6a>
 80075fe:	2300      	movs	r3, #0
 8007600:	e00a      	b.n	8007618 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007602:	f107 010c 	add.w	r1, r7, #12
 8007606:	f107 0308 	add.w	r3, r7, #8
 800760a:	2200      	movs	r2, #0
 800760c:	4618      	mov	r0, r3
 800760e:	f7ff fd41 	bl	8007094 <find_volume>
 8007612:	4603      	mov	r3, r0
 8007614:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007616:	7dfb      	ldrb	r3, [r7, #23]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3720      	adds	r7, #32
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	20000ef0 	.word	0x20000ef0

08007624 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b098      	sub	sp, #96	; 0x60
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	4613      	mov	r3, r2
 8007630:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <f_open+0x18>
 8007638:	2309      	movs	r3, #9
 800763a:	e1ad      	b.n	8007998 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800763c:	79fb      	ldrb	r3, [r7, #7]
 800763e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007642:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007644:	79fa      	ldrb	r2, [r7, #7]
 8007646:	f107 0110 	add.w	r1, r7, #16
 800764a:	f107 0308 	add.w	r3, r7, #8
 800764e:	4618      	mov	r0, r3
 8007650:	f7ff fd20 	bl	8007094 <find_volume>
 8007654:	4603      	mov	r3, r0
 8007656:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800765a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800765e:	2b00      	cmp	r3, #0
 8007660:	f040 8191 	bne.w	8007986 <f_open+0x362>
		dj.obj.fs = fs;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	f107 0314 	add.w	r3, r7, #20
 800766e:	4611      	mov	r1, r2
 8007670:	4618      	mov	r0, r3
 8007672:	f7ff fc03 	bl	8006e7c <follow_path>
 8007676:	4603      	mov	r3, r0
 8007678:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800767c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007680:	2b00      	cmp	r3, #0
 8007682:	d11a      	bne.n	80076ba <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007684:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007688:	b25b      	sxtb	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	da03      	bge.n	8007696 <f_open+0x72>
				res = FR_INVALID_NAME;
 800768e:	2306      	movs	r3, #6
 8007690:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007694:	e011      	b.n	80076ba <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007696:	79fb      	ldrb	r3, [r7, #7]
 8007698:	f023 0301 	bic.w	r3, r3, #1
 800769c:	2b00      	cmp	r3, #0
 800769e:	bf14      	ite	ne
 80076a0:	2301      	movne	r3, #1
 80076a2:	2300      	moveq	r3, #0
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	461a      	mov	r2, r3
 80076a8:	f107 0314 	add.w	r3, r7, #20
 80076ac:	4611      	mov	r1, r2
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fe fbd2 	bl	8005e58 <chk_lock>
 80076b4:	4603      	mov	r3, r0
 80076b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80076ba:	79fb      	ldrb	r3, [r7, #7]
 80076bc:	f003 031c 	and.w	r3, r3, #28
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d07f      	beq.n	80077c4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80076c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d017      	beq.n	80076fc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80076cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076d0:	2b04      	cmp	r3, #4
 80076d2:	d10e      	bne.n	80076f2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80076d4:	f7fe fc1c 	bl	8005f10 <enq_lock>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d006      	beq.n	80076ec <f_open+0xc8>
 80076de:	f107 0314 	add.w	r3, r7, #20
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7ff fb03 	bl	8006cee <dir_register>
 80076e8:	4603      	mov	r3, r0
 80076ea:	e000      	b.n	80076ee <f_open+0xca>
 80076ec:	2312      	movs	r3, #18
 80076ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80076f2:	79fb      	ldrb	r3, [r7, #7]
 80076f4:	f043 0308 	orr.w	r3, r3, #8
 80076f8:	71fb      	strb	r3, [r7, #7]
 80076fa:	e010      	b.n	800771e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80076fc:	7ebb      	ldrb	r3, [r7, #26]
 80076fe:	f003 0311 	and.w	r3, r3, #17
 8007702:	2b00      	cmp	r3, #0
 8007704:	d003      	beq.n	800770e <f_open+0xea>
					res = FR_DENIED;
 8007706:	2307      	movs	r3, #7
 8007708:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800770c:	e007      	b.n	800771e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800770e:	79fb      	ldrb	r3, [r7, #7]
 8007710:	f003 0304 	and.w	r3, r3, #4
 8007714:	2b00      	cmp	r3, #0
 8007716:	d002      	beq.n	800771e <f_open+0xfa>
 8007718:	2308      	movs	r3, #8
 800771a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800771e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007722:	2b00      	cmp	r3, #0
 8007724:	d168      	bne.n	80077f8 <f_open+0x1d4>
 8007726:	79fb      	ldrb	r3, [r7, #7]
 8007728:	f003 0308 	and.w	r3, r3, #8
 800772c:	2b00      	cmp	r3, #0
 800772e:	d063      	beq.n	80077f8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007730:	f7fd fcb4 	bl	800509c <get_fattime>
 8007734:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007738:	330e      	adds	r3, #14
 800773a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800773c:	4618      	mov	r0, r3
 800773e:	f7fe fae1 	bl	8005d04 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007744:	3316      	adds	r3, #22
 8007746:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007748:	4618      	mov	r0, r3
 800774a:	f7fe fadb 	bl	8005d04 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800774e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007750:	330b      	adds	r3, #11
 8007752:	2220      	movs	r2, #32
 8007754:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800775a:	4611      	mov	r1, r2
 800775c:	4618      	mov	r0, r3
 800775e:	f7ff fa32 	bl	8006bc6 <ld_clust>
 8007762:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007768:	2200      	movs	r2, #0
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff fa4a 	bl	8006c04 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007772:	331c      	adds	r3, #28
 8007774:	2100      	movs	r1, #0
 8007776:	4618      	mov	r0, r3
 8007778:	f7fe fac4 	bl	8005d04 <st_dword>
					fs->wflag = 1;
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	2201      	movs	r2, #1
 8007780:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007784:	2b00      	cmp	r3, #0
 8007786:	d037      	beq.n	80077f8 <f_open+0x1d4>
						dw = fs->winsect;
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800778e:	f107 0314 	add.w	r3, r7, #20
 8007792:	2200      	movs	r2, #0
 8007794:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007796:	4618      	mov	r0, r3
 8007798:	f7fe ff5d 	bl	8006656 <remove_chain>
 800779c:	4603      	mov	r3, r0
 800779e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80077a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d126      	bne.n	80077f8 <f_open+0x1d4>
							res = move_window(fs, dw);
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7fe fd02 	bl	80061b8 <move_window>
 80077b4:	4603      	mov	r3, r0
 80077b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077be:	3a01      	subs	r2, #1
 80077c0:	60da      	str	r2, [r3, #12]
 80077c2:	e019      	b.n	80077f8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80077c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d115      	bne.n	80077f8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80077cc:	7ebb      	ldrb	r3, [r7, #26]
 80077ce:	f003 0310 	and.w	r3, r3, #16
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d003      	beq.n	80077de <f_open+0x1ba>
					res = FR_NO_FILE;
 80077d6:	2304      	movs	r3, #4
 80077d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80077dc:	e00c      	b.n	80077f8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80077de:	79fb      	ldrb	r3, [r7, #7]
 80077e0:	f003 0302 	and.w	r3, r3, #2
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d007      	beq.n	80077f8 <f_open+0x1d4>
 80077e8:	7ebb      	ldrb	r3, [r7, #26]
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d002      	beq.n	80077f8 <f_open+0x1d4>
						res = FR_DENIED;
 80077f2:	2307      	movs	r3, #7
 80077f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80077f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d128      	bne.n	8007852 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007800:	79fb      	ldrb	r3, [r7, #7]
 8007802:	f003 0308 	and.w	r3, r3, #8
 8007806:	2b00      	cmp	r3, #0
 8007808:	d003      	beq.n	8007812 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800780a:	79fb      	ldrb	r3, [r7, #7]
 800780c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007810:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800781a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007820:	79fb      	ldrb	r3, [r7, #7]
 8007822:	f023 0301 	bic.w	r3, r3, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	bf14      	ite	ne
 800782a:	2301      	movne	r3, #1
 800782c:	2300      	moveq	r3, #0
 800782e:	b2db      	uxtb	r3, r3
 8007830:	461a      	mov	r2, r3
 8007832:	f107 0314 	add.w	r3, r7, #20
 8007836:	4611      	mov	r1, r2
 8007838:	4618      	mov	r0, r3
 800783a:	f7fe fb8b 	bl	8005f54 <inc_lock>
 800783e:	4602      	mov	r2, r0
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d102      	bne.n	8007852 <f_open+0x22e>
 800784c:	2302      	movs	r3, #2
 800784e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007852:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007856:	2b00      	cmp	r3, #0
 8007858:	f040 8095 	bne.w	8007986 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007860:	4611      	mov	r1, r2
 8007862:	4618      	mov	r0, r3
 8007864:	f7ff f9af 	bl	8006bc6 <ld_clust>
 8007868:	4602      	mov	r2, r0
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800786e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007870:	331c      	adds	r3, #28
 8007872:	4618      	mov	r0, r3
 8007874:	f7fe fa08 	bl	8005c88 <ld_dword>
 8007878:	4602      	mov	r2, r0
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	88da      	ldrh	r2, [r3, #6]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	79fa      	ldrb	r2, [r7, #7]
 8007896:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	3330      	adds	r3, #48	; 0x30
 80078ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078b2:	2100      	movs	r1, #0
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7fe fa72 	bl	8005d9e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80078ba:	79fb      	ldrb	r3, [r7, #7]
 80078bc:	f003 0320 	and.w	r3, r3, #32
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d060      	beq.n	8007986 <f_open+0x362>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d05c      	beq.n	8007986 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	68da      	ldr	r2, [r3, #12]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	895b      	ldrh	r3, [r3, #10]
 80078d8:	025b      	lsls	r3, r3, #9
 80078da:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	657b      	str	r3, [r7, #84]	; 0x54
 80078e8:	e016      	b.n	8007918 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7fe fd1d 	bl	800632e <get_fat>
 80078f4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80078f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d802      	bhi.n	8007902 <f_open+0x2de>
 80078fc:	2302      	movs	r3, #2
 80078fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007902:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007908:	d102      	bne.n	8007910 <f_open+0x2ec>
 800790a:	2301      	movs	r3, #1
 800790c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007910:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	657b      	str	r3, [r7, #84]	; 0x54
 8007918:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800791c:	2b00      	cmp	r3, #0
 800791e:	d103      	bne.n	8007928 <f_open+0x304>
 8007920:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007924:	429a      	cmp	r2, r3
 8007926:	d8e0      	bhi.n	80078ea <f_open+0x2c6>
				}
				fp->clust = clst;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800792c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800792e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007932:	2b00      	cmp	r3, #0
 8007934:	d127      	bne.n	8007986 <f_open+0x362>
 8007936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800793c:	2b00      	cmp	r3, #0
 800793e:	d022      	beq.n	8007986 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007944:	4618      	mov	r0, r3
 8007946:	f7fe fcd3 	bl	80062f0 <clust2sect>
 800794a:	6478      	str	r0, [r7, #68]	; 0x44
 800794c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800794e:	2b00      	cmp	r3, #0
 8007950:	d103      	bne.n	800795a <f_open+0x336>
						res = FR_INT_ERR;
 8007952:	2302      	movs	r3, #2
 8007954:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007958:	e015      	b.n	8007986 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800795a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800795c:	0a5a      	lsrs	r2, r3, #9
 800795e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007960:	441a      	add	r2, r3
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	7858      	ldrb	r0, [r3, #1]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6a1a      	ldr	r2, [r3, #32]
 8007974:	2301      	movs	r3, #1
 8007976:	f7fe f911 	bl	8005b9c <disk_read>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d002      	beq.n	8007986 <f_open+0x362>
 8007980:	2301      	movs	r3, #1
 8007982:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007986:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <f_open+0x370>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007994:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007998:	4618      	mov	r0, r3
 800799a:	3760      	adds	r7, #96	; 0x60
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b08e      	sub	sp, #56	; 0x38
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
 80079ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	2200      	movs	r2, #0
 80079b6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f107 0214 	add.w	r2, r7, #20
 80079be:	4611      	mov	r1, r2
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7ff fdb3 	bl	800752c <validate>
 80079c6:	4603      	mov	r3, r0
 80079c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80079cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d107      	bne.n	80079e4 <f_read+0x44>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	7d5b      	ldrb	r3, [r3, #21]
 80079d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80079dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d002      	beq.n	80079ea <f_read+0x4a>
 80079e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079e8:	e115      	b.n	8007c16 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	7d1b      	ldrb	r3, [r3, #20]
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <f_read+0x5a>
 80079f6:	2307      	movs	r3, #7
 80079f8:	e10d      	b.n	8007c16 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	68da      	ldr	r2, [r3, #12]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	f240 80fe 	bls.w	8007c0c <f_read+0x26c>
 8007a10:	6a3b      	ldr	r3, [r7, #32]
 8007a12:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007a14:	e0fa      	b.n	8007c0c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f040 80c6 	bne.w	8007bb0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	0a5b      	lsrs	r3, r3, #9
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	8952      	ldrh	r2, [r2, #10]
 8007a2e:	3a01      	subs	r2, #1
 8007a30:	4013      	ands	r3, r2
 8007a32:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d12f      	bne.n	8007a9a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d103      	bne.n	8007a4a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	633b      	str	r3, [r7, #48]	; 0x30
 8007a48:	e013      	b.n	8007a72 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d007      	beq.n	8007a62 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	4619      	mov	r1, r3
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f7fe fef9 	bl	8006850 <clmt_clust>
 8007a5e:	6338      	str	r0, [r7, #48]	; 0x30
 8007a60:	e007      	b.n	8007a72 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	69db      	ldr	r3, [r3, #28]
 8007a68:	4619      	mov	r1, r3
 8007a6a:	4610      	mov	r0, r2
 8007a6c:	f7fe fc5f 	bl	800632e <get_fat>
 8007a70:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d804      	bhi.n	8007a82 <f_read+0xe2>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	755a      	strb	r2, [r3, #21]
 8007a7e:	2302      	movs	r3, #2
 8007a80:	e0c9      	b.n	8007c16 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a88:	d104      	bne.n	8007a94 <f_read+0xf4>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	755a      	strb	r2, [r3, #21]
 8007a90:	2301      	movs	r3, #1
 8007a92:	e0c0      	b.n	8007c16 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a98:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	69db      	ldr	r3, [r3, #28]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	4610      	mov	r0, r2
 8007aa4:	f7fe fc24 	bl	80062f0 <clust2sect>
 8007aa8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d104      	bne.n	8007aba <f_read+0x11a>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	755a      	strb	r2, [r3, #21]
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	e0ad      	b.n	8007c16 <f_read+0x276>
			sect += csect;
 8007aba:	69ba      	ldr	r2, [r7, #24]
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	4413      	add	r3, r2
 8007ac0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	0a5b      	lsrs	r3, r3, #9
 8007ac6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d039      	beq.n	8007b42 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007ace:	69fa      	ldr	r2, [r7, #28]
 8007ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad2:	4413      	add	r3, r2
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	8952      	ldrh	r2, [r2, #10]
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d905      	bls.n	8007ae8 <f_read+0x148>
					cc = fs->csize - csect;
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	895b      	ldrh	r3, [r3, #10]
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	7858      	ldrb	r0, [r3, #1]
 8007aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aee:	69ba      	ldr	r2, [r7, #24]
 8007af0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007af2:	f7fe f853 	bl	8005b9c <disk_read>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d004      	beq.n	8007b06 <f_read+0x166>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2201      	movs	r2, #1
 8007b00:	755a      	strb	r2, [r3, #21]
 8007b02:	2301      	movs	r3, #1
 8007b04:	e087      	b.n	8007c16 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	7d1b      	ldrb	r3, [r3, #20]
 8007b0a:	b25b      	sxtb	r3, r3
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	da14      	bge.n	8007b3a <f_read+0x19a>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6a1a      	ldr	r2, [r3, #32]
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d90d      	bls.n	8007b3a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6a1a      	ldr	r2, [r3, #32]
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	025b      	lsls	r3, r3, #9
 8007b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b2a:	18d0      	adds	r0, r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	3330      	adds	r3, #48	; 0x30
 8007b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b34:	4619      	mov	r1, r3
 8007b36:	f7fe f911 	bl	8005d5c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3c:	025b      	lsls	r3, r3, #9
 8007b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007b40:	e050      	b.n	8007be4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	69ba      	ldr	r2, [r7, #24]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d02e      	beq.n	8007baa <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	7d1b      	ldrb	r3, [r3, #20]
 8007b50:	b25b      	sxtb	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	da18      	bge.n	8007b88 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	7858      	ldrb	r0, [r3, #1]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6a1a      	ldr	r2, [r3, #32]
 8007b64:	2301      	movs	r3, #1
 8007b66:	f7fe f839 	bl	8005bdc <disk_write>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d004      	beq.n	8007b7a <f_read+0x1da>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2201      	movs	r2, #1
 8007b74:	755a      	strb	r2, [r3, #21]
 8007b76:	2301      	movs	r3, #1
 8007b78:	e04d      	b.n	8007c16 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	7d1b      	ldrb	r3, [r3, #20]
 8007b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b82:	b2da      	uxtb	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	7858      	ldrb	r0, [r3, #1]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b92:	2301      	movs	r3, #1
 8007b94:	69ba      	ldr	r2, [r7, #24]
 8007b96:	f7fe f801 	bl	8005b9c <disk_read>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d004      	beq.n	8007baa <f_read+0x20a>
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	755a      	strb	r2, [r3, #21]
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e035      	b.n	8007c16 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	69ba      	ldr	r2, [r7, #24]
 8007bae:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d901      	bls.n	8007bca <f_read+0x22a>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bd8:	4413      	add	r3, r2
 8007bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bdc:	4619      	mov	r1, r3
 8007bde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007be0:	f7fe f8bc 	bl	8005d5c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be8:	4413      	add	r3, r2
 8007bea:	627b      	str	r3, [r7, #36]	; 0x24
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	699a      	ldr	r2, [r3, #24]
 8007bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf2:	441a      	add	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	619a      	str	r2, [r3, #24]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfe:	441a      	add	r2, r3
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	601a      	str	r2, [r3, #0]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c08:	1ad3      	subs	r3, r2, r3
 8007c0a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f47f af01 	bne.w	8007a16 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3738      	adds	r7, #56	; 0x38
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b086      	sub	sp, #24
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f107 0208 	add.w	r2, r7, #8
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7ff fc7c 	bl	800752c <validate>
 8007c34:	4603      	mov	r3, r0
 8007c36:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007c38:	7dfb      	ldrb	r3, [r7, #23]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d168      	bne.n	8007d10 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	7d1b      	ldrb	r3, [r3, #20]
 8007c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d062      	beq.n	8007d10 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	7d1b      	ldrb	r3, [r3, #20]
 8007c4e:	b25b      	sxtb	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	da15      	bge.n	8007c80 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	7858      	ldrb	r0, [r3, #1]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a1a      	ldr	r2, [r3, #32]
 8007c62:	2301      	movs	r3, #1
 8007c64:	f7fd ffba 	bl	8005bdc <disk_write>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <f_sync+0x54>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e04f      	b.n	8007d12 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	7d1b      	ldrb	r3, [r3, #20]
 8007c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007c80:	f7fd fa0c 	bl	800509c <get_fattime>
 8007c84:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	4610      	mov	r0, r2
 8007c90:	f7fe fa92 	bl	80061b8 <move_window>
 8007c94:	4603      	mov	r3, r0
 8007c96:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d138      	bne.n	8007d10 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	330b      	adds	r3, #11
 8007ca8:	781a      	ldrb	r2, [r3, #0]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	330b      	adds	r3, #11
 8007cae:	f042 0220 	orr.w	r2, r2, #32
 8007cb2:	b2d2      	uxtb	r2, r2
 8007cb4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6818      	ldr	r0, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	68f9      	ldr	r1, [r7, #12]
 8007cc2:	f7fe ff9f 	bl	8006c04 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f103 021c 	add.w	r2, r3, #28
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	4610      	mov	r0, r2
 8007cd4:	f7fe f816 	bl	8005d04 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	3316      	adds	r3, #22
 8007cdc:	6939      	ldr	r1, [r7, #16]
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fe f810 	bl	8005d04 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	3312      	adds	r3, #18
 8007ce8:	2100      	movs	r1, #0
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fd ffef 	bl	8005cce <st_word>
					fs->wflag = 1;
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7fe fa8b 	bl	8006214 <sync_fs>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	7d1b      	ldrb	r3, [r3, #20]
 8007d06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d0a:	b2da      	uxtb	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3718      	adds	r7, #24
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b084      	sub	sp, #16
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7ff ff7b 	bl	8007c1e <f_sync>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d118      	bne.n	8007d64 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f107 0208 	add.w	r2, r7, #8
 8007d38:	4611      	mov	r1, r2
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7ff fbf6 	bl	800752c <validate>
 8007d40:	4603      	mov	r3, r0
 8007d42:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10c      	bne.n	8007d64 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe f98e 	bl	8006070 <dec_lock>
 8007d54:	4603      	mov	r3, r0
 8007d56:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d102      	bne.n	8007d64 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b092      	sub	sp, #72	; 0x48
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	60f8      	str	r0, [r7, #12]
 8007d76:	60b9      	str	r1, [r7, #8]
 8007d78:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8007d7a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007d7e:	f107 030c 	add.w	r3, r7, #12
 8007d82:	2200      	movs	r2, #0
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7ff f985 	bl	8007094 <find_volume>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8007d90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f040 8099 	bne.w	8007ecc <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8007d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da2:	691a      	ldr	r2, [r3, #16]
 8007da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	3b02      	subs	r3, #2
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d804      	bhi.n	8007db8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8007dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db0:	691a      	ldr	r2, [r3, #16]
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	601a      	str	r2, [r3, #0]
 8007db6:	e089      	b.n	8007ecc <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8007db8:	2300      	movs	r3, #0
 8007dba:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8007dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d128      	bne.n	8007e16 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dca:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8007dcc:	f107 0314 	add.w	r3, r7, #20
 8007dd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fe faab 	bl	800632e <get_fat>
 8007dd8:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de0:	d103      	bne.n	8007dea <f_getfree+0x7c>
 8007de2:	2301      	movs	r3, #1
 8007de4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007de8:	e063      	b.n	8007eb2 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d103      	bne.n	8007df8 <f_getfree+0x8a>
 8007df0:	2302      	movs	r3, #2
 8007df2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007df6:	e05c      	b.n	8007eb2 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8007df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d102      	bne.n	8007e04 <f_getfree+0x96>
 8007dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e00:	3301      	adds	r3, #1
 8007e02:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8007e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e06:	3301      	adds	r3, #1
 8007e08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d3db      	bcc.n	8007dcc <f_getfree+0x5e>
 8007e14:	e04d      	b.n	8007eb2 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8007e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8007e22:	2300      	movs	r3, #0
 8007e24:	637b      	str	r3, [r7, #52]	; 0x34
 8007e26:	2300      	movs	r3, #0
 8007e28:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8007e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d113      	bne.n	8007e58 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8007e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e34:	1c5a      	adds	r2, r3, #1
 8007e36:	63ba      	str	r2, [r7, #56]	; 0x38
 8007e38:	4619      	mov	r1, r3
 8007e3a:	f7fe f9bd 	bl	80061b8 <move_window>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8007e44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d131      	bne.n	8007eb0 <f_getfree+0x142>
							p = fs->win;
 8007e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4e:	3330      	adds	r3, #48	; 0x30
 8007e50:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8007e52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e56:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8007e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d10f      	bne.n	8007e80 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8007e60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e62:	f7fd fef9 	bl	8005c58 <ld_word>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d102      	bne.n	8007e72 <f_getfree+0x104>
 8007e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e6e:	3301      	adds	r3, #1
 8007e70:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8007e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e74:	3302      	adds	r3, #2
 8007e76:	633b      	str	r3, [r7, #48]	; 0x30
 8007e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e7a:	3b02      	subs	r3, #2
 8007e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e7e:	e010      	b.n	8007ea2 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007e80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e82:	f7fd ff01 	bl	8005c88 <ld_dword>
 8007e86:	4603      	mov	r3, r0
 8007e88:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d102      	bne.n	8007e96 <f_getfree+0x128>
 8007e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e92:	3301      	adds	r3, #1
 8007e94:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8007e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e98:	3304      	adds	r3, #4
 8007e9a:	633b      	str	r3, [r7, #48]	; 0x30
 8007e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e9e:	3b04      	subs	r3, #4
 8007ea0:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8007ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1bd      	bne.n	8007e2a <f_getfree+0xbc>
 8007eae:	e000      	b.n	8007eb2 <f_getfree+0x144>
							if (res != FR_OK) break;
 8007eb0:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007eb6:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ebc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec0:	791a      	ldrb	r2, [r3, #4]
 8007ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec4:	f042 0201 	orr.w	r2, r2, #1
 8007ec8:	b2d2      	uxtb	r2, r2
 8007eca:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007ecc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3748      	adds	r7, #72	; 0x48
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b087      	sub	sp, #28
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007eea:	2300      	movs	r3, #0
 8007eec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007eee:	4b1f      	ldr	r3, [pc, #124]	; (8007f6c <FATFS_LinkDriverEx+0x94>)
 8007ef0:	7a5b      	ldrb	r3, [r3, #9]
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d131      	bne.n	8007f5c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007ef8:	4b1c      	ldr	r3, [pc, #112]	; (8007f6c <FATFS_LinkDriverEx+0x94>)
 8007efa:	7a5b      	ldrb	r3, [r3, #9]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	461a      	mov	r2, r3
 8007f00:	4b1a      	ldr	r3, [pc, #104]	; (8007f6c <FATFS_LinkDriverEx+0x94>)
 8007f02:	2100      	movs	r1, #0
 8007f04:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007f06:	4b19      	ldr	r3, [pc, #100]	; (8007f6c <FATFS_LinkDriverEx+0x94>)
 8007f08:	7a5b      	ldrb	r3, [r3, #9]
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	4a17      	ldr	r2, [pc, #92]	; (8007f6c <FATFS_LinkDriverEx+0x94>)
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	4413      	add	r3, r2
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007f16:	4b15      	ldr	r3, [pc, #84]	; (8007f6c <FATFS_LinkDriverEx+0x94>)
 8007f18:	7a5b      	ldrb	r3, [r3, #9]
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	4b13      	ldr	r3, [pc, #76]	; (8007f6c <FATFS_LinkDriverEx+0x94>)
 8007f20:	4413      	add	r3, r2
 8007f22:	79fa      	ldrb	r2, [r7, #7]
 8007f24:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007f26:	4b11      	ldr	r3, [pc, #68]	; (8007f6c <FATFS_LinkDriverEx+0x94>)
 8007f28:	7a5b      	ldrb	r3, [r3, #9]
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	1c5a      	adds	r2, r3, #1
 8007f2e:	b2d1      	uxtb	r1, r2
 8007f30:	4a0e      	ldr	r2, [pc, #56]	; (8007f6c <FATFS_LinkDriverEx+0x94>)
 8007f32:	7251      	strb	r1, [r2, #9]
 8007f34:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007f36:	7dbb      	ldrb	r3, [r7, #22]
 8007f38:	3330      	adds	r3, #48	; 0x30
 8007f3a:	b2da      	uxtb	r2, r3
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	3301      	adds	r3, #1
 8007f44:	223a      	movs	r2, #58	; 0x3a
 8007f46:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	3302      	adds	r3, #2
 8007f4c:	222f      	movs	r2, #47	; 0x2f
 8007f4e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	3303      	adds	r3, #3
 8007f54:	2200      	movs	r2, #0
 8007f56:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	371c      	adds	r7, #28
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	20000f18 	.word	0x20000f18

08007f70 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f7ff ffaa 	bl	8007ed8 <FATFS_LinkDriverEx>
 8007f84:	4603      	mov	r3, r0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
	...

08007f90 <__errno>:
 8007f90:	4b01      	ldr	r3, [pc, #4]	; (8007f98 <__errno+0x8>)
 8007f92:	6818      	ldr	r0, [r3, #0]
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	20000024 	.word	0x20000024

08007f9c <__libc_init_array>:
 8007f9c:	b570      	push	{r4, r5, r6, lr}
 8007f9e:	4d0d      	ldr	r5, [pc, #52]	; (8007fd4 <__libc_init_array+0x38>)
 8007fa0:	4c0d      	ldr	r4, [pc, #52]	; (8007fd8 <__libc_init_array+0x3c>)
 8007fa2:	1b64      	subs	r4, r4, r5
 8007fa4:	10a4      	asrs	r4, r4, #2
 8007fa6:	2600      	movs	r6, #0
 8007fa8:	42a6      	cmp	r6, r4
 8007faa:	d109      	bne.n	8007fc0 <__libc_init_array+0x24>
 8007fac:	4d0b      	ldr	r5, [pc, #44]	; (8007fdc <__libc_init_array+0x40>)
 8007fae:	4c0c      	ldr	r4, [pc, #48]	; (8007fe0 <__libc_init_array+0x44>)
 8007fb0:	f000 fcc8 	bl	8008944 <_init>
 8007fb4:	1b64      	subs	r4, r4, r5
 8007fb6:	10a4      	asrs	r4, r4, #2
 8007fb8:	2600      	movs	r6, #0
 8007fba:	42a6      	cmp	r6, r4
 8007fbc:	d105      	bne.n	8007fca <__libc_init_array+0x2e>
 8007fbe:	bd70      	pop	{r4, r5, r6, pc}
 8007fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fc4:	4798      	blx	r3
 8007fc6:	3601      	adds	r6, #1
 8007fc8:	e7ee      	b.n	8007fa8 <__libc_init_array+0xc>
 8007fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fce:	4798      	blx	r3
 8007fd0:	3601      	adds	r6, #1
 8007fd2:	e7f2      	b.n	8007fba <__libc_init_array+0x1e>
 8007fd4:	08008bb4 	.word	0x08008bb4
 8007fd8:	08008bb4 	.word	0x08008bb4
 8007fdc:	08008bb4 	.word	0x08008bb4
 8007fe0:	08008bb8 	.word	0x08008bb8

08007fe4 <memset>:
 8007fe4:	4402      	add	r2, r0
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d100      	bne.n	8007fee <memset+0xa>
 8007fec:	4770      	bx	lr
 8007fee:	f803 1b01 	strb.w	r1, [r3], #1
 8007ff2:	e7f9      	b.n	8007fe8 <memset+0x4>

08007ff4 <siprintf>:
 8007ff4:	b40e      	push	{r1, r2, r3}
 8007ff6:	b500      	push	{lr}
 8007ff8:	b09c      	sub	sp, #112	; 0x70
 8007ffa:	ab1d      	add	r3, sp, #116	; 0x74
 8007ffc:	9002      	str	r0, [sp, #8]
 8007ffe:	9006      	str	r0, [sp, #24]
 8008000:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008004:	4809      	ldr	r0, [pc, #36]	; (800802c <siprintf+0x38>)
 8008006:	9107      	str	r1, [sp, #28]
 8008008:	9104      	str	r1, [sp, #16]
 800800a:	4909      	ldr	r1, [pc, #36]	; (8008030 <siprintf+0x3c>)
 800800c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008010:	9105      	str	r1, [sp, #20]
 8008012:	6800      	ldr	r0, [r0, #0]
 8008014:	9301      	str	r3, [sp, #4]
 8008016:	a902      	add	r1, sp, #8
 8008018:	f000 f8a2 	bl	8008160 <_svfiprintf_r>
 800801c:	9b02      	ldr	r3, [sp, #8]
 800801e:	2200      	movs	r2, #0
 8008020:	701a      	strb	r2, [r3, #0]
 8008022:	b01c      	add	sp, #112	; 0x70
 8008024:	f85d eb04 	ldr.w	lr, [sp], #4
 8008028:	b003      	add	sp, #12
 800802a:	4770      	bx	lr
 800802c:	20000024 	.word	0x20000024
 8008030:	ffff0208 	.word	0xffff0208

08008034 <_vsniprintf_r>:
 8008034:	b530      	push	{r4, r5, lr}
 8008036:	4614      	mov	r4, r2
 8008038:	2c00      	cmp	r4, #0
 800803a:	b09b      	sub	sp, #108	; 0x6c
 800803c:	4605      	mov	r5, r0
 800803e:	461a      	mov	r2, r3
 8008040:	da05      	bge.n	800804e <_vsniprintf_r+0x1a>
 8008042:	238b      	movs	r3, #139	; 0x8b
 8008044:	6003      	str	r3, [r0, #0]
 8008046:	f04f 30ff 	mov.w	r0, #4294967295
 800804a:	b01b      	add	sp, #108	; 0x6c
 800804c:	bd30      	pop	{r4, r5, pc}
 800804e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008052:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008056:	bf14      	ite	ne
 8008058:	f104 33ff 	addne.w	r3, r4, #4294967295
 800805c:	4623      	moveq	r3, r4
 800805e:	9302      	str	r3, [sp, #8]
 8008060:	9305      	str	r3, [sp, #20]
 8008062:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008066:	9100      	str	r1, [sp, #0]
 8008068:	9104      	str	r1, [sp, #16]
 800806a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800806e:	4669      	mov	r1, sp
 8008070:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008072:	f000 f875 	bl	8008160 <_svfiprintf_r>
 8008076:	1c43      	adds	r3, r0, #1
 8008078:	bfbc      	itt	lt
 800807a:	238b      	movlt	r3, #139	; 0x8b
 800807c:	602b      	strlt	r3, [r5, #0]
 800807e:	2c00      	cmp	r4, #0
 8008080:	d0e3      	beq.n	800804a <_vsniprintf_r+0x16>
 8008082:	9b00      	ldr	r3, [sp, #0]
 8008084:	2200      	movs	r2, #0
 8008086:	701a      	strb	r2, [r3, #0]
 8008088:	e7df      	b.n	800804a <_vsniprintf_r+0x16>
	...

0800808c <vsniprintf>:
 800808c:	b507      	push	{r0, r1, r2, lr}
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	4613      	mov	r3, r2
 8008092:	460a      	mov	r2, r1
 8008094:	4601      	mov	r1, r0
 8008096:	4803      	ldr	r0, [pc, #12]	; (80080a4 <vsniprintf+0x18>)
 8008098:	6800      	ldr	r0, [r0, #0]
 800809a:	f7ff ffcb 	bl	8008034 <_vsniprintf_r>
 800809e:	b003      	add	sp, #12
 80080a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80080a4:	20000024 	.word	0x20000024

080080a8 <__ssputs_r>:
 80080a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080ac:	688e      	ldr	r6, [r1, #8]
 80080ae:	429e      	cmp	r6, r3
 80080b0:	4682      	mov	sl, r0
 80080b2:	460c      	mov	r4, r1
 80080b4:	4690      	mov	r8, r2
 80080b6:	461f      	mov	r7, r3
 80080b8:	d838      	bhi.n	800812c <__ssputs_r+0x84>
 80080ba:	898a      	ldrh	r2, [r1, #12]
 80080bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080c0:	d032      	beq.n	8008128 <__ssputs_r+0x80>
 80080c2:	6825      	ldr	r5, [r4, #0]
 80080c4:	6909      	ldr	r1, [r1, #16]
 80080c6:	eba5 0901 	sub.w	r9, r5, r1
 80080ca:	6965      	ldr	r5, [r4, #20]
 80080cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080d4:	3301      	adds	r3, #1
 80080d6:	444b      	add	r3, r9
 80080d8:	106d      	asrs	r5, r5, #1
 80080da:	429d      	cmp	r5, r3
 80080dc:	bf38      	it	cc
 80080de:	461d      	movcc	r5, r3
 80080e0:	0553      	lsls	r3, r2, #21
 80080e2:	d531      	bpl.n	8008148 <__ssputs_r+0xa0>
 80080e4:	4629      	mov	r1, r5
 80080e6:	f000 fb63 	bl	80087b0 <_malloc_r>
 80080ea:	4606      	mov	r6, r0
 80080ec:	b950      	cbnz	r0, 8008104 <__ssputs_r+0x5c>
 80080ee:	230c      	movs	r3, #12
 80080f0:	f8ca 3000 	str.w	r3, [sl]
 80080f4:	89a3      	ldrh	r3, [r4, #12]
 80080f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080fa:	81a3      	strh	r3, [r4, #12]
 80080fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008104:	6921      	ldr	r1, [r4, #16]
 8008106:	464a      	mov	r2, r9
 8008108:	f000 fabe 	bl	8008688 <memcpy>
 800810c:	89a3      	ldrh	r3, [r4, #12]
 800810e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008116:	81a3      	strh	r3, [r4, #12]
 8008118:	6126      	str	r6, [r4, #16]
 800811a:	6165      	str	r5, [r4, #20]
 800811c:	444e      	add	r6, r9
 800811e:	eba5 0509 	sub.w	r5, r5, r9
 8008122:	6026      	str	r6, [r4, #0]
 8008124:	60a5      	str	r5, [r4, #8]
 8008126:	463e      	mov	r6, r7
 8008128:	42be      	cmp	r6, r7
 800812a:	d900      	bls.n	800812e <__ssputs_r+0x86>
 800812c:	463e      	mov	r6, r7
 800812e:	6820      	ldr	r0, [r4, #0]
 8008130:	4632      	mov	r2, r6
 8008132:	4641      	mov	r1, r8
 8008134:	f000 fab6 	bl	80086a4 <memmove>
 8008138:	68a3      	ldr	r3, [r4, #8]
 800813a:	1b9b      	subs	r3, r3, r6
 800813c:	60a3      	str	r3, [r4, #8]
 800813e:	6823      	ldr	r3, [r4, #0]
 8008140:	4433      	add	r3, r6
 8008142:	6023      	str	r3, [r4, #0]
 8008144:	2000      	movs	r0, #0
 8008146:	e7db      	b.n	8008100 <__ssputs_r+0x58>
 8008148:	462a      	mov	r2, r5
 800814a:	f000 fba5 	bl	8008898 <_realloc_r>
 800814e:	4606      	mov	r6, r0
 8008150:	2800      	cmp	r0, #0
 8008152:	d1e1      	bne.n	8008118 <__ssputs_r+0x70>
 8008154:	6921      	ldr	r1, [r4, #16]
 8008156:	4650      	mov	r0, sl
 8008158:	f000 fabe 	bl	80086d8 <_free_r>
 800815c:	e7c7      	b.n	80080ee <__ssputs_r+0x46>
	...

08008160 <_svfiprintf_r>:
 8008160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008164:	4698      	mov	r8, r3
 8008166:	898b      	ldrh	r3, [r1, #12]
 8008168:	061b      	lsls	r3, r3, #24
 800816a:	b09d      	sub	sp, #116	; 0x74
 800816c:	4607      	mov	r7, r0
 800816e:	460d      	mov	r5, r1
 8008170:	4614      	mov	r4, r2
 8008172:	d50e      	bpl.n	8008192 <_svfiprintf_r+0x32>
 8008174:	690b      	ldr	r3, [r1, #16]
 8008176:	b963      	cbnz	r3, 8008192 <_svfiprintf_r+0x32>
 8008178:	2140      	movs	r1, #64	; 0x40
 800817a:	f000 fb19 	bl	80087b0 <_malloc_r>
 800817e:	6028      	str	r0, [r5, #0]
 8008180:	6128      	str	r0, [r5, #16]
 8008182:	b920      	cbnz	r0, 800818e <_svfiprintf_r+0x2e>
 8008184:	230c      	movs	r3, #12
 8008186:	603b      	str	r3, [r7, #0]
 8008188:	f04f 30ff 	mov.w	r0, #4294967295
 800818c:	e0d1      	b.n	8008332 <_svfiprintf_r+0x1d2>
 800818e:	2340      	movs	r3, #64	; 0x40
 8008190:	616b      	str	r3, [r5, #20]
 8008192:	2300      	movs	r3, #0
 8008194:	9309      	str	r3, [sp, #36]	; 0x24
 8008196:	2320      	movs	r3, #32
 8008198:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800819c:	f8cd 800c 	str.w	r8, [sp, #12]
 80081a0:	2330      	movs	r3, #48	; 0x30
 80081a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800834c <_svfiprintf_r+0x1ec>
 80081a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081aa:	f04f 0901 	mov.w	r9, #1
 80081ae:	4623      	mov	r3, r4
 80081b0:	469a      	mov	sl, r3
 80081b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081b6:	b10a      	cbz	r2, 80081bc <_svfiprintf_r+0x5c>
 80081b8:	2a25      	cmp	r2, #37	; 0x25
 80081ba:	d1f9      	bne.n	80081b0 <_svfiprintf_r+0x50>
 80081bc:	ebba 0b04 	subs.w	fp, sl, r4
 80081c0:	d00b      	beq.n	80081da <_svfiprintf_r+0x7a>
 80081c2:	465b      	mov	r3, fp
 80081c4:	4622      	mov	r2, r4
 80081c6:	4629      	mov	r1, r5
 80081c8:	4638      	mov	r0, r7
 80081ca:	f7ff ff6d 	bl	80080a8 <__ssputs_r>
 80081ce:	3001      	adds	r0, #1
 80081d0:	f000 80aa 	beq.w	8008328 <_svfiprintf_r+0x1c8>
 80081d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081d6:	445a      	add	r2, fp
 80081d8:	9209      	str	r2, [sp, #36]	; 0x24
 80081da:	f89a 3000 	ldrb.w	r3, [sl]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f000 80a2 	beq.w	8008328 <_svfiprintf_r+0x1c8>
 80081e4:	2300      	movs	r3, #0
 80081e6:	f04f 32ff 	mov.w	r2, #4294967295
 80081ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081ee:	f10a 0a01 	add.w	sl, sl, #1
 80081f2:	9304      	str	r3, [sp, #16]
 80081f4:	9307      	str	r3, [sp, #28]
 80081f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081fa:	931a      	str	r3, [sp, #104]	; 0x68
 80081fc:	4654      	mov	r4, sl
 80081fe:	2205      	movs	r2, #5
 8008200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008204:	4851      	ldr	r0, [pc, #324]	; (800834c <_svfiprintf_r+0x1ec>)
 8008206:	f7f7 fff3 	bl	80001f0 <memchr>
 800820a:	9a04      	ldr	r2, [sp, #16]
 800820c:	b9d8      	cbnz	r0, 8008246 <_svfiprintf_r+0xe6>
 800820e:	06d0      	lsls	r0, r2, #27
 8008210:	bf44      	itt	mi
 8008212:	2320      	movmi	r3, #32
 8008214:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008218:	0711      	lsls	r1, r2, #28
 800821a:	bf44      	itt	mi
 800821c:	232b      	movmi	r3, #43	; 0x2b
 800821e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008222:	f89a 3000 	ldrb.w	r3, [sl]
 8008226:	2b2a      	cmp	r3, #42	; 0x2a
 8008228:	d015      	beq.n	8008256 <_svfiprintf_r+0xf6>
 800822a:	9a07      	ldr	r2, [sp, #28]
 800822c:	4654      	mov	r4, sl
 800822e:	2000      	movs	r0, #0
 8008230:	f04f 0c0a 	mov.w	ip, #10
 8008234:	4621      	mov	r1, r4
 8008236:	f811 3b01 	ldrb.w	r3, [r1], #1
 800823a:	3b30      	subs	r3, #48	; 0x30
 800823c:	2b09      	cmp	r3, #9
 800823e:	d94e      	bls.n	80082de <_svfiprintf_r+0x17e>
 8008240:	b1b0      	cbz	r0, 8008270 <_svfiprintf_r+0x110>
 8008242:	9207      	str	r2, [sp, #28]
 8008244:	e014      	b.n	8008270 <_svfiprintf_r+0x110>
 8008246:	eba0 0308 	sub.w	r3, r0, r8
 800824a:	fa09 f303 	lsl.w	r3, r9, r3
 800824e:	4313      	orrs	r3, r2
 8008250:	9304      	str	r3, [sp, #16]
 8008252:	46a2      	mov	sl, r4
 8008254:	e7d2      	b.n	80081fc <_svfiprintf_r+0x9c>
 8008256:	9b03      	ldr	r3, [sp, #12]
 8008258:	1d19      	adds	r1, r3, #4
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	9103      	str	r1, [sp, #12]
 800825e:	2b00      	cmp	r3, #0
 8008260:	bfbb      	ittet	lt
 8008262:	425b      	neglt	r3, r3
 8008264:	f042 0202 	orrlt.w	r2, r2, #2
 8008268:	9307      	strge	r3, [sp, #28]
 800826a:	9307      	strlt	r3, [sp, #28]
 800826c:	bfb8      	it	lt
 800826e:	9204      	strlt	r2, [sp, #16]
 8008270:	7823      	ldrb	r3, [r4, #0]
 8008272:	2b2e      	cmp	r3, #46	; 0x2e
 8008274:	d10c      	bne.n	8008290 <_svfiprintf_r+0x130>
 8008276:	7863      	ldrb	r3, [r4, #1]
 8008278:	2b2a      	cmp	r3, #42	; 0x2a
 800827a:	d135      	bne.n	80082e8 <_svfiprintf_r+0x188>
 800827c:	9b03      	ldr	r3, [sp, #12]
 800827e:	1d1a      	adds	r2, r3, #4
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	9203      	str	r2, [sp, #12]
 8008284:	2b00      	cmp	r3, #0
 8008286:	bfb8      	it	lt
 8008288:	f04f 33ff 	movlt.w	r3, #4294967295
 800828c:	3402      	adds	r4, #2
 800828e:	9305      	str	r3, [sp, #20]
 8008290:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800835c <_svfiprintf_r+0x1fc>
 8008294:	7821      	ldrb	r1, [r4, #0]
 8008296:	2203      	movs	r2, #3
 8008298:	4650      	mov	r0, sl
 800829a:	f7f7 ffa9 	bl	80001f0 <memchr>
 800829e:	b140      	cbz	r0, 80082b2 <_svfiprintf_r+0x152>
 80082a0:	2340      	movs	r3, #64	; 0x40
 80082a2:	eba0 000a 	sub.w	r0, r0, sl
 80082a6:	fa03 f000 	lsl.w	r0, r3, r0
 80082aa:	9b04      	ldr	r3, [sp, #16]
 80082ac:	4303      	orrs	r3, r0
 80082ae:	3401      	adds	r4, #1
 80082b0:	9304      	str	r3, [sp, #16]
 80082b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082b6:	4826      	ldr	r0, [pc, #152]	; (8008350 <_svfiprintf_r+0x1f0>)
 80082b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082bc:	2206      	movs	r2, #6
 80082be:	f7f7 ff97 	bl	80001f0 <memchr>
 80082c2:	2800      	cmp	r0, #0
 80082c4:	d038      	beq.n	8008338 <_svfiprintf_r+0x1d8>
 80082c6:	4b23      	ldr	r3, [pc, #140]	; (8008354 <_svfiprintf_r+0x1f4>)
 80082c8:	bb1b      	cbnz	r3, 8008312 <_svfiprintf_r+0x1b2>
 80082ca:	9b03      	ldr	r3, [sp, #12]
 80082cc:	3307      	adds	r3, #7
 80082ce:	f023 0307 	bic.w	r3, r3, #7
 80082d2:	3308      	adds	r3, #8
 80082d4:	9303      	str	r3, [sp, #12]
 80082d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d8:	4433      	add	r3, r6
 80082da:	9309      	str	r3, [sp, #36]	; 0x24
 80082dc:	e767      	b.n	80081ae <_svfiprintf_r+0x4e>
 80082de:	fb0c 3202 	mla	r2, ip, r2, r3
 80082e2:	460c      	mov	r4, r1
 80082e4:	2001      	movs	r0, #1
 80082e6:	e7a5      	b.n	8008234 <_svfiprintf_r+0xd4>
 80082e8:	2300      	movs	r3, #0
 80082ea:	3401      	adds	r4, #1
 80082ec:	9305      	str	r3, [sp, #20]
 80082ee:	4619      	mov	r1, r3
 80082f0:	f04f 0c0a 	mov.w	ip, #10
 80082f4:	4620      	mov	r0, r4
 80082f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082fa:	3a30      	subs	r2, #48	; 0x30
 80082fc:	2a09      	cmp	r2, #9
 80082fe:	d903      	bls.n	8008308 <_svfiprintf_r+0x1a8>
 8008300:	2b00      	cmp	r3, #0
 8008302:	d0c5      	beq.n	8008290 <_svfiprintf_r+0x130>
 8008304:	9105      	str	r1, [sp, #20]
 8008306:	e7c3      	b.n	8008290 <_svfiprintf_r+0x130>
 8008308:	fb0c 2101 	mla	r1, ip, r1, r2
 800830c:	4604      	mov	r4, r0
 800830e:	2301      	movs	r3, #1
 8008310:	e7f0      	b.n	80082f4 <_svfiprintf_r+0x194>
 8008312:	ab03      	add	r3, sp, #12
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	462a      	mov	r2, r5
 8008318:	4b0f      	ldr	r3, [pc, #60]	; (8008358 <_svfiprintf_r+0x1f8>)
 800831a:	a904      	add	r1, sp, #16
 800831c:	4638      	mov	r0, r7
 800831e:	f3af 8000 	nop.w
 8008322:	1c42      	adds	r2, r0, #1
 8008324:	4606      	mov	r6, r0
 8008326:	d1d6      	bne.n	80082d6 <_svfiprintf_r+0x176>
 8008328:	89ab      	ldrh	r3, [r5, #12]
 800832a:	065b      	lsls	r3, r3, #25
 800832c:	f53f af2c 	bmi.w	8008188 <_svfiprintf_r+0x28>
 8008330:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008332:	b01d      	add	sp, #116	; 0x74
 8008334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008338:	ab03      	add	r3, sp, #12
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	462a      	mov	r2, r5
 800833e:	4b06      	ldr	r3, [pc, #24]	; (8008358 <_svfiprintf_r+0x1f8>)
 8008340:	a904      	add	r1, sp, #16
 8008342:	4638      	mov	r0, r7
 8008344:	f000 f87a 	bl	800843c <_printf_i>
 8008348:	e7eb      	b.n	8008322 <_svfiprintf_r+0x1c2>
 800834a:	bf00      	nop
 800834c:	08008b78 	.word	0x08008b78
 8008350:	08008b82 	.word	0x08008b82
 8008354:	00000000 	.word	0x00000000
 8008358:	080080a9 	.word	0x080080a9
 800835c:	08008b7e 	.word	0x08008b7e

08008360 <_printf_common>:
 8008360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008364:	4616      	mov	r6, r2
 8008366:	4699      	mov	r9, r3
 8008368:	688a      	ldr	r2, [r1, #8]
 800836a:	690b      	ldr	r3, [r1, #16]
 800836c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008370:	4293      	cmp	r3, r2
 8008372:	bfb8      	it	lt
 8008374:	4613      	movlt	r3, r2
 8008376:	6033      	str	r3, [r6, #0]
 8008378:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800837c:	4607      	mov	r7, r0
 800837e:	460c      	mov	r4, r1
 8008380:	b10a      	cbz	r2, 8008386 <_printf_common+0x26>
 8008382:	3301      	adds	r3, #1
 8008384:	6033      	str	r3, [r6, #0]
 8008386:	6823      	ldr	r3, [r4, #0]
 8008388:	0699      	lsls	r1, r3, #26
 800838a:	bf42      	ittt	mi
 800838c:	6833      	ldrmi	r3, [r6, #0]
 800838e:	3302      	addmi	r3, #2
 8008390:	6033      	strmi	r3, [r6, #0]
 8008392:	6825      	ldr	r5, [r4, #0]
 8008394:	f015 0506 	ands.w	r5, r5, #6
 8008398:	d106      	bne.n	80083a8 <_printf_common+0x48>
 800839a:	f104 0a19 	add.w	sl, r4, #25
 800839e:	68e3      	ldr	r3, [r4, #12]
 80083a0:	6832      	ldr	r2, [r6, #0]
 80083a2:	1a9b      	subs	r3, r3, r2
 80083a4:	42ab      	cmp	r3, r5
 80083a6:	dc26      	bgt.n	80083f6 <_printf_common+0x96>
 80083a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083ac:	1e13      	subs	r3, r2, #0
 80083ae:	6822      	ldr	r2, [r4, #0]
 80083b0:	bf18      	it	ne
 80083b2:	2301      	movne	r3, #1
 80083b4:	0692      	lsls	r2, r2, #26
 80083b6:	d42b      	bmi.n	8008410 <_printf_common+0xb0>
 80083b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083bc:	4649      	mov	r1, r9
 80083be:	4638      	mov	r0, r7
 80083c0:	47c0      	blx	r8
 80083c2:	3001      	adds	r0, #1
 80083c4:	d01e      	beq.n	8008404 <_printf_common+0xa4>
 80083c6:	6823      	ldr	r3, [r4, #0]
 80083c8:	68e5      	ldr	r5, [r4, #12]
 80083ca:	6832      	ldr	r2, [r6, #0]
 80083cc:	f003 0306 	and.w	r3, r3, #6
 80083d0:	2b04      	cmp	r3, #4
 80083d2:	bf08      	it	eq
 80083d4:	1aad      	subeq	r5, r5, r2
 80083d6:	68a3      	ldr	r3, [r4, #8]
 80083d8:	6922      	ldr	r2, [r4, #16]
 80083da:	bf0c      	ite	eq
 80083dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083e0:	2500      	movne	r5, #0
 80083e2:	4293      	cmp	r3, r2
 80083e4:	bfc4      	itt	gt
 80083e6:	1a9b      	subgt	r3, r3, r2
 80083e8:	18ed      	addgt	r5, r5, r3
 80083ea:	2600      	movs	r6, #0
 80083ec:	341a      	adds	r4, #26
 80083ee:	42b5      	cmp	r5, r6
 80083f0:	d11a      	bne.n	8008428 <_printf_common+0xc8>
 80083f2:	2000      	movs	r0, #0
 80083f4:	e008      	b.n	8008408 <_printf_common+0xa8>
 80083f6:	2301      	movs	r3, #1
 80083f8:	4652      	mov	r2, sl
 80083fa:	4649      	mov	r1, r9
 80083fc:	4638      	mov	r0, r7
 80083fe:	47c0      	blx	r8
 8008400:	3001      	adds	r0, #1
 8008402:	d103      	bne.n	800840c <_printf_common+0xac>
 8008404:	f04f 30ff 	mov.w	r0, #4294967295
 8008408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800840c:	3501      	adds	r5, #1
 800840e:	e7c6      	b.n	800839e <_printf_common+0x3e>
 8008410:	18e1      	adds	r1, r4, r3
 8008412:	1c5a      	adds	r2, r3, #1
 8008414:	2030      	movs	r0, #48	; 0x30
 8008416:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800841a:	4422      	add	r2, r4
 800841c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008420:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008424:	3302      	adds	r3, #2
 8008426:	e7c7      	b.n	80083b8 <_printf_common+0x58>
 8008428:	2301      	movs	r3, #1
 800842a:	4622      	mov	r2, r4
 800842c:	4649      	mov	r1, r9
 800842e:	4638      	mov	r0, r7
 8008430:	47c0      	blx	r8
 8008432:	3001      	adds	r0, #1
 8008434:	d0e6      	beq.n	8008404 <_printf_common+0xa4>
 8008436:	3601      	adds	r6, #1
 8008438:	e7d9      	b.n	80083ee <_printf_common+0x8e>
	...

0800843c <_printf_i>:
 800843c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008440:	7e0f      	ldrb	r7, [r1, #24]
 8008442:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008444:	2f78      	cmp	r7, #120	; 0x78
 8008446:	4691      	mov	r9, r2
 8008448:	4680      	mov	r8, r0
 800844a:	460c      	mov	r4, r1
 800844c:	469a      	mov	sl, r3
 800844e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008452:	d807      	bhi.n	8008464 <_printf_i+0x28>
 8008454:	2f62      	cmp	r7, #98	; 0x62
 8008456:	d80a      	bhi.n	800846e <_printf_i+0x32>
 8008458:	2f00      	cmp	r7, #0
 800845a:	f000 80d8 	beq.w	800860e <_printf_i+0x1d2>
 800845e:	2f58      	cmp	r7, #88	; 0x58
 8008460:	f000 80a3 	beq.w	80085aa <_printf_i+0x16e>
 8008464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008468:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800846c:	e03a      	b.n	80084e4 <_printf_i+0xa8>
 800846e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008472:	2b15      	cmp	r3, #21
 8008474:	d8f6      	bhi.n	8008464 <_printf_i+0x28>
 8008476:	a101      	add	r1, pc, #4	; (adr r1, 800847c <_printf_i+0x40>)
 8008478:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800847c:	080084d5 	.word	0x080084d5
 8008480:	080084e9 	.word	0x080084e9
 8008484:	08008465 	.word	0x08008465
 8008488:	08008465 	.word	0x08008465
 800848c:	08008465 	.word	0x08008465
 8008490:	08008465 	.word	0x08008465
 8008494:	080084e9 	.word	0x080084e9
 8008498:	08008465 	.word	0x08008465
 800849c:	08008465 	.word	0x08008465
 80084a0:	08008465 	.word	0x08008465
 80084a4:	08008465 	.word	0x08008465
 80084a8:	080085f5 	.word	0x080085f5
 80084ac:	08008519 	.word	0x08008519
 80084b0:	080085d7 	.word	0x080085d7
 80084b4:	08008465 	.word	0x08008465
 80084b8:	08008465 	.word	0x08008465
 80084bc:	08008617 	.word	0x08008617
 80084c0:	08008465 	.word	0x08008465
 80084c4:	08008519 	.word	0x08008519
 80084c8:	08008465 	.word	0x08008465
 80084cc:	08008465 	.word	0x08008465
 80084d0:	080085df 	.word	0x080085df
 80084d4:	682b      	ldr	r3, [r5, #0]
 80084d6:	1d1a      	adds	r2, r3, #4
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	602a      	str	r2, [r5, #0]
 80084dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084e4:	2301      	movs	r3, #1
 80084e6:	e0a3      	b.n	8008630 <_printf_i+0x1f4>
 80084e8:	6820      	ldr	r0, [r4, #0]
 80084ea:	6829      	ldr	r1, [r5, #0]
 80084ec:	0606      	lsls	r6, r0, #24
 80084ee:	f101 0304 	add.w	r3, r1, #4
 80084f2:	d50a      	bpl.n	800850a <_printf_i+0xce>
 80084f4:	680e      	ldr	r6, [r1, #0]
 80084f6:	602b      	str	r3, [r5, #0]
 80084f8:	2e00      	cmp	r6, #0
 80084fa:	da03      	bge.n	8008504 <_printf_i+0xc8>
 80084fc:	232d      	movs	r3, #45	; 0x2d
 80084fe:	4276      	negs	r6, r6
 8008500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008504:	485e      	ldr	r0, [pc, #376]	; (8008680 <_printf_i+0x244>)
 8008506:	230a      	movs	r3, #10
 8008508:	e019      	b.n	800853e <_printf_i+0x102>
 800850a:	680e      	ldr	r6, [r1, #0]
 800850c:	602b      	str	r3, [r5, #0]
 800850e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008512:	bf18      	it	ne
 8008514:	b236      	sxthne	r6, r6
 8008516:	e7ef      	b.n	80084f8 <_printf_i+0xbc>
 8008518:	682b      	ldr	r3, [r5, #0]
 800851a:	6820      	ldr	r0, [r4, #0]
 800851c:	1d19      	adds	r1, r3, #4
 800851e:	6029      	str	r1, [r5, #0]
 8008520:	0601      	lsls	r1, r0, #24
 8008522:	d501      	bpl.n	8008528 <_printf_i+0xec>
 8008524:	681e      	ldr	r6, [r3, #0]
 8008526:	e002      	b.n	800852e <_printf_i+0xf2>
 8008528:	0646      	lsls	r6, r0, #25
 800852a:	d5fb      	bpl.n	8008524 <_printf_i+0xe8>
 800852c:	881e      	ldrh	r6, [r3, #0]
 800852e:	4854      	ldr	r0, [pc, #336]	; (8008680 <_printf_i+0x244>)
 8008530:	2f6f      	cmp	r7, #111	; 0x6f
 8008532:	bf0c      	ite	eq
 8008534:	2308      	moveq	r3, #8
 8008536:	230a      	movne	r3, #10
 8008538:	2100      	movs	r1, #0
 800853a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800853e:	6865      	ldr	r5, [r4, #4]
 8008540:	60a5      	str	r5, [r4, #8]
 8008542:	2d00      	cmp	r5, #0
 8008544:	bfa2      	ittt	ge
 8008546:	6821      	ldrge	r1, [r4, #0]
 8008548:	f021 0104 	bicge.w	r1, r1, #4
 800854c:	6021      	strge	r1, [r4, #0]
 800854e:	b90e      	cbnz	r6, 8008554 <_printf_i+0x118>
 8008550:	2d00      	cmp	r5, #0
 8008552:	d04d      	beq.n	80085f0 <_printf_i+0x1b4>
 8008554:	4615      	mov	r5, r2
 8008556:	fbb6 f1f3 	udiv	r1, r6, r3
 800855a:	fb03 6711 	mls	r7, r3, r1, r6
 800855e:	5dc7      	ldrb	r7, [r0, r7]
 8008560:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008564:	4637      	mov	r7, r6
 8008566:	42bb      	cmp	r3, r7
 8008568:	460e      	mov	r6, r1
 800856a:	d9f4      	bls.n	8008556 <_printf_i+0x11a>
 800856c:	2b08      	cmp	r3, #8
 800856e:	d10b      	bne.n	8008588 <_printf_i+0x14c>
 8008570:	6823      	ldr	r3, [r4, #0]
 8008572:	07de      	lsls	r6, r3, #31
 8008574:	d508      	bpl.n	8008588 <_printf_i+0x14c>
 8008576:	6923      	ldr	r3, [r4, #16]
 8008578:	6861      	ldr	r1, [r4, #4]
 800857a:	4299      	cmp	r1, r3
 800857c:	bfde      	ittt	le
 800857e:	2330      	movle	r3, #48	; 0x30
 8008580:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008584:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008588:	1b52      	subs	r2, r2, r5
 800858a:	6122      	str	r2, [r4, #16]
 800858c:	f8cd a000 	str.w	sl, [sp]
 8008590:	464b      	mov	r3, r9
 8008592:	aa03      	add	r2, sp, #12
 8008594:	4621      	mov	r1, r4
 8008596:	4640      	mov	r0, r8
 8008598:	f7ff fee2 	bl	8008360 <_printf_common>
 800859c:	3001      	adds	r0, #1
 800859e:	d14c      	bne.n	800863a <_printf_i+0x1fe>
 80085a0:	f04f 30ff 	mov.w	r0, #4294967295
 80085a4:	b004      	add	sp, #16
 80085a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085aa:	4835      	ldr	r0, [pc, #212]	; (8008680 <_printf_i+0x244>)
 80085ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80085b0:	6829      	ldr	r1, [r5, #0]
 80085b2:	6823      	ldr	r3, [r4, #0]
 80085b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80085b8:	6029      	str	r1, [r5, #0]
 80085ba:	061d      	lsls	r5, r3, #24
 80085bc:	d514      	bpl.n	80085e8 <_printf_i+0x1ac>
 80085be:	07df      	lsls	r7, r3, #31
 80085c0:	bf44      	itt	mi
 80085c2:	f043 0320 	orrmi.w	r3, r3, #32
 80085c6:	6023      	strmi	r3, [r4, #0]
 80085c8:	b91e      	cbnz	r6, 80085d2 <_printf_i+0x196>
 80085ca:	6823      	ldr	r3, [r4, #0]
 80085cc:	f023 0320 	bic.w	r3, r3, #32
 80085d0:	6023      	str	r3, [r4, #0]
 80085d2:	2310      	movs	r3, #16
 80085d4:	e7b0      	b.n	8008538 <_printf_i+0xfc>
 80085d6:	6823      	ldr	r3, [r4, #0]
 80085d8:	f043 0320 	orr.w	r3, r3, #32
 80085dc:	6023      	str	r3, [r4, #0]
 80085de:	2378      	movs	r3, #120	; 0x78
 80085e0:	4828      	ldr	r0, [pc, #160]	; (8008684 <_printf_i+0x248>)
 80085e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085e6:	e7e3      	b.n	80085b0 <_printf_i+0x174>
 80085e8:	0659      	lsls	r1, r3, #25
 80085ea:	bf48      	it	mi
 80085ec:	b2b6      	uxthmi	r6, r6
 80085ee:	e7e6      	b.n	80085be <_printf_i+0x182>
 80085f0:	4615      	mov	r5, r2
 80085f2:	e7bb      	b.n	800856c <_printf_i+0x130>
 80085f4:	682b      	ldr	r3, [r5, #0]
 80085f6:	6826      	ldr	r6, [r4, #0]
 80085f8:	6961      	ldr	r1, [r4, #20]
 80085fa:	1d18      	adds	r0, r3, #4
 80085fc:	6028      	str	r0, [r5, #0]
 80085fe:	0635      	lsls	r5, r6, #24
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	d501      	bpl.n	8008608 <_printf_i+0x1cc>
 8008604:	6019      	str	r1, [r3, #0]
 8008606:	e002      	b.n	800860e <_printf_i+0x1d2>
 8008608:	0670      	lsls	r0, r6, #25
 800860a:	d5fb      	bpl.n	8008604 <_printf_i+0x1c8>
 800860c:	8019      	strh	r1, [r3, #0]
 800860e:	2300      	movs	r3, #0
 8008610:	6123      	str	r3, [r4, #16]
 8008612:	4615      	mov	r5, r2
 8008614:	e7ba      	b.n	800858c <_printf_i+0x150>
 8008616:	682b      	ldr	r3, [r5, #0]
 8008618:	1d1a      	adds	r2, r3, #4
 800861a:	602a      	str	r2, [r5, #0]
 800861c:	681d      	ldr	r5, [r3, #0]
 800861e:	6862      	ldr	r2, [r4, #4]
 8008620:	2100      	movs	r1, #0
 8008622:	4628      	mov	r0, r5
 8008624:	f7f7 fde4 	bl	80001f0 <memchr>
 8008628:	b108      	cbz	r0, 800862e <_printf_i+0x1f2>
 800862a:	1b40      	subs	r0, r0, r5
 800862c:	6060      	str	r0, [r4, #4]
 800862e:	6863      	ldr	r3, [r4, #4]
 8008630:	6123      	str	r3, [r4, #16]
 8008632:	2300      	movs	r3, #0
 8008634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008638:	e7a8      	b.n	800858c <_printf_i+0x150>
 800863a:	6923      	ldr	r3, [r4, #16]
 800863c:	462a      	mov	r2, r5
 800863e:	4649      	mov	r1, r9
 8008640:	4640      	mov	r0, r8
 8008642:	47d0      	blx	sl
 8008644:	3001      	adds	r0, #1
 8008646:	d0ab      	beq.n	80085a0 <_printf_i+0x164>
 8008648:	6823      	ldr	r3, [r4, #0]
 800864a:	079b      	lsls	r3, r3, #30
 800864c:	d413      	bmi.n	8008676 <_printf_i+0x23a>
 800864e:	68e0      	ldr	r0, [r4, #12]
 8008650:	9b03      	ldr	r3, [sp, #12]
 8008652:	4298      	cmp	r0, r3
 8008654:	bfb8      	it	lt
 8008656:	4618      	movlt	r0, r3
 8008658:	e7a4      	b.n	80085a4 <_printf_i+0x168>
 800865a:	2301      	movs	r3, #1
 800865c:	4632      	mov	r2, r6
 800865e:	4649      	mov	r1, r9
 8008660:	4640      	mov	r0, r8
 8008662:	47d0      	blx	sl
 8008664:	3001      	adds	r0, #1
 8008666:	d09b      	beq.n	80085a0 <_printf_i+0x164>
 8008668:	3501      	adds	r5, #1
 800866a:	68e3      	ldr	r3, [r4, #12]
 800866c:	9903      	ldr	r1, [sp, #12]
 800866e:	1a5b      	subs	r3, r3, r1
 8008670:	42ab      	cmp	r3, r5
 8008672:	dcf2      	bgt.n	800865a <_printf_i+0x21e>
 8008674:	e7eb      	b.n	800864e <_printf_i+0x212>
 8008676:	2500      	movs	r5, #0
 8008678:	f104 0619 	add.w	r6, r4, #25
 800867c:	e7f5      	b.n	800866a <_printf_i+0x22e>
 800867e:	bf00      	nop
 8008680:	08008b89 	.word	0x08008b89
 8008684:	08008b9a 	.word	0x08008b9a

08008688 <memcpy>:
 8008688:	440a      	add	r2, r1
 800868a:	4291      	cmp	r1, r2
 800868c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008690:	d100      	bne.n	8008694 <memcpy+0xc>
 8008692:	4770      	bx	lr
 8008694:	b510      	push	{r4, lr}
 8008696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800869a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800869e:	4291      	cmp	r1, r2
 80086a0:	d1f9      	bne.n	8008696 <memcpy+0xe>
 80086a2:	bd10      	pop	{r4, pc}

080086a4 <memmove>:
 80086a4:	4288      	cmp	r0, r1
 80086a6:	b510      	push	{r4, lr}
 80086a8:	eb01 0402 	add.w	r4, r1, r2
 80086ac:	d902      	bls.n	80086b4 <memmove+0x10>
 80086ae:	4284      	cmp	r4, r0
 80086b0:	4623      	mov	r3, r4
 80086b2:	d807      	bhi.n	80086c4 <memmove+0x20>
 80086b4:	1e43      	subs	r3, r0, #1
 80086b6:	42a1      	cmp	r1, r4
 80086b8:	d008      	beq.n	80086cc <memmove+0x28>
 80086ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086c2:	e7f8      	b.n	80086b6 <memmove+0x12>
 80086c4:	4402      	add	r2, r0
 80086c6:	4601      	mov	r1, r0
 80086c8:	428a      	cmp	r2, r1
 80086ca:	d100      	bne.n	80086ce <memmove+0x2a>
 80086cc:	bd10      	pop	{r4, pc}
 80086ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086d6:	e7f7      	b.n	80086c8 <memmove+0x24>

080086d8 <_free_r>:
 80086d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086da:	2900      	cmp	r1, #0
 80086dc:	d044      	beq.n	8008768 <_free_r+0x90>
 80086de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086e2:	9001      	str	r0, [sp, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f1a1 0404 	sub.w	r4, r1, #4
 80086ea:	bfb8      	it	lt
 80086ec:	18e4      	addlt	r4, r4, r3
 80086ee:	f000 f913 	bl	8008918 <__malloc_lock>
 80086f2:	4a1e      	ldr	r2, [pc, #120]	; (800876c <_free_r+0x94>)
 80086f4:	9801      	ldr	r0, [sp, #4]
 80086f6:	6813      	ldr	r3, [r2, #0]
 80086f8:	b933      	cbnz	r3, 8008708 <_free_r+0x30>
 80086fa:	6063      	str	r3, [r4, #4]
 80086fc:	6014      	str	r4, [r2, #0]
 80086fe:	b003      	add	sp, #12
 8008700:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008704:	f000 b90e 	b.w	8008924 <__malloc_unlock>
 8008708:	42a3      	cmp	r3, r4
 800870a:	d908      	bls.n	800871e <_free_r+0x46>
 800870c:	6825      	ldr	r5, [r4, #0]
 800870e:	1961      	adds	r1, r4, r5
 8008710:	428b      	cmp	r3, r1
 8008712:	bf01      	itttt	eq
 8008714:	6819      	ldreq	r1, [r3, #0]
 8008716:	685b      	ldreq	r3, [r3, #4]
 8008718:	1949      	addeq	r1, r1, r5
 800871a:	6021      	streq	r1, [r4, #0]
 800871c:	e7ed      	b.n	80086fa <_free_r+0x22>
 800871e:	461a      	mov	r2, r3
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	b10b      	cbz	r3, 8008728 <_free_r+0x50>
 8008724:	42a3      	cmp	r3, r4
 8008726:	d9fa      	bls.n	800871e <_free_r+0x46>
 8008728:	6811      	ldr	r1, [r2, #0]
 800872a:	1855      	adds	r5, r2, r1
 800872c:	42a5      	cmp	r5, r4
 800872e:	d10b      	bne.n	8008748 <_free_r+0x70>
 8008730:	6824      	ldr	r4, [r4, #0]
 8008732:	4421      	add	r1, r4
 8008734:	1854      	adds	r4, r2, r1
 8008736:	42a3      	cmp	r3, r4
 8008738:	6011      	str	r1, [r2, #0]
 800873a:	d1e0      	bne.n	80086fe <_free_r+0x26>
 800873c:	681c      	ldr	r4, [r3, #0]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	6053      	str	r3, [r2, #4]
 8008742:	4421      	add	r1, r4
 8008744:	6011      	str	r1, [r2, #0]
 8008746:	e7da      	b.n	80086fe <_free_r+0x26>
 8008748:	d902      	bls.n	8008750 <_free_r+0x78>
 800874a:	230c      	movs	r3, #12
 800874c:	6003      	str	r3, [r0, #0]
 800874e:	e7d6      	b.n	80086fe <_free_r+0x26>
 8008750:	6825      	ldr	r5, [r4, #0]
 8008752:	1961      	adds	r1, r4, r5
 8008754:	428b      	cmp	r3, r1
 8008756:	bf04      	itt	eq
 8008758:	6819      	ldreq	r1, [r3, #0]
 800875a:	685b      	ldreq	r3, [r3, #4]
 800875c:	6063      	str	r3, [r4, #4]
 800875e:	bf04      	itt	eq
 8008760:	1949      	addeq	r1, r1, r5
 8008762:	6021      	streq	r1, [r4, #0]
 8008764:	6054      	str	r4, [r2, #4]
 8008766:	e7ca      	b.n	80086fe <_free_r+0x26>
 8008768:	b003      	add	sp, #12
 800876a:	bd30      	pop	{r4, r5, pc}
 800876c:	20000f24 	.word	0x20000f24

08008770 <sbrk_aligned>:
 8008770:	b570      	push	{r4, r5, r6, lr}
 8008772:	4e0e      	ldr	r6, [pc, #56]	; (80087ac <sbrk_aligned+0x3c>)
 8008774:	460c      	mov	r4, r1
 8008776:	6831      	ldr	r1, [r6, #0]
 8008778:	4605      	mov	r5, r0
 800877a:	b911      	cbnz	r1, 8008782 <sbrk_aligned+0x12>
 800877c:	f000 f8bc 	bl	80088f8 <_sbrk_r>
 8008780:	6030      	str	r0, [r6, #0]
 8008782:	4621      	mov	r1, r4
 8008784:	4628      	mov	r0, r5
 8008786:	f000 f8b7 	bl	80088f8 <_sbrk_r>
 800878a:	1c43      	adds	r3, r0, #1
 800878c:	d00a      	beq.n	80087a4 <sbrk_aligned+0x34>
 800878e:	1cc4      	adds	r4, r0, #3
 8008790:	f024 0403 	bic.w	r4, r4, #3
 8008794:	42a0      	cmp	r0, r4
 8008796:	d007      	beq.n	80087a8 <sbrk_aligned+0x38>
 8008798:	1a21      	subs	r1, r4, r0
 800879a:	4628      	mov	r0, r5
 800879c:	f000 f8ac 	bl	80088f8 <_sbrk_r>
 80087a0:	3001      	adds	r0, #1
 80087a2:	d101      	bne.n	80087a8 <sbrk_aligned+0x38>
 80087a4:	f04f 34ff 	mov.w	r4, #4294967295
 80087a8:	4620      	mov	r0, r4
 80087aa:	bd70      	pop	{r4, r5, r6, pc}
 80087ac:	20000f28 	.word	0x20000f28

080087b0 <_malloc_r>:
 80087b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b4:	1ccd      	adds	r5, r1, #3
 80087b6:	f025 0503 	bic.w	r5, r5, #3
 80087ba:	3508      	adds	r5, #8
 80087bc:	2d0c      	cmp	r5, #12
 80087be:	bf38      	it	cc
 80087c0:	250c      	movcc	r5, #12
 80087c2:	2d00      	cmp	r5, #0
 80087c4:	4607      	mov	r7, r0
 80087c6:	db01      	blt.n	80087cc <_malloc_r+0x1c>
 80087c8:	42a9      	cmp	r1, r5
 80087ca:	d905      	bls.n	80087d8 <_malloc_r+0x28>
 80087cc:	230c      	movs	r3, #12
 80087ce:	603b      	str	r3, [r7, #0]
 80087d0:	2600      	movs	r6, #0
 80087d2:	4630      	mov	r0, r6
 80087d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087d8:	4e2e      	ldr	r6, [pc, #184]	; (8008894 <_malloc_r+0xe4>)
 80087da:	f000 f89d 	bl	8008918 <__malloc_lock>
 80087de:	6833      	ldr	r3, [r6, #0]
 80087e0:	461c      	mov	r4, r3
 80087e2:	bb34      	cbnz	r4, 8008832 <_malloc_r+0x82>
 80087e4:	4629      	mov	r1, r5
 80087e6:	4638      	mov	r0, r7
 80087e8:	f7ff ffc2 	bl	8008770 <sbrk_aligned>
 80087ec:	1c43      	adds	r3, r0, #1
 80087ee:	4604      	mov	r4, r0
 80087f0:	d14d      	bne.n	800888e <_malloc_r+0xde>
 80087f2:	6834      	ldr	r4, [r6, #0]
 80087f4:	4626      	mov	r6, r4
 80087f6:	2e00      	cmp	r6, #0
 80087f8:	d140      	bne.n	800887c <_malloc_r+0xcc>
 80087fa:	6823      	ldr	r3, [r4, #0]
 80087fc:	4631      	mov	r1, r6
 80087fe:	4638      	mov	r0, r7
 8008800:	eb04 0803 	add.w	r8, r4, r3
 8008804:	f000 f878 	bl	80088f8 <_sbrk_r>
 8008808:	4580      	cmp	r8, r0
 800880a:	d13a      	bne.n	8008882 <_malloc_r+0xd2>
 800880c:	6821      	ldr	r1, [r4, #0]
 800880e:	3503      	adds	r5, #3
 8008810:	1a6d      	subs	r5, r5, r1
 8008812:	f025 0503 	bic.w	r5, r5, #3
 8008816:	3508      	adds	r5, #8
 8008818:	2d0c      	cmp	r5, #12
 800881a:	bf38      	it	cc
 800881c:	250c      	movcc	r5, #12
 800881e:	4629      	mov	r1, r5
 8008820:	4638      	mov	r0, r7
 8008822:	f7ff ffa5 	bl	8008770 <sbrk_aligned>
 8008826:	3001      	adds	r0, #1
 8008828:	d02b      	beq.n	8008882 <_malloc_r+0xd2>
 800882a:	6823      	ldr	r3, [r4, #0]
 800882c:	442b      	add	r3, r5
 800882e:	6023      	str	r3, [r4, #0]
 8008830:	e00e      	b.n	8008850 <_malloc_r+0xa0>
 8008832:	6822      	ldr	r2, [r4, #0]
 8008834:	1b52      	subs	r2, r2, r5
 8008836:	d41e      	bmi.n	8008876 <_malloc_r+0xc6>
 8008838:	2a0b      	cmp	r2, #11
 800883a:	d916      	bls.n	800886a <_malloc_r+0xba>
 800883c:	1961      	adds	r1, r4, r5
 800883e:	42a3      	cmp	r3, r4
 8008840:	6025      	str	r5, [r4, #0]
 8008842:	bf18      	it	ne
 8008844:	6059      	strne	r1, [r3, #4]
 8008846:	6863      	ldr	r3, [r4, #4]
 8008848:	bf08      	it	eq
 800884a:	6031      	streq	r1, [r6, #0]
 800884c:	5162      	str	r2, [r4, r5]
 800884e:	604b      	str	r3, [r1, #4]
 8008850:	4638      	mov	r0, r7
 8008852:	f104 060b 	add.w	r6, r4, #11
 8008856:	f000 f865 	bl	8008924 <__malloc_unlock>
 800885a:	f026 0607 	bic.w	r6, r6, #7
 800885e:	1d23      	adds	r3, r4, #4
 8008860:	1af2      	subs	r2, r6, r3
 8008862:	d0b6      	beq.n	80087d2 <_malloc_r+0x22>
 8008864:	1b9b      	subs	r3, r3, r6
 8008866:	50a3      	str	r3, [r4, r2]
 8008868:	e7b3      	b.n	80087d2 <_malloc_r+0x22>
 800886a:	6862      	ldr	r2, [r4, #4]
 800886c:	42a3      	cmp	r3, r4
 800886e:	bf0c      	ite	eq
 8008870:	6032      	streq	r2, [r6, #0]
 8008872:	605a      	strne	r2, [r3, #4]
 8008874:	e7ec      	b.n	8008850 <_malloc_r+0xa0>
 8008876:	4623      	mov	r3, r4
 8008878:	6864      	ldr	r4, [r4, #4]
 800887a:	e7b2      	b.n	80087e2 <_malloc_r+0x32>
 800887c:	4634      	mov	r4, r6
 800887e:	6876      	ldr	r6, [r6, #4]
 8008880:	e7b9      	b.n	80087f6 <_malloc_r+0x46>
 8008882:	230c      	movs	r3, #12
 8008884:	603b      	str	r3, [r7, #0]
 8008886:	4638      	mov	r0, r7
 8008888:	f000 f84c 	bl	8008924 <__malloc_unlock>
 800888c:	e7a1      	b.n	80087d2 <_malloc_r+0x22>
 800888e:	6025      	str	r5, [r4, #0]
 8008890:	e7de      	b.n	8008850 <_malloc_r+0xa0>
 8008892:	bf00      	nop
 8008894:	20000f24 	.word	0x20000f24

08008898 <_realloc_r>:
 8008898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800889c:	4680      	mov	r8, r0
 800889e:	4614      	mov	r4, r2
 80088a0:	460e      	mov	r6, r1
 80088a2:	b921      	cbnz	r1, 80088ae <_realloc_r+0x16>
 80088a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088a8:	4611      	mov	r1, r2
 80088aa:	f7ff bf81 	b.w	80087b0 <_malloc_r>
 80088ae:	b92a      	cbnz	r2, 80088bc <_realloc_r+0x24>
 80088b0:	f7ff ff12 	bl	80086d8 <_free_r>
 80088b4:	4625      	mov	r5, r4
 80088b6:	4628      	mov	r0, r5
 80088b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088bc:	f000 f838 	bl	8008930 <_malloc_usable_size_r>
 80088c0:	4284      	cmp	r4, r0
 80088c2:	4607      	mov	r7, r0
 80088c4:	d802      	bhi.n	80088cc <_realloc_r+0x34>
 80088c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088ca:	d812      	bhi.n	80088f2 <_realloc_r+0x5a>
 80088cc:	4621      	mov	r1, r4
 80088ce:	4640      	mov	r0, r8
 80088d0:	f7ff ff6e 	bl	80087b0 <_malloc_r>
 80088d4:	4605      	mov	r5, r0
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d0ed      	beq.n	80088b6 <_realloc_r+0x1e>
 80088da:	42bc      	cmp	r4, r7
 80088dc:	4622      	mov	r2, r4
 80088de:	4631      	mov	r1, r6
 80088e0:	bf28      	it	cs
 80088e2:	463a      	movcs	r2, r7
 80088e4:	f7ff fed0 	bl	8008688 <memcpy>
 80088e8:	4631      	mov	r1, r6
 80088ea:	4640      	mov	r0, r8
 80088ec:	f7ff fef4 	bl	80086d8 <_free_r>
 80088f0:	e7e1      	b.n	80088b6 <_realloc_r+0x1e>
 80088f2:	4635      	mov	r5, r6
 80088f4:	e7df      	b.n	80088b6 <_realloc_r+0x1e>
	...

080088f8 <_sbrk_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	4d06      	ldr	r5, [pc, #24]	; (8008914 <_sbrk_r+0x1c>)
 80088fc:	2300      	movs	r3, #0
 80088fe:	4604      	mov	r4, r0
 8008900:	4608      	mov	r0, r1
 8008902:	602b      	str	r3, [r5, #0]
 8008904:	f7f8 fef8 	bl	80016f8 <_sbrk>
 8008908:	1c43      	adds	r3, r0, #1
 800890a:	d102      	bne.n	8008912 <_sbrk_r+0x1a>
 800890c:	682b      	ldr	r3, [r5, #0]
 800890e:	b103      	cbz	r3, 8008912 <_sbrk_r+0x1a>
 8008910:	6023      	str	r3, [r4, #0]
 8008912:	bd38      	pop	{r3, r4, r5, pc}
 8008914:	20000f2c 	.word	0x20000f2c

08008918 <__malloc_lock>:
 8008918:	4801      	ldr	r0, [pc, #4]	; (8008920 <__malloc_lock+0x8>)
 800891a:	f000 b811 	b.w	8008940 <__retarget_lock_acquire_recursive>
 800891e:	bf00      	nop
 8008920:	20000f30 	.word	0x20000f30

08008924 <__malloc_unlock>:
 8008924:	4801      	ldr	r0, [pc, #4]	; (800892c <__malloc_unlock+0x8>)
 8008926:	f000 b80c 	b.w	8008942 <__retarget_lock_release_recursive>
 800892a:	bf00      	nop
 800892c:	20000f30 	.word	0x20000f30

08008930 <_malloc_usable_size_r>:
 8008930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008934:	1f18      	subs	r0, r3, #4
 8008936:	2b00      	cmp	r3, #0
 8008938:	bfbc      	itt	lt
 800893a:	580b      	ldrlt	r3, [r1, r0]
 800893c:	18c0      	addlt	r0, r0, r3
 800893e:	4770      	bx	lr

08008940 <__retarget_lock_acquire_recursive>:
 8008940:	4770      	bx	lr

08008942 <__retarget_lock_release_recursive>:
 8008942:	4770      	bx	lr

08008944 <_init>:
 8008944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008946:	bf00      	nop
 8008948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800894a:	bc08      	pop	{r3}
 800894c:	469e      	mov	lr, r3
 800894e:	4770      	bx	lr

08008950 <_fini>:
 8008950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008952:	bf00      	nop
 8008954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008956:	bc08      	pop	{r3}
 8008958:	469e      	mov	lr, r3
 800895a:	4770      	bx	lr


3DLED_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a194  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  0800a334  0800a334  0001a334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa84  0800aa84  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa84  0800aa84  0001aa84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa8c  0800aa8c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa8c  0800aa8c  0001aa8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa90  0800aa90  0001aa90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800aa94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007258  20000088  0800ab1c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200072e0  0800ab1c  000272e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015efc  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ef  00000000  00000000  00035fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  000390a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001200  00000000  00000000  0003a3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190c8  00000000  00000000  0003b5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000188d9  00000000  00000000  000546a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091fe0  00000000  00000000  0006cf79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fef59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005500  00000000  00000000  000fefac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a31c 	.word	0x0800a31c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	0800a31c 	.word	0x0800a31c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	b0c5      	sub	sp, #276	; 0x114
 8000598:	af02      	add	r7, sp, #8
    /* USER CODE BEGIN 1 */

    // Layers configuration


    Layer1.timer = &htim1;
 800059a:	4bb1      	ldr	r3, [pc, #708]	; (8000860 <main+0x2cc>)
 800059c:	4ab1      	ldr	r2, [pc, #708]	; (8000864 <main+0x2d0>)
 800059e:	601a      	str	r2, [r3, #0]
    Layer1.dma = &hdma_tim1_ch1;
 80005a0:	4baf      	ldr	r3, [pc, #700]	; (8000860 <main+0x2cc>)
 80005a2:	4ab1      	ldr	r2, [pc, #708]	; (8000868 <main+0x2d4>)
 80005a4:	605a      	str	r2, [r3, #4]
    Layer1.channel = TIM_CHANNEL_1;
 80005a6:	4bae      	ldr	r3, [pc, #696]	; (8000860 <main+0x2cc>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	721a      	strb	r2, [r3, #8]

    Layer2.timer = &htim5;
 80005ac:	4baf      	ldr	r3, [pc, #700]	; (800086c <main+0x2d8>)
 80005ae:	4ab0      	ldr	r2, [pc, #704]	; (8000870 <main+0x2dc>)
 80005b0:	601a      	str	r2, [r3, #0]
    Layer2.dma = &hdma_tim5_ch1;
 80005b2:	4bae      	ldr	r3, [pc, #696]	; (800086c <main+0x2d8>)
 80005b4:	4aaf      	ldr	r2, [pc, #700]	; (8000874 <main+0x2e0>)
 80005b6:	605a      	str	r2, [r3, #4]
    Layer2.channel = TIM_CHANNEL_4;
 80005b8:	4bac      	ldr	r3, [pc, #688]	; (800086c <main+0x2d8>)
 80005ba:	220c      	movs	r2, #12
 80005bc:	721a      	strb	r2, [r3, #8]
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80005be:	f002 f991 	bl	80028e4 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80005c2:	f000 f96b 	bl	800089c <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80005c6:	f000 fca3 	bl	8000f10 <MX_GPIO_Init>
    MX_DMA_Init();
 80005ca:	f000 fc6b 	bl	8000ea4 <MX_DMA_Init>
    MX_TIM1_Init();
 80005ce:	f000 fa3d 	bl	8000a4c <MX_TIM1_Init>
    MX_TIM5_Init();
 80005d2:	f000 fbc7 	bl	8000d64 <MX_TIM5_Init>
    MX_FATFS_Init();
 80005d6:	f005 fe0f 	bl	80061f8 <MX_FATFS_Init>
    MX_SPI1_Init();
 80005da:	f000 f9cb 	bl	8000974 <MX_SPI1_Init>
    MX_USART2_UART_Init();
 80005de:	f000 fc37 	bl	8000e50 <MX_USART2_UART_Init>
    MX_SPI3_Init();
 80005e2:	f000 f9fd 	bl	80009e0 <MX_SPI3_Init>
    MX_TIM3_Init();
 80005e6:	f000 fad1 	bl	8000b8c <MX_TIM3_Init>
    MX_TIM4_Init();
 80005ea:	f000 fb45 	bl	8000c78 <MX_TIM4_Init>
    /* USER CODE BEGIN 2 */
    // GPIO configuration
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80005ee:	2007      	movs	r0, #7
 80005f0:	f002 fb05 	bl	8002bfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80005f4:	2008      	movs	r0, #8
 80005f6:	f002 fb02 	bl	8002bfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80005fa:	2009      	movs	r0, #9
 80005fc:	f002 faff 	bl	8002bfe <HAL_NVIC_EnableIRQ>

    // LCD initialization
    PCD8544_Init(0x30);
 8000600:	2030      	movs	r0, #48	; 0x30
 8000602:	f001 fcc9 	bl	8001f98 <PCD8544_Init>
    PCD8544_GotoXY(8, 21);
 8000606:	2115      	movs	r1, #21
 8000608:	2008      	movs	r0, #8
 800060a:	f001 fe55 	bl	80022b8 <PCD8544_GotoXY>
    PCD8544_Puts("3D_LED_CUBE", PCD8544_Pixel_Set, PCD8544_FontSize_5x7);
 800060e:	2200      	movs	r2, #0
 8000610:	2101      	movs	r1, #1
 8000612:	4899      	ldr	r0, [pc, #612]	; (8000878 <main+0x2e4>)
 8000614:	f001 ff12 	bl	800243c <PCD8544_Puts>
    PCD8544_Refresh();
 8000618:	f001 fdb0 	bl	800217c <PCD8544_Refresh>
    HAL_Delay(2000);
 800061c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000620:	f002 f9d2 	bl	80029c8 <HAL_Delay>

    // SD Card initialization
    ret_status result = STATUS_NULL;
 8000624:	2300      	movs	r3, #0
 8000626:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
    result = sd_card_init();
 800062a:	f000 ff55 	bl	80014d8 <sd_card_init>
 800062e:	4603      	mov	r3, r0
 8000630:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
    if (STATUS_OK != result) {
 8000634:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8000638:	2b01      	cmp	r3, #1
 800063a:	d000      	beq.n	800063e <main+0xaa>
//        lcd_clear();
//        lcd_draw_text(0, 0,
//                "Error!!! problem with mount SD card. Try re-attach card and press RESET button",0);
//        lcd_copy();
        while (1);
 800063c:	e7fe      	b.n	800063c <main+0xa8>
    }

    char path[256];

    strcpy(path, "0:/");
 800063e:	463b      	mov	r3, r7
 8000640:	4a8e      	ldr	r2, [pc, #568]	; (800087c <main+0x2e8>)
 8000642:	601a      	str	r2, [r3, #0]
    myprintf("Starting scan dir\n");
 8000644:	488e      	ldr	r0, [pc, #568]	; (8000880 <main+0x2ec>)
 8000646:	f000 ff21 	bl	800148c <myprintf>
    result = sd_card_scan_file((char*) path, (char*) buffor_dirs, &size_dirs);
 800064a:	463b      	mov	r3, r7
 800064c:	4a8d      	ldr	r2, [pc, #564]	; (8000884 <main+0x2f0>)
 800064e:	498e      	ldr	r1, [pc, #568]	; (8000888 <main+0x2f4>)
 8000650:	4618      	mov	r0, r3
 8000652:	f000 ffa1 	bl	8001598 <sd_card_scan_file>
 8000656:	4603      	mov	r3, r0
 8000658:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
    if (STATUS_OK != result) {
 800065c:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8000660:	2b01      	cmp	r3, #1
 8000662:	d002      	beq.n	800066a <main+0xd6>
//        lcd_clear();
//        lcd_draw_text(0, 0,
//                "Error!!!      problem with scan file in SD card        Press RESET button",0);
//        lcd_copy();
        sd_card_close();
 8000664:	f001 f822 	bl	80016ac <sd_card_close>
        while (1);
 8000668:	e7fe      	b.n	8000668 <main+0xd4>
    }

    while(1){
        HAL_Delay(500);
 800066a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800066e:	f002 f9ab 	bl	80029c8 <HAL_Delay>
        handleMenu();
 8000672:	f000 fd01 	bl	8001078 <handleMenu>
        if (playState)
 8000676:	4b85      	ldr	r3, [pc, #532]	; (800088c <main+0x2f8>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d100      	bne.n	8000680 <main+0xec>
        HAL_Delay(500);
 800067e:	e7f4      	b.n	800066a <main+0xd6>
            break;
 8000680:	bf00      	nop
    }


    myprintf("Starting read data\n");
 8000682:	4883      	ldr	r0, [pc, #524]	; (8000890 <main+0x2fc>)
 8000684:	f000 ff02 	bl	800148c <myprintf>
    result = sd_card_read_data((uint8_t*) walk_array);
 8000688:	4882      	ldr	r0, [pc, #520]	; (8000894 <main+0x300>)
 800068a:	f001 f825 	bl	80016d8 <sd_card_read_data>
 800068e:	4603      	mov	r3, r0
 8000690:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101

    sd_card_close();
 8000694:	f001 f80a 	bl	80016ac <sd_card_close>

    if (STATUS_OK != result) {
 8000698:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 800069c:	2b01      	cmp	r3, #1
 800069e:	d000      	beq.n	80006a2 <main+0x10e>
//        lcd_clear();
//        lcd_draw_text(0, 0,
//                "Error!!!      problem with read data from SD card        Press RESET button",0);
//        lcd_copy();
        while (1);
 80006a0:	e7fe      	b.n	80006a0 <main+0x10c>
    }
    PCD8544_GotoXY(15, 38);
 80006a2:	2126      	movs	r1, #38	; 0x26
 80006a4:	200f      	movs	r0, #15
 80006a6:	f001 fe07 	bl	80022b8 <PCD8544_GotoXY>
    PCD8544_Puts("Playing...", PCD8544_Pixel_Set, PCD8544_FontSize_5x7);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2101      	movs	r1, #1
 80006ae:	487a      	ldr	r0, [pc, #488]	; (8000898 <main+0x304>)
 80006b0:	f001 fec4 	bl	800243c <PCD8544_Puts>
    PCD8544_Refresh();
 80006b4:	f001 fd62 	bl	800217c <PCD8544_Refresh>
//    for (size_t j = 0; j < 10; j++){
//        myprintf("\nIMAGE_%d:\n", j);
//        for (size_t i = 0; i < 4; i++)
//            myprintf("{%d, %d, %d},", walk_array[j][i][0], walk_array[j][i][1], walk_array[j][i][2]);
//    }
    uint8_t odd = 1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
    uint8_t index = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
    uint8_t counter = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
    uint8_t number_of_animation = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
    while (1) {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */

        for (uint16_t i = 0; i < 256; i++) {
 80006d0:	2300      	movs	r3, #0
 80006d2:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
 80006d6:	e0a0      	b.n	800081a <main+0x286>
            if (i % 16 == 0) {
 80006d8:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 80006dc:	f003 030f 	and.w	r3, r3, #15
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d10a      	bne.n	80006fc <main+0x168>
                odd ^= 1;
 80006e6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80006ea:	f083 0301 	eor.w	r3, r3, #1
 80006ee:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
                counter++;
 80006f2:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80006f6:	3301      	adds	r3, #1
 80006f8:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
            }
            if (odd) {
 80006fc:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8000700:	2b00      	cmp	r3, #0
 8000702:	d00f      	beq.n	8000724 <main+0x190>
                index = (counter * 16 - 1) - (i % 16);
 8000704:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8000708:	011b      	lsls	r3, r3, #4
 800070a:	b2da      	uxtb	r2, r3
 800070c:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8000710:	b2db      	uxtb	r3, r3
 8000712:	f003 030f 	and.w	r3, r3, #15
 8000716:	b2db      	uxtb	r3, r3
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	b2db      	uxtb	r3, r3
 800071c:	3b01      	subs	r3, #1
 800071e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8000722:	e003      	b.n	800072c <main+0x198>
            } else {
                index = i;
 8000724:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8000728:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
            }

            led_set_RGB(&Layer1, i, walk_array[number_of_animation][index][0],
 800072c:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8000730:	b2d8      	uxtb	r0, r3
 8000732:	f897 1104 	ldrb.w	r1, [r7, #260]	; 0x104
 8000736:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800073a:	4c56      	ldr	r4, [pc, #344]	; (8000894 <main+0x300>)
 800073c:	461a      	mov	r2, r3
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	441a      	add	r2, r3
 8000742:	460b      	mov	r3, r1
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	440b      	add	r3, r1
 8000748:	021b      	lsls	r3, r3, #8
 800074a:	4413      	add	r3, r2
 800074c:	4423      	add	r3, r4
 800074e:	781c      	ldrb	r4, [r3, #0]
 8000750:	f897 1104 	ldrb.w	r1, [r7, #260]	; 0x104
 8000754:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000758:	4d4e      	ldr	r5, [pc, #312]	; (8000894 <main+0x300>)
 800075a:	461a      	mov	r2, r3
 800075c:	0052      	lsls	r2, r2, #1
 800075e:	441a      	add	r2, r3
 8000760:	460b      	mov	r3, r1
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	440b      	add	r3, r1
 8000766:	021b      	lsls	r3, r3, #8
 8000768:	4413      	add	r3, r2
 800076a:	442b      	add	r3, r5
 800076c:	3301      	adds	r3, #1
 800076e:	781d      	ldrb	r5, [r3, #0]
 8000770:	f897 1104 	ldrb.w	r1, [r7, #260]	; 0x104
 8000774:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000778:	4e46      	ldr	r6, [pc, #280]	; (8000894 <main+0x300>)
 800077a:	461a      	mov	r2, r3
 800077c:	0052      	lsls	r2, r2, #1
 800077e:	441a      	add	r2, r3
 8000780:	460b      	mov	r3, r1
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	440b      	add	r3, r1
 8000786:	021b      	lsls	r3, r3, #8
 8000788:	4413      	add	r3, r2
 800078a:	4433      	add	r3, r6
 800078c:	3302      	adds	r3, #2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	462b      	mov	r3, r5
 8000794:	4622      	mov	r2, r4
 8000796:	4601      	mov	r1, r0
 8000798:	4831      	ldr	r0, [pc, #196]	; (8000860 <main+0x2cc>)
 800079a:	f001 ff74 	bl	8002686 <led_set_RGB>
                    walk_array[number_of_animation][index][1],
                    walk_array[number_of_animation][index][2]);
            led_set_RGB(&Layer2, i, walk_array[number_of_animation][index][0],
 800079e:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 80007a2:	b2d8      	uxtb	r0, r3
 80007a4:	f897 1104 	ldrb.w	r1, [r7, #260]	; 0x104
 80007a8:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80007ac:	4c39      	ldr	r4, [pc, #228]	; (8000894 <main+0x300>)
 80007ae:	461a      	mov	r2, r3
 80007b0:	0052      	lsls	r2, r2, #1
 80007b2:	441a      	add	r2, r3
 80007b4:	460b      	mov	r3, r1
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	440b      	add	r3, r1
 80007ba:	021b      	lsls	r3, r3, #8
 80007bc:	4413      	add	r3, r2
 80007be:	4423      	add	r3, r4
 80007c0:	781c      	ldrb	r4, [r3, #0]
 80007c2:	f897 1104 	ldrb.w	r1, [r7, #260]	; 0x104
 80007c6:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80007ca:	4d32      	ldr	r5, [pc, #200]	; (8000894 <main+0x300>)
 80007cc:	461a      	mov	r2, r3
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	441a      	add	r2, r3
 80007d2:	460b      	mov	r3, r1
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	440b      	add	r3, r1
 80007d8:	021b      	lsls	r3, r3, #8
 80007da:	4413      	add	r3, r2
 80007dc:	442b      	add	r3, r5
 80007de:	3301      	adds	r3, #1
 80007e0:	781d      	ldrb	r5, [r3, #0]
 80007e2:	f897 1104 	ldrb.w	r1, [r7, #260]	; 0x104
 80007e6:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80007ea:	4e2a      	ldr	r6, [pc, #168]	; (8000894 <main+0x300>)
 80007ec:	461a      	mov	r2, r3
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	441a      	add	r2, r3
 80007f2:	460b      	mov	r3, r1
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	440b      	add	r3, r1
 80007f8:	021b      	lsls	r3, r3, #8
 80007fa:	4413      	add	r3, r2
 80007fc:	4433      	add	r3, r6
 80007fe:	3302      	adds	r3, #2
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	462b      	mov	r3, r5
 8000806:	4622      	mov	r2, r4
 8000808:	4601      	mov	r1, r0
 800080a:	4818      	ldr	r0, [pc, #96]	; (800086c <main+0x2d8>)
 800080c:	f001 ff3b 	bl	8002686 <led_set_RGB>
        for (uint16_t i = 0; i < 256; i++) {
 8000810:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8000814:	3301      	adds	r3, #1
 8000816:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
 800081a:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 800081e:	2bff      	cmp	r3, #255	; 0xff
 8000820:	f67f af5a 	bls.w	80006d8 <main+0x144>
//			led_set_RGB(&Layer4, i, walk_array[number_of_animation][index][0],
//					walk_array[number_of_animation][index][1],
//					walk_array[number_of_animation][index][2]);

        }
        if (++number_of_animation == sizeof(walk_array) / sizeof(walk_array[0]))
 8000824:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8000828:	3301      	adds	r3, #1
 800082a:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
 800082e:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8000832:	2b20      	cmp	r3, #32
 8000834:	d102      	bne.n	800083c <main+0x2a8>
            number_of_animation = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104

        led_render(&Layer1);
 800083c:	4808      	ldr	r0, [pc, #32]	; (8000860 <main+0x2cc>)
 800083e:	f001 ff59 	bl	80026f4 <led_render>
        HAL_Delay(10);
 8000842:	200a      	movs	r0, #10
 8000844:	f002 f8c0 	bl	80029c8 <HAL_Delay>
        led_render(&Layer2);
 8000848:	4808      	ldr	r0, [pc, #32]	; (800086c <main+0x2d8>)
 800084a:	f001 ff53 	bl	80026f4 <led_render>
        HAL_Delay(10);
 800084e:	200a      	movs	r0, #10
 8000850:	f002 f8ba 	bl	80029c8 <HAL_Delay>
//		led_render(&Layer3);
//		HAL_Delay(10);
//		led_render(&Layer4);
        HAL_Delay(500);
 8000854:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000858:	f002 f8b6 	bl	80029c8 <HAL_Delay>
        for (uint16_t i = 0; i < 256; i++) {
 800085c:	e738      	b.n	80006d0 <main+0x13c>
 800085e:	bf00      	nop
 8000860:	20006424 	.word	0x20006424
 8000864:	20000154 	.word	0x20000154
 8000868:	20000274 	.word	0x20000274
 800086c:	20006794 	.word	0x20006794
 8000870:	2000022c 	.word	0x2000022c
 8000874:	200002d4 	.word	0x200002d4
 8000878:	0800a334 	.word	0x0800a334
 800087c:	002f3a30 	.word	0x002f3a30
 8000880:	0800a340 	.word	0x0800a340
 8000884:	2000041c 	.word	0x2000041c
 8000888:	2000037c 	.word	0x2000037c
 800088c:	20006420 	.word	0x20006420
 8000890:	0800a354 	.word	0x0800a354
 8000894:	20000420 	.word	0x20000420
 8000898:	0800a368 	.word	0x0800a368

0800089c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b094      	sub	sp, #80	; 0x50
 80008a0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80008a2:	f107 0320 	add.w	r3, r7, #32
 80008a6:	2230      	movs	r2, #48	; 0x30
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f009 f808 	bl	80098c0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	4b29      	ldr	r3, [pc, #164]	; (800096c <SystemClock_Config+0xd0>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	4a28      	ldr	r2, [pc, #160]	; (800096c <SystemClock_Config+0xd0>)
 80008ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ce:	6413      	str	r3, [r2, #64]	; 0x40
 80008d0:	4b26      	ldr	r3, [pc, #152]	; (800096c <SystemClock_Config+0xd0>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	4b23      	ldr	r3, [pc, #140]	; (8000970 <SystemClock_Config+0xd4>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008e8:	4a21      	ldr	r2, [pc, #132]	; (8000970 <SystemClock_Config+0xd4>)
 80008ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008ee:	6013      	str	r3, [r2, #0]
 80008f0:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <SystemClock_Config+0xd4>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008fc:	2302      	movs	r3, #2
 80008fe:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000900:	2301      	movs	r3, #1
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000904:	2310      	movs	r3, #16
 8000906:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000908:	2302      	movs	r3, #2
 800090a:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800090c:	2300      	movs	r3, #0
 800090e:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8000910:	2308      	movs	r3, #8
 8000912:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 84;
 8000914:	2354      	movs	r3, #84	; 0x54
 8000916:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000918:	2302      	movs	r3, #2
 800091a:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 3;
 800091c:	2303      	movs	r3, #3
 800091e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000920:	f107 0320 	add.w	r3, r7, #32
 8000924:	4618      	mov	r0, r3
 8000926:	f002 fecd 	bl	80036c4 <HAL_RCC_OscConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0x98>
        Error_Handler();
 8000930:	f000 fda6 	bl	8001480 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000934:	230f      	movs	r3, #15
 8000936:	60fb      	str	r3, [r7, #12]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000938:	2302      	movs	r3, #2
 800093a:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000944:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094a:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	2102      	movs	r1, #2
 8000952:	4618      	mov	r0, r3
 8000954:	f003 f92e 	bl	8003bb4 <HAL_RCC_ClockConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0xc6>
        Error_Handler();
 800095e:	f000 fd8f 	bl	8001480 <Error_Handler>
    }
}
 8000962:	bf00      	nop
 8000964:	3750      	adds	r7, #80	; 0x50
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800
 8000970:	40007000 	.word	0x40007000

08000974 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_SPI1_Init+0x64>)
 800097a:	4a18      	ldr	r2, [pc, #96]	; (80009dc <MX_SPI1_Init+0x68>)
 800097c:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <MX_SPI1_Init+0x64>)
 8000980:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000984:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_SPI1_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_SPI1_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_SPI1_Init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_SPI1_Init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_SPI1_Init+0x64>)
 80009a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a4:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_SPI1_Init+0x64>)
 80009a8:	2238      	movs	r2, #56	; 0x38
 80009aa:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <MX_SPI1_Init+0x64>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_SPI1_Init+0x64>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <MX_SPI1_Init+0x64>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_SPI1_Init+0x64>)
 80009c0:	220a      	movs	r2, #10
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_SPI1_Init+0x64>)
 80009c6:	f003 fb15 	bl	8003ff4 <HAL_SPI_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_SPI1_Init+0x60>
        Error_Handler();
 80009d0:	f000 fd56 	bl	8001480 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	200000a4 	.word	0x200000a4
 80009dc:	40013000 	.word	0x40013000

080009e0 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI3_Init 1 */

    /* USER CODE END SPI3_Init 1 */
    /* SPI3 parameter configuration*/
    hspi3.Instance = SPI3;
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_SPI3_Init+0x64>)
 80009e6:	4a18      	ldr	r2, [pc, #96]	; (8000a48 <MX_SPI3_Init+0x68>)
 80009e8:	601a      	str	r2, [r3, #0]
    hspi3.Init.Mode = SPI_MODE_MASTER;
 80009ea:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <MX_SPI3_Init+0x64>)
 80009ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009f0:	605a      	str	r2, [r3, #4]
    hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_SPI3_Init+0x64>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
    hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_SPI3_Init+0x64>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
    hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_SPI3_Init+0x64>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
    hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_SPI3_Init+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	615a      	str	r2, [r3, #20]
    hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_SPI3_Init+0x64>)
 8000a0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a10:	619a      	str	r2, [r3, #24]
    hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_SPI3_Init+0x64>)
 8000a14:	2228      	movs	r2, #40	; 0x28
 8000a16:	61da      	str	r2, [r3, #28]
    hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <MX_SPI3_Init+0x64>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
    hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_SPI3_Init+0x64>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	625a      	str	r2, [r3, #36]	; 0x24
    hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <MX_SPI3_Init+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	629a      	str	r2, [r3, #40]	; 0x28
    hspi3.Init.CRCPolynomial = 10;
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_SPI3_Init+0x64>)
 8000a2c:	220a      	movs	r2, #10
 8000a2e:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_SPI3_Init+0x64>)
 8000a32:	f003 fadf 	bl	8003ff4 <HAL_SPI_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_SPI3_Init+0x60>
        Error_Handler();
 8000a3c:	f000 fd20 	bl	8001480 <Error_Handler>
    }
    /* USER CODE BEGIN SPI3_Init 2 */

    /* USER CODE END SPI3_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200000fc 	.word	0x200000fc
 8000a48:	40003c00 	.word	0x40003c00

08000a4c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b096      	sub	sp, #88	; 0x58
 8000a50:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000a52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
 8000a7a:	615a      	str	r2, [r3, #20]
 8000a7c:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2220      	movs	r2, #32
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f008 ff1b 	bl	80098c0 <memset>

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 8000a8a:	4b3e      	ldr	r3, [pc, #248]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000a8c:	4a3e      	ldr	r2, [pc, #248]	; (8000b88 <MX_TIM1_Init+0x13c>)
 8000a8e:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 0;
 8000a90:	4b3c      	ldr	r3, [pc, #240]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a96:	4b3b      	ldr	r3, [pc, #236]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 104;
 8000a9c:	4b39      	ldr	r3, [pc, #228]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000a9e:	2268      	movs	r2, #104	; 0x68
 8000aa0:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa2:	4b38      	ldr	r3, [pc, #224]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 8000aa8:	4b36      	ldr	r3, [pc, #216]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aae:	4b35      	ldr	r3, [pc, #212]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000ab4:	4833      	ldr	r0, [pc, #204]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000ab6:	f003 fecf 	bl	8004858 <HAL_TIM_Base_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM1_Init+0x78>
        Error_Handler();
 8000ac0:	f000 fcde 	bl	8001480 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac8:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000aca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ace:	4619      	mov	r1, r3
 8000ad0:	482c      	ldr	r0, [pc, #176]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000ad2:	f004 faa1 	bl	8005018 <HAL_TIM_ConfigClockSource>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM1_Init+0x94>
        Error_Handler();
 8000adc:	f000 fcd0 	bl	8001480 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000ae0:	4828      	ldr	r0, [pc, #160]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000ae2:	f003 ff08 	bl	80048f6 <HAL_TIM_PWM_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM1_Init+0xa4>
        Error_Handler();
 8000aec:	f000 fcc8 	bl	8001480 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af0:	2300      	movs	r3, #0
 8000af2:	643b      	str	r3, [r7, #64]	; 0x40
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000af8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000afc:	4619      	mov	r1, r3
 8000afe:	4821      	ldr	r0, [pc, #132]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000b00:	f004 fef8 	bl	80058f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM1_Init+0xc2>
            != HAL_OK) {
        Error_Handler();
 8000b0a:	f000 fcb9 	bl	8001480 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b0e:	2360      	movs	r3, #96	; 0x60
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
    sConfigOC.Pulse = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	633b      	str	r3, [r7, #48]	; 0x30
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	637b      	str	r3, [r7, #52]	; 0x34
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b22:	2300      	movs	r3, #0
 8000b24:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b26:	2300      	movs	r3, #0
 8000b28:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2e:	2200      	movs	r2, #0
 8000b30:	4619      	mov	r1, r3
 8000b32:	4814      	ldr	r0, [pc, #80]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000b34:	f004 f9ae 	bl	8004e94 <HAL_TIM_PWM_ConfigChannel>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM1_Init+0xf6>
            != HAL_OK) {
        Error_Handler();
 8000b3e:	f000 fc9f 	bl	8001480 <Error_Handler>
    }
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.DeadTime = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5a:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
    if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	4619      	mov	r1, r3
 8000b64:	4807      	ldr	r0, [pc, #28]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000b66:	f004 ff33 	bl	80059d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM1_Init+0x128>
            != HAL_OK) {
        Error_Handler();
 8000b70:	f000 fc86 	bl	8001480 <Error_Handler>
    }
    /* USER CODE BEGIN TIM1_Init 2 */

    /* USER CODE END TIM1_Init 2 */
    HAL_TIM_MspPostInit(&htim1);
 8000b74:	4803      	ldr	r0, [pc, #12]	; (8000b84 <MX_TIM1_Init+0x138>)
 8000b76:	f001 f81b 	bl	8001bb0 <HAL_TIM_MspPostInit>

}
 8000b7a:	bf00      	nop
 8000b7c:	3758      	adds	r7, #88	; 0x58
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000154 	.word	0x20000154
 8000b88:	40010000 	.word	0x40010000

08000b8c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08e      	sub	sp, #56	; 0x38
 8000b90:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000b92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ba0:	f107 0320 	add.w	r3, r7, #32
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
 8000bb8:	615a      	str	r2, [r3, #20]
 8000bba:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8000bbc:	4b2c      	ldr	r3, [pc, #176]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000bbe:	4a2d      	ldr	r2, [pc, #180]	; (8000c74 <MX_TIM3_Init+0xe8>)
 8000bc0:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 0;
 8000bc2:	4b2b      	ldr	r3, [pc, #172]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc8:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 104;
 8000bce:	4b28      	ldr	r3, [pc, #160]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000bd0:	2268      	movs	r2, #104	; 0x68
 8000bd2:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd4:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bda:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000be0:	4823      	ldr	r0, [pc, #140]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000be2:	f003 fe39 	bl	8004858 <HAL_TIM_Base_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM3_Init+0x64>
        Error_Handler();
 8000bec:	f000 fc48 	bl	8001480 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000bf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	481c      	ldr	r0, [pc, #112]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000bfe:	f004 fa0b 	bl	8005018 <HAL_TIM_ConfigClockSource>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM3_Init+0x80>
        Error_Handler();
 8000c08:	f000 fc3a 	bl	8001480 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000c0c:	4818      	ldr	r0, [pc, #96]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000c0e:	f003 fe72 	bl	80048f6 <HAL_TIM_PWM_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM3_Init+0x90>
        Error_Handler();
 8000c18:	f000 fc32 	bl	8001480 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000c24:	f107 0320 	add.w	r3, r7, #32
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4811      	ldr	r0, [pc, #68]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000c2c:	f004 fe62 	bl	80058f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM3_Init+0xae>
            != HAL_OK) {
        Error_Handler();
 8000c36:	f000 fc23 	bl	8001480 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c3a:	2360      	movs	r3, #96	; 0x60
 8000c3c:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4807      	ldr	r0, [pc, #28]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000c52:	f004 f91f 	bl	8004e94 <HAL_TIM_PWM_ConfigChannel>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM3_Init+0xd4>
            != HAL_OK) {
        Error_Handler();
 8000c5c:	f000 fc10 	bl	8001480 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
    HAL_TIM_MspPostInit(&htim3);
 8000c60:	4803      	ldr	r0, [pc, #12]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000c62:	f000 ffa5 	bl	8001bb0 <HAL_TIM_MspPostInit>

}
 8000c66:	bf00      	nop
 8000c68:	3738      	adds	r7, #56	; 0x38
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	2000019c 	.word	0x2000019c
 8000c74:	40000400 	.word	0x40000400

08000c78 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08e      	sub	sp, #56	; 0x38
 8000c7c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM4_Init 0 */

    /* USER CODE END TIM4_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000c7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c8c:	f107 0320 	add.w	r3, r7, #32
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
 8000ca4:	615a      	str	r2, [r3, #20]
 8000ca6:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM4_Init 1 */

    /* USER CODE END TIM4_Init 1 */
    htim4.Instance = TIM4;
 8000ca8:	4b2c      	ldr	r3, [pc, #176]	; (8000d5c <MX_TIM4_Init+0xe4>)
 8000caa:	4a2d      	ldr	r2, [pc, #180]	; (8000d60 <MX_TIM4_Init+0xe8>)
 8000cac:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = 0;
 8000cae:	4b2b      	ldr	r3, [pc, #172]	; (8000d5c <MX_TIM4_Init+0xe4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb4:	4b29      	ldr	r3, [pc, #164]	; (8000d5c <MX_TIM4_Init+0xe4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = 104;
 8000cba:	4b28      	ldr	r3, [pc, #160]	; (8000d5c <MX_TIM4_Init+0xe4>)
 8000cbc:	2268      	movs	r2, #104	; 0x68
 8000cbe:	60da      	str	r2, [r3, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc0:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <MX_TIM4_Init+0xe4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc6:	4b25      	ldr	r3, [pc, #148]	; (8000d5c <MX_TIM4_Init+0xe4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8000ccc:	4823      	ldr	r0, [pc, #140]	; (8000d5c <MX_TIM4_Init+0xe4>)
 8000cce:	f003 fdc3 	bl	8004858 <HAL_TIM_Base_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM4_Init+0x64>
        Error_Handler();
 8000cd8:	f000 fbd2 	bl	8001480 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8000ce2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	481c      	ldr	r0, [pc, #112]	; (8000d5c <MX_TIM4_Init+0xe4>)
 8000cea:	f004 f995 	bl	8005018 <HAL_TIM_ConfigClockSource>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM4_Init+0x80>
        Error_Handler();
 8000cf4:	f000 fbc4 	bl	8001480 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8000cf8:	4818      	ldr	r0, [pc, #96]	; (8000d5c <MX_TIM4_Init+0xe4>)
 8000cfa:	f003 fdfc 	bl	80048f6 <HAL_TIM_PWM_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM4_Init+0x90>
        Error_Handler();
 8000d04:	f000 fbbc 	bl	8001480 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000d10:	f107 0320 	add.w	r3, r7, #32
 8000d14:	4619      	mov	r1, r3
 8000d16:	4811      	ldr	r0, [pc, #68]	; (8000d5c <MX_TIM4_Init+0xe4>)
 8000d18:	f004 fdec 	bl	80058f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM4_Init+0xae>
            != HAL_OK) {
        Error_Handler();
 8000d22:	f000 fbad 	bl	8001480 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d26:	2360      	movs	r3, #96	; 0x60
 8000d28:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4807      	ldr	r0, [pc, #28]	; (8000d5c <MX_TIM4_Init+0xe4>)
 8000d3e:	f004 f8a9 	bl	8004e94 <HAL_TIM_PWM_ConfigChannel>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM4_Init+0xd4>
            != HAL_OK) {
        Error_Handler();
 8000d48:	f000 fb9a 	bl	8001480 <Error_Handler>
    }
    /* USER CODE BEGIN TIM4_Init 2 */

    /* USER CODE END TIM4_Init 2 */
    HAL_TIM_MspPostInit(&htim4);
 8000d4c:	4803      	ldr	r0, [pc, #12]	; (8000d5c <MX_TIM4_Init+0xe4>)
 8000d4e:	f000 ff2f 	bl	8001bb0 <HAL_TIM_MspPostInit>

}
 8000d52:	bf00      	nop
 8000d54:	3738      	adds	r7, #56	; 0x38
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200001e4 	.word	0x200001e4
 8000d60:	40000800 	.word	0x40000800

08000d64 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08e      	sub	sp, #56	; 0x38
 8000d68:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM5_Init 0 */

    /* USER CODE END TIM5_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000d6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000d78:	f107 0320 	add.w	r3, r7, #32
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
 8000d90:	615a      	str	r2, [r3, #20]
 8000d92:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM5_Init 1 */

    /* USER CODE END TIM5_Init 1 */
    htim5.Instance = TIM5;
 8000d94:	4b2c      	ldr	r3, [pc, #176]	; (8000e48 <MX_TIM5_Init+0xe4>)
 8000d96:	4a2d      	ldr	r2, [pc, #180]	; (8000e4c <MX_TIM5_Init+0xe8>)
 8000d98:	601a      	str	r2, [r3, #0]
    htim5.Init.Prescaler = 0;
 8000d9a:	4b2b      	ldr	r3, [pc, #172]	; (8000e48 <MX_TIM5_Init+0xe4>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	605a      	str	r2, [r3, #4]
    htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da0:	4b29      	ldr	r3, [pc, #164]	; (8000e48 <MX_TIM5_Init+0xe4>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
    htim5.Init.Period = 104;
 8000da6:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <MX_TIM5_Init+0xe4>)
 8000da8:	2268      	movs	r2, #104	; 0x68
 8000daa:	60da      	str	r2, [r3, #12]
    htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dac:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <MX_TIM5_Init+0xe4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
    htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db2:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <MX_TIM5_Init+0xe4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8000db8:	4823      	ldr	r0, [pc, #140]	; (8000e48 <MX_TIM5_Init+0xe4>)
 8000dba:	f003 fd4d 	bl	8004858 <HAL_TIM_Base_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM5_Init+0x64>
        Error_Handler();
 8000dc4:	f000 fb5c 	bl	8001480 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8000dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	481c      	ldr	r0, [pc, #112]	; (8000e48 <MX_TIM5_Init+0xe4>)
 8000dd6:	f004 f91f 	bl	8005018 <HAL_TIM_ConfigClockSource>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM5_Init+0x80>
        Error_Handler();
 8000de0:	f000 fb4e 	bl	8001480 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 8000de4:	4818      	ldr	r0, [pc, #96]	; (8000e48 <MX_TIM5_Init+0xe4>)
 8000de6:	f003 fd86 	bl	80048f6 <HAL_TIM_PWM_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM5_Init+0x90>
        Error_Handler();
 8000df0:	f000 fb46 	bl	8001480 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df4:	2300      	movs	r3, #0
 8000df6:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8000dfc:	f107 0320 	add.w	r3, r7, #32
 8000e00:	4619      	mov	r1, r3
 8000e02:	4811      	ldr	r0, [pc, #68]	; (8000e48 <MX_TIM5_Init+0xe4>)
 8000e04:	f004 fd76 	bl	80058f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM5_Init+0xae>
            != HAL_OK) {
        Error_Handler();
 8000e0e:	f000 fb37 	bl	8001480 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e12:	2360      	movs	r3, #96	; 0x60
 8000e14:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1)
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2200      	movs	r2, #0
 8000e26:	4619      	mov	r1, r3
 8000e28:	4807      	ldr	r0, [pc, #28]	; (8000e48 <MX_TIM5_Init+0xe4>)
 8000e2a:	f004 f833 	bl	8004e94 <HAL_TIM_PWM_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM5_Init+0xd4>
            != HAL_OK) {
        Error_Handler();
 8000e34:	f000 fb24 	bl	8001480 <Error_Handler>
    }
    /* USER CODE BEGIN TIM5_Init 2 */

    /* USER CODE END TIM5_Init 2 */
    HAL_TIM_MspPostInit(&htim5);
 8000e38:	4803      	ldr	r0, [pc, #12]	; (8000e48 <MX_TIM5_Init+0xe4>)
 8000e3a:	f000 feb9 	bl	8001bb0 <HAL_TIM_MspPostInit>

}
 8000e3e:	bf00      	nop
 8000e40:	3738      	adds	r7, #56	; 0x38
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	2000022c 	.word	0x2000022c
 8000e4c:	40000c00 	.word	0x40000c00

08000e50 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <MX_USART2_UART_Init+0x50>)
 8000e58:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e60:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e76:	220c      	movs	r2, #12
 8000e78:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_USART2_UART_Init+0x4c>)
 8000e88:	f004 fdf4 	bl	8005a74 <HAL_UART_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_USART2_UART_Init+0x46>
        Error_Handler();
 8000e92:	f000 faf5 	bl	8001480 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000334 	.word	0x20000334
 8000ea0:	40004400 	.word	0x40004400

08000ea4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <MX_DMA_Init+0x68>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a16      	ldr	r2, [pc, #88]	; (8000f0c <MX_DMA_Init+0x68>)
 8000eb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <MX_DMA_Init+0x68>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	603b      	str	r3, [r7, #0]
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <MX_DMA_Init+0x68>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <MX_DMA_Init+0x68>)
 8000ed0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <MX_DMA_Init+0x68>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	683b      	ldr	r3, [r7, #0]

    /* DMA interrupt init */
    /* DMA1_Stream2_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	200d      	movs	r0, #13
 8000ee8:	f001 fe6d 	bl	8002bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000eec:	200d      	movs	r0, #13
 8000eee:	f001 fe86 	bl	8002bfe <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream1_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2039      	movs	r0, #57	; 0x39
 8000ef8:	f001 fe65 	bl	8002bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000efc:	2039      	movs	r0, #57	; 0x39
 8000efe:	f001 fe7e 	bl	8002bfe <HAL_NVIC_EnableIRQ>

}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40023800 	.word	0x40023800

08000f10 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f16:	f107 030c 	add.w	r3, r7, #12
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	4b3d      	ldr	r3, [pc, #244]	; (8001020 <MX_GPIO_Init+0x110>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a3c      	ldr	r2, [pc, #240]	; (8001020 <MX_GPIO_Init+0x110>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b3a      	ldr	r3, [pc, #232]	; (8001020 <MX_GPIO_Init+0x110>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	4b36      	ldr	r3, [pc, #216]	; (8001020 <MX_GPIO_Init+0x110>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a35      	ldr	r2, [pc, #212]	; (8001020 <MX_GPIO_Init+0x110>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b33      	ldr	r3, [pc, #204]	; (8001020 <MX_GPIO_Init+0x110>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	603b      	str	r3, [r7, #0]
 8000f62:	4b2f      	ldr	r3, [pc, #188]	; (8001020 <MX_GPIO_Init+0x110>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a2e      	ldr	r2, [pc, #184]	; (8001020 <MX_GPIO_Init+0x110>)
 8000f68:	f043 0302 	orr.w	r3, r3, #2
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b2c      	ldr	r3, [pc, #176]	; (8001020 <MX_GPIO_Init+0x110>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, LCD_BL_Pin | SD_CS_Pin | LCD_CE_Pin,
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f240 6102 	movw	r1, #1538	; 0x602
 8000f80:	4828      	ldr	r0, [pc, #160]	; (8001024 <MX_GPIO_Init+0x114>)
 8000f82:	f002 fb6d 	bl	8003660 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin | LCD_DC_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000f8c:	4826      	ldr	r0, [pc, #152]	; (8001028 <MX_GPIO_Init+0x118>)
 8000f8e:	f002 fb67 	bl	8003660 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : BUTTON_UP_Pin BUTTON_MID_Pin BUTTON_DOWN_Pin */
    GPIO_InitStruct.Pin = BUTTON_UP_Pin | BUTTON_MID_Pin | BUTTON_DOWN_Pin;
 8000f92:	230e      	movs	r3, #14
 8000f94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4821      	ldr	r0, [pc, #132]	; (800102c <MX_GPIO_Init+0x11c>)
 8000fa8:	f002 f9d6 	bl	8003358 <HAL_GPIO_Init>

    /*Configure GPIO pins : LCD_BL_Pin SD_CS_Pin LCD_CE_Pin */
    GPIO_InitStruct.Pin = LCD_BL_Pin | SD_CS_Pin | LCD_CE_Pin;
 8000fac:	f240 6302 	movw	r3, #1538	; 0x602
 8000fb0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4817      	ldr	r0, [pc, #92]	; (8001024 <MX_GPIO_Init+0x114>)
 8000fc6:	f002 f9c7 	bl	8003358 <HAL_GPIO_Init>

    /*Configure GPIO pins : LCD_RST_Pin LCD_DC_Pin */
    GPIO_InitStruct.Pin = LCD_RST_Pin | LCD_DC_Pin;
 8000fca:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000fce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4811      	ldr	r0, [pc, #68]	; (8001028 <MX_GPIO_Init+0x118>)
 8000fe4:	f002 f9b8 	bl	8003358 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2100      	movs	r1, #0
 8000fec:	2007      	movs	r0, #7
 8000fee:	f001 fdea 	bl	8002bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ff2:	2007      	movs	r0, #7
 8000ff4:	f001 fe03 	bl	8002bfe <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2008      	movs	r0, #8
 8000ffe:	f001 fde2 	bl	8002bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001002:	2008      	movs	r0, #8
 8001004:	f001 fdfb 	bl	8002bfe <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2100      	movs	r1, #0
 800100c:	2009      	movs	r0, #9
 800100e:	f001 fdda 	bl	8002bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001012:	2009      	movs	r0, #9
 8001014:	f001 fdf3 	bl	8002bfe <HAL_NVIC_EnableIRQ>

}
 8001018:	bf00      	nop
 800101a:	3720      	adds	r7, #32
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40023800 	.word	0x40023800
 8001024:	40020000 	.word	0x40020000
 8001028:	40020400 	.word	0x40020400
 800102c:	40020800 	.word	0x40020800

08001030 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin) {
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	2b08      	cmp	r3, #8
 800103e:	d006      	beq.n	800104e <HAL_GPIO_EXTI_Callback+0x1e>
 8001040:	2b08      	cmp	r3, #8
 8001042:	dc10      	bgt.n	8001066 <HAL_GPIO_EXTI_Callback+0x36>
 8001044:	2b02      	cmp	r3, #2
 8001046:	d00a      	beq.n	800105e <HAL_GPIO_EXTI_Callback+0x2e>
 8001048:	2b04      	cmp	r3, #4
 800104a:	d004      	beq.n	8001056 <HAL_GPIO_EXTI_Callback+0x26>
    case BUTTON_UP_Pin:
        button_event = BUTTON_UP;
        break;
    }

}
 800104c:	e00b      	b.n	8001066 <HAL_GPIO_EXTI_Callback+0x36>
        button_event = BUTTON_DOWN;
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_GPIO_EXTI_Callback+0x44>)
 8001050:	2203      	movs	r2, #3
 8001052:	701a      	strb	r2, [r3, #0]
        break;
 8001054:	e007      	b.n	8001066 <HAL_GPIO_EXTI_Callback+0x36>
        button_event = BUTTON_MID;
 8001056:	4b07      	ldr	r3, [pc, #28]	; (8001074 <HAL_GPIO_EXTI_Callback+0x44>)
 8001058:	2202      	movs	r2, #2
 800105a:	701a      	strb	r2, [r3, #0]
        break;
 800105c:	e003      	b.n	8001066 <HAL_GPIO_EXTI_Callback+0x36>
        button_event = BUTTON_UP;
 800105e:	4b05      	ldr	r3, [pc, #20]	; (8001074 <HAL_GPIO_EXTI_Callback+0x44>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
        break;
 8001064:	bf00      	nop
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000378 	.word	0x20000378

08001078 <handleMenu>:

void handleMenu(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af02      	add	r7, sp, #8
    switch(button_event){
 800107e:	4b47      	ldr	r3, [pc, #284]	; (800119c <handleMenu+0x124>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b03      	cmp	r3, #3
 8001086:	d82c      	bhi.n	80010e2 <handleMenu+0x6a>
 8001088:	a201      	add	r2, pc, #4	; (adr r2, 8001090 <handleMenu+0x18>)
 800108a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108e:	bf00      	nop
 8001090:	080010e3 	.word	0x080010e3
 8001094:	080010cd 	.word	0x080010cd
 8001098:	080010bd 	.word	0x080010bd
 800109c:	080010a1 	.word	0x080010a1
    case BUTTON_NULL:
        break;
    case BUTTON_DOWN:
        if((selected + 1) < size_dirs)
 80010a0:	4b3f      	ldr	r3, [pc, #252]	; (80011a0 <handleMenu+0x128>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	3301      	adds	r3, #1
 80010a6:	4a3f      	ldr	r2, [pc, #252]	; (80011a4 <handleMenu+0x12c>)
 80010a8:	7812      	ldrb	r2, [r2, #0]
 80010aa:	4293      	cmp	r3, r2
 80010ac:	da1b      	bge.n	80010e6 <handleMenu+0x6e>
            selected++;
 80010ae:	4b3c      	ldr	r3, [pc, #240]	; (80011a0 <handleMenu+0x128>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4b3a      	ldr	r3, [pc, #232]	; (80011a0 <handleMenu+0x128>)
 80010b8:	701a      	strb	r2, [r3, #0]
        break;
 80010ba:	e014      	b.n	80010e6 <handleMenu+0x6e>
    case BUTTON_MID:
        playState ^= 1;
 80010bc:	4b3a      	ldr	r3, [pc, #232]	; (80011a8 <handleMenu+0x130>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	f083 0301 	eor.w	r3, r3, #1
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4b38      	ldr	r3, [pc, #224]	; (80011a8 <handleMenu+0x130>)
 80010c8:	701a      	strb	r2, [r3, #0]
        break;
 80010ca:	e00f      	b.n	80010ec <handleMenu+0x74>
    case BUTTON_UP:
        if(0 < selected)
 80010cc:	4b34      	ldr	r3, [pc, #208]	; (80011a0 <handleMenu+0x128>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00a      	beq.n	80010ea <handleMenu+0x72>
            selected--;
 80010d4:	4b32      	ldr	r3, [pc, #200]	; (80011a0 <handleMenu+0x128>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	3b01      	subs	r3, #1
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	4b30      	ldr	r3, [pc, #192]	; (80011a0 <handleMenu+0x128>)
 80010de:	701a      	strb	r2, [r3, #0]
        break;
 80010e0:	e003      	b.n	80010ea <handleMenu+0x72>
    default: break;
 80010e2:	bf00      	nop
 80010e4:	e002      	b.n	80010ec <handleMenu+0x74>
        break;
 80010e6:	bf00      	nop
 80010e8:	e000      	b.n	80010ec <handleMenu+0x74>
        break;
 80010ea:	bf00      	nop
    }

    PCD8544_Clear();
 80010ec:	f001 f814 	bl	8002118 <PCD8544_Clear>

    for(int i = 0; i < size_dirs; i++){
 80010f0:	2300      	movs	r3, #0
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	e046      	b.n	8001184 <handleMenu+0x10c>
        if(i == selected){
 80010f6:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <handleMenu+0x128>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4293      	cmp	r3, r2
 8001100:	d128      	bne.n	8001154 <handleMenu+0xdc>
            PCD8544_DrawFilledRectangle(0, i*9, 84, i*9 + 9, PCD8544_Pixel_Set);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	461a      	mov	r2, r3
 8001108:	00d2      	lsls	r2, r2, #3
 800110a:	4413      	add	r3, r2
 800110c:	b2d9      	uxtb	r1, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3301      	adds	r3, #1
 8001112:	b2db      	uxtb	r3, r3
 8001114:	461a      	mov	r2, r3
 8001116:	00d2      	lsls	r2, r2, #3
 8001118:	4413      	add	r3, r2
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2201      	movs	r2, #1
 800111e:	9200      	str	r2, [sp, #0]
 8001120:	2254      	movs	r2, #84	; 0x54
 8001122:	2000      	movs	r0, #0
 8001124:	f001 fa76 	bl	8002614 <PCD8544_DrawFilledRectangle>
            PCD8544_GotoXY(4, i*9 + 1);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	461a      	mov	r2, r3
 800112e:	00d2      	lsls	r2, r2, #3
 8001130:	4413      	add	r3, r2
 8001132:	b2db      	uxtb	r3, r3
 8001134:	3301      	adds	r3, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	4619      	mov	r1, r3
 800113a:	2004      	movs	r0, #4
 800113c:	f001 f8bc 	bl	80022b8 <PCD8544_GotoXY>
            PCD8544_Puts(buffor_dirs[i], PCD8544_Pixel_Clear, PCD8544_FontSize_5x7);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	011b      	lsls	r3, r3, #4
 8001144:	4a19      	ldr	r2, [pc, #100]	; (80011ac <handleMenu+0x134>)
 8001146:	4413      	add	r3, r2
 8001148:	2200      	movs	r2, #0
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f001 f975 	bl	800243c <PCD8544_Puts>
 8001152:	e014      	b.n	800117e <handleMenu+0x106>
        }
        else{
            PCD8544_GotoXY(4, i*9 + 1);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	b2db      	uxtb	r3, r3
 8001158:	461a      	mov	r2, r3
 800115a:	00d2      	lsls	r2, r2, #3
 800115c:	4413      	add	r3, r2
 800115e:	b2db      	uxtb	r3, r3
 8001160:	3301      	adds	r3, #1
 8001162:	b2db      	uxtb	r3, r3
 8001164:	4619      	mov	r1, r3
 8001166:	2004      	movs	r0, #4
 8001168:	f001 f8a6 	bl	80022b8 <PCD8544_GotoXY>
            PCD8544_Puts(buffor_dirs[i], PCD8544_Pixel_Clear, PCD8544_FontSize_5x7);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <handleMenu+0x134>)
 8001172:	4413      	add	r3, r2
 8001174:	2200      	movs	r2, #0
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f001 f95f 	bl	800243c <PCD8544_Puts>
    for(int i = 0; i < size_dirs; i++){
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3301      	adds	r3, #1
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <handleMenu+0x12c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4293      	cmp	r3, r2
 800118e:	dbb2      	blt.n	80010f6 <handleMenu+0x7e>
        }
    }
    PCD8544_Refresh();
 8001190:	f000 fff4 	bl	800217c <PCD8544_Refresh>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000378 	.word	0x20000378
 80011a0:	2000041d 	.word	0x2000041d
 80011a4:	2000041c 	.word	0x2000041c
 80011a8:	20006420 	.word	0x20006420
 80011ac:	2000037c 	.word	0x2000037c

080011b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

    return (((uint32_t) r + m) << 16) | (((uint32_t) g + m) << 8)
            | ((uint32_t) b + m);
}

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 80011b0:	b480      	push	{r7}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

    Layers *layer;

    if (htim == &htim1) {
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a50      	ldr	r2, [pc, #320]	; (80012fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x14c>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d102      	bne.n	80011c6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
        layer = &Layer1;
 80011c0:	4b4f      	ldr	r3, [pc, #316]	; (8001300 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x150>)
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	e006      	b.n	80011d4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x24>
    } else if (htim == &htim5) {
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4e      	ldr	r2, [pc, #312]	; (8001304 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x154>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	f040 808f 	bne.w	80012ee <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x13e>
        layer = &Layer2;
 80011d0:	4b4d      	ldr	r3, [pc, #308]	; (8001308 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x158>)
 80011d2:	617b      	str	r3, [r7, #20]
//		layer = &Layer4;
    } else
        return;

    // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
    if (layer->wr_buf_p < NUM_PIXELS) {
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 80011da:	2bff      	cmp	r3, #255	; 0xff
 80011dc:	d868      	bhi.n	80012b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x100>
        // We're in. Fill the even buffer
        for (uint_fast8_t i = 0; i < 8; ++i) {
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	e05a      	b.n	800129a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xea>
            layer->wr_buf[i] =
            PWM_LO << (((layer->rgb_arr[3 * layer->wr_buf_p] << i) & 0x80) > 0);
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 80011ea:	4613      	mov	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	4413      	add	r3, r2
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	4413      	add	r3, r2
 80011f4:	7a5b      	ldrb	r3, [r3, #9]
 80011f6:	461a      	mov	r2, r3
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
            layer->wr_buf[i] =
 8001202:	2b00      	cmp	r3, #0
 8001204:	dd01      	ble.n	800120a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x5a>
 8001206:	2142      	movs	r1, #66	; 0x42
 8001208:	e000      	b.n	800120c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x5c>
 800120a:	2121      	movs	r1, #33	; 0x21
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4413      	add	r3, r2
 8001218:	460a      	mov	r2, r1
 800121a:	805a      	strh	r2, [r3, #2]
            layer->wr_buf[i + 8] = PWM_LO
                    << (((layer->rgb_arr[3 * layer->wr_buf_p + 1] << i) & 0x80)
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 8001222:	4613      	mov	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4413      	add	r3, r2
 8001228:	3301      	adds	r3, #1
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	4413      	add	r3, r2
 800122e:	7a5b      	ldrb	r3, [r3, #9]
 8001230:	461a      	mov	r2, r3
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	f003 0380 	and.w	r3, r3, #128	; 0x80
            layer->wr_buf[i + 8] = PWM_LO
 800123c:	2b00      	cmp	r3, #0
 800123e:	dd01      	ble.n	8001244 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x94>
 8001240:	2142      	movs	r1, #66	; 0x42
 8001242:	e000      	b.n	8001246 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 8001244:	2121      	movs	r1, #33	; 0x21
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	3308      	adds	r3, #8
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	460a      	mov	r2, r1
 8001256:	805a      	strh	r2, [r3, #2]
                            > 0);
            layer->wr_buf[i + 16] = PWM_LO
                    << (((layer->rgb_arr[3 * layer->wr_buf_p + 2] << i) & 0x80)
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 800125e:	4613      	mov	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	4413      	add	r3, r2
 8001264:	3302      	adds	r3, #2
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4413      	add	r3, r2
 800126a:	7a5b      	ldrb	r3, [r3, #9]
 800126c:	461a      	mov	r2, r3
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	f003 0380 	and.w	r3, r3, #128	; 0x80
            layer->wr_buf[i + 16] = PWM_LO
 8001278:	2b00      	cmp	r3, #0
 800127a:	dd01      	ble.n	8001280 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd0>
 800127c:	2142      	movs	r1, #66	; 0x42
 800127e:	e000      	b.n	8001282 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd2>
 8001280:	2121      	movs	r1, #33	; 0x21
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	3310      	adds	r3, #16
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4413      	add	r3, r2
 8001290:	460a      	mov	r2, r1
 8001292:	805a      	strh	r2, [r3, #2]
        for (uint_fast8_t i = 0; i < 8; ++i) {
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	3301      	adds	r3, #1
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	2b07      	cmp	r3, #7
 800129e:	d9a1      	bls.n	80011e4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x34>
                            > 0);
        }
        layer->wr_buf_p++;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 80012ae:	e01f      	b.n	80012f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x140>
    } else if (layer->wr_buf_p < NUM_PIXELS + 2) {
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 80012b6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 80012ba:	d219      	bcs.n	80012f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x140>
        // Last two transfers are resets.
        //                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
        // First half reset zero fill
        for (uint8_t i = 0; i < WR_BUF_LEN / 2; ++i)
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	e00a      	b.n	80012d8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x128>
            layer->wr_buf[i] = 0;
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	2200      	movs	r2, #0
 80012d0:	805a      	strh	r2, [r3, #2]
        for (uint8_t i = 0; i < WR_BUF_LEN / 2; ++i)
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	3301      	adds	r3, #1
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	2b17      	cmp	r3, #23
 80012dc:	d9f1      	bls.n	80012c2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x112>
        layer->wr_buf_p++;
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 80012ec:	e000      	b.n	80012f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x140>
        return;
 80012ee:	bf00      	nop
    }
}
 80012f0:	371c      	adds	r7, #28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000154 	.word	0x20000154
 8001300:	20006424 	.word	0x20006424
 8001304:	2000022c 	.word	0x2000022c
 8001308:	20006794 	.word	0x20006794

0800130c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

    Layers *layer;

    if (htim == &htim1) {
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a56      	ldr	r2, [pc, #344]	; (8001470 <HAL_TIM_PWM_PulseFinishedCallback+0x164>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d102      	bne.n	8001322 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
        layer = &Layer1;
 800131c:	4b55      	ldr	r3, [pc, #340]	; (8001474 <HAL_TIM_PWM_PulseFinishedCallback+0x168>)
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	e006      	b.n	8001330 <HAL_TIM_PWM_PulseFinishedCallback+0x24>
    } else if (htim == &htim5) {
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a54      	ldr	r2, [pc, #336]	; (8001478 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	f040 809d 	bne.w	8001466 <HAL_TIM_PWM_PulseFinishedCallback+0x15a>
        layer = &Layer2;
 800132c:	4b53      	ldr	r3, [pc, #332]	; (800147c <HAL_TIM_PWM_PulseFinishedCallback+0x170>)
 800132e:	617b      	str	r3, [r7, #20]
//		layer = &Layer4;
    } else
        return;

    // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
    if (layer->wr_buf_p < NUM_PIXELS) {
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8001336:	2bff      	cmp	r3, #255	; 0xff
 8001338:	d869      	bhi.n	800140e <HAL_TIM_PWM_PulseFinishedCallback+0x102>
        // We're in. Fill the odd buffer
        for (uint_fast8_t i = 0; i < 8; ++i) {
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	e05b      	b.n	80013f8 <HAL_TIM_PWM_PulseFinishedCallback+0xec>
            layer->wr_buf[i + 24] =
            PWM_LO << (((layer->rgb_arr[3 * layer->wr_buf_p] << i) & 0x80) > 0);
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 8001346:	4613      	mov	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	4413      	add	r3, r2
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	4413      	add	r3, r2
 8001350:	7a5b      	ldrb	r3, [r3, #9]
 8001352:	461a      	mov	r2, r3
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	f003 0380 	and.w	r3, r3, #128	; 0x80
            layer->wr_buf[i + 24] =
 800135e:	2b00      	cmp	r3, #0
 8001360:	dd01      	ble.n	8001366 <HAL_TIM_PWM_PulseFinishedCallback+0x5a>
 8001362:	2142      	movs	r1, #66	; 0x42
 8001364:	e000      	b.n	8001368 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>
 8001366:	2121      	movs	r1, #33	; 0x21
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	3318      	adds	r3, #24
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	460a      	mov	r2, r1
 8001378:	805a      	strh	r2, [r3, #2]
            layer->wr_buf[i + 32] = PWM_LO
                    << (((layer->rgb_arr[3 * layer->wr_buf_p + 1] << i) & 0x80)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 8001380:	4613      	mov	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	3301      	adds	r3, #1
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	4413      	add	r3, r2
 800138c:	7a5b      	ldrb	r3, [r3, #9]
 800138e:	461a      	mov	r2, r3
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	f003 0380 	and.w	r3, r3, #128	; 0x80
            layer->wr_buf[i + 32] = PWM_LO
 800139a:	2b00      	cmp	r3, #0
 800139c:	dd01      	ble.n	80013a2 <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 800139e:	2142      	movs	r1, #66	; 0x42
 80013a0:	e000      	b.n	80013a4 <HAL_TIM_PWM_PulseFinishedCallback+0x98>
 80013a2:	2121      	movs	r1, #33	; 0x21
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	3320      	adds	r3, #32
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	460a      	mov	r2, r1
 80013b4:	805a      	strh	r2, [r3, #2]
                            > 0);
            layer->wr_buf[i + 40] = PWM_LO
                    << (((layer->rgb_arr[3 * layer->wr_buf_p + 2] << i) & 0x80)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 80013bc:	4613      	mov	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	4413      	add	r3, r2
 80013c2:	3302      	adds	r3, #2
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	4413      	add	r3, r2
 80013c8:	7a5b      	ldrb	r3, [r3, #9]
 80013ca:	461a      	mov	r2, r3
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
            layer->wr_buf[i + 40] = PWM_LO
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	dd01      	ble.n	80013de <HAL_TIM_PWM_PulseFinishedCallback+0xd2>
 80013da:	2142      	movs	r1, #66	; 0x42
 80013dc:	e000      	b.n	80013e0 <HAL_TIM_PWM_PulseFinishedCallback+0xd4>
 80013de:	2121      	movs	r1, #33	; 0x21
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	3328      	adds	r3, #40	; 0x28
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4413      	add	r3, r2
 80013ee:	460a      	mov	r2, r1
 80013f0:	805a      	strh	r2, [r3, #2]
        for (uint_fast8_t i = 0; i < 8; ++i) {
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	3301      	adds	r3, #1
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	2b07      	cmp	r3, #7
 80013fc:	d9a0      	bls.n	8001340 <HAL_TIM_PWM_PulseFinishedCallback+0x34>
                            > 0);
        }

        layer->wr_buf_p++;
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8001404:	1c5a      	adds	r2, r3, #1
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 800140c:	e02c      	b.n	8001468 <HAL_TIM_PWM_PulseFinishedCallback+0x15c>

    } else if (layer->wr_buf_p < NUM_PIXELS + 2) {
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8001414:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8001418:	d218      	bcs.n	800144c <HAL_TIM_PWM_PulseFinishedCallback+0x140>
        // Second half reset zero fill
        for (uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i)
 800141a:	2318      	movs	r3, #24
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	e00a      	b.n	8001436 <HAL_TIM_PWM_PulseFinishedCallback+0x12a>
            layer->wr_buf[i] = 0;
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4413      	add	r3, r2
 800142c:	2200      	movs	r2, #0
 800142e:	805a      	strh	r2, [r3, #2]
        for (uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i)
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	3301      	adds	r3, #1
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	2b2f      	cmp	r3, #47	; 0x2f
 800143a:	d9f1      	bls.n	8001420 <HAL_TIM_PWM_PulseFinishedCallback+0x114>
        ++layer->wr_buf_p;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 800144a:	e00d      	b.n	8001468 <HAL_TIM_PWM_PulseFinishedCallback+0x15c>
    } else {
        // We're done. Lean back and until next time!
        layer->wr_buf_p = 0;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	2200      	movs	r2, #0
 8001450:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
        HAL_TIM_PWM_Stop_DMA(layer->timer, layer->channel);
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	7a1b      	ldrb	r3, [r3, #8]
 800145c:	4619      	mov	r1, r3
 800145e:	4610      	mov	r0, r2
 8001460:	f003 fc52 	bl	8004d08 <HAL_TIM_PWM_Stop_DMA>
 8001464:	e000      	b.n	8001468 <HAL_TIM_PWM_PulseFinishedCallback+0x15c>
        return;
 8001466:	bf00      	nop
    }
}
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000154 	.word	0x20000154
 8001474:	20006424 	.word	0x20006424
 8001478:	2000022c 	.word	0x2000022c
 800147c:	20006794 	.word	0x20006794

08001480 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001484:	b672      	cpsid	i
}
 8001486:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8001488:	e7fe      	b.n	8001488 <Error_Handler+0x8>
	...

0800148c <myprintf>:
#include "fatfs.h"

extern SPI_HandleTypeDef hspi1;
extern UART_HandleTypeDef huart2;

void myprintf(const char *fmt, ...) {
 800148c:	b40f      	push	{r0, r1, r2, r3}
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
    static char buffer[256];
    va_list args;
    va_start(args, fmt);
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	603b      	str	r3, [r7, #0]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014a2:	480b      	ldr	r0, [pc, #44]	; (80014d0 <myprintf+0x44>)
 80014a4:	f008 faec 	bl	8009a80 <vsniprintf>
    va_end(args);

    int len = strlen(buffer);
 80014a8:	4809      	ldr	r0, [pc, #36]	; (80014d0 <myprintf+0x44>)
 80014aa:	f7fe fe99 	bl	80001e0 <strlen>
 80014ae:	4603      	mov	r3, r0
 80014b0:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) buffer, len, -1);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ba:	4905      	ldr	r1, [pc, #20]	; (80014d0 <myprintf+0x44>)
 80014bc:	4805      	ldr	r0, [pc, #20]	; (80014d4 <myprintf+0x48>)
 80014be:	f004 fb26 	bl	8005b0e <HAL_UART_Transmit>

}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014cc:	b004      	add	sp, #16
 80014ce:	4770      	bx	lr
 80014d0:	20006f68 	.word	0x20006f68
 80014d4:	20000334 	.word	0x20000334

080014d8 <sd_card_init>:
//some variables for FatFs
FATFS FatFs; 	//Fatfs handle
FIL fil; 		//File handle
FRESULT fres; //Result after operations

ret_status sd_card_init(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
    myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 80014de:	4827      	ldr	r0, [pc, #156]	; (800157c <sd_card_init+0xa4>)
 80014e0:	f7ff ffd4 	bl	800148c <myprintf>

    HAL_Delay(1000); //a short delay is important to let the SD card settle
 80014e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014e8:	f001 fa6e 	bl	80029c8 <HAL_Delay>

    fres = f_mount(&FatFs, "", 1); //1=mount now
 80014ec:	2201      	movs	r2, #1
 80014ee:	4924      	ldr	r1, [pc, #144]	; (8001580 <sd_card_init+0xa8>)
 80014f0:	4824      	ldr	r0, [pc, #144]	; (8001584 <sd_card_init+0xac>)
 80014f2:	f007 f9cd 	bl	8008890 <f_mount>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b23      	ldr	r3, [pc, #140]	; (8001588 <sd_card_init+0xb0>)
 80014fc:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 80014fe:	4b22      	ldr	r3, [pc, #136]	; (8001588 <sd_card_init+0xb0>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d007      	beq.n	8001516 <sd_card_init+0x3e>
        myprintf("f_mount error (%i)\r\n", fres);
 8001506:	4b20      	ldr	r3, [pc, #128]	; (8001588 <sd_card_init+0xb0>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	4619      	mov	r1, r3
 800150c:	481f      	ldr	r0, [pc, #124]	; (800158c <sd_card_init+0xb4>)
 800150e:	f7ff ffbd 	bl	800148c <myprintf>
        return STATUS_ERROR;
 8001512:	2302      	movs	r3, #2
 8001514:	e02d      	b.n	8001572 <sd_card_init+0x9a>
    }
    DWORD free_clusters, free_sectors, total_sectors;

    FATFS *getFreeFs;

    fres = f_getfree("", &free_clusters, &getFreeFs);
 8001516:	463a      	mov	r2, r7
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	4619      	mov	r1, r3
 800151c:	4818      	ldr	r0, [pc, #96]	; (8001580 <sd_card_init+0xa8>)
 800151e:	f008 f881 	bl	8009624 <f_getfree>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <sd_card_init+0xb0>)
 8001528:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 800152a:	4b17      	ldr	r3, [pc, #92]	; (8001588 <sd_card_init+0xb0>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d007      	beq.n	8001542 <sd_card_init+0x6a>
        myprintf("f_getfree error (%i)\r\n", fres);
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <sd_card_init+0xb0>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	4619      	mov	r1, r3
 8001538:	4815      	ldr	r0, [pc, #84]	; (8001590 <sd_card_init+0xb8>)
 800153a:	f7ff ffa7 	bl	800148c <myprintf>

        return STATUS_ERROR;
 800153e:	2302      	movs	r3, #2
 8001540:	e017      	b.n	8001572 <sd_card_init+0x9a>
    }

    //Formula comes from ChaN's documentation
    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	3b02      	subs	r3, #2
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	8952      	ldrh	r2, [r2, #10]
 800154c:	fb02 f303 	mul.w	r3, r2, r3
 8001550:	60fb      	str	r3, [r7, #12]
    free_sectors = free_clusters * getFreeFs->csize;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	895b      	ldrh	r3, [r3, #10]
 8001556:	461a      	mov	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	60bb      	str	r3, [r7, #8]

    myprintf(
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	0859      	lsrs	r1, r3, #1
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	085b      	lsrs	r3, r3, #1
 8001568:	461a      	mov	r2, r3
 800156a:	480a      	ldr	r0, [pc, #40]	; (8001594 <sd_card_init+0xbc>)
 800156c:	f7ff ff8e 	bl	800148c <myprintf>
//	} else {
//		myprintf("f_write error (%i)\r\n", fres);
//	}
//

    return STATUS_OK;
 8001570:	2301      	movs	r3, #1
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	0800a374 	.word	0x0800a374
 8001580:	0800a394 	.word	0x0800a394
 8001584:	20006b04 	.word	0x20006b04
 8001588:	20006f64 	.word	0x20006f64
 800158c:	0800a398 	.word	0x0800a398
 8001590:	0800a3b0 	.word	0x0800a3b0
 8001594:	0800a3c8 	.word	0x0800a3c8

08001598 <sd_card_scan_file>:

ret_status sd_card_scan_file(char *path, char* buffor_dirs, uint8_t* size_dirs) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b092      	sub	sp, #72	; 0x48
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]

    FRESULT res;
    DIR dir;
    UINT i;
    static FILINFO fno;
    res = f_opendir(&dir, path); /* Open the directory */
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	68f9      	ldr	r1, [r7, #12]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f007 ff64 	bl	8009478 <f_opendir>
 80015b0:	4603      	mov	r3, r0
 80015b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (res == FR_OK) {
 80015b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d15f      	bne.n	800167e <sd_card_scan_file+0xe6>
        while (1) {
            res = f_readdir(&dir, &fno); /* Read a directory item */
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	4934      	ldr	r1, [pc, #208]	; (8001694 <sd_card_scan_file+0xfc>)
 80015c4:	4618      	mov	r0, r3
 80015c6:	f007 fff0 	bl	80095aa <f_readdir>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            if (res != FR_OK || fno.fname[0] == 0)
 80015d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d14b      	bne.n	8001670 <sd_card_scan_file+0xd8>
 80015d8:	4b2e      	ldr	r3, [pc, #184]	; (8001694 <sd_card_scan_file+0xfc>)
 80015da:	7a5b      	ldrb	r3, [r3, #9]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d047      	beq.n	8001670 <sd_card_scan_file+0xd8>
                break; /* Break on error or end of dir */
            if (fno.fattrib & AM_DIR && !(fno.fattrib & AM_HID)
 80015e0:	4b2c      	ldr	r3, [pc, #176]	; (8001694 <sd_card_scan_file+0xfc>)
 80015e2:	7a1b      	ldrb	r3, [r3, #8]
 80015e4:	f003 0310 	and.w	r3, r3, #16
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d03a      	beq.n	8001662 <sd_card_scan_file+0xca>
 80015ec:	4b29      	ldr	r3, [pc, #164]	; (8001694 <sd_card_scan_file+0xfc>)
 80015ee:	7a1b      	ldrb	r3, [r3, #8]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d134      	bne.n	8001662 <sd_card_scan_file+0xca>
                    && !(fno.fattrib & AM_SYS)) { /* It is a directory */
 80015f8:	4b26      	ldr	r3, [pc, #152]	; (8001694 <sd_card_scan_file+0xfc>)
 80015fa:	7a1b      	ldrb	r3, [r3, #8]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d12e      	bne.n	8001662 <sd_card_scan_file+0xca>
                i = strlen(path);
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f7fe fdeb 	bl	80001e0 <strlen>
 800160a:	6438      	str	r0, [r7, #64]	; 0x40
                sprintf(&path[i], "/%s", fno.fname);
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001610:	4413      	add	r3, r2
 8001612:	4a21      	ldr	r2, [pc, #132]	; (8001698 <sd_card_scan_file+0x100>)
 8001614:	4921      	ldr	r1, [pc, #132]	; (800169c <sd_card_scan_file+0x104>)
 8001616:	4618      	mov	r0, r3
 8001618:	f008 f95a 	bl	80098d0 <siprintf>
                sprintf((char*)(buffor_dirs + (*size_dirs)*16), "%s", path);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	461a      	mov	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	4413      	add	r3, r2
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	491d      	ldr	r1, [pc, #116]	; (80016a0 <sd_card_scan_file+0x108>)
 800162c:	4618      	mov	r0, r3
 800162e:	f008 f94f 	bl	80098d0 <siprintf>
                (*size_dirs)++;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	3301      	adds	r3, #1
 8001638:	b2da      	uxtb	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	701a      	strb	r2, [r3, #0]
                res = sd_card_scan_file(path, NULL, NULL); /* Enter the directory */
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f7ff ffa8 	bl	8001598 <sd_card_scan_file>
 8001648:	4603      	mov	r3, r0
 800164a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if (res != FR_OK)
 800164e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10b      	bne.n	800166e <sd_card_scan_file+0xd6>
                    break;
                path[i] = 0;
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800165a:	4413      	add	r3, r2
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
 8001660:	e004      	b.n	800166c <sd_card_scan_file+0xd4>
            } else { /* It is a file. */
                myprintf("%s/%s\r\n", path, fno.fname);
 8001662:	4a0d      	ldr	r2, [pc, #52]	; (8001698 <sd_card_scan_file+0x100>)
 8001664:	68f9      	ldr	r1, [r7, #12]
 8001666:	480f      	ldr	r0, [pc, #60]	; (80016a4 <sd_card_scan_file+0x10c>)
 8001668:	f7ff ff10 	bl	800148c <myprintf>
            res = f_readdir(&dir, &fno); /* Read a directory item */
 800166c:	e7a7      	b.n	80015be <sd_card_scan_file+0x26>
                    break;
 800166e:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	4618      	mov	r0, r3
 8001676:	f007 ff72 	bl	800955e <f_closedir>
    }
    else {
        myprintf("Error!!! Scanning dir error: %d\n", res);
        return STATUS_ERROR;
    }
    return STATUS_OK;
 800167a:	2301      	movs	r3, #1
 800167c:	e006      	b.n	800168c <sd_card_scan_file+0xf4>
        myprintf("Error!!! Scanning dir error: %d\n", res);
 800167e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001682:	4619      	mov	r1, r3
 8001684:	4808      	ldr	r0, [pc, #32]	; (80016a8 <sd_card_scan_file+0x110>)
 8001686:	f7ff ff01 	bl	800148c <myprintf>
        return STATUS_ERROR;
 800168a:	2302      	movs	r3, #2
}
 800168c:	4618      	mov	r0, r3
 800168e:	3748      	adds	r7, #72	; 0x48
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20007068 	.word	0x20007068
 8001698:	20007071 	.word	0x20007071
 800169c:	0800a410 	.word	0x0800a410
 80016a0:	0800a414 	.word	0x0800a414
 80016a4:	0800a418 	.word	0x0800a418
 80016a8:	0800a420 	.word	0x0800a420

080016ac <sd_card_close>:

ret_status sd_card_close(void) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
    f_close(&fil);
 80016b0:	4806      	ldr	r0, [pc, #24]	; (80016cc <sd_card_close+0x20>)
 80016b2:	f007 fcae 	bl	8009012 <f_close>
    f_mount(NULL, "", 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	4905      	ldr	r1, [pc, #20]	; (80016d0 <sd_card_close+0x24>)
 80016ba:	2000      	movs	r0, #0
 80016bc:	f007 f8e8 	bl	8008890 <f_mount>
    myprintf("\r\nSD card is UNMOUNTED\r\n");
 80016c0:	4804      	ldr	r0, [pc, #16]	; (80016d4 <sd_card_close+0x28>)
 80016c2:	f7ff fee3 	bl	800148c <myprintf>
    return STATUS_ERROR;
 80016c6:	2302      	movs	r3, #2
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20006d34 	.word	0x20006d34
 80016d0:	0800a394 	.word	0x0800a394
 80016d4:	0800a444 	.word	0x0800a444

080016d8 <sd_card_read_data>:

ret_status sd_card_read_data(uint8_t *data) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 80016de:	af00      	add	r7, sp, #0
 80016e0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80016e4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80016e8:	6018      	str	r0, [r3, #0]
    for (uint8_t image = 0; image < 10; image++) {
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80016f0:	e0d4      	b.n	800189c <sd_card_read_data+0x1c4>
        FIL file;
        char name[20] = { 0 };
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80016f8:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
		sprintf((char*)name, "0://WALKIN~1//%d.txt", image);
 8001706:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 800170a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800170e:	4969      	ldr	r1, [pc, #420]	; (80018b4 <sd_card_read_data+0x1dc>)
 8001710:	4618      	mov	r0, r3
 8001712:	f008 f8dd 	bl	80098d0 <siprintf>
		myprintf("Try to read image %s\r\n", name);
 8001716:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800171a:	4619      	mov	r1, r3
 800171c:	4866      	ldr	r0, [pc, #408]	; (80018b8 <sd_card_read_data+0x1e0>)
 800171e:	f7ff feb5 	bl	800148c <myprintf>

		fres = f_open(&file, name, FA_READ);
 8001722:	f507 7111 	add.w	r1, r7, #580	; 0x244
 8001726:	f107 0308 	add.w	r3, r7, #8
 800172a:	2201      	movs	r2, #1
 800172c:	4618      	mov	r0, r3
 800172e:	f007 f8f5 	bl	800891c <f_open>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	4b61      	ldr	r3, [pc, #388]	; (80018bc <sd_card_read_data+0x1e4>)
 8001738:	701a      	strb	r2, [r3, #0]
		if (fres != FR_OK) {
 800173a:	4b60      	ldr	r3, [pc, #384]	; (80018bc <sd_card_read_data+0x1e4>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d007      	beq.n	8001752 <sd_card_read_data+0x7a>
			myprintf("f_open error (%i)\r\n", fres);
 8001742:	4b5e      	ldr	r3, [pc, #376]	; (80018bc <sd_card_read_data+0x1e4>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	4619      	mov	r1, r3
 8001748:	485d      	ldr	r0, [pc, #372]	; (80018c0 <sd_card_read_data+0x1e8>)
 800174a:	f7ff fe9f 	bl	800148c <myprintf>
			return STATUS_ERROR;
 800174e:	2302      	movs	r3, #2
 8001750:	e0aa      	b.n	80018a8 <sd_card_read_data+0x1d0>
		}

        UINT num = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
        UINT br;
        int i = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
        int j = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
        while(i < 256){
 8001764:	e085      	b.n	8001872 <sd_card_read_data+0x19a>
            num = 1;
 8001766:	2301      	movs	r3, #1
 8001768:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
            TCHAR c[2] = {0};
 800176c:	2300      	movs	r3, #0
 800176e:	f8a7 323c 	strh.w	r3, [r7, #572]	; 0x23c
            TCHAR string[4] = {0};
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

            f_read(&file, c, 1, &br);
 8001778:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800177c:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8001780:	f107 0008 	add.w	r0, r7, #8
 8001784:	2201      	movs	r2, #1
 8001786:	f007 fa87 	bl	8008c98 <f_read>
            while(',' != c[0]){
 800178a:	e00d      	b.n	80017a8 <sd_card_read_data+0xd0>
                num++;
 800178c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8001790:	3301      	adds	r3, #1
 8001792:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
                f_read(&file, c, 1, &br);
 8001796:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800179a:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 800179e:	f107 0008 	add.w	r0, r7, #8
 80017a2:	2201      	movs	r2, #1
 80017a4:	f007 fa78 	bl	8008c98 <f_read>
            while(',' != c[0]){
 80017a8:	f897 323c 	ldrb.w	r3, [r7, #572]	; 0x23c
 80017ac:	2b2c      	cmp	r3, #44	; 0x2c
 80017ae:	d1ed      	bne.n	800178c <sd_card_read_data+0xb4>
            }
            f_lseek(&file, f_tell(&file)-num);
 80017b0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80017b4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80017b8:	699a      	ldr	r2, [r3, #24]
 80017ba:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80017be:	1ad2      	subs	r2, r2, r3
 80017c0:	f107 0308 	add.w	r3, r7, #8
 80017c4:	4611      	mov	r1, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f007 fc4d 	bl	8009066 <f_lseek>
            fres = f_read(&file, string, num-1, &br);
 80017cc:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80017d0:	1e5a      	subs	r2, r3, #1
 80017d2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80017d6:	f507 710e 	add.w	r1, r7, #568	; 0x238
 80017da:	f107 0008 	add.w	r0, r7, #8
 80017de:	f007 fa5b 	bl	8008c98 <f_read>
 80017e2:	4603      	mov	r3, r0
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b35      	ldr	r3, [pc, #212]	; (80018bc <sd_card_read_data+0x1e4>)
 80017e8:	701a      	strb	r2, [r3, #0]
            if (fres != FR_OK) {
 80017ea:	4b34      	ldr	r3, [pc, #208]	; (80018bc <sd_card_read_data+0x1e4>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d007      	beq.n	8001802 <sd_card_read_data+0x12a>
                myprintf("f_read error (%i)\r\n", fres);
 80017f2:	4b32      	ldr	r3, [pc, #200]	; (80018bc <sd_card_read_data+0x1e4>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	4619      	mov	r1, r3
 80017f8:	4832      	ldr	r0, [pc, #200]	; (80018c4 <sd_card_read_data+0x1ec>)
 80017fa:	f7ff fe47 	bl	800148c <myprintf>
                return STATUS_ERROR;
 80017fe:	2302      	movs	r3, #2
			return STATUS_ERROR;
 8001800:	e052      	b.n	80018a8 <sd_card_read_data+0x1d0>
            }
            f_lseek(&file, f_tell(&file)+1);
 8001802:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001806:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f007 fc26 	bl	8009066 <f_lseek>
            *(data + image*256*3 + i*3 + j++) = atoi(string);
 800181a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800181e:	4618      	mov	r0, r3
 8001820:	f008 f811 	bl	8009846 <atoi>
 8001824:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 8001828:	4613      	mov	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	4619      	mov	r1, r3
 8001832:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8001836:	4613      	mov	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	4413      	add	r3, r2
 800183c:	18ca      	adds	r2, r1, r3
 800183e:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8001842:	1c59      	adds	r1, r3, #1
 8001844:	f8c7 1258 	str.w	r1, [r7, #600]	; 0x258
 8001848:	4413      	add	r3, r2
 800184a:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800184e:	f5a2 7219 	sub.w	r2, r2, #612	; 0x264
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	4413      	add	r3, r2
 8001856:	b2c2      	uxtb	r2, r0
 8001858:	701a      	strb	r2, [r3, #0]
            if(j>2){
 800185a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800185e:	2b02      	cmp	r3, #2
 8001860:	dd07      	ble.n	8001872 <sd_card_read_data+0x19a>
                j = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
                i++;
 8001868:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800186c:	3301      	adds	r3, #1
 800186e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
        while(i < 256){
 8001872:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8001876:	2bff      	cmp	r3, #255	; 0xff
 8001878:	f77f af75 	ble.w	8001766 <sd_card_read_data+0x8e>
            }
        }
        f_close(&file);
 800187c:	f107 0308 	add.w	r3, r7, #8
 8001880:	4618      	mov	r0, r3
 8001882:	f007 fbc6 	bl	8009012 <f_close>
        myprintf("Reading file %s is completed successfully\n", name);
 8001886:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800188a:	4619      	mov	r1, r3
 800188c:	480e      	ldr	r0, [pc, #56]	; (80018c8 <sd_card_read_data+0x1f0>)
 800188e:	f7ff fdfd 	bl	800148c <myprintf>
    for (uint8_t image = 0; image < 10; image++) {
 8001892:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8001896:	3301      	adds	r3, #1
 8001898:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800189c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80018a0:	2b09      	cmp	r3, #9
 80018a2:	f67f af26 	bls.w	80016f2 <sd_card_read_data+0x1a>
    }
    return STATUS_OK;
 80018a6:	2301      	movs	r3, #1
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	f507 771a 	add.w	r7, r7, #616	; 0x268
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	0800a460 	.word	0x0800a460
 80018b8:	0800a478 	.word	0x0800a478
 80018bc:	20006f64 	.word	0x20006f64
 80018c0:	0800a490 	.word	0x0800a490
 80018c4:	0800a4a4 	.word	0x0800a4a4
 80018c8:	0800a4b8 	.word	0x0800a4b8

080018cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_MspInit+0x4c>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	4a0f      	ldr	r2, [pc, #60]	; (8001918 <HAL_MspInit+0x4c>)
 80018dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e0:	6453      	str	r3, [r2, #68]	; 0x44
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <HAL_MspInit+0x4c>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_MspInit+0x4c>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	4a08      	ldr	r2, [pc, #32]	; (8001918 <HAL_MspInit+0x4c>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fc:	6413      	str	r3, [r2, #64]	; 0x40
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_MspInit+0x4c>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800

0800191c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08c      	sub	sp, #48	; 0x30
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a32      	ldr	r2, [pc, #200]	; (8001a04 <HAL_SPI_MspInit+0xe8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d12c      	bne.n	8001998 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
 8001942:	4b31      	ldr	r3, [pc, #196]	; (8001a08 <HAL_SPI_MspInit+0xec>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	4a30      	ldr	r2, [pc, #192]	; (8001a08 <HAL_SPI_MspInit+0xec>)
 8001948:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800194c:	6453      	str	r3, [r2, #68]	; 0x44
 800194e:	4b2e      	ldr	r3, [pc, #184]	; (8001a08 <HAL_SPI_MspInit+0xec>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001956:	61bb      	str	r3, [r7, #24]
 8001958:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <HAL_SPI_MspInit+0xec>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a29      	ldr	r2, [pc, #164]	; (8001a08 <HAL_SPI_MspInit+0xec>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <HAL_SPI_MspInit+0xec>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001976:	23e0      	movs	r3, #224	; 0xe0
 8001978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001986:	2305      	movs	r3, #5
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	4619      	mov	r1, r3
 8001990:	481e      	ldr	r0, [pc, #120]	; (8001a0c <HAL_SPI_MspInit+0xf0>)
 8001992:	f001 fce1 	bl	8003358 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001996:	e030      	b.n	80019fa <HAL_SPI_MspInit+0xde>
  else if(hspi->Instance==SPI3)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a1c      	ldr	r2, [pc, #112]	; (8001a10 <HAL_SPI_MspInit+0xf4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d12b      	bne.n	80019fa <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <HAL_SPI_MspInit+0xec>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	4a17      	ldr	r2, [pc, #92]	; (8001a08 <HAL_SPI_MspInit+0xec>)
 80019ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b0:	6413      	str	r3, [r2, #64]	; 0x40
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_SPI_MspInit+0xec>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HAL_SPI_MspInit+0xec>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a10      	ldr	r2, [pc, #64]	; (8001a08 <HAL_SPI_MspInit+0xec>)
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <HAL_SPI_MspInit+0xec>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_CLK_Pin|LCD_DIN_Pin;
 80019da:	2328      	movs	r3, #40	; 0x28
 80019dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e6:	2303      	movs	r3, #3
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019ea:	2306      	movs	r3, #6
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ee:	f107 031c 	add.w	r3, r7, #28
 80019f2:	4619      	mov	r1, r3
 80019f4:	4807      	ldr	r0, [pc, #28]	; (8001a14 <HAL_SPI_MspInit+0xf8>)
 80019f6:	f001 fcaf 	bl	8003358 <HAL_GPIO_Init>
}
 80019fa:	bf00      	nop
 80019fc:	3730      	adds	r7, #48	; 0x30
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40013000 	.word	0x40013000
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020000 	.word	0x40020000
 8001a10:	40003c00 	.word	0x40003c00
 8001a14:	40020400 	.word	0x40020400

08001a18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a59      	ldr	r2, [pc, #356]	; (8001b8c <HAL_TIM_Base_MspInit+0x174>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d13f      	bne.n	8001aaa <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	4b58      	ldr	r3, [pc, #352]	; (8001b90 <HAL_TIM_Base_MspInit+0x178>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	4a57      	ldr	r2, [pc, #348]	; (8001b90 <HAL_TIM_Base_MspInit+0x178>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3a:	4b55      	ldr	r3, [pc, #340]	; (8001b90 <HAL_TIM_Base_MspInit+0x178>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001a46:	4b53      	ldr	r3, [pc, #332]	; (8001b94 <HAL_TIM_Base_MspInit+0x17c>)
 8001a48:	4a53      	ldr	r2, [pc, #332]	; (8001b98 <HAL_TIM_Base_MspInit+0x180>)
 8001a4a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001a4c:	4b51      	ldr	r3, [pc, #324]	; (8001b94 <HAL_TIM_Base_MspInit+0x17c>)
 8001a4e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001a52:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a54:	4b4f      	ldr	r3, [pc, #316]	; (8001b94 <HAL_TIM_Base_MspInit+0x17c>)
 8001a56:	2240      	movs	r2, #64	; 0x40
 8001a58:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a5a:	4b4e      	ldr	r3, [pc, #312]	; (8001b94 <HAL_TIM_Base_MspInit+0x17c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a60:	4b4c      	ldr	r3, [pc, #304]	; (8001b94 <HAL_TIM_Base_MspInit+0x17c>)
 8001a62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a66:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a68:	4b4a      	ldr	r3, [pc, #296]	; (8001b94 <HAL_TIM_Base_MspInit+0x17c>)
 8001a6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a6e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a70:	4b48      	ldr	r3, [pc, #288]	; (8001b94 <HAL_TIM_Base_MspInit+0x17c>)
 8001a72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a76:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8001a78:	4b46      	ldr	r3, [pc, #280]	; (8001b94 <HAL_TIM_Base_MspInit+0x17c>)
 8001a7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a7e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001a80:	4b44      	ldr	r3, [pc, #272]	; (8001b94 <HAL_TIM_Base_MspInit+0x17c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a86:	4b43      	ldr	r3, [pc, #268]	; (8001b94 <HAL_TIM_Base_MspInit+0x17c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001a8c:	4841      	ldr	r0, [pc, #260]	; (8001b94 <HAL_TIM_Base_MspInit+0x17c>)
 8001a8e:	f001 f8d1 	bl	8002c34 <HAL_DMA_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8001a98:	f7ff fcf2 	bl	8001480 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a3d      	ldr	r2, [pc, #244]	; (8001b94 <HAL_TIM_Base_MspInit+0x17c>)
 8001aa0:	625a      	str	r2, [r3, #36]	; 0x24
 8001aa2:	4a3c      	ldr	r2, [pc, #240]	; (8001b94 <HAL_TIM_Base_MspInit+0x17c>)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001aa8:	e06b      	b.n	8001b82 <HAL_TIM_Base_MspInit+0x16a>
  else if(htim_base->Instance==TIM3)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a3b      	ldr	r2, [pc, #236]	; (8001b9c <HAL_TIM_Base_MspInit+0x184>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d10e      	bne.n	8001ad2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	4b35      	ldr	r3, [pc, #212]	; (8001b90 <HAL_TIM_Base_MspInit+0x178>)
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	4a34      	ldr	r2, [pc, #208]	; (8001b90 <HAL_TIM_Base_MspInit+0x178>)
 8001abe:	f043 0302 	orr.w	r3, r3, #2
 8001ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac4:	4b32      	ldr	r3, [pc, #200]	; (8001b90 <HAL_TIM_Base_MspInit+0x178>)
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	693b      	ldr	r3, [r7, #16]
}
 8001ad0:	e057      	b.n	8001b82 <HAL_TIM_Base_MspInit+0x16a>
  else if(htim_base->Instance==TIM4)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a32      	ldr	r2, [pc, #200]	; (8001ba0 <HAL_TIM_Base_MspInit+0x188>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d10e      	bne.n	8001afa <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <HAL_TIM_Base_MspInit+0x178>)
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	4a2a      	ldr	r2, [pc, #168]	; (8001b90 <HAL_TIM_Base_MspInit+0x178>)
 8001ae6:	f043 0304 	orr.w	r3, r3, #4
 8001aea:	6413      	str	r3, [r2, #64]	; 0x40
 8001aec:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <HAL_TIM_Base_MspInit+0x178>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]
}
 8001af8:	e043      	b.n	8001b82 <HAL_TIM_Base_MspInit+0x16a>
  else if(htim_base->Instance==TIM5)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a29      	ldr	r2, [pc, #164]	; (8001ba4 <HAL_TIM_Base_MspInit+0x18c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d13e      	bne.n	8001b82 <HAL_TIM_Base_MspInit+0x16a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b04:	2300      	movs	r3, #0
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <HAL_TIM_Base_MspInit+0x178>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	4a20      	ldr	r2, [pc, #128]	; (8001b90 <HAL_TIM_Base_MspInit+0x178>)
 8001b0e:	f043 0308 	orr.w	r3, r3, #8
 8001b12:	6413      	str	r3, [r2, #64]	; 0x40
 8001b14:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <HAL_TIM_Base_MspInit+0x178>)
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8001b20:	4b21      	ldr	r3, [pc, #132]	; (8001ba8 <HAL_TIM_Base_MspInit+0x190>)
 8001b22:	4a22      	ldr	r2, [pc, #136]	; (8001bac <HAL_TIM_Base_MspInit+0x194>)
 8001b24:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8001b26:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <HAL_TIM_Base_MspInit+0x190>)
 8001b28:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001b2c:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <HAL_TIM_Base_MspInit+0x190>)
 8001b30:	2240      	movs	r2, #64	; 0x40
 8001b32:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b34:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <HAL_TIM_Base_MspInit+0x190>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <HAL_TIM_Base_MspInit+0x190>)
 8001b3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b40:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b42:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <HAL_TIM_Base_MspInit+0x190>)
 8001b44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b48:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b4a:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <HAL_TIM_Base_MspInit+0x190>)
 8001b4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b50:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_CIRCULAR;
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_TIM_Base_MspInit+0x190>)
 8001b54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b58:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001b5a:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <HAL_TIM_Base_MspInit+0x190>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_TIM_Base_MspInit+0x190>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8001b66:	4810      	ldr	r0, [pc, #64]	; (8001ba8 <HAL_TIM_Base_MspInit+0x190>)
 8001b68:	f001 f864 	bl	8002c34 <HAL_DMA_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_TIM_Base_MspInit+0x15e>
      Error_Handler();
 8001b72:	f7ff fc85 	bl	8001480 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a0b      	ldr	r2, [pc, #44]	; (8001ba8 <HAL_TIM_Base_MspInit+0x190>)
 8001b7a:	625a      	str	r2, [r3, #36]	; 0x24
 8001b7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <HAL_TIM_Base_MspInit+0x190>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b82:	bf00      	nop
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40010000 	.word	0x40010000
 8001b90:	40023800 	.word	0x40023800
 8001b94:	20000274 	.word	0x20000274
 8001b98:	40026428 	.word	0x40026428
 8001b9c:	40000400 	.word	0x40000400
 8001ba0:	40000800 	.word	0x40000800
 8001ba4:	40000c00 	.word	0x40000c00
 8001ba8:	200002d4 	.word	0x200002d4
 8001bac:	40026040 	.word	0x40026040

08001bb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a48      	ldr	r2, [pc, #288]	; (8001cf0 <HAL_TIM_MspPostInit+0x140>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d11f      	bne.n	8001c12 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
 8001bd6:	4b47      	ldr	r3, [pc, #284]	; (8001cf4 <HAL_TIM_MspPostInit+0x144>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a46      	ldr	r2, [pc, #280]	; (8001cf4 <HAL_TIM_MspPostInit+0x144>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b44      	ldr	r3, [pc, #272]	; (8001cf4 <HAL_TIM_MspPostInit+0x144>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	61bb      	str	r3, [r7, #24]
 8001bec:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c00:	2301      	movs	r3, #1
 8001c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	4619      	mov	r1, r3
 8001c0a:	483b      	ldr	r0, [pc, #236]	; (8001cf8 <HAL_TIM_MspPostInit+0x148>)
 8001c0c:	f001 fba4 	bl	8003358 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001c10:	e06a      	b.n	8001ce8 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM3)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a39      	ldr	r2, [pc, #228]	; (8001cfc <HAL_TIM_MspPostInit+0x14c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d11e      	bne.n	8001c5a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	4b34      	ldr	r3, [pc, #208]	; (8001cf4 <HAL_TIM_MspPostInit+0x144>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	4a33      	ldr	r2, [pc, #204]	; (8001cf4 <HAL_TIM_MspPostInit+0x144>)
 8001c26:	f043 0304 	orr.w	r3, r3, #4
 8001c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2c:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <HAL_TIM_MspPostInit+0x144>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c44:	2300      	movs	r3, #0
 8001c46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	4619      	mov	r1, r3
 8001c52:	482b      	ldr	r0, [pc, #172]	; (8001d00 <HAL_TIM_MspPostInit+0x150>)
 8001c54:	f001 fb80 	bl	8003358 <HAL_GPIO_Init>
}
 8001c58:	e046      	b.n	8001ce8 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM4)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a29      	ldr	r2, [pc, #164]	; (8001d04 <HAL_TIM_MspPostInit+0x154>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d11e      	bne.n	8001ca2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c64:	2300      	movs	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <HAL_TIM_MspPostInit+0x144>)
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6c:	4a21      	ldr	r2, [pc, #132]	; (8001cf4 <HAL_TIM_MspPostInit+0x144>)
 8001c6e:	f043 0302 	orr.w	r3, r3, #2
 8001c72:	6313      	str	r3, [r2, #48]	; 0x30
 8001c74:	4b1f      	ldr	r3, [pc, #124]	; (8001cf4 <HAL_TIM_MspPostInit+0x144>)
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c80:	2340      	movs	r3, #64	; 0x40
 8001c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c90:	2302      	movs	r3, #2
 8001c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	4619      	mov	r1, r3
 8001c9a:	481b      	ldr	r0, [pc, #108]	; (8001d08 <HAL_TIM_MspPostInit+0x158>)
 8001c9c:	f001 fb5c 	bl	8003358 <HAL_GPIO_Init>
}
 8001ca0:	e022      	b.n	8001ce8 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM5)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a19      	ldr	r2, [pc, #100]	; (8001d0c <HAL_TIM_MspPostInit+0x15c>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d11d      	bne.n	8001ce8 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <HAL_TIM_MspPostInit+0x144>)
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	4a0f      	ldr	r2, [pc, #60]	; (8001cf4 <HAL_TIM_MspPostInit+0x144>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbc:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <HAL_TIM_MspPostInit+0x144>)
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cdc:	f107 031c 	add.w	r3, r7, #28
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <HAL_TIM_MspPostInit+0x148>)
 8001ce4:	f001 fb38 	bl	8003358 <HAL_GPIO_Init>
}
 8001ce8:	bf00      	nop
 8001cea:	3730      	adds	r7, #48	; 0x30
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40010000 	.word	0x40010000
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	40000400 	.word	0x40000400
 8001d00:	40020800 	.word	0x40020800
 8001d04:	40000800 	.word	0x40000800
 8001d08:	40020400 	.word	0x40020400
 8001d0c:	40000c00 	.word	0x40000c00

08001d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	; 0x28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a19      	ldr	r2, [pc, #100]	; (8001d94 <HAL_UART_MspInit+0x84>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d12b      	bne.n	8001d8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <HAL_UART_MspInit+0x88>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a17      	ldr	r2, [pc, #92]	; (8001d98 <HAL_UART_MspInit+0x88>)
 8001d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <HAL_UART_MspInit+0x88>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <HAL_UART_MspInit+0x88>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a10      	ldr	r2, [pc, #64]	; (8001d98 <HAL_UART_MspInit+0x88>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <HAL_UART_MspInit+0x88>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d6a:	230c      	movs	r3, #12
 8001d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d76:	2303      	movs	r3, #3
 8001d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d7a:	2307      	movs	r3, #7
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	4619      	mov	r1, r3
 8001d84:	4805      	ldr	r0, [pc, #20]	; (8001d9c <HAL_UART_MspInit+0x8c>)
 8001d86:	f001 fae7 	bl	8003358 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d8a:	bf00      	nop
 8001d8c:	3728      	adds	r7, #40	; 0x28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40004400 	.word	0x40004400
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40020000 	.word	0x40020000

08001da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <NMI_Handler+0x4>

08001da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001daa:	e7fe      	b.n	8001daa <HardFault_Handler+0x4>

08001dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <MemManage_Handler+0x4>

08001db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db6:	e7fe      	b.n	8001db6 <BusFault_Handler+0x4>

08001db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <UsageFault_Handler+0x4>

08001dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dec:	f000 fdcc 	bl	8002988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_UP_Pin);
 8001df8:	2002      	movs	r0, #2
 8001dfa:	f001 fc4b 	bl	8003694 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_MID_Pin);
 8001e06:	2004      	movs	r0, #4
 8001e08:	f001 fc44 	bl	8003694 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_DOWN_Pin);
 8001e14:	2008      	movs	r0, #8
 8001e16:	f001 fc3d 	bl	8003694 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <DMA1_Stream2_IRQHandler+0x10>)
 8001e26:	f001 f82d 	bl	8002e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200002d4 	.word	0x200002d4

08001e34 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <DMA2_Stream1_IRQHandler+0x10>)
 8001e3a:	f001 f823 	bl	8002e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000274 	.word	0x20000274

08001e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e50:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <_sbrk+0x5c>)
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <_sbrk+0x60>)
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e5c:	4b13      	ldr	r3, [pc, #76]	; (8001eac <_sbrk+0x64>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <_sbrk+0x64>)
 8001e66:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <_sbrk+0x68>)
 8001e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d207      	bcs.n	8001e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e78:	f007 fcea 	bl	8009850 <__errno>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	220c      	movs	r2, #12
 8001e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
 8001e86:	e009      	b.n	8001e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <_sbrk+0x64>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	4a05      	ldr	r2, [pc, #20]	; (8001eac <_sbrk+0x64>)
 8001e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20018000 	.word	0x20018000
 8001ea8:	00000400 	.word	0x00000400
 8001eac:	20007080 	.word	0x20007080
 8001eb0:	200072e0 	.word	0x200072e0

08001eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <SystemInit+0x20>)
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebe:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <SystemInit+0x20>)
 8001ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <PCD8544_send>:
	{ 0x11, 0x1B, 0x04 },   // }
	{ 0x04, 0x06, 0x02 },   // ~
	{ 0x1F, 0x1F, 0x1F },   // delete
};

void PCD8544_send(unsigned char data) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	71fb      	strb	r3, [r7, #7]
    PCD8544_CE_LOW;
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ee8:	4809      	ldr	r0, [pc, #36]	; (8001f10 <PCD8544_send+0x38>)
 8001eea:	f001 fbb9 	bl	8003660 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, &data, 1, HAL_MAX_DELAY);
 8001eee:	1df9      	adds	r1, r7, #7
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	4807      	ldr	r0, [pc, #28]	; (8001f14 <PCD8544_send+0x3c>)
 8001ef8:	f002 f905 	bl	8004106 <HAL_SPI_Transmit>
    PCD8544_CE_HIGH;
 8001efc:	2201      	movs	r2, #1
 8001efe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f02:	4803      	ldr	r0, [pc, #12]	; (8001f10 <PCD8544_send+0x38>)
 8001f04:	f001 fbac 	bl	8003660 <HAL_GPIO_WritePin>
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40020000 	.word	0x40020000
 8001f14:	200000fc 	.word	0x200000fc

08001f18 <PCD8544_Pin>:

void PCD8544_Pin(PCD8544_Pin_t pin, PCD8544_State_t state) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	460a      	mov	r2, r1
 8001f22:	71fb      	strb	r3, [r7, #7]
 8001f24:	4613      	mov	r3, r2
 8001f26:	71bb      	strb	r3, [r7, #6]
	switch (pin) {
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d002      	beq.n	8001f34 <PCD8544_Pin+0x1c>
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d00f      	beq.n	8001f52 <PCD8544_Pin+0x3a>
			    HAL_GPIO_WritePin(PCD8544_RST_PORT, PCD8544_RST_PIN, GPIO_PIN_SET);
			} else {
			    HAL_GPIO_WritePin(PCD8544_RST_PORT, PCD8544_RST_PIN, GPIO_PIN_RESET);
			}
			break;
		default: break;
 8001f32:	e01f      	b.n	8001f74 <PCD8544_Pin+0x5c>
			if (state != PCD8544_State_Low) {
 8001f34:	79bb      	ldrb	r3, [r7, #6]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d005      	beq.n	8001f46 <PCD8544_Pin+0x2e>
				HAL_GPIO_WritePin(PCD8544_DC_PORT, PCD8544_DC_PIN, GPIO_PIN_SET);
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	2110      	movs	r1, #16
 8001f3e:	480f      	ldr	r0, [pc, #60]	; (8001f7c <PCD8544_Pin+0x64>)
 8001f40:	f001 fb8e 	bl	8003660 <HAL_GPIO_WritePin>
			break;
 8001f44:	e016      	b.n	8001f74 <PCD8544_Pin+0x5c>
			    HAL_GPIO_WritePin(PCD8544_DC_PORT, PCD8544_DC_PIN, GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2110      	movs	r1, #16
 8001f4a:	480c      	ldr	r0, [pc, #48]	; (8001f7c <PCD8544_Pin+0x64>)
 8001f4c:	f001 fb88 	bl	8003660 <HAL_GPIO_WritePin>
			break;
 8001f50:	e010      	b.n	8001f74 <PCD8544_Pin+0x5c>
			if (state != PCD8544_State_Low) {
 8001f52:	79bb      	ldrb	r3, [r7, #6]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d006      	beq.n	8001f66 <PCD8544_Pin+0x4e>
			    HAL_GPIO_WritePin(PCD8544_RST_PORT, PCD8544_RST_PIN, GPIO_PIN_SET);
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f5e:	4807      	ldr	r0, [pc, #28]	; (8001f7c <PCD8544_Pin+0x64>)
 8001f60:	f001 fb7e 	bl	8003660 <HAL_GPIO_WritePin>
			break;
 8001f64:	e005      	b.n	8001f72 <PCD8544_Pin+0x5a>
			    HAL_GPIO_WritePin(PCD8544_RST_PORT, PCD8544_RST_PIN, GPIO_PIN_RESET);
 8001f66:	2200      	movs	r2, #0
 8001f68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f6c:	4803      	ldr	r0, [pc, #12]	; (8001f7c <PCD8544_Pin+0x64>)
 8001f6e:	f001 fb77 	bl	8003660 <HAL_GPIO_WritePin>
			break;
 8001f72:	bf00      	nop
	}
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40020400 	.word	0x40020400

08001f80 <PCD8544_Delay>:


void PCD8544_Delay(unsigned long micros) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
    HAL_Delay(micros);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 fd1d 	bl	80029c8 <HAL_Delay>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <PCD8544_Init>:

void PCD8544_Init(unsigned char contrast) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
	//Reset
	PCD8544_Pin(PCD8544_Pin_RST, PCD8544_State_Low);
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	2002      	movs	r0, #2
 8001fa6:	f7ff ffb7 	bl	8001f18 <PCD8544_Pin>
	PCD8544_Delay(2000);
 8001faa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001fae:	f7ff ffe7 	bl	8001f80 <PCD8544_Delay>
	PCD8544_Pin(PCD8544_Pin_RST, PCD8544_State_High);
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	2002      	movs	r0, #2
 8001fb6:	f7ff ffaf 	bl	8001f18 <PCD8544_Pin>

	//Turn ON BL
	HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8001fba:	2201      	movs	r2, #1
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	4816      	ldr	r0, [pc, #88]	; (8002018 <PCD8544_Init+0x80>)
 8001fc0:	f001 fb4e 	bl	8003660 <HAL_GPIO_WritePin>
	// Go in extended mode
	PCD8544_Write(PCD8544_COMMAND, PCD8544_FUNCTIONSET | PCD8544_EXTENDEDINSTRUCTION);
 8001fc4:	2121      	movs	r1, #33	; 0x21
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f000 f828 	bl	800201c <PCD8544_Write>

	// LCD bias select
	PCD8544_Write(PCD8544_COMMAND, PCD8544_SETBIAS | 0x4);
 8001fcc:	2114      	movs	r1, #20
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f000 f824 	bl	800201c <PCD8544_Write>

	// set VOP
	if (contrast > 0x7F) {
 8001fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	da01      	bge.n	8001fe0 <PCD8544_Init+0x48>
		contrast = 0x7F;
 8001fdc:	237f      	movs	r3, #127	; 0x7f
 8001fde:	71fb      	strb	r3, [r7, #7]
	}
	PCD8544_Write(PCD8544_COMMAND, PCD8544_SETVOP | contrast);
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	4619      	mov	r1, r3
 8001fea:	2000      	movs	r0, #0
 8001fec:	f000 f816 	bl	800201c <PCD8544_Write>

	// normal mode
	PCD8544_Write(PCD8544_COMMAND, PCD8544_FUNCTIONSET);
 8001ff0:	2120      	movs	r1, #32
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f000 f812 	bl	800201c <PCD8544_Write>

	// Set display to Normal
	PCD8544_Write(PCD8544_COMMAND, PCD8544_DISPLAYCONTROL | PCD8544_DISPLAYNORMAL);
 8001ff8:	210c      	movs	r1, #12
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f000 f80e 	bl	800201c <PCD8544_Write>

	//Set cursor to home position
	PCD8544_Home();
 8002000:	f000 f8b0 	bl	8002164 <PCD8544_Home>

	//Normal display
	PCD8544_Write(PCD8544_COMMAND, PCD8544_DISPLAYCONTROL | PCD8544_DISPLAYNORMAL);
 8002004:	210c      	movs	r1, #12
 8002006:	2000      	movs	r0, #0
 8002008:	f000 f808 	bl	800201c <PCD8544_Write>

	//Clear display
	PCD8544_Clear();
 800200c:	f000 f884 	bl	8002118 <PCD8544_Clear>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40020000 	.word	0x40020000

0800201c <PCD8544_Write>:

void PCD8544_Write(PCD8544_WriteType_t cd, unsigned char data) {
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	460a      	mov	r2, r1
 8002026:	71fb      	strb	r3, [r7, #7]
 8002028:	4613      	mov	r3, r2
 800202a:	71bb      	strb	r3, [r7, #6]
	switch (cd) {
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d006      	beq.n	8002040 <PCD8544_Write+0x24>
 8002032:	2b01      	cmp	r3, #1
 8002034:	d109      	bne.n	800204a <PCD8544_Write+0x2e>
		//Send data to lcd's ram
		case PCD8544_DATA:
			//Set DC pin HIGH
			PCD8544_Pin(PCD8544_Pin_DC, PCD8544_State_High);
 8002036:	2101      	movs	r1, #1
 8002038:	2001      	movs	r0, #1
 800203a:	f7ff ff6d 	bl	8001f18 <PCD8544_Pin>
			break;
 800203e:	e005      	b.n	800204c <PCD8544_Write+0x30>
		//Send command to lcd
		case PCD8544_COMMAND:
			//Set DC pin LOW
			PCD8544_Pin(PCD8544_Pin_DC, PCD8544_State_Low);
 8002040:	2100      	movs	r1, #0
 8002042:	2001      	movs	r0, #1
 8002044:	f7ff ff68 	bl	8001f18 <PCD8544_Pin>
			break;
 8002048:	e000      	b.n	800204c <PCD8544_Write+0x30>
		default: break;
 800204a:	bf00      	nop
	}
	//Send data
	PCD8544_send(data);
 800204c:	79bb      	ldrb	r3, [r7, #6]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff ff42 	bl	8001ed8 <PCD8544_send>
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <PCD8544_DrawPixel>:

	// normal mode
	PCD8544_Write(PCD8544_COMMAND, PCD8544_FUNCTIONSET);
}

void PCD8544_DrawPixel(unsigned char x, unsigned char y, PCD8544_Pixel_t pixel) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
 8002066:	460b      	mov	r3, r1
 8002068:	71bb      	strb	r3, [r7, #6]
 800206a:	4613      	mov	r3, r2
 800206c:	717b      	strb	r3, [r7, #5]
	if (x >= PCD8544_WIDTH) {
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	2b53      	cmp	r3, #83	; 0x53
 8002072:	d849      	bhi.n	8002108 <PCD8544_DrawPixel+0xac>
		return;
	}
	if (y >= PCD8544_HEIGHT) {
 8002074:	79bb      	ldrb	r3, [r7, #6]
 8002076:	2b2f      	cmp	r3, #47	; 0x2f
 8002078:	d848      	bhi.n	800210c <PCD8544_DrawPixel+0xb0>
		return;
	}

	if (pixel != PCD8544_Pixel_Clear) {
 800207a:	797b      	ldrb	r3, [r7, #5]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d01d      	beq.n	80020bc <PCD8544_DrawPixel+0x60>
		PCD8544_Buffer[x + (y / 8) * PCD8544_WIDTH] |= 1 << (y % 8);
 8002080:	79fa      	ldrb	r2, [r7, #7]
 8002082:	79bb      	ldrb	r3, [r7, #6]
 8002084:	08db      	lsrs	r3, r3, #3
 8002086:	b2d8      	uxtb	r0, r3
 8002088:	4601      	mov	r1, r0
 800208a:	2354      	movs	r3, #84	; 0x54
 800208c:	fb01 f303 	mul.w	r3, r1, r3
 8002090:	4413      	add	r3, r2
 8002092:	4a20      	ldr	r2, [pc, #128]	; (8002114 <PCD8544_DrawPixel+0xb8>)
 8002094:	5cd3      	ldrb	r3, [r2, r3]
 8002096:	b25a      	sxtb	r2, r3
 8002098:	79bb      	ldrb	r3, [r7, #6]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	2101      	movs	r1, #1
 80020a0:	fa01 f303 	lsl.w	r3, r1, r3
 80020a4:	b25b      	sxtb	r3, r3
 80020a6:	4313      	orrs	r3, r2
 80020a8:	b259      	sxtb	r1, r3
 80020aa:	79fa      	ldrb	r2, [r7, #7]
 80020ac:	2354      	movs	r3, #84	; 0x54
 80020ae:	fb00 f303 	mul.w	r3, r0, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	b2c9      	uxtb	r1, r1
 80020b6:	4a17      	ldr	r2, [pc, #92]	; (8002114 <PCD8544_DrawPixel+0xb8>)
 80020b8:	54d1      	strb	r1, [r2, r3]
 80020ba:	e01e      	b.n	80020fa <PCD8544_DrawPixel+0x9e>
	} else {
		PCD8544_Buffer[x + (y / 8) * PCD8544_WIDTH] &= ~(1 << (y % 8));
 80020bc:	79fa      	ldrb	r2, [r7, #7]
 80020be:	79bb      	ldrb	r3, [r7, #6]
 80020c0:	08db      	lsrs	r3, r3, #3
 80020c2:	b2d8      	uxtb	r0, r3
 80020c4:	4601      	mov	r1, r0
 80020c6:	2354      	movs	r3, #84	; 0x54
 80020c8:	fb01 f303 	mul.w	r3, r1, r3
 80020cc:	4413      	add	r3, r2
 80020ce:	4a11      	ldr	r2, [pc, #68]	; (8002114 <PCD8544_DrawPixel+0xb8>)
 80020d0:	5cd3      	ldrb	r3, [r2, r3]
 80020d2:	b25a      	sxtb	r2, r3
 80020d4:	79bb      	ldrb	r3, [r7, #6]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	2101      	movs	r1, #1
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	b25b      	sxtb	r3, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	b25b      	sxtb	r3, r3
 80020e6:	4013      	ands	r3, r2
 80020e8:	b259      	sxtb	r1, r3
 80020ea:	79fa      	ldrb	r2, [r7, #7]
 80020ec:	2354      	movs	r3, #84	; 0x54
 80020ee:	fb00 f303 	mul.w	r3, r0, r3
 80020f2:	4413      	add	r3, r2
 80020f4:	b2c9      	uxtb	r1, r1
 80020f6:	4a07      	ldr	r2, [pc, #28]	; (8002114 <PCD8544_DrawPixel+0xb8>)
 80020f8:	54d1      	strb	r1, [r2, r3]
	}
	PCD8544_UpdateArea(x, y, x, y);
 80020fa:	79bb      	ldrb	r3, [r7, #6]
 80020fc:	79fa      	ldrb	r2, [r7, #7]
 80020fe:	79b9      	ldrb	r1, [r7, #6]
 8002100:	79f8      	ldrb	r0, [r7, #7]
 8002102:	f000 f89d 	bl	8002240 <PCD8544_UpdateArea>
 8002106:	e002      	b.n	800210e <PCD8544_DrawPixel+0xb2>
		return;
 8002108:	bf00      	nop
 800210a:	e000      	b.n	800210e <PCD8544_DrawPixel+0xb2>
		return;
 800210c:	bf00      	nop
}
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20007084 	.word	0x20007084

08002118 <PCD8544_Clear>:
	} else {
		PCD8544_Write(PCD8544_COMMAND, PCD8544_DISPLAYCONTROL | PCD8544_DISPLAYNORMAL);
	}
}

void PCD8544_Clear(void) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
	unsigned int i;
	PCD8544_Home();
 800211e:	f000 f821 	bl	8002164 <PCD8544_Home>
	for (i = 0; i < PCD8544_BUFFER_SIZE; i++) {
 8002122:	2300      	movs	r3, #0
 8002124:	607b      	str	r3, [r7, #4]
 8002126:	e007      	b.n	8002138 <PCD8544_Clear+0x20>
		PCD8544_Buffer[i] = 0x00;
 8002128:	4a0d      	ldr	r2, [pc, #52]	; (8002160 <PCD8544_Clear+0x48>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < PCD8544_BUFFER_SIZE; i++) {
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3301      	adds	r3, #1
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800213e:	d3f3      	bcc.n	8002128 <PCD8544_Clear+0x10>
		//PCD8544_Write(PCD8544_DATA, 0x00);
	}
	PCD8544_GotoXY(0, 0);
 8002140:	2100      	movs	r1, #0
 8002142:	2000      	movs	r0, #0
 8002144:	f000 f8b8 	bl	80022b8 <PCD8544_GotoXY>
	PCD8544_UpdateArea(0, 0, PCD8544_WIDTH - 1, PCD8544_HEIGHT - 1);
 8002148:	232f      	movs	r3, #47	; 0x2f
 800214a:	2253      	movs	r2, #83	; 0x53
 800214c:	2100      	movs	r1, #0
 800214e:	2000      	movs	r0, #0
 8002150:	f000 f876 	bl	8002240 <PCD8544_UpdateArea>
	PCD8544_Refresh();
 8002154:	f000 f812 	bl	800217c <PCD8544_Refresh>
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20007084 	.word	0x20007084

08002164 <PCD8544_Home>:

void PCD8544_Home(void) {
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
	PCD8544_Write(PCD8544_COMMAND, PCD8544_SETXADDR | 0);
 8002168:	2180      	movs	r1, #128	; 0x80
 800216a:	2000      	movs	r0, #0
 800216c:	f7ff ff56 	bl	800201c <PCD8544_Write>
	PCD8544_Write(PCD8544_COMMAND, PCD8544_SETYADDR | 0);
 8002170:	2140      	movs	r1, #64	; 0x40
 8002172:	2000      	movs	r0, #0
 8002174:	f7ff ff52 	bl	800201c <PCD8544_Write>
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}

0800217c <PCD8544_Refresh>:

void PCD8544_Refresh(void) {
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
	unsigned char i, j;
	for (i = 0; i < 6; i++) {
 8002182:	2300      	movs	r3, #0
 8002184:	71fb      	strb	r3, [r7, #7]
 8002186:	e03b      	b.n	8002200 <PCD8544_Refresh+0x84>
		//Not in range yet
		if (PCD8544_UpdateYmin > ((i + 1) * 8)) {
 8002188:	4b28      	ldr	r3, [pc, #160]	; (800222c <PCD8544_Refresh+0xb0>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	3301      	adds	r3, #1
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	429a      	cmp	r2, r3
 8002196:	dc2f      	bgt.n	80021f8 <PCD8544_Refresh+0x7c>
			continue;
		}
		//Over range, stop
		if ((i * 8) > PCD8544_UpdateYmax) {
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4a24      	ldr	r2, [pc, #144]	; (8002230 <PCD8544_Refresh+0xb4>)
 800219e:	7812      	ldrb	r2, [r2, #0]
 80021a0:	4293      	cmp	r3, r2
 80021a2:	dc31      	bgt.n	8002208 <PCD8544_Refresh+0x8c>
			break;
		}

		PCD8544_Write(PCD8544_COMMAND, PCD8544_SETYADDR | i);
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	4619      	mov	r1, r3
 80021ae:	2000      	movs	r0, #0
 80021b0:	f7ff ff34 	bl	800201c <PCD8544_Write>
		PCD8544_Write(PCD8544_COMMAND, PCD8544_SETXADDR | PCD8544_UpdateXmin);
 80021b4:	4b1f      	ldr	r3, [pc, #124]	; (8002234 <PCD8544_Refresh+0xb8>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	4619      	mov	r1, r3
 80021c0:	2000      	movs	r0, #0
 80021c2:	f7ff ff2b 	bl	800201c <PCD8544_Write>

		for (j = PCD8544_UpdateXmin; j <= PCD8544_UpdateXmax; j++) {
 80021c6:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <PCD8544_Refresh+0xb8>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	71bb      	strb	r3, [r7, #6]
 80021cc:	e00e      	b.n	80021ec <PCD8544_Refresh+0x70>
			PCD8544_Write(PCD8544_DATA, PCD8544_Buffer[(i * PCD8544_WIDTH) + j]);
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	2254      	movs	r2, #84	; 0x54
 80021d2:	fb03 f202 	mul.w	r2, r3, r2
 80021d6:	79bb      	ldrb	r3, [r7, #6]
 80021d8:	4413      	add	r3, r2
 80021da:	4a17      	ldr	r2, [pc, #92]	; (8002238 <PCD8544_Refresh+0xbc>)
 80021dc:	5cd3      	ldrb	r3, [r2, r3]
 80021de:	4619      	mov	r1, r3
 80021e0:	2001      	movs	r0, #1
 80021e2:	f7ff ff1b 	bl	800201c <PCD8544_Write>
		for (j = PCD8544_UpdateXmin; j <= PCD8544_UpdateXmax; j++) {
 80021e6:	79bb      	ldrb	r3, [r7, #6]
 80021e8:	3301      	adds	r3, #1
 80021ea:	71bb      	strb	r3, [r7, #6]
 80021ec:	4b13      	ldr	r3, [pc, #76]	; (800223c <PCD8544_Refresh+0xc0>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	79ba      	ldrb	r2, [r7, #6]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d9eb      	bls.n	80021ce <PCD8544_Refresh+0x52>
 80021f6:	e000      	b.n	80021fa <PCD8544_Refresh+0x7e>
			continue;
 80021f8:	bf00      	nop
	for (i = 0; i < 6; i++) {
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	3301      	adds	r3, #1
 80021fe:	71fb      	strb	r3, [r7, #7]
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	2b05      	cmp	r3, #5
 8002204:	d9c0      	bls.n	8002188 <PCD8544_Refresh+0xc>
 8002206:	e000      	b.n	800220a <PCD8544_Refresh+0x8e>
			break;
 8002208:	bf00      	nop
		}
	}

	PCD8544_UpdateXmin = PCD8544_WIDTH - 1;
 800220a:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <PCD8544_Refresh+0xb8>)
 800220c:	2253      	movs	r2, #83	; 0x53
 800220e:	701a      	strb	r2, [r3, #0]
	PCD8544_UpdateXmax = 0;
 8002210:	4b0a      	ldr	r3, [pc, #40]	; (800223c <PCD8544_Refresh+0xc0>)
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
	PCD8544_UpdateYmin = PCD8544_HEIGHT - 1;
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <PCD8544_Refresh+0xb0>)
 8002218:	222f      	movs	r2, #47	; 0x2f
 800221a:	701a      	strb	r2, [r3, #0]
	PCD8544_UpdateYmax = 0;
 800221c:	4b04      	ldr	r3, [pc, #16]	; (8002230 <PCD8544_Refresh+0xb4>)
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	2000727e 	.word	0x2000727e
 8002230:	2000727f 	.word	0x2000727f
 8002234:	2000727c 	.word	0x2000727c
 8002238:	20007084 	.word	0x20007084
 800223c:	2000727d 	.word	0x2000727d

08002240 <PCD8544_UpdateArea>:

void PCD8544_UpdateArea(unsigned char xMin, unsigned char yMin, unsigned char xMax, unsigned char yMax) {
 8002240:	b490      	push	{r4, r7}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	4604      	mov	r4, r0
 8002248:	4608      	mov	r0, r1
 800224a:	4611      	mov	r1, r2
 800224c:	461a      	mov	r2, r3
 800224e:	4623      	mov	r3, r4
 8002250:	71fb      	strb	r3, [r7, #7]
 8002252:	4603      	mov	r3, r0
 8002254:	71bb      	strb	r3, [r7, #6]
 8002256:	460b      	mov	r3, r1
 8002258:	717b      	strb	r3, [r7, #5]
 800225a:	4613      	mov	r3, r2
 800225c:	713b      	strb	r3, [r7, #4]
	if (xMin < PCD8544_UpdateXmin) {
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <PCD8544_UpdateArea+0x68>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	79fa      	ldrb	r2, [r7, #7]
 8002264:	429a      	cmp	r2, r3
 8002266:	d202      	bcs.n	800226e <PCD8544_UpdateArea+0x2e>
		PCD8544_UpdateXmin = xMin;
 8002268:	4a0f      	ldr	r2, [pc, #60]	; (80022a8 <PCD8544_UpdateArea+0x68>)
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	7013      	strb	r3, [r2, #0]
	}
	if (xMax > PCD8544_UpdateXmax) {
 800226e:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <PCD8544_UpdateArea+0x6c>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	797a      	ldrb	r2, [r7, #5]
 8002274:	429a      	cmp	r2, r3
 8002276:	d902      	bls.n	800227e <PCD8544_UpdateArea+0x3e>
		PCD8544_UpdateXmax = xMax;
 8002278:	4a0c      	ldr	r2, [pc, #48]	; (80022ac <PCD8544_UpdateArea+0x6c>)
 800227a:	797b      	ldrb	r3, [r7, #5]
 800227c:	7013      	strb	r3, [r2, #0]
	}
	if (yMin < PCD8544_UpdateYmin) {
 800227e:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <PCD8544_UpdateArea+0x70>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	79ba      	ldrb	r2, [r7, #6]
 8002284:	429a      	cmp	r2, r3
 8002286:	d202      	bcs.n	800228e <PCD8544_UpdateArea+0x4e>
		PCD8544_UpdateYmin = yMin;
 8002288:	4a09      	ldr	r2, [pc, #36]	; (80022b0 <PCD8544_UpdateArea+0x70>)
 800228a:	79bb      	ldrb	r3, [r7, #6]
 800228c:	7013      	strb	r3, [r2, #0]
	}
	if (yMax > PCD8544_UpdateYmax) {
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <PCD8544_UpdateArea+0x74>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	793a      	ldrb	r2, [r7, #4]
 8002294:	429a      	cmp	r2, r3
 8002296:	d902      	bls.n	800229e <PCD8544_UpdateArea+0x5e>
		PCD8544_UpdateYmax = yMax;
 8002298:	4a06      	ldr	r2, [pc, #24]	; (80022b4 <PCD8544_UpdateArea+0x74>)
 800229a:	793b      	ldrb	r3, [r7, #4]
 800229c:	7013      	strb	r3, [r2, #0]
	}
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc90      	pop	{r4, r7}
 80022a6:	4770      	bx	lr
 80022a8:	2000727c 	.word	0x2000727c
 80022ac:	2000727d 	.word	0x2000727d
 80022b0:	2000727e 	.word	0x2000727e
 80022b4:	2000727f 	.word	0x2000727f

080022b8 <PCD8544_GotoXY>:

void PCD8544_GotoXY(unsigned char x, unsigned char y) {
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	460a      	mov	r2, r1
 80022c2:	71fb      	strb	r3, [r7, #7]
 80022c4:	4613      	mov	r3, r2
 80022c6:	71bb      	strb	r3, [r7, #6]
	PCD8544_x = x;
 80022c8:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <PCD8544_GotoXY+0x28>)
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	7013      	strb	r3, [r2, #0]
	PCD8544_y = y;
 80022ce:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <PCD8544_GotoXY+0x2c>)
 80022d0:	79bb      	ldrb	r3, [r7, #6]
 80022d2:	7013      	strb	r3, [r2, #0]
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	20007280 	.word	0x20007280
 80022e4:	20007281 	.word	0x20007281

080022e8 <PCD8544_Putc>:

void PCD8544_Putc(char c, PCD8544_Pixel_t color, PCD8544_FontSize_t size) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
 80022f2:	460b      	mov	r3, r1
 80022f4:	71bb      	strb	r3, [r7, #6]
 80022f6:	4613      	mov	r3, r2
 80022f8:	717b      	strb	r3, [r7, #5]
	unsigned char c_height, c_width, i, b, j;
	if (size == PCD8544_FontSize_3x5) {
 80022fa:	797b      	ldrb	r3, [r7, #5]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d104      	bne.n	800230a <PCD8544_Putc+0x22>
		c_width = PCD8544_CHAR3x5_WIDTH;
 8002300:	2304      	movs	r3, #4
 8002302:	73bb      	strb	r3, [r7, #14]
		c_height = PCD8544_CHAR3x5_HEIGHT;
 8002304:	2306      	movs	r3, #6
 8002306:	73fb      	strb	r3, [r7, #15]
 8002308:	e003      	b.n	8002312 <PCD8544_Putc+0x2a>
	} else {
		c_width = PCD8544_CHAR5x7_WIDTH;
 800230a:	2306      	movs	r3, #6
 800230c:	73bb      	strb	r3, [r7, #14]
		c_height = PCD8544_CHAR5x7_HEIGHT;
 800230e:	2308      	movs	r3, #8
 8002310:	73fb      	strb	r3, [r7, #15]
	}
	if ((PCD8544_x + c_width) > PCD8544_WIDTH) {
 8002312:	4b46      	ldr	r3, [pc, #280]	; (800242c <PCD8544_Putc+0x144>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	7bbb      	ldrb	r3, [r7, #14]
 800231a:	4413      	add	r3, r2
 800231c:	2b54      	cmp	r3, #84	; 0x54
 800231e:	dd09      	ble.n	8002334 <PCD8544_Putc+0x4c>
		//If at the end of a line of display, go to new line and set x to 0 position
		PCD8544_y += c_height;
 8002320:	4b43      	ldr	r3, [pc, #268]	; (8002430 <PCD8544_Putc+0x148>)
 8002322:	781a      	ldrb	r2, [r3, #0]
 8002324:	7bfb      	ldrb	r3, [r7, #15]
 8002326:	4413      	add	r3, r2
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4b41      	ldr	r3, [pc, #260]	; (8002430 <PCD8544_Putc+0x148>)
 800232c:	701a      	strb	r2, [r3, #0]
		PCD8544_x = 0;
 800232e:	4b3f      	ldr	r3, [pc, #252]	; (800242c <PCD8544_Putc+0x144>)
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < c_width - 1; i++) {
 8002334:	2300      	movs	r3, #0
 8002336:	737b      	strb	r3, [r7, #13]
 8002338:	e068      	b.n	800240c <PCD8544_Putc+0x124>
		if (c < 32) {
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	2b1f      	cmp	r3, #31
 800233e:	d91c      	bls.n	800237a <PCD8544_Putc+0x92>
			//b = _custom_chars[_font_size][(uint8_t)chr][i];
		} else if (size == PCD8544_FontSize_3x5) {
 8002340:	797b      	ldrb	r3, [r7, #5]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d10c      	bne.n	8002360 <PCD8544_Putc+0x78>
			b = PCD8544_Font3x5[c - 32][i];
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	f1a3 0220 	sub.w	r2, r3, #32
 800234c:	7b79      	ldrb	r1, [r7, #13]
 800234e:	4839      	ldr	r0, [pc, #228]	; (8002434 <PCD8544_Putc+0x14c>)
 8002350:	4613      	mov	r3, r2
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4413      	add	r3, r2
 8002356:	4403      	add	r3, r0
 8002358:	440b      	add	r3, r1
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	733b      	strb	r3, [r7, #12]
 800235e:	e00c      	b.n	800237a <PCD8544_Putc+0x92>
		} else {
			b = PCD8544_Font5x7[c - 32][i];
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	f1a3 0220 	sub.w	r2, r3, #32
 8002366:	7b79      	ldrb	r1, [r7, #13]
 8002368:	4833      	ldr	r0, [pc, #204]	; (8002438 <PCD8544_Putc+0x150>)
 800236a:	4613      	mov	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4403      	add	r3, r0
 8002374:	440b      	add	r3, r1
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	733b      	strb	r3, [r7, #12]
		}
		if (b == 0x00 && (c != 0 && c != 32)) {
 800237a:	7b3b      	ldrb	r3, [r7, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d105      	bne.n	800238c <PCD8544_Putc+0xa4>
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <PCD8544_Putc+0xa4>
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	2b20      	cmp	r3, #32
 800238a:	d13b      	bne.n	8002404 <PCD8544_Putc+0x11c>
			continue;
		}
		for (j = 0; j < c_height; j++) {
 800238c:	2300      	movs	r3, #0
 800238e:	72fb      	strb	r3, [r7, #11]
 8002390:	e02d      	b.n	80023ee <PCD8544_Putc+0x106>
			if (color == PCD8544_Pixel_Set) {
 8002392:	79bb      	ldrb	r3, [r7, #6]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d112      	bne.n	80023be <PCD8544_Putc+0xd6>
				PCD8544_DrawPixel(PCD8544_x, (PCD8544_y + j), ((b >> j) & 1) ? PCD8544_Pixel_Set : PCD8544_Pixel_Clear);
 8002398:	4b24      	ldr	r3, [pc, #144]	; (800242c <PCD8544_Putc+0x144>)
 800239a:	7818      	ldrb	r0, [r3, #0]
 800239c:	4b24      	ldr	r3, [pc, #144]	; (8002430 <PCD8544_Putc+0x148>)
 800239e:	781a      	ldrb	r2, [r3, #0]
 80023a0:	7afb      	ldrb	r3, [r7, #11]
 80023a2:	4413      	add	r3, r2
 80023a4:	b2d9      	uxtb	r1, r3
 80023a6:	7b3a      	ldrb	r2, [r7, #12]
 80023a8:	7afb      	ldrb	r3, [r7, #11]
 80023aa:	fa42 f303 	asr.w	r3, r2, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	461a      	mov	r2, r3
 80023b8:	f7ff fe50 	bl	800205c <PCD8544_DrawPixel>
 80023bc:	e014      	b.n	80023e8 <PCD8544_Putc+0x100>
			} else {
				PCD8544_DrawPixel(PCD8544_x, (PCD8544_y + j), ((b >> j) & 1) ? PCD8544_Pixel_Clear : PCD8544_Pixel_Set);
 80023be:	4b1b      	ldr	r3, [pc, #108]	; (800242c <PCD8544_Putc+0x144>)
 80023c0:	7818      	ldrb	r0, [r3, #0]
 80023c2:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <PCD8544_Putc+0x148>)
 80023c4:	781a      	ldrb	r2, [r3, #0]
 80023c6:	7afb      	ldrb	r3, [r7, #11]
 80023c8:	4413      	add	r3, r2
 80023ca:	b2d9      	uxtb	r1, r3
 80023cc:	7b3a      	ldrb	r2, [r7, #12]
 80023ce:	7afb      	ldrb	r3, [r7, #11]
 80023d0:	fa42 f303 	asr.w	r3, r2, r3
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b00      	cmp	r3, #0
 80023da:	bf0c      	ite	eq
 80023dc:	2301      	moveq	r3, #1
 80023de:	2300      	movne	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	461a      	mov	r2, r3
 80023e4:	f7ff fe3a 	bl	800205c <PCD8544_DrawPixel>
		for (j = 0; j < c_height; j++) {
 80023e8:	7afb      	ldrb	r3, [r7, #11]
 80023ea:	3301      	adds	r3, #1
 80023ec:	72fb      	strb	r3, [r7, #11]
 80023ee:	7afa      	ldrb	r2, [r7, #11]
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d3cd      	bcc.n	8002392 <PCD8544_Putc+0xaa>
			}
		}
		PCD8544_x++;
 80023f6:	4b0d      	ldr	r3, [pc, #52]	; (800242c <PCD8544_Putc+0x144>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	3301      	adds	r3, #1
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <PCD8544_Putc+0x144>)
 8002400:	701a      	strb	r2, [r3, #0]
 8002402:	e000      	b.n	8002406 <PCD8544_Putc+0x11e>
			continue;
 8002404:	bf00      	nop
	for (i = 0; i < c_width - 1; i++) {
 8002406:	7b7b      	ldrb	r3, [r7, #13]
 8002408:	3301      	adds	r3, #1
 800240a:	737b      	strb	r3, [r7, #13]
 800240c:	7b7a      	ldrb	r2, [r7, #13]
 800240e:	7bbb      	ldrb	r3, [r7, #14]
 8002410:	3b01      	subs	r3, #1
 8002412:	429a      	cmp	r2, r3
 8002414:	db91      	blt.n	800233a <PCD8544_Putc+0x52>
	}
	PCD8544_x++;
 8002416:	4b05      	ldr	r3, [pc, #20]	; (800242c <PCD8544_Putc+0x144>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	3301      	adds	r3, #1
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4b03      	ldr	r3, [pc, #12]	; (800242c <PCD8544_Putc+0x144>)
 8002420:	701a      	strb	r2, [r3, #0]
}
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20007280 	.word	0x20007280
 8002430:	20007281 	.word	0x20007281
 8002434:	0800a788 	.word	0x0800a788
 8002438:	0800a540 	.word	0x0800a540

0800243c <PCD8544_Puts>:

void PCD8544_Puts(char *c, PCD8544_Pixel_t color, PCD8544_FontSize_t size) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	70fb      	strb	r3, [r7, #3]
 8002448:	4613      	mov	r3, r2
 800244a:	70bb      	strb	r3, [r7, #2]
	while (*c) {
 800244c:	e008      	b.n	8002460 <PCD8544_Puts+0x24>
		PCD8544_Putc(*c++, color, size);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	78ba      	ldrb	r2, [r7, #2]
 8002458:	78f9      	ldrb	r1, [r7, #3]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff ff44 	bl	80022e8 <PCD8544_Putc>
	while (*c) {
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1f2      	bne.n	800244e <PCD8544_Puts+0x12>
	}
}
 8002468:	bf00      	nop
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <PCD8544_DrawLine>:

void PCD8544_DrawLine(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1, PCD8544_Pixel_t color) {
 8002472:	b590      	push	{r4, r7, lr}
 8002474:	b085      	sub	sp, #20
 8002476:	af00      	add	r7, sp, #0
 8002478:	4604      	mov	r4, r0
 800247a:	4608      	mov	r0, r1
 800247c:	4611      	mov	r1, r2
 800247e:	461a      	mov	r2, r3
 8002480:	4623      	mov	r3, r4
 8002482:	71fb      	strb	r3, [r7, #7]
 8002484:	4603      	mov	r3, r0
 8002486:	71bb      	strb	r3, [r7, #6]
 8002488:	460b      	mov	r3, r1
 800248a:	717b      	strb	r3, [r7, #5]
 800248c:	4613      	mov	r3, r2
 800248e:	713b      	strb	r3, [r7, #4]
	short dx, dy;
	short temp;

	if (x0 > x1) {
 8002490:	79fa      	ldrb	r2, [r7, #7]
 8002492:	797b      	ldrb	r3, [r7, #5]
 8002494:	429a      	cmp	r2, r3
 8002496:	d905      	bls.n	80024a4 <PCD8544_DrawLine+0x32>
		temp = x1;
 8002498:	797b      	ldrb	r3, [r7, #5]
 800249a:	81fb      	strh	r3, [r7, #14]
		x1 = x0;
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	717b      	strb	r3, [r7, #5]
		x0 = temp;
 80024a0:	89fb      	ldrh	r3, [r7, #14]
 80024a2:	71fb      	strb	r3, [r7, #7]
	}
	if (y0 > y1) {
 80024a4:	79ba      	ldrb	r2, [r7, #6]
 80024a6:	793b      	ldrb	r3, [r7, #4]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d905      	bls.n	80024b8 <PCD8544_DrawLine+0x46>
		temp = y1;
 80024ac:	793b      	ldrb	r3, [r7, #4]
 80024ae:	81fb      	strh	r3, [r7, #14]
		y1 = y0;
 80024b0:	79bb      	ldrb	r3, [r7, #6]
 80024b2:	713b      	strb	r3, [r7, #4]
		y0 = temp;
 80024b4:	89fb      	ldrh	r3, [r7, #14]
 80024b6:	71bb      	strb	r3, [r7, #6]
	}

	dx = x1 - x0;
 80024b8:	797b      	ldrb	r3, [r7, #5]
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	81bb      	strh	r3, [r7, #12]
	dy = y1 - y0;
 80024c6:	793b      	ldrb	r3, [r7, #4]
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	79bb      	ldrb	r3, [r7, #6]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	817b      	strh	r3, [r7, #10]

	if (dx == 0) {
 80024d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10e      	bne.n	80024fa <PCD8544_DrawLine+0x88>
		do {
			PCD8544_DrawPixel(x0, y0, color);
 80024dc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80024e0:	79b9      	ldrb	r1, [r7, #6]
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff fdb9 	bl	800205c <PCD8544_DrawPixel>
			y0++;
 80024ea:	79bb      	ldrb	r3, [r7, #6]
 80024ec:	3301      	adds	r3, #1
 80024ee:	71bb      	strb	r3, [r7, #6]
		} while (y1 >= y0);
 80024f0:	793a      	ldrb	r2, [r7, #4]
 80024f2:	79bb      	ldrb	r3, [r7, #6]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d2f1      	bcs.n	80024dc <PCD8544_DrawLine+0x6a>
		return;
 80024f8:	e089      	b.n	800260e <PCD8544_DrawLine+0x19c>
	}
	if (dy == 0) {
 80024fa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10e      	bne.n	8002520 <PCD8544_DrawLine+0xae>
		do {
			PCD8544_DrawPixel(x0, y0, color);
 8002502:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002506:	79b9      	ldrb	r1, [r7, #6]
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fda6 	bl	800205c <PCD8544_DrawPixel>
			x0++;
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	3301      	adds	r3, #1
 8002514:	71fb      	strb	r3, [r7, #7]
		} while (x1 >= x0);
 8002516:	797a      	ldrb	r2, [r7, #5]
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	429a      	cmp	r2, r3
 800251c:	d2f1      	bcs.n	8002502 <PCD8544_DrawLine+0x90>
		return;
 800251e:	e076      	b.n	800260e <PCD8544_DrawLine+0x19c>
	}

	/* Based on Bresenham's line algorithm  */
	if (dx > dy) {
 8002520:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002524:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002528:	429a      	cmp	r2, r3
 800252a:	dd38      	ble.n	800259e <PCD8544_DrawLine+0x12c>
		temp = 2 * dy - dx;
 800252c:	897b      	ldrh	r3, [r7, #10]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	b29a      	uxth	r2, r3
 8002532:	89bb      	ldrh	r3, [r7, #12]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	b29b      	uxth	r3, r3
 8002538:	81fb      	strh	r3, [r7, #14]
		while (x0 != x1) {
 800253a:	e024      	b.n	8002586 <PCD8544_DrawLine+0x114>
			PCD8544_DrawPixel(x0, y0, color);
 800253c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002540:	79b9      	ldrb	r1, [r7, #6]
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fd89 	bl	800205c <PCD8544_DrawPixel>
			x0++;
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	3301      	adds	r3, #1
 800254e:	71fb      	strb	r3, [r7, #7]
			if (temp > 0) {
 8002550:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002554:	2b00      	cmp	r3, #0
 8002556:	dd0f      	ble.n	8002578 <PCD8544_DrawLine+0x106>
				y0++;
 8002558:	79bb      	ldrb	r3, [r7, #6]
 800255a:	3301      	adds	r3, #1
 800255c:	71bb      	strb	r3, [r7, #6]
				temp += 2 * dy - 2 * dx;
 800255e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002562:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	b29b      	uxth	r3, r3
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	89fb      	ldrh	r3, [r7, #14]
 8002570:	4413      	add	r3, r2
 8002572:	b29b      	uxth	r3, r3
 8002574:	81fb      	strh	r3, [r7, #14]
 8002576:	e006      	b.n	8002586 <PCD8544_DrawLine+0x114>
			} else {
				temp += 2 * dy;
 8002578:	897b      	ldrh	r3, [r7, #10]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	89fb      	ldrh	r3, [r7, #14]
 8002580:	4413      	add	r3, r2
 8002582:	b29b      	uxth	r3, r3
 8002584:	81fb      	strh	r3, [r7, #14]
		while (x0 != x1) {
 8002586:	79fa      	ldrb	r2, [r7, #7]
 8002588:	797b      	ldrb	r3, [r7, #5]
 800258a:	429a      	cmp	r2, r3
 800258c:	d1d6      	bne.n	800253c <PCD8544_DrawLine+0xca>
			}
		}
		PCD8544_DrawPixel(x0, y0, color);
 800258e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002592:	79b9      	ldrb	r1, [r7, #6]
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fd60 	bl	800205c <PCD8544_DrawPixel>
 800259c:	e037      	b.n	800260e <PCD8544_DrawLine+0x19c>
	} else {
		temp = 2 * dx - dy;
 800259e:	89bb      	ldrh	r3, [r7, #12]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	897b      	ldrh	r3, [r7, #10]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	81fb      	strh	r3, [r7, #14]
		while (y0 != y1) {
 80025ac:	e024      	b.n	80025f8 <PCD8544_DrawLine+0x186>
			PCD8544_DrawPixel(x0, y0, color);
 80025ae:	f897 2020 	ldrb.w	r2, [r7, #32]
 80025b2:	79b9      	ldrb	r1, [r7, #6]
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fd50 	bl	800205c <PCD8544_DrawPixel>
			y0++;
 80025bc:	79bb      	ldrb	r3, [r7, #6]
 80025be:	3301      	adds	r3, #1
 80025c0:	71bb      	strb	r3, [r7, #6]
			if (temp > 0) {
 80025c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	dd0f      	ble.n	80025ea <PCD8544_DrawLine+0x178>
				x0++;
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	3301      	adds	r3, #1
 80025ce:	71fb      	strb	r3, [r7, #7]
				temp += 2 * dy - 2 * dx;
 80025d0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80025d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	b29b      	uxth	r3, r3
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	89fb      	ldrh	r3, [r7, #14]
 80025e2:	4413      	add	r3, r2
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	81fb      	strh	r3, [r7, #14]
 80025e8:	e006      	b.n	80025f8 <PCD8544_DrawLine+0x186>
			} else {
				temp += 2 * dy;
 80025ea:	897b      	ldrh	r3, [r7, #10]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	89fb      	ldrh	r3, [r7, #14]
 80025f2:	4413      	add	r3, r2
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	81fb      	strh	r3, [r7, #14]
		while (y0 != y1) {
 80025f8:	79ba      	ldrb	r2, [r7, #6]
 80025fa:	793b      	ldrb	r3, [r7, #4]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d1d6      	bne.n	80025ae <PCD8544_DrawLine+0x13c>
			}
		}
		PCD8544_DrawPixel(x0, y0, color);
 8002600:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002604:	79b9      	ldrb	r1, [r7, #6]
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fd27 	bl	800205c <PCD8544_DrawPixel>
	}
}
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	bd90      	pop	{r4, r7, pc}

08002614 <PCD8544_DrawFilledRectangle>:
	PCD8544_DrawLine(x0, y0, x0, y1, color);	//Left
	PCD8544_DrawLine(x1, y0, x1, y1, color);	//Right
	PCD8544_DrawLine(x0, y1, x1, y1, color);	//Bottom
}

void PCD8544_DrawFilledRectangle(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1, PCD8544_Pixel_t color) {
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b085      	sub	sp, #20
 8002618:	af02      	add	r7, sp, #8
 800261a:	4604      	mov	r4, r0
 800261c:	4608      	mov	r0, r1
 800261e:	4611      	mov	r1, r2
 8002620:	461a      	mov	r2, r3
 8002622:	4623      	mov	r3, r4
 8002624:	71fb      	strb	r3, [r7, #7]
 8002626:	4603      	mov	r3, r0
 8002628:	71bb      	strb	r3, [r7, #6]
 800262a:	460b      	mov	r3, r1
 800262c:	717b      	strb	r3, [r7, #5]
 800262e:	4613      	mov	r3, r2
 8002630:	713b      	strb	r3, [r7, #4]
	for (; y0 < y1; y0++) {
 8002632:	e00b      	b.n	800264c <PCD8544_DrawFilledRectangle+0x38>
		PCD8544_DrawLine(x0, y0, x1, y0, color);
 8002634:	79bc      	ldrb	r4, [r7, #6]
 8002636:	797a      	ldrb	r2, [r7, #5]
 8002638:	79b9      	ldrb	r1, [r7, #6]
 800263a:	79f8      	ldrb	r0, [r7, #7]
 800263c:	7e3b      	ldrb	r3, [r7, #24]
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	4623      	mov	r3, r4
 8002642:	f7ff ff16 	bl	8002472 <PCD8544_DrawLine>
	for (; y0 < y1; y0++) {
 8002646:	79bb      	ldrb	r3, [r7, #6]
 8002648:	3301      	adds	r3, #1
 800264a:	71bb      	strb	r3, [r7, #6]
 800264c:	79ba      	ldrb	r2, [r7, #6]
 800264e:	793b      	ldrb	r3, [r7, #4]
 8002650:	429a      	cmp	r2, r3
 8002652:	d3ef      	bcc.n	8002634 <PCD8544_DrawFilledRectangle+0x20>
	}
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	bd90      	pop	{r4, r7, pc}

0800265e <scale8>:
// Peripheral usage
#include "stm32f4xx_hal.h"

#include "ws2812b.h"

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	4603      	mov	r3, r0
 8002666:	460a      	mov	r2, r1
 8002668:	71fb      	strb	r3, [r7, #7]
 800266a:	4613      	mov	r3, r2
 800266c:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	79ba      	ldrb	r2, [r7, #6]
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	121b      	asrs	r3, r3, #8
 8002678:	b2db      	uxtb	r3, r3
}
 800267a:	4618      	mov	r0, r3
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(Layers *layer, uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8002686:	b590      	push	{r4, r7, lr}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	4608      	mov	r0, r1
 8002690:	4611      	mov	r1, r2
 8002692:	461a      	mov	r2, r3
 8002694:	4603      	mov	r3, r0
 8002696:	70fb      	strb	r3, [r7, #3]
 8002698:	460b      	mov	r3, r1
 800269a:	70bb      	strb	r3, [r7, #2]
 800269c:	4613      	mov	r3, r2
 800269e:	707b      	strb	r3, [r7, #1]
	layer->rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	4613      	mov	r3, r2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	189c      	adds	r4, r3, r2
 80026a8:	787b      	ldrb	r3, [r7, #1]
 80026aa:	21b0      	movs	r1, #176	; 0xb0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ffd6 	bl	800265e <scale8>
 80026b2:	4603      	mov	r3, r0
 80026b4:	461a      	mov	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4423      	add	r3, r4
 80026ba:	725a      	strb	r2, [r3, #9]
	layer->rgb_arr[3 * index + 1] = r;
 80026bc:	78fa      	ldrb	r2, [r7, #3]
 80026be:	4613      	mov	r3, r2
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4413      	add	r3, r2
 80026c4:	3301      	adds	r3, #1
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	78ba      	ldrb	r2, [r7, #2]
 80026cc:	725a      	strb	r2, [r3, #9]
	layer->rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 80026ce:	78fa      	ldrb	r2, [r7, #3]
 80026d0:	4613      	mov	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4413      	add	r3, r2
 80026d6:	1c9c      	adds	r4, r3, #2
 80026d8:	7e3b      	ldrb	r3, [r7, #24]
 80026da:	21f0      	movs	r1, #240	; 0xf0
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ffbe 	bl	800265e <scale8>
 80026e2:	4603      	mov	r3, r0
 80026e4:	461a      	mov	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4423      	add	r3, r4
 80026ea:	725a      	strb	r2, [r3, #9]
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd90      	pop	{r4, r7, pc}

080026f4 <led_render>:
void led_set_all_RGB(Layers *layer, uint8_t r, uint8_t g, uint8_t b) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGB(layer, i, r, g, b);
}

// Shuttle the data to the LEDs!
void led_render(Layers *layer) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  if(layer->wr_buf_p != 0 || layer->dma->State != HAL_DMA_STATE_READY) {
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8002702:	2b00      	cmp	r3, #0
 8002704:	d106      	bne.n	8002714 <led_render+0x20>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b01      	cmp	r3, #1
 8002712:	d01d      	beq.n	8002750 <led_render+0x5c>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) layer->wr_buf[i] = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	73fb      	strb	r3, [r7, #15]
 8002718:	e00a      	b.n	8002730 <led_render+0x3c>
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4413      	add	r3, r2
 8002726:	2200      	movs	r2, #0
 8002728:	805a      	strh	r2, [r3, #2]
 800272a:	7bfb      	ldrb	r3, [r7, #15]
 800272c:	3301      	adds	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	2b2f      	cmp	r3, #47	; 0x2f
 8002734:	d9f1      	bls.n	800271a <led_render+0x26>
    layer->wr_buf_p = 0;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
    HAL_TIM_PWM_Stop_DMA(layer->timer, layer->channel);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	7a1b      	ldrb	r3, [r3, #8]
 8002746:	4619      	mov	r1, r3
 8002748:	4610      	mov	r0, r2
 800274a:	f002 fadd 	bl	8004d08 <HAL_TIM_PWM_Stop_DMA>
    return;
 800274e:	e09b      	b.n	8002888 <led_render+0x194>
  }
  // Ooh boi the first data buffer half (and the second!)
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8002750:	2300      	movs	r3, #0
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	e085      	b.n	8002862 <led_render+0x16e>
	  layer->wr_buf[i     ] = PWM_LO << (((layer->rgb_arr[0] << i) & 0x80) > 0);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	7a5b      	ldrb	r3, [r3, #9]
 800275a:	461a      	mov	r2, r3
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002766:	2b00      	cmp	r3, #0
 8002768:	dd01      	ble.n	800276e <led_render+0x7a>
 800276a:	2142      	movs	r1, #66	; 0x42
 800276c:	e000      	b.n	8002770 <led_render+0x7c>
 800276e:	2121      	movs	r1, #33	; 0x21
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	4413      	add	r3, r2
 800277c:	460a      	mov	r2, r1
 800277e:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i +  8] = PWM_LO << (((layer->rgb_arr[1] << i) & 0x80) > 0);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	7a9b      	ldrb	r3, [r3, #10]
 8002784:	461a      	mov	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002790:	2b00      	cmp	r3, #0
 8002792:	dd01      	ble.n	8002798 <led_render+0xa4>
 8002794:	2142      	movs	r1, #66	; 0x42
 8002796:	e000      	b.n	800279a <led_render+0xa6>
 8002798:	2121      	movs	r1, #33	; 0x21
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	3308      	adds	r3, #8
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4413      	add	r3, r2
 80027a8:	460a      	mov	r2, r1
 80027aa:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i + 16] = PWM_LO << (((layer->rgb_arr[2] << i) & 0x80) > 0);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	7adb      	ldrb	r3, [r3, #11]
 80027b0:	461a      	mov	r2, r3
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027bc:	2b00      	cmp	r3, #0
 80027be:	dd01      	ble.n	80027c4 <led_render+0xd0>
 80027c0:	2142      	movs	r1, #66	; 0x42
 80027c2:	e000      	b.n	80027c6 <led_render+0xd2>
 80027c4:	2121      	movs	r1, #33	; 0x21
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	3310      	adds	r3, #16
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4413      	add	r3, r2
 80027d4:	460a      	mov	r2, r1
 80027d6:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i + 24] = PWM_LO << (((layer->rgb_arr[3] << i) & 0x80) > 0);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	7b1b      	ldrb	r3, [r3, #12]
 80027dc:	461a      	mov	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	dd01      	ble.n	80027f0 <led_render+0xfc>
 80027ec:	2142      	movs	r1, #66	; 0x42
 80027ee:	e000      	b.n	80027f2 <led_render+0xfe>
 80027f0:	2121      	movs	r1, #33	; 0x21
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	3318      	adds	r3, #24
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4413      	add	r3, r2
 8002800:	460a      	mov	r2, r1
 8002802:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i + 32] = PWM_LO << (((layer->rgb_arr[4] << i) & 0x80) > 0);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	7b5b      	ldrb	r3, [r3, #13]
 8002808:	461a      	mov	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002814:	2b00      	cmp	r3, #0
 8002816:	dd01      	ble.n	800281c <led_render+0x128>
 8002818:	2142      	movs	r1, #66	; 0x42
 800281a:	e000      	b.n	800281e <led_render+0x12a>
 800281c:	2121      	movs	r1, #33	; 0x21
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	3320      	adds	r3, #32
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4413      	add	r3, r2
 800282c:	460a      	mov	r2, r1
 800282e:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i + 40] = PWM_LO << (((layer->rgb_arr[5] << i) & 0x80) > 0);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	7b9b      	ldrb	r3, [r3, #14]
 8002834:	461a      	mov	r2, r3
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002840:	2b00      	cmp	r3, #0
 8002842:	dd01      	ble.n	8002848 <led_render+0x154>
 8002844:	2142      	movs	r1, #66	; 0x42
 8002846:	e000      	b.n	800284a <led_render+0x156>
 8002848:	2121      	movs	r1, #33	; 0x21
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	3328      	adds	r3, #40	; 0x28
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	4413      	add	r3, r2
 8002858:	460a      	mov	r2, r1
 800285a:	805a      	strh	r2, [r3, #2]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	3301      	adds	r3, #1
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b07      	cmp	r3, #7
 8002866:	f67f af76 	bls.w	8002756 <led_render+0x62>
  }
  HAL_TIM_PWM_Start_DMA(layer->timer, layer->channel, (uint32_t *)layer->wr_buf, WR_BUF_LEN);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	7a1b      	ldrb	r3, [r3, #8]
 8002872:	4619      	mov	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f203 320a 	addw	r2, r3, #778	; 0x30a
 800287a:	2330      	movs	r3, #48	; 0x30
 800287c:	f002 f894 	bl	80049a8 <HAL_TIM_PWM_Start_DMA>
  layer->wr_buf_p = 2; // Since we're ready for the next buffer
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
}
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002890:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002894:	480d      	ldr	r0, [pc, #52]	; (80028cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002896:	490e      	ldr	r1, [pc, #56]	; (80028d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002898:	4a0e      	ldr	r2, [pc, #56]	; (80028d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800289a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800289c:	e002      	b.n	80028a4 <LoopCopyDataInit>

0800289e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800289e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028a2:	3304      	adds	r3, #4

080028a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028a8:	d3f9      	bcc.n	800289e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028aa:	4a0b      	ldr	r2, [pc, #44]	; (80028d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028ac:	4c0b      	ldr	r4, [pc, #44]	; (80028dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80028ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028b0:	e001      	b.n	80028b6 <LoopFillZerobss>

080028b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028b4:	3204      	adds	r2, #4

080028b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028b8:	d3fb      	bcc.n	80028b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028ba:	f7ff fafb 	bl	8001eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028be:	f006 ffcd 	bl	800985c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028c2:	f7fd fe67 	bl	8000594 <main>
  bx  lr    
 80028c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80028c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80028cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028d0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80028d4:	0800aa94 	.word	0x0800aa94
  ldr r2, =_sbss
 80028d8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80028dc:	200072e0 	.word	0x200072e0

080028e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028e0:	e7fe      	b.n	80028e0 <ADC_IRQHandler>
	...

080028e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028e8:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <HAL_Init+0x40>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a0d      	ldr	r2, [pc, #52]	; (8002924 <HAL_Init+0x40>)
 80028ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <HAL_Init+0x40>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <HAL_Init+0x40>)
 80028fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002900:	4b08      	ldr	r3, [pc, #32]	; (8002924 <HAL_Init+0x40>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a07      	ldr	r2, [pc, #28]	; (8002924 <HAL_Init+0x40>)
 8002906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800290a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800290c:	2003      	movs	r0, #3
 800290e:	f000 f94f 	bl	8002bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002912:	2000      	movs	r0, #0
 8002914:	f000 f808 	bl	8002928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002918:	f7fe ffd8 	bl	80018cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40023c00 	.word	0x40023c00

08002928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002930:	4b12      	ldr	r3, [pc, #72]	; (800297c <HAL_InitTick+0x54>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b12      	ldr	r3, [pc, #72]	; (8002980 <HAL_InitTick+0x58>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	4619      	mov	r1, r3
 800293a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800293e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002942:	fbb2 f3f3 	udiv	r3, r2, r3
 8002946:	4618      	mov	r0, r3
 8002948:	f000 f967 	bl	8002c1a <HAL_SYSTICK_Config>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e00e      	b.n	8002974 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b0f      	cmp	r3, #15
 800295a:	d80a      	bhi.n	8002972 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800295c:	2200      	movs	r2, #0
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	f04f 30ff 	mov.w	r0, #4294967295
 8002964:	f000 f92f 	bl	8002bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002968:	4a06      	ldr	r2, [pc, #24]	; (8002984 <HAL_InitTick+0x5c>)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	e000      	b.n	8002974 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
}
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	20000000 	.word	0x20000000
 8002980:	20000008 	.word	0x20000008
 8002984:	20000004 	.word	0x20000004

08002988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_IncTick+0x20>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_IncTick+0x24>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4413      	add	r3, r2
 8002998:	4a04      	ldr	r2, [pc, #16]	; (80029ac <HAL_IncTick+0x24>)
 800299a:	6013      	str	r3, [r2, #0]
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	20000008 	.word	0x20000008
 80029ac:	20007284 	.word	0x20007284

080029b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return uwTick;
 80029b4:	4b03      	ldr	r3, [pc, #12]	; (80029c4 <HAL_GetTick+0x14>)
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20007284 	.word	0x20007284

080029c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029d0:	f7ff ffee 	bl	80029b0 <HAL_GetTick>
 80029d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e0:	d005      	beq.n	80029ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029e2:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <HAL_Delay+0x44>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4413      	add	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029ee:	bf00      	nop
 80029f0:	f7ff ffde 	bl	80029b0 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d8f7      	bhi.n	80029f0 <HAL_Delay+0x28>
  {
  }
}
 8002a00:	bf00      	nop
 8002a02:	bf00      	nop
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000008 	.word	0x20000008

08002a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a20:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <__NVIC_SetPriorityGrouping+0x44>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a42:	4a04      	ldr	r2, [pc, #16]	; (8002a54 <__NVIC_SetPriorityGrouping+0x44>)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	60d3      	str	r3, [r2, #12]
}
 8002a48:	bf00      	nop
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a5c:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <__NVIC_GetPriorityGrouping+0x18>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	0a1b      	lsrs	r3, r3, #8
 8002a62:	f003 0307 	and.w	r3, r3, #7
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	db0b      	blt.n	8002a9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	f003 021f 	and.w	r2, r3, #31
 8002a8c:	4907      	ldr	r1, [pc, #28]	; (8002aac <__NVIC_EnableIRQ+0x38>)
 8002a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	2001      	movs	r0, #1
 8002a96:	fa00 f202 	lsl.w	r2, r0, r2
 8002a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	e000e100 	.word	0xe000e100

08002ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	6039      	str	r1, [r7, #0]
 8002aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	db0a      	blt.n	8002ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	490c      	ldr	r1, [pc, #48]	; (8002afc <__NVIC_SetPriority+0x4c>)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	0112      	lsls	r2, r2, #4
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ad8:	e00a      	b.n	8002af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	4908      	ldr	r1, [pc, #32]	; (8002b00 <__NVIC_SetPriority+0x50>)
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	3b04      	subs	r3, #4
 8002ae8:	0112      	lsls	r2, r2, #4
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	440b      	add	r3, r1
 8002aee:	761a      	strb	r2, [r3, #24]
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000e100 	.word	0xe000e100
 8002b00:	e000ed00 	.word	0xe000ed00

08002b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b089      	sub	sp, #36	; 0x24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f1c3 0307 	rsb	r3, r3, #7
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	bf28      	it	cs
 8002b22:	2304      	movcs	r3, #4
 8002b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	2b06      	cmp	r3, #6
 8002b2c:	d902      	bls.n	8002b34 <NVIC_EncodePriority+0x30>
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3b03      	subs	r3, #3
 8002b32:	e000      	b.n	8002b36 <NVIC_EncodePriority+0x32>
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b38:	f04f 32ff 	mov.w	r2, #4294967295
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43da      	mvns	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	401a      	ands	r2, r3
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	fa01 f303 	lsl.w	r3, r1, r3
 8002b56:	43d9      	mvns	r1, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b5c:	4313      	orrs	r3, r2
         );
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3724      	adds	r7, #36	; 0x24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
	...

08002b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b7c:	d301      	bcc.n	8002b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e00f      	b.n	8002ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b82:	4a0a      	ldr	r2, [pc, #40]	; (8002bac <SysTick_Config+0x40>)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b8a:	210f      	movs	r1, #15
 8002b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b90:	f7ff ff8e 	bl	8002ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b94:	4b05      	ldr	r3, [pc, #20]	; (8002bac <SysTick_Config+0x40>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b9a:	4b04      	ldr	r3, [pc, #16]	; (8002bac <SysTick_Config+0x40>)
 8002b9c:	2207      	movs	r2, #7
 8002b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	e000e010 	.word	0xe000e010

08002bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff ff29 	bl	8002a10 <__NVIC_SetPriorityGrouping>
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b086      	sub	sp, #24
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	4603      	mov	r3, r0
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	607a      	str	r2, [r7, #4]
 8002bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bd8:	f7ff ff3e 	bl	8002a58 <__NVIC_GetPriorityGrouping>
 8002bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	6978      	ldr	r0, [r7, #20]
 8002be4:	f7ff ff8e 	bl	8002b04 <NVIC_EncodePriority>
 8002be8:	4602      	mov	r2, r0
 8002bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bee:	4611      	mov	r1, r2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff5d 	bl	8002ab0 <__NVIC_SetPriority>
}
 8002bf6:	bf00      	nop
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	4603      	mov	r3, r0
 8002c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff31 	bl	8002a74 <__NVIC_EnableIRQ>
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff ffa2 	bl	8002b6c <SysTick_Config>
 8002c28:	4603      	mov	r3, r0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c40:	f7ff feb6 	bl	80029b0 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e099      	b.n	8002d84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0201 	bic.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c70:	e00f      	b.n	8002c92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c72:	f7ff fe9d 	bl	80029b0 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b05      	cmp	r3, #5
 8002c7e:	d908      	bls.n	8002c92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2220      	movs	r2, #32
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2203      	movs	r2, #3
 8002c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e078      	b.n	8002d84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e8      	bne.n	8002c72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	4b38      	ldr	r3, [pc, #224]	; (8002d8c <HAL_DMA_Init+0x158>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d107      	bne.n	8002cfc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f023 0307 	bic.w	r3, r3, #7
 8002d12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d117      	bne.n	8002d56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00e      	beq.n	8002d56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 fa91 	bl	8003260 <DMA_CheckFifoParam>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d008      	beq.n	8002d56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2240      	movs	r2, #64	; 0x40
 8002d48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d52:	2301      	movs	r3, #1
 8002d54:	e016      	b.n	8002d84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fa48 	bl	80031f4 <DMA_CalcBaseAndBitshift>
 8002d64:	4603      	mov	r3, r0
 8002d66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6c:	223f      	movs	r2, #63	; 0x3f
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	f010803f 	.word	0xf010803f

08002d90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_DMA_Start_IT+0x26>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e040      	b.n	8002e38 <HAL_DMA_Start_IT+0xa8>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d12f      	bne.n	8002e2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2202      	movs	r2, #2
 8002dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	68b9      	ldr	r1, [r7, #8]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f9da 	bl	8003198 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de8:	223f      	movs	r2, #63	; 0x3f
 8002dea:	409a      	lsls	r2, r3
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0216 	orr.w	r2, r2, #22
 8002dfe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d007      	beq.n	8002e18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0208 	orr.w	r2, r2, #8
 8002e16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	e005      	b.n	8002e36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e32:	2302      	movs	r3, #2
 8002e34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d004      	beq.n	8002e5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2280      	movs	r2, #128	; 0x80
 8002e58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e00c      	b.n	8002e78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2205      	movs	r2, #5
 8002e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0201 	bic.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e90:	4b8e      	ldr	r3, [pc, #568]	; (80030cc <HAL_DMA_IRQHandler+0x248>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a8e      	ldr	r2, [pc, #568]	; (80030d0 <HAL_DMA_IRQHandler+0x24c>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	0a9b      	lsrs	r3, r3, #10
 8002e9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eae:	2208      	movs	r2, #8
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d01a      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d013      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0204 	bic.w	r2, r2, #4
 8002ed6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002edc:	2208      	movs	r2, #8
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee8:	f043 0201 	orr.w	r2, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	409a      	lsls	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d012      	beq.n	8002f26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00b      	beq.n	8002f26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f12:	2201      	movs	r2, #1
 8002f14:	409a      	lsls	r2, r3
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1e:	f043 0202 	orr.w	r2, r3, #2
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	409a      	lsls	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d012      	beq.n	8002f5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00b      	beq.n	8002f5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f48:	2204      	movs	r2, #4
 8002f4a:	409a      	lsls	r2, r3
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f54:	f043 0204 	orr.w	r2, r3, #4
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f60:	2210      	movs	r2, #16
 8002f62:	409a      	lsls	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d043      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d03c      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7e:	2210      	movs	r2, #16
 8002f80:	409a      	lsls	r2, r3
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d018      	beq.n	8002fc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d108      	bne.n	8002fb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d024      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	4798      	blx	r3
 8002fb2:	e01f      	b.n	8002ff4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01b      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	4798      	blx	r3
 8002fc4:	e016      	b.n	8002ff4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d107      	bne.n	8002fe4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0208 	bic.w	r2, r2, #8
 8002fe2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 808f 	beq.w	8003124 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 8087 	beq.w	8003124 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301a:	2220      	movs	r2, #32
 800301c:	409a      	lsls	r2, r3
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b05      	cmp	r3, #5
 800302c:	d136      	bne.n	800309c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0216 	bic.w	r2, r2, #22
 800303c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695a      	ldr	r2, [r3, #20]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800304c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	2b00      	cmp	r3, #0
 8003054:	d103      	bne.n	800305e <HAL_DMA_IRQHandler+0x1da>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800305a:	2b00      	cmp	r3, #0
 800305c:	d007      	beq.n	800306e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0208 	bic.w	r2, r2, #8
 800306c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003072:	223f      	movs	r2, #63	; 0x3f
 8003074:	409a      	lsls	r2, r3
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800308e:	2b00      	cmp	r3, #0
 8003090:	d07e      	beq.n	8003190 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	4798      	blx	r3
        }
        return;
 800309a:	e079      	b.n	8003190 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d01d      	beq.n	80030e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10d      	bne.n	80030d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d031      	beq.n	8003124 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	4798      	blx	r3
 80030c8:	e02c      	b.n	8003124 <HAL_DMA_IRQHandler+0x2a0>
 80030ca:	bf00      	nop
 80030cc:	20000000 	.word	0x20000000
 80030d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d023      	beq.n	8003124 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	4798      	blx	r3
 80030e4:	e01e      	b.n	8003124 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10f      	bne.n	8003114 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0210 	bic.w	r2, r2, #16
 8003102:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003128:	2b00      	cmp	r3, #0
 800312a:	d032      	beq.n	8003192 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d022      	beq.n	800317e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2205      	movs	r2, #5
 800313c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0201 	bic.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	3301      	adds	r3, #1
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	429a      	cmp	r2, r3
 800315a:	d307      	bcc.n	800316c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f2      	bne.n	8003150 <HAL_DMA_IRQHandler+0x2cc>
 800316a:	e000      	b.n	800316e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800316c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	4798      	blx	r3
 800318e:	e000      	b.n	8003192 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003190:	bf00      	nop
    }
  }
}
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	2b40      	cmp	r3, #64	; 0x40
 80031c4:	d108      	bne.n	80031d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031d6:	e007      	b.n	80031e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	60da      	str	r2, [r3, #12]
}
 80031e8:	bf00      	nop
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	3b10      	subs	r3, #16
 8003204:	4a14      	ldr	r2, [pc, #80]	; (8003258 <DMA_CalcBaseAndBitshift+0x64>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	091b      	lsrs	r3, r3, #4
 800320c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800320e:	4a13      	ldr	r2, [pc, #76]	; (800325c <DMA_CalcBaseAndBitshift+0x68>)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b03      	cmp	r3, #3
 8003220:	d909      	bls.n	8003236 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800322a:	f023 0303 	bic.w	r3, r3, #3
 800322e:	1d1a      	adds	r2, r3, #4
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	659a      	str	r2, [r3, #88]	; 0x58
 8003234:	e007      	b.n	8003246 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800323e:	f023 0303 	bic.w	r3, r3, #3
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	aaaaaaab 	.word	0xaaaaaaab
 800325c:	0800a8c8 	.word	0x0800a8c8

08003260 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003270:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d11f      	bne.n	80032ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b03      	cmp	r3, #3
 800327e:	d856      	bhi.n	800332e <DMA_CheckFifoParam+0xce>
 8003280:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <DMA_CheckFifoParam+0x28>)
 8003282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003286:	bf00      	nop
 8003288:	08003299 	.word	0x08003299
 800328c:	080032ab 	.word	0x080032ab
 8003290:	08003299 	.word	0x08003299
 8003294:	0800332f 	.word	0x0800332f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d046      	beq.n	8003332 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032a8:	e043      	b.n	8003332 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032b2:	d140      	bne.n	8003336 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032b8:	e03d      	b.n	8003336 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c2:	d121      	bne.n	8003308 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d837      	bhi.n	800333a <DMA_CheckFifoParam+0xda>
 80032ca:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <DMA_CheckFifoParam+0x70>)
 80032cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d0:	080032e1 	.word	0x080032e1
 80032d4:	080032e7 	.word	0x080032e7
 80032d8:	080032e1 	.word	0x080032e1
 80032dc:	080032f9 	.word	0x080032f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
      break;
 80032e4:	e030      	b.n	8003348 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d025      	beq.n	800333e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f6:	e022      	b.n	800333e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003300:	d11f      	bne.n	8003342 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003306:	e01c      	b.n	8003342 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d903      	bls.n	8003316 <DMA_CheckFifoParam+0xb6>
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b03      	cmp	r3, #3
 8003312:	d003      	beq.n	800331c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003314:	e018      	b.n	8003348 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	73fb      	strb	r3, [r7, #15]
      break;
 800331a:	e015      	b.n	8003348 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00e      	beq.n	8003346 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
      break;
 800332c:	e00b      	b.n	8003346 <DMA_CheckFifoParam+0xe6>
      break;
 800332e:	bf00      	nop
 8003330:	e00a      	b.n	8003348 <DMA_CheckFifoParam+0xe8>
      break;
 8003332:	bf00      	nop
 8003334:	e008      	b.n	8003348 <DMA_CheckFifoParam+0xe8>
      break;
 8003336:	bf00      	nop
 8003338:	e006      	b.n	8003348 <DMA_CheckFifoParam+0xe8>
      break;
 800333a:	bf00      	nop
 800333c:	e004      	b.n	8003348 <DMA_CheckFifoParam+0xe8>
      break;
 800333e:	bf00      	nop
 8003340:	e002      	b.n	8003348 <DMA_CheckFifoParam+0xe8>
      break;   
 8003342:	bf00      	nop
 8003344:	e000      	b.n	8003348 <DMA_CheckFifoParam+0xe8>
      break;
 8003346:	bf00      	nop
    }
  } 
  
  return status; 
 8003348:	7bfb      	ldrb	r3, [r7, #15]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop

08003358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003358:	b480      	push	{r7}
 800335a:	b089      	sub	sp, #36	; 0x24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003366:	2300      	movs	r3, #0
 8003368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800336a:	2300      	movs	r3, #0
 800336c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
 8003372:	e159      	b.n	8003628 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003374:	2201      	movs	r2, #1
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4013      	ands	r3, r2
 8003386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	429a      	cmp	r2, r3
 800338e:	f040 8148 	bne.w	8003622 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	2b01      	cmp	r3, #1
 800339c:	d005      	beq.n	80033aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d130      	bne.n	800340c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	2203      	movs	r2, #3
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033e0:	2201      	movs	r2, #1
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4013      	ands	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	091b      	lsrs	r3, r3, #4
 80033f6:	f003 0201 	and.w	r2, r3, #1
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4313      	orrs	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 0303 	and.w	r3, r3, #3
 8003414:	2b03      	cmp	r3, #3
 8003416:	d017      	beq.n	8003448 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	2203      	movs	r2, #3
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d123      	bne.n	800349c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	08da      	lsrs	r2, r3, #3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3208      	adds	r2, #8
 800345c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003460:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	220f      	movs	r2, #15
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	08da      	lsrs	r2, r3, #3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3208      	adds	r2, #8
 8003496:	69b9      	ldr	r1, [r7, #24]
 8003498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	2203      	movs	r2, #3
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4013      	ands	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 0203 	and.w	r2, r3, #3
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 80a2 	beq.w	8003622 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	4b57      	ldr	r3, [pc, #348]	; (8003640 <HAL_GPIO_Init+0x2e8>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	4a56      	ldr	r2, [pc, #344]	; (8003640 <HAL_GPIO_Init+0x2e8>)
 80034e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034ec:	6453      	str	r3, [r2, #68]	; 0x44
 80034ee:	4b54      	ldr	r3, [pc, #336]	; (8003640 <HAL_GPIO_Init+0x2e8>)
 80034f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034fa:	4a52      	ldr	r2, [pc, #328]	; (8003644 <HAL_GPIO_Init+0x2ec>)
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	089b      	lsrs	r3, r3, #2
 8003500:	3302      	adds	r3, #2
 8003502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	220f      	movs	r2, #15
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43db      	mvns	r3, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4013      	ands	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a49      	ldr	r2, [pc, #292]	; (8003648 <HAL_GPIO_Init+0x2f0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d019      	beq.n	800355a <HAL_GPIO_Init+0x202>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a48      	ldr	r2, [pc, #288]	; (800364c <HAL_GPIO_Init+0x2f4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d013      	beq.n	8003556 <HAL_GPIO_Init+0x1fe>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a47      	ldr	r2, [pc, #284]	; (8003650 <HAL_GPIO_Init+0x2f8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00d      	beq.n	8003552 <HAL_GPIO_Init+0x1fa>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a46      	ldr	r2, [pc, #280]	; (8003654 <HAL_GPIO_Init+0x2fc>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d007      	beq.n	800354e <HAL_GPIO_Init+0x1f6>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a45      	ldr	r2, [pc, #276]	; (8003658 <HAL_GPIO_Init+0x300>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d101      	bne.n	800354a <HAL_GPIO_Init+0x1f2>
 8003546:	2304      	movs	r3, #4
 8003548:	e008      	b.n	800355c <HAL_GPIO_Init+0x204>
 800354a:	2307      	movs	r3, #7
 800354c:	e006      	b.n	800355c <HAL_GPIO_Init+0x204>
 800354e:	2303      	movs	r3, #3
 8003550:	e004      	b.n	800355c <HAL_GPIO_Init+0x204>
 8003552:	2302      	movs	r3, #2
 8003554:	e002      	b.n	800355c <HAL_GPIO_Init+0x204>
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <HAL_GPIO_Init+0x204>
 800355a:	2300      	movs	r3, #0
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	f002 0203 	and.w	r2, r2, #3
 8003562:	0092      	lsls	r2, r2, #2
 8003564:	4093      	lsls	r3, r2
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4313      	orrs	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800356c:	4935      	ldr	r1, [pc, #212]	; (8003644 <HAL_GPIO_Init+0x2ec>)
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	089b      	lsrs	r3, r3, #2
 8003572:	3302      	adds	r3, #2
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800357a:	4b38      	ldr	r3, [pc, #224]	; (800365c <HAL_GPIO_Init+0x304>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	43db      	mvns	r3, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4013      	ands	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800359e:	4a2f      	ldr	r2, [pc, #188]	; (800365c <HAL_GPIO_Init+0x304>)
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035a4:	4b2d      	ldr	r3, [pc, #180]	; (800365c <HAL_GPIO_Init+0x304>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035c8:	4a24      	ldr	r2, [pc, #144]	; (800365c <HAL_GPIO_Init+0x304>)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035ce:	4b23      	ldr	r3, [pc, #140]	; (800365c <HAL_GPIO_Init+0x304>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	43db      	mvns	r3, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4013      	ands	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035f2:	4a1a      	ldr	r2, [pc, #104]	; (800365c <HAL_GPIO_Init+0x304>)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035f8:	4b18      	ldr	r3, [pc, #96]	; (800365c <HAL_GPIO_Init+0x304>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	43db      	mvns	r3, r3
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4013      	ands	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800361c:	4a0f      	ldr	r2, [pc, #60]	; (800365c <HAL_GPIO_Init+0x304>)
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3301      	adds	r3, #1
 8003626:	61fb      	str	r3, [r7, #28]
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	2b0f      	cmp	r3, #15
 800362c:	f67f aea2 	bls.w	8003374 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003630:	bf00      	nop
 8003632:	bf00      	nop
 8003634:	3724      	adds	r7, #36	; 0x24
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40023800 	.word	0x40023800
 8003644:	40013800 	.word	0x40013800
 8003648:	40020000 	.word	0x40020000
 800364c:	40020400 	.word	0x40020400
 8003650:	40020800 	.word	0x40020800
 8003654:	40020c00 	.word	0x40020c00
 8003658:	40021000 	.word	0x40021000
 800365c:	40013c00 	.word	0x40013c00

08003660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	807b      	strh	r3, [r7, #2]
 800366c:	4613      	mov	r3, r2
 800366e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003670:	787b      	ldrb	r3, [r7, #1]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003676:	887a      	ldrh	r2, [r7, #2]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800367c:	e003      	b.n	8003686 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800367e:	887b      	ldrh	r3, [r7, #2]
 8003680:	041a      	lsls	r2, r3, #16
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	619a      	str	r2, [r3, #24]
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
	...

08003694 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800369e:	4b08      	ldr	r3, [pc, #32]	; (80036c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036a0:	695a      	ldr	r2, [r3, #20]
 80036a2:	88fb      	ldrh	r3, [r7, #6]
 80036a4:	4013      	ands	r3, r2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d006      	beq.n	80036b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036aa:	4a05      	ldr	r2, [pc, #20]	; (80036c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fd fcbc 	bl	8001030 <HAL_GPIO_EXTI_Callback>
  }
}
 80036b8:	bf00      	nop
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40013c00 	.word	0x40013c00

080036c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e267      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d075      	beq.n	80037ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036e2:	4b88      	ldr	r3, [pc, #544]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 030c 	and.w	r3, r3, #12
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d00c      	beq.n	8003708 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ee:	4b85      	ldr	r3, [pc, #532]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d112      	bne.n	8003720 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036fa:	4b82      	ldr	r3, [pc, #520]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003706:	d10b      	bne.n	8003720 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003708:	4b7e      	ldr	r3, [pc, #504]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d05b      	beq.n	80037cc <HAL_RCC_OscConfig+0x108>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d157      	bne.n	80037cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e242      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003728:	d106      	bne.n	8003738 <HAL_RCC_OscConfig+0x74>
 800372a:	4b76      	ldr	r3, [pc, #472]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a75      	ldr	r2, [pc, #468]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e01d      	b.n	8003774 <HAL_RCC_OscConfig+0xb0>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0x98>
 8003742:	4b70      	ldr	r3, [pc, #448]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a6f      	ldr	r2, [pc, #444]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4b6d      	ldr	r3, [pc, #436]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a6c      	ldr	r2, [pc, #432]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	e00b      	b.n	8003774 <HAL_RCC_OscConfig+0xb0>
 800375c:	4b69      	ldr	r3, [pc, #420]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a68      	ldr	r2, [pc, #416]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	4b66      	ldr	r3, [pc, #408]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a65      	ldr	r2, [pc, #404]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 800376e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d013      	beq.n	80037a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377c:	f7ff f918 	bl	80029b0 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003784:	f7ff f914 	bl	80029b0 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b64      	cmp	r3, #100	; 0x64
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e207      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003796:	4b5b      	ldr	r3, [pc, #364]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0xc0>
 80037a2:	e014      	b.n	80037ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a4:	f7ff f904 	bl	80029b0 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ac:	f7ff f900 	bl	80029b0 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b64      	cmp	r3, #100	; 0x64
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e1f3      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037be:	4b51      	ldr	r3, [pc, #324]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0xe8>
 80037ca:	e000      	b.n	80037ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d063      	beq.n	80038a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037da:	4b4a      	ldr	r3, [pc, #296]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 030c 	and.w	r3, r3, #12
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00b      	beq.n	80037fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037e6:	4b47      	ldr	r3, [pc, #284]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d11c      	bne.n	800382c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037f2:	4b44      	ldr	r3, [pc, #272]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d116      	bne.n	800382c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fe:	4b41      	ldr	r3, [pc, #260]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d005      	beq.n	8003816 <HAL_RCC_OscConfig+0x152>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d001      	beq.n	8003816 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e1c7      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003816:	4b3b      	ldr	r3, [pc, #236]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4937      	ldr	r1, [pc, #220]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003826:	4313      	orrs	r3, r2
 8003828:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800382a:	e03a      	b.n	80038a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d020      	beq.n	8003876 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003834:	4b34      	ldr	r3, [pc, #208]	; (8003908 <HAL_RCC_OscConfig+0x244>)
 8003836:	2201      	movs	r2, #1
 8003838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383a:	f7ff f8b9 	bl	80029b0 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003842:	f7ff f8b5 	bl	80029b0 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e1a8      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003854:	4b2b      	ldr	r3, [pc, #172]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f0      	beq.n	8003842 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003860:	4b28      	ldr	r3, [pc, #160]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	4925      	ldr	r1, [pc, #148]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003870:	4313      	orrs	r3, r2
 8003872:	600b      	str	r3, [r1, #0]
 8003874:	e015      	b.n	80038a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003876:	4b24      	ldr	r3, [pc, #144]	; (8003908 <HAL_RCC_OscConfig+0x244>)
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387c:	f7ff f898 	bl	80029b0 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003884:	f7ff f894 	bl	80029b0 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e187      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003896:	4b1b      	ldr	r3, [pc, #108]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f0      	bne.n	8003884 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d036      	beq.n	800391c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d016      	beq.n	80038e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038b6:	4b15      	ldr	r3, [pc, #84]	; (800390c <HAL_RCC_OscConfig+0x248>)
 80038b8:	2201      	movs	r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038bc:	f7ff f878 	bl	80029b0 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c4:	f7ff f874 	bl	80029b0 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e167      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d6:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 80038d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0f0      	beq.n	80038c4 <HAL_RCC_OscConfig+0x200>
 80038e2:	e01b      	b.n	800391c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038e4:	4b09      	ldr	r3, [pc, #36]	; (800390c <HAL_RCC_OscConfig+0x248>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ea:	f7ff f861 	bl	80029b0 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f0:	e00e      	b.n	8003910 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038f2:	f7ff f85d 	bl	80029b0 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d907      	bls.n	8003910 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e150      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
 8003904:	40023800 	.word	0x40023800
 8003908:	42470000 	.word	0x42470000
 800390c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003910:	4b88      	ldr	r3, [pc, #544]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1ea      	bne.n	80038f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 8097 	beq.w	8003a58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800392a:	2300      	movs	r3, #0
 800392c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800392e:	4b81      	ldr	r3, [pc, #516]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10f      	bne.n	800395a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	4b7d      	ldr	r3, [pc, #500]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	4a7c      	ldr	r2, [pc, #496]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003948:	6413      	str	r3, [r2, #64]	; 0x40
 800394a:	4b7a      	ldr	r3, [pc, #488]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003952:	60bb      	str	r3, [r7, #8]
 8003954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003956:	2301      	movs	r3, #1
 8003958:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395a:	4b77      	ldr	r3, [pc, #476]	; (8003b38 <HAL_RCC_OscConfig+0x474>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003962:	2b00      	cmp	r3, #0
 8003964:	d118      	bne.n	8003998 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003966:	4b74      	ldr	r3, [pc, #464]	; (8003b38 <HAL_RCC_OscConfig+0x474>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a73      	ldr	r2, [pc, #460]	; (8003b38 <HAL_RCC_OscConfig+0x474>)
 800396c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003972:	f7ff f81d 	bl	80029b0 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800397a:	f7ff f819 	bl	80029b0 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e10c      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398c:	4b6a      	ldr	r3, [pc, #424]	; (8003b38 <HAL_RCC_OscConfig+0x474>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0f0      	beq.n	800397a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d106      	bne.n	80039ae <HAL_RCC_OscConfig+0x2ea>
 80039a0:	4b64      	ldr	r3, [pc, #400]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a4:	4a63      	ldr	r2, [pc, #396]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	6713      	str	r3, [r2, #112]	; 0x70
 80039ac:	e01c      	b.n	80039e8 <HAL_RCC_OscConfig+0x324>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	2b05      	cmp	r3, #5
 80039b4:	d10c      	bne.n	80039d0 <HAL_RCC_OscConfig+0x30c>
 80039b6:	4b5f      	ldr	r3, [pc, #380]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ba:	4a5e      	ldr	r2, [pc, #376]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039bc:	f043 0304 	orr.w	r3, r3, #4
 80039c0:	6713      	str	r3, [r2, #112]	; 0x70
 80039c2:	4b5c      	ldr	r3, [pc, #368]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c6:	4a5b      	ldr	r2, [pc, #364]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	6713      	str	r3, [r2, #112]	; 0x70
 80039ce:	e00b      	b.n	80039e8 <HAL_RCC_OscConfig+0x324>
 80039d0:	4b58      	ldr	r3, [pc, #352]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d4:	4a57      	ldr	r2, [pc, #348]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	6713      	str	r3, [r2, #112]	; 0x70
 80039dc:	4b55      	ldr	r3, [pc, #340]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e0:	4a54      	ldr	r2, [pc, #336]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039e2:	f023 0304 	bic.w	r3, r3, #4
 80039e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d015      	beq.n	8003a1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f0:	f7fe ffde 	bl	80029b0 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f6:	e00a      	b.n	8003a0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f8:	f7fe ffda 	bl	80029b0 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e0cb      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0e:	4b49      	ldr	r3, [pc, #292]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0ee      	beq.n	80039f8 <HAL_RCC_OscConfig+0x334>
 8003a1a:	e014      	b.n	8003a46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a1c:	f7fe ffc8 	bl	80029b0 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a22:	e00a      	b.n	8003a3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a24:	f7fe ffc4 	bl	80029b0 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e0b5      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a3a:	4b3e      	ldr	r3, [pc, #248]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1ee      	bne.n	8003a24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a46:	7dfb      	ldrb	r3, [r7, #23]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d105      	bne.n	8003a58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a4c:	4b39      	ldr	r3, [pc, #228]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	4a38      	ldr	r2, [pc, #224]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 80a1 	beq.w	8003ba4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a62:	4b34      	ldr	r3, [pc, #208]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d05c      	beq.n	8003b28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d141      	bne.n	8003afa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a76:	4b31      	ldr	r3, [pc, #196]	; (8003b3c <HAL_RCC_OscConfig+0x478>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7c:	f7fe ff98 	bl	80029b0 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a84:	f7fe ff94 	bl	80029b0 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e087      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a96:	4b27      	ldr	r3, [pc, #156]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69da      	ldr	r2, [r3, #28]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	019b      	lsls	r3, r3, #6
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab8:	085b      	lsrs	r3, r3, #1
 8003aba:	3b01      	subs	r3, #1
 8003abc:	041b      	lsls	r3, r3, #16
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	061b      	lsls	r3, r3, #24
 8003ac6:	491b      	ldr	r1, [pc, #108]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003acc:	4b1b      	ldr	r3, [pc, #108]	; (8003b3c <HAL_RCC_OscConfig+0x478>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad2:	f7fe ff6d 	bl	80029b0 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ada:	f7fe ff69 	bl	80029b0 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e05c      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aec:	4b11      	ldr	r3, [pc, #68]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0f0      	beq.n	8003ada <HAL_RCC_OscConfig+0x416>
 8003af8:	e054      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afa:	4b10      	ldr	r3, [pc, #64]	; (8003b3c <HAL_RCC_OscConfig+0x478>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b00:	f7fe ff56 	bl	80029b0 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b08:	f7fe ff52 	bl	80029b0 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e045      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1a:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f0      	bne.n	8003b08 <HAL_RCC_OscConfig+0x444>
 8003b26:	e03d      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d107      	bne.n	8003b40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e038      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
 8003b34:	40023800 	.word	0x40023800
 8003b38:	40007000 	.word	0x40007000
 8003b3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b40:	4b1b      	ldr	r3, [pc, #108]	; (8003bb0 <HAL_RCC_OscConfig+0x4ec>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d028      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d121      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d11a      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b70:	4013      	ands	r3, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d111      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b86:	085b      	lsrs	r3, r3, #1
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d107      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d001      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800

08003bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e0cc      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc8:	4b68      	ldr	r3, [pc, #416]	; (8003d6c <HAL_RCC_ClockConfig+0x1b8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d90c      	bls.n	8003bf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd6:	4b65      	ldr	r3, [pc, #404]	; (8003d6c <HAL_RCC_ClockConfig+0x1b8>)
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bde:	4b63      	ldr	r3, [pc, #396]	; (8003d6c <HAL_RCC_ClockConfig+0x1b8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d001      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e0b8      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d020      	beq.n	8003c3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c08:	4b59      	ldr	r3, [pc, #356]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	4a58      	ldr	r2, [pc, #352]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c20:	4b53      	ldr	r3, [pc, #332]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	4a52      	ldr	r2, [pc, #328]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c2c:	4b50      	ldr	r3, [pc, #320]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	494d      	ldr	r1, [pc, #308]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d044      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d107      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c52:	4b47      	ldr	r3, [pc, #284]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d119      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e07f      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d003      	beq.n	8003c72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d107      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c72:	4b3f      	ldr	r3, [pc, #252]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d109      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e06f      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c82:	4b3b      	ldr	r3, [pc, #236]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e067      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c92:	4b37      	ldr	r3, [pc, #220]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f023 0203 	bic.w	r2, r3, #3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	4934      	ldr	r1, [pc, #208]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ca4:	f7fe fe84 	bl	80029b0 <HAL_GetTick>
 8003ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003caa:	e00a      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cac:	f7fe fe80 	bl	80029b0 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e04f      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc2:	4b2b      	ldr	r3, [pc, #172]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 020c 	and.w	r2, r3, #12
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d1eb      	bne.n	8003cac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd4:	4b25      	ldr	r3, [pc, #148]	; (8003d6c <HAL_RCC_ClockConfig+0x1b8>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d20c      	bcs.n	8003cfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce2:	4b22      	ldr	r3, [pc, #136]	; (8003d6c <HAL_RCC_ClockConfig+0x1b8>)
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cea:	4b20      	ldr	r3, [pc, #128]	; (8003d6c <HAL_RCC_ClockConfig+0x1b8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d001      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e032      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d008      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d08:	4b19      	ldr	r3, [pc, #100]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	4916      	ldr	r1, [pc, #88]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d26:	4b12      	ldr	r3, [pc, #72]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	490e      	ldr	r1, [pc, #56]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d3a:	f000 f821 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	091b      	lsrs	r3, r3, #4
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	490a      	ldr	r1, [pc, #40]	; (8003d74 <HAL_RCC_ClockConfig+0x1c0>)
 8003d4c:	5ccb      	ldrb	r3, [r1, r3]
 8003d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d52:	4a09      	ldr	r2, [pc, #36]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d56:	4b09      	ldr	r3, [pc, #36]	; (8003d7c <HAL_RCC_ClockConfig+0x1c8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe fde4 	bl	8002928 <HAL_InitTick>

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	40023c00 	.word	0x40023c00
 8003d70:	40023800 	.word	0x40023800
 8003d74:	0800a528 	.word	0x0800a528
 8003d78:	20000000 	.word	0x20000000
 8003d7c:	20000004 	.word	0x20000004

08003d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d84:	b094      	sub	sp, #80	; 0x50
 8003d86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d90:	2300      	movs	r3, #0
 8003d92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d98:	4b79      	ldr	r3, [pc, #484]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 030c 	and.w	r3, r3, #12
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d00d      	beq.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x40>
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	f200 80e1 	bhi.w	8003f6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <HAL_RCC_GetSysClockFreq+0x34>
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d003      	beq.n	8003dba <HAL_RCC_GetSysClockFreq+0x3a>
 8003db2:	e0db      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003db4:	4b73      	ldr	r3, [pc, #460]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x204>)
 8003db6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003db8:	e0db      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dba:	4b73      	ldr	r3, [pc, #460]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x208>)
 8003dbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dbe:	e0d8      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dc0:	4b6f      	ldr	r3, [pc, #444]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dc8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dca:	4b6d      	ldr	r3, [pc, #436]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d063      	beq.n	8003e9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd6:	4b6a      	ldr	r3, [pc, #424]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	099b      	lsrs	r3, r3, #6
 8003ddc:	2200      	movs	r2, #0
 8003dde:	63bb      	str	r3, [r7, #56]	; 0x38
 8003de0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de8:	633b      	str	r3, [r7, #48]	; 0x30
 8003dea:	2300      	movs	r3, #0
 8003dec:	637b      	str	r3, [r7, #52]	; 0x34
 8003dee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003df2:	4622      	mov	r2, r4
 8003df4:	462b      	mov	r3, r5
 8003df6:	f04f 0000 	mov.w	r0, #0
 8003dfa:	f04f 0100 	mov.w	r1, #0
 8003dfe:	0159      	lsls	r1, r3, #5
 8003e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e04:	0150      	lsls	r0, r2, #5
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	1a51      	subs	r1, r2, r1
 8003e0e:	6139      	str	r1, [r7, #16]
 8003e10:	4629      	mov	r1, r5
 8003e12:	eb63 0301 	sbc.w	r3, r3, r1
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e24:	4659      	mov	r1, fp
 8003e26:	018b      	lsls	r3, r1, #6
 8003e28:	4651      	mov	r1, sl
 8003e2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e2e:	4651      	mov	r1, sl
 8003e30:	018a      	lsls	r2, r1, #6
 8003e32:	4651      	mov	r1, sl
 8003e34:	ebb2 0801 	subs.w	r8, r2, r1
 8003e38:	4659      	mov	r1, fp
 8003e3a:	eb63 0901 	sbc.w	r9, r3, r1
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	f04f 0300 	mov.w	r3, #0
 8003e46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e52:	4690      	mov	r8, r2
 8003e54:	4699      	mov	r9, r3
 8003e56:	4623      	mov	r3, r4
 8003e58:	eb18 0303 	adds.w	r3, r8, r3
 8003e5c:	60bb      	str	r3, [r7, #8]
 8003e5e:	462b      	mov	r3, r5
 8003e60:	eb49 0303 	adc.w	r3, r9, r3
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e72:	4629      	mov	r1, r5
 8003e74:	024b      	lsls	r3, r1, #9
 8003e76:	4621      	mov	r1, r4
 8003e78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e7c:	4621      	mov	r1, r4
 8003e7e:	024a      	lsls	r2, r1, #9
 8003e80:	4610      	mov	r0, r2
 8003e82:	4619      	mov	r1, r3
 8003e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e86:	2200      	movs	r2, #0
 8003e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e90:	f7fc f9fe 	bl	8000290 <__aeabi_uldivmod>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	4613      	mov	r3, r2
 8003e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e9c:	e058      	b.n	8003f50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e9e:	4b38      	ldr	r3, [pc, #224]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	099b      	lsrs	r3, r3, #6
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003eae:	623b      	str	r3, [r7, #32]
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003eb8:	4642      	mov	r2, r8
 8003eba:	464b      	mov	r3, r9
 8003ebc:	f04f 0000 	mov.w	r0, #0
 8003ec0:	f04f 0100 	mov.w	r1, #0
 8003ec4:	0159      	lsls	r1, r3, #5
 8003ec6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eca:	0150      	lsls	r0, r2, #5
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4641      	mov	r1, r8
 8003ed2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ed6:	4649      	mov	r1, r9
 8003ed8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ee8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003eec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ef0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ef4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	00eb      	lsls	r3, r5, #3
 8003f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f06:	00e2      	lsls	r2, r4, #3
 8003f08:	4614      	mov	r4, r2
 8003f0a:	461d      	mov	r5, r3
 8003f0c:	4643      	mov	r3, r8
 8003f0e:	18e3      	adds	r3, r4, r3
 8003f10:	603b      	str	r3, [r7, #0]
 8003f12:	464b      	mov	r3, r9
 8003f14:	eb45 0303 	adc.w	r3, r5, r3
 8003f18:	607b      	str	r3, [r7, #4]
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	f04f 0300 	mov.w	r3, #0
 8003f22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f26:	4629      	mov	r1, r5
 8003f28:	028b      	lsls	r3, r1, #10
 8003f2a:	4621      	mov	r1, r4
 8003f2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f30:	4621      	mov	r1, r4
 8003f32:	028a      	lsls	r2, r1, #10
 8003f34:	4610      	mov	r0, r2
 8003f36:	4619      	mov	r1, r3
 8003f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	61bb      	str	r3, [r7, #24]
 8003f3e:	61fa      	str	r2, [r7, #28]
 8003f40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f44:	f7fc f9a4 	bl	8000290 <__aeabi_uldivmod>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	0c1b      	lsrs	r3, r3, #16
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003f60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f6a:	e002      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f6c:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3750      	adds	r7, #80	; 0x50
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f7e:	bf00      	nop
 8003f80:	40023800 	.word	0x40023800
 8003f84:	00f42400 	.word	0x00f42400
 8003f88:	007a1200 	.word	0x007a1200

08003f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f90:	4b03      	ldr	r3, [pc, #12]	; (8003fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f92:	681b      	ldr	r3, [r3, #0]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	20000000 	.word	0x20000000

08003fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fa8:	f7ff fff0 	bl	8003f8c <HAL_RCC_GetHCLKFreq>
 8003fac:	4602      	mov	r2, r0
 8003fae:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	0a9b      	lsrs	r3, r3, #10
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	4903      	ldr	r1, [pc, #12]	; (8003fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fba:	5ccb      	ldrb	r3, [r1, r3]
 8003fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	0800a538 	.word	0x0800a538

08003fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fd0:	f7ff ffdc 	bl	8003f8c <HAL_RCC_GetHCLKFreq>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	4b05      	ldr	r3, [pc, #20]	; (8003fec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	0b5b      	lsrs	r3, r3, #13
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	4903      	ldr	r1, [pc, #12]	; (8003ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fe2:	5ccb      	ldrb	r3, [r1, r3]
 8003fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	0800a538 	.word	0x0800a538

08003ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e07b      	b.n	80040fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	2b00      	cmp	r3, #0
 800400c:	d108      	bne.n	8004020 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004016:	d009      	beq.n	800402c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	61da      	str	r2, [r3, #28]
 800401e:	e005      	b.n	800402c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fd fc68 	bl	800191c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004062:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004074:	431a      	orrs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800409c:	431a      	orrs	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b0:	ea42 0103 	orr.w	r1, r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	0c1b      	lsrs	r3, r3, #16
 80040ca:	f003 0104 	and.w	r1, r3, #4
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	f003 0210 	and.w	r2, r3, #16
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69da      	ldr	r2, [r3, #28]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b088      	sub	sp, #32
 800410a:	af00      	add	r7, sp, #0
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	603b      	str	r3, [r7, #0]
 8004112:	4613      	mov	r3, r2
 8004114:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_SPI_Transmit+0x22>
 8004124:	2302      	movs	r3, #2
 8004126:	e126      	b.n	8004376 <HAL_SPI_Transmit+0x270>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004130:	f7fe fc3e 	bl	80029b0 <HAL_GetTick>
 8004134:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004136:	88fb      	ldrh	r3, [r7, #6]
 8004138:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b01      	cmp	r3, #1
 8004144:	d002      	beq.n	800414c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004146:	2302      	movs	r3, #2
 8004148:	77fb      	strb	r3, [r7, #31]
    goto error;
 800414a:	e10b      	b.n	8004364 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <HAL_SPI_Transmit+0x52>
 8004152:	88fb      	ldrh	r3, [r7, #6]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d102      	bne.n	800415e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800415c:	e102      	b.n	8004364 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2203      	movs	r2, #3
 8004162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	88fa      	ldrh	r2, [r7, #6]
 8004176:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	88fa      	ldrh	r2, [r7, #6]
 800417c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a4:	d10f      	bne.n	80041c6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d0:	2b40      	cmp	r3, #64	; 0x40
 80041d2:	d007      	beq.n	80041e4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ec:	d14b      	bne.n	8004286 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <HAL_SPI_Transmit+0xf6>
 80041f6:	8afb      	ldrh	r3, [r7, #22]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d13e      	bne.n	800427a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004200:	881a      	ldrh	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	1c9a      	adds	r2, r3, #2
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004216:	b29b      	uxth	r3, r3
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004220:	e02b      	b.n	800427a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b02      	cmp	r3, #2
 800422e:	d112      	bne.n	8004256 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	881a      	ldrh	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004240:	1c9a      	adds	r2, r3, #2
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	86da      	strh	r2, [r3, #54]	; 0x36
 8004254:	e011      	b.n	800427a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004256:	f7fe fbab 	bl	80029b0 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d803      	bhi.n	800426e <HAL_SPI_Transmit+0x168>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426c:	d102      	bne.n	8004274 <HAL_SPI_Transmit+0x16e>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d102      	bne.n	800427a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004278:	e074      	b.n	8004364 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800427e:	b29b      	uxth	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1ce      	bne.n	8004222 <HAL_SPI_Transmit+0x11c>
 8004284:	e04c      	b.n	8004320 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <HAL_SPI_Transmit+0x18e>
 800428e:	8afb      	ldrh	r3, [r7, #22]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d140      	bne.n	8004316 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	330c      	adds	r3, #12
 800429e:	7812      	ldrb	r2, [r2, #0]
 80042a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80042ba:	e02c      	b.n	8004316 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d113      	bne.n	80042f2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	330c      	adds	r3, #12
 80042d4:	7812      	ldrb	r2, [r2, #0]
 80042d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80042f0:	e011      	b.n	8004316 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042f2:	f7fe fb5d 	bl	80029b0 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d803      	bhi.n	800430a <HAL_SPI_Transmit+0x204>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004308:	d102      	bne.n	8004310 <HAL_SPI_Transmit+0x20a>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d102      	bne.n	8004316 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004314:	e026      	b.n	8004364 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1cd      	bne.n	80042bc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	6839      	ldr	r1, [r7, #0]
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 fa55 	bl	80047d4 <SPI_EndRxTxTransaction>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2220      	movs	r2, #32
 8004334:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10a      	bne.n	8004354 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800433e:	2300      	movs	r3, #0
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	613b      	str	r3, [r7, #16]
 8004352:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	77fb      	strb	r3, [r7, #31]
 8004360:	e000      	b.n	8004364 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004362:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004374:	7ffb      	ldrb	r3, [r7, #31]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3720      	adds	r7, #32
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b08c      	sub	sp, #48	; 0x30
 8004382:	af00      	add	r7, sp, #0
 8004384:	60f8      	str	r0, [r7, #12]
 8004386:	60b9      	str	r1, [r7, #8]
 8004388:	607a      	str	r2, [r7, #4]
 800438a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800438c:	2301      	movs	r3, #1
 800438e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004390:	2300      	movs	r3, #0
 8004392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_SPI_TransmitReceive+0x26>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e18a      	b.n	80046ba <HAL_SPI_TransmitReceive+0x33c>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043ac:	f7fe fb00 	bl	80029b0 <HAL_GetTick>
 80043b0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80043c2:	887b      	ldrh	r3, [r7, #2]
 80043c4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d00f      	beq.n	80043ee <HAL_SPI_TransmitReceive+0x70>
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043d4:	d107      	bne.n	80043e6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d103      	bne.n	80043e6 <HAL_SPI_TransmitReceive+0x68>
 80043de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d003      	beq.n	80043ee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80043e6:	2302      	movs	r3, #2
 80043e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80043ec:	e15b      	b.n	80046a6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <HAL_SPI_TransmitReceive+0x82>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <HAL_SPI_TransmitReceive+0x82>
 80043fa:	887b      	ldrh	r3, [r7, #2]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d103      	bne.n	8004408 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004406:	e14e      	b.n	80046a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b04      	cmp	r3, #4
 8004412:	d003      	beq.n	800441c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2205      	movs	r2, #5
 8004418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	887a      	ldrh	r2, [r7, #2]
 800442c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	887a      	ldrh	r2, [r7, #2]
 8004432:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	887a      	ldrh	r2, [r7, #2]
 800443e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	887a      	ldrh	r2, [r7, #2]
 8004444:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445c:	2b40      	cmp	r3, #64	; 0x40
 800445e:	d007      	beq.n	8004470 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800446e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004478:	d178      	bne.n	800456c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <HAL_SPI_TransmitReceive+0x10a>
 8004482:	8b7b      	ldrh	r3, [r7, #26]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d166      	bne.n	8004556 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	881a      	ldrh	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	1c9a      	adds	r2, r3, #2
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044ac:	e053      	b.n	8004556 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d11b      	bne.n	80044f4 <HAL_SPI_TransmitReceive+0x176>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d016      	beq.n	80044f4 <HAL_SPI_TransmitReceive+0x176>
 80044c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d113      	bne.n	80044f4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	881a      	ldrh	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044dc:	1c9a      	adds	r2, r3, #2
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d119      	bne.n	8004536 <HAL_SPI_TransmitReceive+0x1b8>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004506:	b29b      	uxth	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	d014      	beq.n	8004536 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	b292      	uxth	r2, r2
 8004518:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451e:	1c9a      	adds	r2, r3, #2
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004528:	b29b      	uxth	r3, r3
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004532:	2301      	movs	r3, #1
 8004534:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004536:	f7fe fa3b 	bl	80029b0 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004542:	429a      	cmp	r2, r3
 8004544:	d807      	bhi.n	8004556 <HAL_SPI_TransmitReceive+0x1d8>
 8004546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454c:	d003      	beq.n	8004556 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004554:	e0a7      	b.n	80046a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800455a:	b29b      	uxth	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1a6      	bne.n	80044ae <HAL_SPI_TransmitReceive+0x130>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1a1      	bne.n	80044ae <HAL_SPI_TransmitReceive+0x130>
 800456a:	e07c      	b.n	8004666 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <HAL_SPI_TransmitReceive+0x1fc>
 8004574:	8b7b      	ldrh	r3, [r7, #26]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d16b      	bne.n	8004652 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	330c      	adds	r3, #12
 8004584:	7812      	ldrb	r2, [r2, #0]
 8004586:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045a0:	e057      	b.n	8004652 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d11c      	bne.n	80045ea <HAL_SPI_TransmitReceive+0x26c>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d017      	beq.n	80045ea <HAL_SPI_TransmitReceive+0x26c>
 80045ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d114      	bne.n	80045ea <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	330c      	adds	r3, #12
 80045ca:	7812      	ldrb	r2, [r2, #0]
 80045cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d119      	bne.n	800462c <HAL_SPI_TransmitReceive+0x2ae>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d014      	beq.n	800462c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800461e:	b29b      	uxth	r3, r3
 8004620:	3b01      	subs	r3, #1
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004628:	2301      	movs	r3, #1
 800462a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800462c:	f7fe f9c0 	bl	80029b0 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004638:	429a      	cmp	r2, r3
 800463a:	d803      	bhi.n	8004644 <HAL_SPI_TransmitReceive+0x2c6>
 800463c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004642:	d102      	bne.n	800464a <HAL_SPI_TransmitReceive+0x2cc>
 8004644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004646:	2b00      	cmp	r3, #0
 8004648:	d103      	bne.n	8004652 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004650:	e029      	b.n	80046a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004656:	b29b      	uxth	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1a2      	bne.n	80045a2 <HAL_SPI_TransmitReceive+0x224>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004660:	b29b      	uxth	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d19d      	bne.n	80045a2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004668:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 f8b2 	bl	80047d4 <SPI_EndRxTxTransaction>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d006      	beq.n	8004684 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2220      	movs	r2, #32
 8004680:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004682:	e010      	b.n	80046a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10b      	bne.n	80046a4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800468c:	2300      	movs	r3, #0
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	e000      	b.n	80046a6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80046a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3730      	adds	r7, #48	; 0x30
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	603b      	str	r3, [r7, #0]
 80046d0:	4613      	mov	r3, r2
 80046d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046d4:	f7fe f96c 	bl	80029b0 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046dc:	1a9b      	subs	r3, r3, r2
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	4413      	add	r3, r2
 80046e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046e4:	f7fe f964 	bl	80029b0 <HAL_GetTick>
 80046e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046ea:	4b39      	ldr	r3, [pc, #228]	; (80047d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	015b      	lsls	r3, r3, #5
 80046f0:	0d1b      	lsrs	r3, r3, #20
 80046f2:	69fa      	ldr	r2, [r7, #28]
 80046f4:	fb02 f303 	mul.w	r3, r2, r3
 80046f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046fa:	e054      	b.n	80047a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004702:	d050      	beq.n	80047a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004704:	f7fe f954 	bl	80029b0 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	69fa      	ldr	r2, [r7, #28]
 8004710:	429a      	cmp	r2, r3
 8004712:	d902      	bls.n	800471a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d13d      	bne.n	8004796 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004728:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004732:	d111      	bne.n	8004758 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800473c:	d004      	beq.n	8004748 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004746:	d107      	bne.n	8004758 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004756:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004760:	d10f      	bne.n	8004782 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004780:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e017      	b.n	80047c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4013      	ands	r3, r2
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	bf0c      	ite	eq
 80047b6:	2301      	moveq	r3, #1
 80047b8:	2300      	movne	r3, #0
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	461a      	mov	r2, r3
 80047be:	79fb      	ldrb	r3, [r7, #7]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d19b      	bne.n	80046fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3720      	adds	r7, #32
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000000 	.word	0x20000000

080047d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af02      	add	r7, sp, #8
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047e0:	4b1b      	ldr	r3, [pc, #108]	; (8004850 <SPI_EndRxTxTransaction+0x7c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a1b      	ldr	r2, [pc, #108]	; (8004854 <SPI_EndRxTxTransaction+0x80>)
 80047e6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ea:	0d5b      	lsrs	r3, r3, #21
 80047ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047f0:	fb02 f303 	mul.w	r3, r2, r3
 80047f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047fe:	d112      	bne.n	8004826 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2200      	movs	r2, #0
 8004808:	2180      	movs	r1, #128	; 0x80
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f7ff ff5a 	bl	80046c4 <SPI_WaitFlagStateUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d016      	beq.n	8004844 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481a:	f043 0220 	orr.w	r2, r3, #32
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e00f      	b.n	8004846 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00a      	beq.n	8004842 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	3b01      	subs	r3, #1
 8004830:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483c:	2b80      	cmp	r3, #128	; 0x80
 800483e:	d0f2      	beq.n	8004826 <SPI_EndRxTxTransaction+0x52>
 8004840:	e000      	b.n	8004844 <SPI_EndRxTxTransaction+0x70>
        break;
 8004842:	bf00      	nop
  }

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20000000 	.word	0x20000000
 8004854:	165e9f81 	.word	0x165e9f81

08004858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e041      	b.n	80048ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d106      	bne.n	8004884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fd f8ca 	bl	8001a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	3304      	adds	r3, #4
 8004894:	4619      	mov	r1, r3
 8004896:	4610      	mov	r0, r2
 8004898:	f000 fd60 	bl	800535c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b082      	sub	sp, #8
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e041      	b.n	800498c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d106      	bne.n	8004922 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f839 	bl	8004994 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2202      	movs	r2, #2
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	3304      	adds	r3, #4
 8004932:	4619      	mov	r1, r3
 8004934:	4610      	mov	r0, r2
 8004936:	f000 fd11 	bl	800535c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
 80049b4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d109      	bne.n	80049d4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	bf0c      	ite	eq
 80049cc:	2301      	moveq	r3, #1
 80049ce:	2300      	movne	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	e022      	b.n	8004a1a <HAL_TIM_PWM_Start_DMA+0x72>
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	d109      	bne.n	80049ee <HAL_TIM_PWM_Start_DMA+0x46>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	bf0c      	ite	eq
 80049e6:	2301      	moveq	r3, #1
 80049e8:	2300      	movne	r3, #0
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	e015      	b.n	8004a1a <HAL_TIM_PWM_Start_DMA+0x72>
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d109      	bne.n	8004a08 <HAL_TIM_PWM_Start_DMA+0x60>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	bf0c      	ite	eq
 8004a00:	2301      	moveq	r3, #1
 8004a02:	2300      	movne	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	e008      	b.n	8004a1a <HAL_TIM_PWM_Start_DMA+0x72>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	bf0c      	ite	eq
 8004a14:	2301      	moveq	r3, #1
 8004a16:	2300      	movne	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e15d      	b.n	8004cde <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d109      	bne.n	8004a3c <HAL_TIM_PWM_Start_DMA+0x94>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	bf0c      	ite	eq
 8004a34:	2301      	moveq	r3, #1
 8004a36:	2300      	movne	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	e022      	b.n	8004a82 <HAL_TIM_PWM_Start_DMA+0xda>
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d109      	bne.n	8004a56 <HAL_TIM_PWM_Start_DMA+0xae>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	bf0c      	ite	eq
 8004a4e:	2301      	moveq	r3, #1
 8004a50:	2300      	movne	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	e015      	b.n	8004a82 <HAL_TIM_PWM_Start_DMA+0xda>
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d109      	bne.n	8004a70 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	bf0c      	ite	eq
 8004a68:	2301      	moveq	r3, #1
 8004a6a:	2300      	movne	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	e008      	b.n	8004a82 <HAL_TIM_PWM_Start_DMA+0xda>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	bf0c      	ite	eq
 8004a7c:	2301      	moveq	r3, #1
 8004a7e:	2300      	movne	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d024      	beq.n	8004ad0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d104      	bne.n	8004a96 <HAL_TIM_PWM_Start_DMA+0xee>
 8004a8c:	887b      	ldrh	r3, [r7, #2]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e123      	b.n	8004cde <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d104      	bne.n	8004aa6 <HAL_TIM_PWM_Start_DMA+0xfe>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aa4:	e016      	b.n	8004ad4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d104      	bne.n	8004ab6 <HAL_TIM_PWM_Start_DMA+0x10e>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ab4:	e00e      	b.n	8004ad4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d104      	bne.n	8004ac6 <HAL_TIM_PWM_Start_DMA+0x11e>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ac4:	e006      	b.n	8004ad4 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ace:	e001      	b.n	8004ad4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e104      	b.n	8004cde <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b0c      	cmp	r3, #12
 8004ad8:	f200 80ae 	bhi.w	8004c38 <HAL_TIM_PWM_Start_DMA+0x290>
 8004adc:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae2:	bf00      	nop
 8004ae4:	08004b19 	.word	0x08004b19
 8004ae8:	08004c39 	.word	0x08004c39
 8004aec:	08004c39 	.word	0x08004c39
 8004af0:	08004c39 	.word	0x08004c39
 8004af4:	08004b61 	.word	0x08004b61
 8004af8:	08004c39 	.word	0x08004c39
 8004afc:	08004c39 	.word	0x08004c39
 8004b00:	08004c39 	.word	0x08004c39
 8004b04:	08004ba9 	.word	0x08004ba9
 8004b08:	08004c39 	.word	0x08004c39
 8004b0c:	08004c39 	.word	0x08004c39
 8004b10:	08004c39 	.word	0x08004c39
 8004b14:	08004bf1 	.word	0x08004bf1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	4a72      	ldr	r2, [pc, #456]	; (8004ce8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004b1e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	4a71      	ldr	r2, [pc, #452]	; (8004cec <HAL_TIM_PWM_Start_DMA+0x344>)
 8004b26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	4a70      	ldr	r2, [pc, #448]	; (8004cf0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004b2e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3334      	adds	r3, #52	; 0x34
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	887b      	ldrh	r3, [r7, #2]
 8004b40:	f7fe f926 	bl	8002d90 <HAL_DMA_Start_IT>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e0c7      	b.n	8004cde <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b5c:	60da      	str	r2, [r3, #12]
      break;
 8004b5e:	e06e      	b.n	8004c3e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b64:	4a60      	ldr	r2, [pc, #384]	; (8004ce8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004b66:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6c:	4a5f      	ldr	r2, [pc, #380]	; (8004cec <HAL_TIM_PWM_Start_DMA+0x344>)
 8004b6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b74:	4a5e      	ldr	r2, [pc, #376]	; (8004cf0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004b76:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004b7c:	6879      	ldr	r1, [r7, #4]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3338      	adds	r3, #56	; 0x38
 8004b84:	461a      	mov	r2, r3
 8004b86:	887b      	ldrh	r3, [r7, #2]
 8004b88:	f7fe f902 	bl	8002d90 <HAL_DMA_Start_IT>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e0a3      	b.n	8004cde <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ba4:	60da      	str	r2, [r3, #12]
      break;
 8004ba6:	e04a      	b.n	8004c3e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	4a4e      	ldr	r2, [pc, #312]	; (8004ce8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004bae:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	4a4d      	ldr	r2, [pc, #308]	; (8004cec <HAL_TIM_PWM_Start_DMA+0x344>)
 8004bb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	4a4c      	ldr	r2, [pc, #304]	; (8004cf0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004bbe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004bc4:	6879      	ldr	r1, [r7, #4]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	333c      	adds	r3, #60	; 0x3c
 8004bcc:	461a      	mov	r2, r3
 8004bce:	887b      	ldrh	r3, [r7, #2]
 8004bd0:	f7fe f8de 	bl	8002d90 <HAL_DMA_Start_IT>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e07f      	b.n	8004cde <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bec:	60da      	str	r2, [r3, #12]
      break;
 8004bee:	e026      	b.n	8004c3e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf4:	4a3c      	ldr	r2, [pc, #240]	; (8004ce8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8004bf6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	4a3b      	ldr	r2, [pc, #236]	; (8004cec <HAL_TIM_PWM_Start_DMA+0x344>)
 8004bfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c04:	4a3a      	ldr	r2, [pc, #232]	; (8004cf0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8004c06:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3340      	adds	r3, #64	; 0x40
 8004c14:	461a      	mov	r2, r3
 8004c16:	887b      	ldrh	r3, [r7, #2]
 8004c18:	f7fe f8ba 	bl	8002d90 <HAL_DMA_Start_IT>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e05b      	b.n	8004cde <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c34:	60da      	str	r2, [r3, #12]
      break;
 8004c36:	e002      	b.n	8004c3e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c3e:	7dfb      	ldrb	r3, [r7, #23]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d14b      	bne.n	8004cdc <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 fe2b 	bl	80058a8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a27      	ldr	r2, [pc, #156]	; (8004cf4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d107      	bne.n	8004c6c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c6a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a20      	ldr	r2, [pc, #128]	; (8004cf4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d018      	beq.n	8004ca8 <HAL_TIM_PWM_Start_DMA+0x300>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7e:	d013      	beq.n	8004ca8 <HAL_TIM_PWM_Start_DMA+0x300>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1c      	ldr	r2, [pc, #112]	; (8004cf8 <HAL_TIM_PWM_Start_DMA+0x350>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00e      	beq.n	8004ca8 <HAL_TIM_PWM_Start_DMA+0x300>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a1b      	ldr	r2, [pc, #108]	; (8004cfc <HAL_TIM_PWM_Start_DMA+0x354>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d009      	beq.n	8004ca8 <HAL_TIM_PWM_Start_DMA+0x300>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a19      	ldr	r2, [pc, #100]	; (8004d00 <HAL_TIM_PWM_Start_DMA+0x358>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d004      	beq.n	8004ca8 <HAL_TIM_PWM_Start_DMA+0x300>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a18      	ldr	r2, [pc, #96]	; (8004d04 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d111      	bne.n	8004ccc <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	2b06      	cmp	r3, #6
 8004cb8:	d010      	beq.n	8004cdc <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0201 	orr.w	r2, r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cca:	e007      	b.n	8004cdc <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	0800524d 	.word	0x0800524d
 8004cec:	080052f5 	.word	0x080052f5
 8004cf0:	080051bb 	.word	0x080051bb
 8004cf4:	40010000 	.word	0x40010000
 8004cf8:	40000400 	.word	0x40000400
 8004cfc:	40000800 	.word	0x40000800
 8004d00:	40000c00 	.word	0x40000c00
 8004d04:	40014000 	.word	0x40014000

08004d08 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b0c      	cmp	r3, #12
 8004d1a:	d855      	bhi.n	8004dc8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004d1c:	a201      	add	r2, pc, #4	; (adr r2, 8004d24 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d22:	bf00      	nop
 8004d24:	08004d59 	.word	0x08004d59
 8004d28:	08004dc9 	.word	0x08004dc9
 8004d2c:	08004dc9 	.word	0x08004dc9
 8004d30:	08004dc9 	.word	0x08004dc9
 8004d34:	08004d75 	.word	0x08004d75
 8004d38:	08004dc9 	.word	0x08004dc9
 8004d3c:	08004dc9 	.word	0x08004dc9
 8004d40:	08004dc9 	.word	0x08004dc9
 8004d44:	08004d91 	.word	0x08004d91
 8004d48:	08004dc9 	.word	0x08004dc9
 8004d4c:	08004dc9 	.word	0x08004dc9
 8004d50:	08004dc9 	.word	0x08004dc9
 8004d54:	08004dad 	.word	0x08004dad
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d66:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7fe f867 	bl	8002e40 <HAL_DMA_Abort_IT>
      break;
 8004d72:	e02c      	b.n	8004dce <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d82:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7fe f859 	bl	8002e40 <HAL_DMA_Abort_IT>
      break;
 8004d8e:	e01e      	b.n	8004dce <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d9e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fe f84b 	bl	8002e40 <HAL_DMA_Abort_IT>
      break;
 8004daa:	e010      	b.n	8004dce <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004dba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7fe f83d 	bl	8002e40 <HAL_DMA_Abort_IT>
      break;
 8004dc6:	e002      	b.n	8004dce <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	73fb      	strb	r3, [r7, #15]
      break;
 8004dcc:	bf00      	nop
  }

  if (status == HAL_OK)
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d157      	bne.n	8004e84 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	6839      	ldr	r1, [r7, #0]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 fd63 	bl	80058a8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a2a      	ldr	r2, [pc, #168]	; (8004e90 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d117      	bne.n	8004e1c <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6a1a      	ldr	r2, [r3, #32]
 8004df2:	f241 1311 	movw	r3, #4369	; 0x1111
 8004df6:	4013      	ands	r3, r2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10f      	bne.n	8004e1c <HAL_TIM_PWM_Stop_DMA+0x114>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6a1a      	ldr	r2, [r3, #32]
 8004e02:	f240 4344 	movw	r3, #1092	; 0x444
 8004e06:	4013      	ands	r3, r2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d107      	bne.n	8004e1c <HAL_TIM_PWM_Stop_DMA+0x114>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e1a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6a1a      	ldr	r2, [r3, #32]
 8004e22:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e26:	4013      	ands	r3, r2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10f      	bne.n	8004e4c <HAL_TIM_PWM_Stop_DMA+0x144>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6a1a      	ldr	r2, [r3, #32]
 8004e32:	f240 4344 	movw	r3, #1092	; 0x444
 8004e36:	4013      	ands	r3, r2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d107      	bne.n	8004e4c <HAL_TIM_PWM_Stop_DMA+0x144>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0201 	bic.w	r2, r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d104      	bne.n	8004e5c <HAL_TIM_PWM_Stop_DMA+0x154>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e5a:	e013      	b.n	8004e84 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d104      	bne.n	8004e6c <HAL_TIM_PWM_Stop_DMA+0x164>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e6a:	e00b      	b.n	8004e84 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d104      	bne.n	8004e7c <HAL_TIM_PWM_Stop_DMA+0x174>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e7a:	e003      	b.n	8004e84 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	40010000 	.word	0x40010000

08004e94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d101      	bne.n	8004eb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	e0ae      	b.n	8005010 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b0c      	cmp	r3, #12
 8004ebe:	f200 809f 	bhi.w	8005000 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ec2:	a201      	add	r2, pc, #4	; (adr r2, 8004ec8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec8:	08004efd 	.word	0x08004efd
 8004ecc:	08005001 	.word	0x08005001
 8004ed0:	08005001 	.word	0x08005001
 8004ed4:	08005001 	.word	0x08005001
 8004ed8:	08004f3d 	.word	0x08004f3d
 8004edc:	08005001 	.word	0x08005001
 8004ee0:	08005001 	.word	0x08005001
 8004ee4:	08005001 	.word	0x08005001
 8004ee8:	08004f7f 	.word	0x08004f7f
 8004eec:	08005001 	.word	0x08005001
 8004ef0:	08005001 	.word	0x08005001
 8004ef4:	08005001 	.word	0x08005001
 8004ef8:	08004fbf 	.word	0x08004fbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68b9      	ldr	r1, [r7, #8]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 faaa 	bl	800545c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699a      	ldr	r2, [r3, #24]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0208 	orr.w	r2, r2, #8
 8004f16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699a      	ldr	r2, [r3, #24]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 0204 	bic.w	r2, r2, #4
 8004f26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6999      	ldr	r1, [r3, #24]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	691a      	ldr	r2, [r3, #16]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	619a      	str	r2, [r3, #24]
      break;
 8004f3a:	e064      	b.n	8005006 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68b9      	ldr	r1, [r7, #8]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 faf0 	bl	8005528 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699a      	ldr	r2, [r3, #24]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	699a      	ldr	r2, [r3, #24]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6999      	ldr	r1, [r3, #24]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	021a      	lsls	r2, r3, #8
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	619a      	str	r2, [r3, #24]
      break;
 8004f7c:	e043      	b.n	8005006 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68b9      	ldr	r1, [r7, #8]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 fb3b 	bl	8005600 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69da      	ldr	r2, [r3, #28]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f042 0208 	orr.w	r2, r2, #8
 8004f98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69da      	ldr	r2, [r3, #28]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 0204 	bic.w	r2, r2, #4
 8004fa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69d9      	ldr	r1, [r3, #28]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	691a      	ldr	r2, [r3, #16]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	61da      	str	r2, [r3, #28]
      break;
 8004fbc:	e023      	b.n	8005006 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68b9      	ldr	r1, [r7, #8]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 fb85 	bl	80056d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69da      	ldr	r2, [r3, #28]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69da      	ldr	r2, [r3, #28]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69d9      	ldr	r1, [r3, #28]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	021a      	lsls	r2, r3, #8
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	61da      	str	r2, [r3, #28]
      break;
 8004ffe:	e002      	b.n	8005006 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	75fb      	strb	r3, [r7, #23]
      break;
 8005004:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800500e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3718      	adds	r7, #24
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800502c:	2b01      	cmp	r3, #1
 800502e:	d101      	bne.n	8005034 <HAL_TIM_ConfigClockSource+0x1c>
 8005030:	2302      	movs	r3, #2
 8005032:	e0b4      	b.n	800519e <HAL_TIM_ConfigClockSource+0x186>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800505a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800506c:	d03e      	beq.n	80050ec <HAL_TIM_ConfigClockSource+0xd4>
 800506e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005072:	f200 8087 	bhi.w	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 8005076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800507a:	f000 8086 	beq.w	800518a <HAL_TIM_ConfigClockSource+0x172>
 800507e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005082:	d87f      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 8005084:	2b70      	cmp	r3, #112	; 0x70
 8005086:	d01a      	beq.n	80050be <HAL_TIM_ConfigClockSource+0xa6>
 8005088:	2b70      	cmp	r3, #112	; 0x70
 800508a:	d87b      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 800508c:	2b60      	cmp	r3, #96	; 0x60
 800508e:	d050      	beq.n	8005132 <HAL_TIM_ConfigClockSource+0x11a>
 8005090:	2b60      	cmp	r3, #96	; 0x60
 8005092:	d877      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 8005094:	2b50      	cmp	r3, #80	; 0x50
 8005096:	d03c      	beq.n	8005112 <HAL_TIM_ConfigClockSource+0xfa>
 8005098:	2b50      	cmp	r3, #80	; 0x50
 800509a:	d873      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 800509c:	2b40      	cmp	r3, #64	; 0x40
 800509e:	d058      	beq.n	8005152 <HAL_TIM_ConfigClockSource+0x13a>
 80050a0:	2b40      	cmp	r3, #64	; 0x40
 80050a2:	d86f      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 80050a4:	2b30      	cmp	r3, #48	; 0x30
 80050a6:	d064      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0x15a>
 80050a8:	2b30      	cmp	r3, #48	; 0x30
 80050aa:	d86b      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	d060      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0x15a>
 80050b0:	2b20      	cmp	r3, #32
 80050b2:	d867      	bhi.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d05c      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0x15a>
 80050b8:	2b10      	cmp	r3, #16
 80050ba:	d05a      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0x15a>
 80050bc:	e062      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6818      	ldr	r0, [r3, #0]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6899      	ldr	r1, [r3, #8]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f000 fbcb 	bl	8005868 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	609a      	str	r2, [r3, #8]
      break;
 80050ea:	e04f      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6818      	ldr	r0, [r3, #0]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	6899      	ldr	r1, [r3, #8]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f000 fbb4 	bl	8005868 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800510e:	609a      	str	r2, [r3, #8]
      break;
 8005110:	e03c      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6818      	ldr	r0, [r3, #0]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	6859      	ldr	r1, [r3, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	461a      	mov	r2, r3
 8005120:	f000 fb28 	bl	8005774 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2150      	movs	r1, #80	; 0x50
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fb81 	bl	8005832 <TIM_ITRx_SetConfig>
      break;
 8005130:	e02c      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	6859      	ldr	r1, [r3, #4]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	461a      	mov	r2, r3
 8005140:	f000 fb47 	bl	80057d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2160      	movs	r1, #96	; 0x60
 800514a:	4618      	mov	r0, r3
 800514c:	f000 fb71 	bl	8005832 <TIM_ITRx_SetConfig>
      break;
 8005150:	e01c      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6818      	ldr	r0, [r3, #0]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	6859      	ldr	r1, [r3, #4]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	461a      	mov	r2, r3
 8005160:	f000 fb08 	bl	8005774 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2140      	movs	r1, #64	; 0x40
 800516a:	4618      	mov	r0, r3
 800516c:	f000 fb61 	bl	8005832 <TIM_ITRx_SetConfig>
      break;
 8005170:	e00c      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4619      	mov	r1, r3
 800517c:	4610      	mov	r0, r2
 800517e:	f000 fb58 	bl	8005832 <TIM_ITRx_SetConfig>
      break;
 8005182:	e003      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	73fb      	strb	r3, [r7, #15]
      break;
 8005188:	e000      	b.n	800518c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800518a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800519c:	7bfb      	ldrb	r3, [r7, #15]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d107      	bne.n	80051e2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2201      	movs	r2, #1
 80051d6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051e0:	e02a      	b.n	8005238 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d107      	bne.n	80051fc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2202      	movs	r2, #2
 80051f0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051fa:	e01d      	b.n	8005238 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	429a      	cmp	r2, r3
 8005204:	d107      	bne.n	8005216 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2204      	movs	r2, #4
 800520a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005214:	e010      	b.n	8005238 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	429a      	cmp	r2, r3
 800521e:	d107      	bne.n	8005230 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2208      	movs	r2, #8
 8005224:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800522e:	e003      	b.n	8005238 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f7ff ffb4 	bl	80051a6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	771a      	strb	r2, [r3, #28]
}
 8005244:	bf00      	nop
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005258:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	429a      	cmp	r2, r3
 8005262:	d10b      	bne.n	800527c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2201      	movs	r2, #1
 8005268:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d136      	bne.n	80052e0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800527a:	e031      	b.n	80052e0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	429a      	cmp	r2, r3
 8005284:	d10b      	bne.n	800529e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2202      	movs	r2, #2
 800528a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	69db      	ldr	r3, [r3, #28]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d125      	bne.n	80052e0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800529c:	e020      	b.n	80052e0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d10b      	bne.n	80052c0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2204      	movs	r2, #4
 80052ac:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d114      	bne.n	80052e0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052be:	e00f      	b.n	80052e0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d10a      	bne.n	80052e0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2208      	movs	r2, #8
 80052ce:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d103      	bne.n	80052e0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f7fc f813 	bl	800130c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	771a      	strb	r2, [r3, #28]
}
 80052ec:	bf00      	nop
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005300:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	429a      	cmp	r2, r3
 800530a:	d103      	bne.n	8005314 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2201      	movs	r2, #1
 8005310:	771a      	strb	r2, [r3, #28]
 8005312:	e019      	b.n	8005348 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	429a      	cmp	r2, r3
 800531c:	d103      	bne.n	8005326 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2202      	movs	r2, #2
 8005322:	771a      	strb	r2, [r3, #28]
 8005324:	e010      	b.n	8005348 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	429a      	cmp	r2, r3
 800532e:	d103      	bne.n	8005338 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2204      	movs	r2, #4
 8005334:	771a      	strb	r2, [r3, #28]
 8005336:	e007      	b.n	8005348 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	429a      	cmp	r2, r3
 8005340:	d102      	bne.n	8005348 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2208      	movs	r2, #8
 8005346:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f7fb ff31 	bl	80011b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	771a      	strb	r2, [r3, #28]
}
 8005354:	bf00      	nop
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a34      	ldr	r2, [pc, #208]	; (8005440 <TIM_Base_SetConfig+0xe4>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d00f      	beq.n	8005394 <TIM_Base_SetConfig+0x38>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800537a:	d00b      	beq.n	8005394 <TIM_Base_SetConfig+0x38>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a31      	ldr	r2, [pc, #196]	; (8005444 <TIM_Base_SetConfig+0xe8>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d007      	beq.n	8005394 <TIM_Base_SetConfig+0x38>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a30      	ldr	r2, [pc, #192]	; (8005448 <TIM_Base_SetConfig+0xec>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d003      	beq.n	8005394 <TIM_Base_SetConfig+0x38>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a2f      	ldr	r2, [pc, #188]	; (800544c <TIM_Base_SetConfig+0xf0>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d108      	bne.n	80053a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a25      	ldr	r2, [pc, #148]	; (8005440 <TIM_Base_SetConfig+0xe4>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d01b      	beq.n	80053e6 <TIM_Base_SetConfig+0x8a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b4:	d017      	beq.n	80053e6 <TIM_Base_SetConfig+0x8a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a22      	ldr	r2, [pc, #136]	; (8005444 <TIM_Base_SetConfig+0xe8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d013      	beq.n	80053e6 <TIM_Base_SetConfig+0x8a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a21      	ldr	r2, [pc, #132]	; (8005448 <TIM_Base_SetConfig+0xec>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00f      	beq.n	80053e6 <TIM_Base_SetConfig+0x8a>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a20      	ldr	r2, [pc, #128]	; (800544c <TIM_Base_SetConfig+0xf0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d00b      	beq.n	80053e6 <TIM_Base_SetConfig+0x8a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a1f      	ldr	r2, [pc, #124]	; (8005450 <TIM_Base_SetConfig+0xf4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d007      	beq.n	80053e6 <TIM_Base_SetConfig+0x8a>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a1e      	ldr	r2, [pc, #120]	; (8005454 <TIM_Base_SetConfig+0xf8>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d003      	beq.n	80053e6 <TIM_Base_SetConfig+0x8a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a1d      	ldr	r2, [pc, #116]	; (8005458 <TIM_Base_SetConfig+0xfc>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d108      	bne.n	80053f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a08      	ldr	r2, [pc, #32]	; (8005440 <TIM_Base_SetConfig+0xe4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d103      	bne.n	800542c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	691a      	ldr	r2, [r3, #16]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	615a      	str	r2, [r3, #20]
}
 8005432:	bf00      	nop
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40010000 	.word	0x40010000
 8005444:	40000400 	.word	0x40000400
 8005448:	40000800 	.word	0x40000800
 800544c:	40000c00 	.word	0x40000c00
 8005450:	40014000 	.word	0x40014000
 8005454:	40014400 	.word	0x40014400
 8005458:	40014800 	.word	0x40014800

0800545c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	f023 0201 	bic.w	r2, r3, #1
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0303 	bic.w	r3, r3, #3
 8005492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	4313      	orrs	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f023 0302 	bic.w	r3, r3, #2
 80054a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a1c      	ldr	r2, [pc, #112]	; (8005524 <TIM_OC1_SetConfig+0xc8>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d10c      	bne.n	80054d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f023 0308 	bic.w	r3, r3, #8
 80054be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f023 0304 	bic.w	r3, r3, #4
 80054d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a13      	ldr	r2, [pc, #76]	; (8005524 <TIM_OC1_SetConfig+0xc8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d111      	bne.n	80054fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	621a      	str	r2, [r3, #32]
}
 8005518:	bf00      	nop
 800551a:	371c      	adds	r7, #28
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	40010000 	.word	0x40010000

08005528 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	f023 0210 	bic.w	r2, r3, #16
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800555e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	021b      	lsls	r3, r3, #8
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	4313      	orrs	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f023 0320 	bic.w	r3, r3, #32
 8005572:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a1e      	ldr	r2, [pc, #120]	; (80055fc <TIM_OC2_SetConfig+0xd4>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d10d      	bne.n	80055a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800558e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4313      	orrs	r3, r2
 800559a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a15      	ldr	r2, [pc, #84]	; (80055fc <TIM_OC2_SetConfig+0xd4>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d113      	bne.n	80055d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	621a      	str	r2, [r3, #32]
}
 80055ee:	bf00      	nop
 80055f0:	371c      	adds	r7, #28
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	40010000 	.word	0x40010000

08005600 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0303 	bic.w	r3, r3, #3
 8005636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	4313      	orrs	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	021b      	lsls	r3, r3, #8
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	4313      	orrs	r3, r2
 8005654:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a1d      	ldr	r2, [pc, #116]	; (80056d0 <TIM_OC3_SetConfig+0xd0>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d10d      	bne.n	800567a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005664:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	021b      	lsls	r3, r3, #8
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	4313      	orrs	r3, r2
 8005670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a14      	ldr	r2, [pc, #80]	; (80056d0 <TIM_OC3_SetConfig+0xd0>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d113      	bne.n	80056aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005688:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005690:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	4313      	orrs	r3, r2
 800569c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	011b      	lsls	r3, r3, #4
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	621a      	str	r2, [r3, #32]
}
 80056c4:	bf00      	nop
 80056c6:	371c      	adds	r7, #28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	40010000 	.word	0x40010000

080056d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800570a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	021b      	lsls	r3, r3, #8
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	4313      	orrs	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800571e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	031b      	lsls	r3, r3, #12
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	4313      	orrs	r3, r2
 800572a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a10      	ldr	r2, [pc, #64]	; (8005770 <TIM_OC4_SetConfig+0x9c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d109      	bne.n	8005748 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800573a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	019b      	lsls	r3, r3, #6
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	621a      	str	r2, [r3, #32]
}
 8005762:	bf00      	nop
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	40010000 	.word	0x40010000

08005774 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	f023 0201 	bic.w	r2, r3, #1
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800579e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f023 030a 	bic.w	r3, r3, #10
 80057b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	621a      	str	r2, [r3, #32]
}
 80057c6:	bf00      	nop
 80057c8:	371c      	adds	r7, #28
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b087      	sub	sp, #28
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	f023 0210 	bic.w	r2, r3, #16
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	031b      	lsls	r3, r3, #12
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	4313      	orrs	r3, r2
 8005806:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800580e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	011b      	lsls	r3, r3, #4
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	4313      	orrs	r3, r2
 8005818:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	621a      	str	r2, [r3, #32]
}
 8005826:	bf00      	nop
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005832:	b480      	push	{r7}
 8005834:	b085      	sub	sp, #20
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005848:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4313      	orrs	r3, r2
 8005850:	f043 0307 	orr.w	r3, r3, #7
 8005854:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	609a      	str	r2, [r3, #8]
}
 800585c:	bf00      	nop
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005882:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	021a      	lsls	r2, r3, #8
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	431a      	orrs	r2, r3
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	4313      	orrs	r3, r2
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	609a      	str	r2, [r3, #8]
}
 800589c:	bf00      	nop
 800589e:	371c      	adds	r7, #28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f003 031f 	and.w	r3, r3, #31
 80058ba:	2201      	movs	r2, #1
 80058bc:	fa02 f303 	lsl.w	r3, r2, r3
 80058c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6a1a      	ldr	r2, [r3, #32]
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	43db      	mvns	r3, r3
 80058ca:	401a      	ands	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a1a      	ldr	r2, [r3, #32]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f003 031f 	and.w	r3, r3, #31
 80058da:	6879      	ldr	r1, [r7, #4]
 80058dc:	fa01 f303 	lsl.w	r3, r1, r3
 80058e0:	431a      	orrs	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	621a      	str	r2, [r3, #32]
}
 80058e6:	bf00      	nop
 80058e8:	371c      	adds	r7, #28
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
	...

080058f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005904:	2b01      	cmp	r3, #1
 8005906:	d101      	bne.n	800590c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005908:	2302      	movs	r3, #2
 800590a:	e050      	b.n	80059ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005932:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a1c      	ldr	r2, [pc, #112]	; (80059bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d018      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005958:	d013      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a18      	ldr	r2, [pc, #96]	; (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00e      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a16      	ldr	r2, [pc, #88]	; (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d009      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a15      	ldr	r2, [pc, #84]	; (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d004      	beq.n	8005982 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a13      	ldr	r2, [pc, #76]	; (80059cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d10c      	bne.n	800599c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005988:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	4313      	orrs	r3, r2
 8005992:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40010000 	.word	0x40010000
 80059c0:	40000400 	.word	0x40000400
 80059c4:	40000800 	.word	0x40000800
 80059c8:	40000c00 	.word	0x40000c00
 80059cc:	40014000 	.word	0x40014000

080059d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059da:	2300      	movs	r3, #0
 80059dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d101      	bne.n	80059ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059e8:	2302      	movs	r3, #2
 80059ea:	e03d      	b.n	8005a68 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e03f      	b.n	8005b06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7fc f938 	bl	8001d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2224      	movs	r2, #36	; 0x24
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ab6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f929 	bl	8005d10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	691a      	ldr	r2, [r3, #16]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005acc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	695a      	ldr	r2, [r3, #20]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005adc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68da      	ldr	r2, [r3, #12]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005aec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b08a      	sub	sp, #40	; 0x28
 8005b12:	af02      	add	r7, sp, #8
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	60b9      	str	r1, [r7, #8]
 8005b18:	603b      	str	r3, [r7, #0]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b20      	cmp	r3, #32
 8005b2c:	d17c      	bne.n	8005c28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <HAL_UART_Transmit+0x2c>
 8005b34:	88fb      	ldrh	r3, [r7, #6]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e075      	b.n	8005c2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d101      	bne.n	8005b4c <HAL_UART_Transmit+0x3e>
 8005b48:	2302      	movs	r3, #2
 8005b4a:	e06e      	b.n	8005c2a <HAL_UART_Transmit+0x11c>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2221      	movs	r2, #33	; 0x21
 8005b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b62:	f7fc ff25 	bl	80029b0 <HAL_GetTick>
 8005b66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	88fa      	ldrh	r2, [r7, #6]
 8005b6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	88fa      	ldrh	r2, [r7, #6]
 8005b72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b7c:	d108      	bne.n	8005b90 <HAL_UART_Transmit+0x82>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d104      	bne.n	8005b90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	61bb      	str	r3, [r7, #24]
 8005b8e:	e003      	b.n	8005b98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b94:	2300      	movs	r3, #0
 8005b96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ba0:	e02a      	b.n	8005bf8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	2180      	movs	r1, #128	; 0x80
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f840 	bl	8005c32 <UART_WaitOnFlagUntilTimeout>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e036      	b.n	8005c2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10b      	bne.n	8005bda <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	3302      	adds	r3, #2
 8005bd6:	61bb      	str	r3, [r7, #24]
 8005bd8:	e007      	b.n	8005bea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	781a      	ldrb	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	3301      	adds	r3, #1
 8005be8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1cf      	bne.n	8005ba2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2140      	movs	r1, #64	; 0x40
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 f810 	bl	8005c32 <UART_WaitOnFlagUntilTimeout>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e006      	b.n	8005c2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	e000      	b.n	8005c2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005c28:	2302      	movs	r3, #2
  }
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3720      	adds	r7, #32
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b090      	sub	sp, #64	; 0x40
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	603b      	str	r3, [r7, #0]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c42:	e050      	b.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4a:	d04c      	beq.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d007      	beq.n	8005c62 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c52:	f7fc fead 	bl	80029b0 <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d241      	bcs.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	330c      	adds	r3, #12
 8005c68:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6c:	e853 3f00 	ldrex	r3, [r3]
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	330c      	adds	r3, #12
 8005c80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c82:	637a      	str	r2, [r7, #52]	; 0x34
 8005c84:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c8a:	e841 2300 	strex	r3, r2, [r1]
 8005c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1e5      	bne.n	8005c62 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	3314      	adds	r3, #20
 8005c9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	e853 3f00 	ldrex	r3, [r3]
 8005ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f023 0301 	bic.w	r3, r3, #1
 8005cac:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3314      	adds	r3, #20
 8005cb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cb6:	623a      	str	r2, [r7, #32]
 8005cb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	69f9      	ldr	r1, [r7, #28]
 8005cbc:	6a3a      	ldr	r2, [r7, #32]
 8005cbe:	e841 2300 	strex	r3, r2, [r1]
 8005cc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1e5      	bne.n	8005c96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e00f      	b.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	bf0c      	ite	eq
 8005cf6:	2301      	moveq	r3, #1
 8005cf8:	2300      	movne	r3, #0
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d09f      	beq.n	8005c44 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3740      	adds	r7, #64	; 0x40
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
	...

08005d10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d14:	b0c0      	sub	sp, #256	; 0x100
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d2c:	68d9      	ldr	r1, [r3, #12]
 8005d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	ea40 0301 	orr.w	r3, r0, r1
 8005d38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	431a      	orrs	r2, r3
 8005d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d68:	f021 010c 	bic.w	r1, r1, #12
 8005d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d76:	430b      	orrs	r3, r1
 8005d78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d8a:	6999      	ldr	r1, [r3, #24]
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	ea40 0301 	orr.w	r3, r0, r1
 8005d96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	4b8f      	ldr	r3, [pc, #572]	; (8005fdc <UART_SetConfig+0x2cc>)
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d005      	beq.n	8005db0 <UART_SetConfig+0xa0>
 8005da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	4b8d      	ldr	r3, [pc, #564]	; (8005fe0 <UART_SetConfig+0x2d0>)
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d104      	bne.n	8005dba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005db0:	f7fe f90c 	bl	8003fcc <HAL_RCC_GetPCLK2Freq>
 8005db4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005db8:	e003      	b.n	8005dc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dba:	f7fe f8f3 	bl	8003fa4 <HAL_RCC_GetPCLK1Freq>
 8005dbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dcc:	f040 810c 	bne.w	8005fe8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005dda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005dde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005de2:	4622      	mov	r2, r4
 8005de4:	462b      	mov	r3, r5
 8005de6:	1891      	adds	r1, r2, r2
 8005de8:	65b9      	str	r1, [r7, #88]	; 0x58
 8005dea:	415b      	adcs	r3, r3
 8005dec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005df2:	4621      	mov	r1, r4
 8005df4:	eb12 0801 	adds.w	r8, r2, r1
 8005df8:	4629      	mov	r1, r5
 8005dfa:	eb43 0901 	adc.w	r9, r3, r1
 8005dfe:	f04f 0200 	mov.w	r2, #0
 8005e02:	f04f 0300 	mov.w	r3, #0
 8005e06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e12:	4690      	mov	r8, r2
 8005e14:	4699      	mov	r9, r3
 8005e16:	4623      	mov	r3, r4
 8005e18:	eb18 0303 	adds.w	r3, r8, r3
 8005e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e20:	462b      	mov	r3, r5
 8005e22:	eb49 0303 	adc.w	r3, r9, r3
 8005e26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e3e:	460b      	mov	r3, r1
 8005e40:	18db      	adds	r3, r3, r3
 8005e42:	653b      	str	r3, [r7, #80]	; 0x50
 8005e44:	4613      	mov	r3, r2
 8005e46:	eb42 0303 	adc.w	r3, r2, r3
 8005e4a:	657b      	str	r3, [r7, #84]	; 0x54
 8005e4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005e50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005e54:	f7fa fa1c 	bl	8000290 <__aeabi_uldivmod>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4b61      	ldr	r3, [pc, #388]	; (8005fe4 <UART_SetConfig+0x2d4>)
 8005e5e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e62:	095b      	lsrs	r3, r3, #5
 8005e64:	011c      	lsls	r4, r3, #4
 8005e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e78:	4642      	mov	r2, r8
 8005e7a:	464b      	mov	r3, r9
 8005e7c:	1891      	adds	r1, r2, r2
 8005e7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e80:	415b      	adcs	r3, r3
 8005e82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e88:	4641      	mov	r1, r8
 8005e8a:	eb12 0a01 	adds.w	sl, r2, r1
 8005e8e:	4649      	mov	r1, r9
 8005e90:	eb43 0b01 	adc.w	fp, r3, r1
 8005e94:	f04f 0200 	mov.w	r2, #0
 8005e98:	f04f 0300 	mov.w	r3, #0
 8005e9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ea0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ea4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ea8:	4692      	mov	sl, r2
 8005eaa:	469b      	mov	fp, r3
 8005eac:	4643      	mov	r3, r8
 8005eae:	eb1a 0303 	adds.w	r3, sl, r3
 8005eb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005eb6:	464b      	mov	r3, r9
 8005eb8:	eb4b 0303 	adc.w	r3, fp, r3
 8005ebc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ecc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ed0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	18db      	adds	r3, r3, r3
 8005ed8:	643b      	str	r3, [r7, #64]	; 0x40
 8005eda:	4613      	mov	r3, r2
 8005edc:	eb42 0303 	adc.w	r3, r2, r3
 8005ee0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ee2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ee6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005eea:	f7fa f9d1 	bl	8000290 <__aeabi_uldivmod>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	4611      	mov	r1, r2
 8005ef4:	4b3b      	ldr	r3, [pc, #236]	; (8005fe4 <UART_SetConfig+0x2d4>)
 8005ef6:	fba3 2301 	umull	r2, r3, r3, r1
 8005efa:	095b      	lsrs	r3, r3, #5
 8005efc:	2264      	movs	r2, #100	; 0x64
 8005efe:	fb02 f303 	mul.w	r3, r2, r3
 8005f02:	1acb      	subs	r3, r1, r3
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f0a:	4b36      	ldr	r3, [pc, #216]	; (8005fe4 <UART_SetConfig+0x2d4>)
 8005f0c:	fba3 2302 	umull	r2, r3, r3, r2
 8005f10:	095b      	lsrs	r3, r3, #5
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f18:	441c      	add	r4, r3
 8005f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f2c:	4642      	mov	r2, r8
 8005f2e:	464b      	mov	r3, r9
 8005f30:	1891      	adds	r1, r2, r2
 8005f32:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f34:	415b      	adcs	r3, r3
 8005f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f3c:	4641      	mov	r1, r8
 8005f3e:	1851      	adds	r1, r2, r1
 8005f40:	6339      	str	r1, [r7, #48]	; 0x30
 8005f42:	4649      	mov	r1, r9
 8005f44:	414b      	adcs	r3, r1
 8005f46:	637b      	str	r3, [r7, #52]	; 0x34
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	f04f 0300 	mov.w	r3, #0
 8005f50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005f54:	4659      	mov	r1, fp
 8005f56:	00cb      	lsls	r3, r1, #3
 8005f58:	4651      	mov	r1, sl
 8005f5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f5e:	4651      	mov	r1, sl
 8005f60:	00ca      	lsls	r2, r1, #3
 8005f62:	4610      	mov	r0, r2
 8005f64:	4619      	mov	r1, r3
 8005f66:	4603      	mov	r3, r0
 8005f68:	4642      	mov	r2, r8
 8005f6a:	189b      	adds	r3, r3, r2
 8005f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f70:	464b      	mov	r3, r9
 8005f72:	460a      	mov	r2, r1
 8005f74:	eb42 0303 	adc.w	r3, r2, r3
 8005f78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f90:	460b      	mov	r3, r1
 8005f92:	18db      	adds	r3, r3, r3
 8005f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f96:	4613      	mov	r3, r2
 8005f98:	eb42 0303 	adc.w	r3, r2, r3
 8005f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005fa2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005fa6:	f7fa f973 	bl	8000290 <__aeabi_uldivmod>
 8005faa:	4602      	mov	r2, r0
 8005fac:	460b      	mov	r3, r1
 8005fae:	4b0d      	ldr	r3, [pc, #52]	; (8005fe4 <UART_SetConfig+0x2d4>)
 8005fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8005fb4:	095b      	lsrs	r3, r3, #5
 8005fb6:	2164      	movs	r1, #100	; 0x64
 8005fb8:	fb01 f303 	mul.w	r3, r1, r3
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	3332      	adds	r3, #50	; 0x32
 8005fc2:	4a08      	ldr	r2, [pc, #32]	; (8005fe4 <UART_SetConfig+0x2d4>)
 8005fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc8:	095b      	lsrs	r3, r3, #5
 8005fca:	f003 0207 	and.w	r2, r3, #7
 8005fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4422      	add	r2, r4
 8005fd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fd8:	e105      	b.n	80061e6 <UART_SetConfig+0x4d6>
 8005fda:	bf00      	nop
 8005fdc:	40011000 	.word	0x40011000
 8005fe0:	40011400 	.word	0x40011400
 8005fe4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fec:	2200      	movs	r2, #0
 8005fee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ff2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ff6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ffa:	4642      	mov	r2, r8
 8005ffc:	464b      	mov	r3, r9
 8005ffe:	1891      	adds	r1, r2, r2
 8006000:	6239      	str	r1, [r7, #32]
 8006002:	415b      	adcs	r3, r3
 8006004:	627b      	str	r3, [r7, #36]	; 0x24
 8006006:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800600a:	4641      	mov	r1, r8
 800600c:	1854      	adds	r4, r2, r1
 800600e:	4649      	mov	r1, r9
 8006010:	eb43 0501 	adc.w	r5, r3, r1
 8006014:	f04f 0200 	mov.w	r2, #0
 8006018:	f04f 0300 	mov.w	r3, #0
 800601c:	00eb      	lsls	r3, r5, #3
 800601e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006022:	00e2      	lsls	r2, r4, #3
 8006024:	4614      	mov	r4, r2
 8006026:	461d      	mov	r5, r3
 8006028:	4643      	mov	r3, r8
 800602a:	18e3      	adds	r3, r4, r3
 800602c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006030:	464b      	mov	r3, r9
 8006032:	eb45 0303 	adc.w	r3, r5, r3
 8006036:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800603a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006046:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800604a:	f04f 0200 	mov.w	r2, #0
 800604e:	f04f 0300 	mov.w	r3, #0
 8006052:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006056:	4629      	mov	r1, r5
 8006058:	008b      	lsls	r3, r1, #2
 800605a:	4621      	mov	r1, r4
 800605c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006060:	4621      	mov	r1, r4
 8006062:	008a      	lsls	r2, r1, #2
 8006064:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006068:	f7fa f912 	bl	8000290 <__aeabi_uldivmod>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	4b60      	ldr	r3, [pc, #384]	; (80061f4 <UART_SetConfig+0x4e4>)
 8006072:	fba3 2302 	umull	r2, r3, r3, r2
 8006076:	095b      	lsrs	r3, r3, #5
 8006078:	011c      	lsls	r4, r3, #4
 800607a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800607e:	2200      	movs	r2, #0
 8006080:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006084:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006088:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800608c:	4642      	mov	r2, r8
 800608e:	464b      	mov	r3, r9
 8006090:	1891      	adds	r1, r2, r2
 8006092:	61b9      	str	r1, [r7, #24]
 8006094:	415b      	adcs	r3, r3
 8006096:	61fb      	str	r3, [r7, #28]
 8006098:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800609c:	4641      	mov	r1, r8
 800609e:	1851      	adds	r1, r2, r1
 80060a0:	6139      	str	r1, [r7, #16]
 80060a2:	4649      	mov	r1, r9
 80060a4:	414b      	adcs	r3, r1
 80060a6:	617b      	str	r3, [r7, #20]
 80060a8:	f04f 0200 	mov.w	r2, #0
 80060ac:	f04f 0300 	mov.w	r3, #0
 80060b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060b4:	4659      	mov	r1, fp
 80060b6:	00cb      	lsls	r3, r1, #3
 80060b8:	4651      	mov	r1, sl
 80060ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060be:	4651      	mov	r1, sl
 80060c0:	00ca      	lsls	r2, r1, #3
 80060c2:	4610      	mov	r0, r2
 80060c4:	4619      	mov	r1, r3
 80060c6:	4603      	mov	r3, r0
 80060c8:	4642      	mov	r2, r8
 80060ca:	189b      	adds	r3, r3, r2
 80060cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060d0:	464b      	mov	r3, r9
 80060d2:	460a      	mov	r2, r1
 80060d4:	eb42 0303 	adc.w	r3, r2, r3
 80060d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80060e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	f04f 0300 	mov.w	r3, #0
 80060f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80060f4:	4649      	mov	r1, r9
 80060f6:	008b      	lsls	r3, r1, #2
 80060f8:	4641      	mov	r1, r8
 80060fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060fe:	4641      	mov	r1, r8
 8006100:	008a      	lsls	r2, r1, #2
 8006102:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006106:	f7fa f8c3 	bl	8000290 <__aeabi_uldivmod>
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4b39      	ldr	r3, [pc, #228]	; (80061f4 <UART_SetConfig+0x4e4>)
 8006110:	fba3 1302 	umull	r1, r3, r3, r2
 8006114:	095b      	lsrs	r3, r3, #5
 8006116:	2164      	movs	r1, #100	; 0x64
 8006118:	fb01 f303 	mul.w	r3, r1, r3
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	3332      	adds	r3, #50	; 0x32
 8006122:	4a34      	ldr	r2, [pc, #208]	; (80061f4 <UART_SetConfig+0x4e4>)
 8006124:	fba2 2303 	umull	r2, r3, r2, r3
 8006128:	095b      	lsrs	r3, r3, #5
 800612a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800612e:	441c      	add	r4, r3
 8006130:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006134:	2200      	movs	r2, #0
 8006136:	673b      	str	r3, [r7, #112]	; 0x70
 8006138:	677a      	str	r2, [r7, #116]	; 0x74
 800613a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800613e:	4642      	mov	r2, r8
 8006140:	464b      	mov	r3, r9
 8006142:	1891      	adds	r1, r2, r2
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	415b      	adcs	r3, r3
 8006148:	60fb      	str	r3, [r7, #12]
 800614a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800614e:	4641      	mov	r1, r8
 8006150:	1851      	adds	r1, r2, r1
 8006152:	6039      	str	r1, [r7, #0]
 8006154:	4649      	mov	r1, r9
 8006156:	414b      	adcs	r3, r1
 8006158:	607b      	str	r3, [r7, #4]
 800615a:	f04f 0200 	mov.w	r2, #0
 800615e:	f04f 0300 	mov.w	r3, #0
 8006162:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006166:	4659      	mov	r1, fp
 8006168:	00cb      	lsls	r3, r1, #3
 800616a:	4651      	mov	r1, sl
 800616c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006170:	4651      	mov	r1, sl
 8006172:	00ca      	lsls	r2, r1, #3
 8006174:	4610      	mov	r0, r2
 8006176:	4619      	mov	r1, r3
 8006178:	4603      	mov	r3, r0
 800617a:	4642      	mov	r2, r8
 800617c:	189b      	adds	r3, r3, r2
 800617e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006180:	464b      	mov	r3, r9
 8006182:	460a      	mov	r2, r1
 8006184:	eb42 0303 	adc.w	r3, r2, r3
 8006188:	66fb      	str	r3, [r7, #108]	; 0x6c
 800618a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	663b      	str	r3, [r7, #96]	; 0x60
 8006194:	667a      	str	r2, [r7, #100]	; 0x64
 8006196:	f04f 0200 	mov.w	r2, #0
 800619a:	f04f 0300 	mov.w	r3, #0
 800619e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80061a2:	4649      	mov	r1, r9
 80061a4:	008b      	lsls	r3, r1, #2
 80061a6:	4641      	mov	r1, r8
 80061a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061ac:	4641      	mov	r1, r8
 80061ae:	008a      	lsls	r2, r1, #2
 80061b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80061b4:	f7fa f86c 	bl	8000290 <__aeabi_uldivmod>
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	4b0d      	ldr	r3, [pc, #52]	; (80061f4 <UART_SetConfig+0x4e4>)
 80061be:	fba3 1302 	umull	r1, r3, r3, r2
 80061c2:	095b      	lsrs	r3, r3, #5
 80061c4:	2164      	movs	r1, #100	; 0x64
 80061c6:	fb01 f303 	mul.w	r3, r1, r3
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	011b      	lsls	r3, r3, #4
 80061ce:	3332      	adds	r3, #50	; 0x32
 80061d0:	4a08      	ldr	r2, [pc, #32]	; (80061f4 <UART_SetConfig+0x4e4>)
 80061d2:	fba2 2303 	umull	r2, r3, r2, r3
 80061d6:	095b      	lsrs	r3, r3, #5
 80061d8:	f003 020f 	and.w	r2, r3, #15
 80061dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4422      	add	r2, r4
 80061e4:	609a      	str	r2, [r3, #8]
}
 80061e6:	bf00      	nop
 80061e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80061ec:	46bd      	mov	sp, r7
 80061ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061f2:	bf00      	nop
 80061f4:	51eb851f 	.word	0x51eb851f

080061f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80061fc:	4904      	ldr	r1, [pc, #16]	; (8006210 <MX_FATFS_Init+0x18>)
 80061fe:	4805      	ldr	r0, [pc, #20]	; (8006214 <MX_FATFS_Init+0x1c>)
 8006200:	f003 fb12 	bl	8009828 <FATFS_LinkDriver>
 8006204:	4603      	mov	r3, r0
 8006206:	461a      	mov	r2, r3
 8006208:	4b03      	ldr	r3, [pc, #12]	; (8006218 <MX_FATFS_Init+0x20>)
 800620a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800620c:	bf00      	nop
 800620e:	bd80      	pop	{r7, pc}
 8006210:	2000728c 	.word	0x2000728c
 8006214:	2000000c 	.word	0x2000000c
 8006218:	20007288 	.word	0x20007288

0800621c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800621c:	b480      	push	{r7}
 800621e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006220:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006222:	4618      	mov	r0, r3
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	4603      	mov	r3, r0
 8006234:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8006236:	79fb      	ldrb	r3, [r7, #7]
 8006238:	4618      	mov	r0, r3
 800623a:	f000 f9dd 	bl	80065f8 <USER_SPI_initialize>
 800623e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006240:	4618      	mov	r0, r3
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	4603      	mov	r3, r0
 8006250:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8006252:	79fb      	ldrb	r3, [r7, #7]
 8006254:	4618      	mov	r0, r3
 8006256:	f000 fab9 	bl	80067cc <USER_SPI_status>
 800625a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800625c:	4618      	mov	r0, r3
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	607a      	str	r2, [r7, #4]
 800626e:	603b      	str	r3, [r7, #0]
 8006270:	4603      	mov	r3, r0
 8006272:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8006274:	7bf8      	ldrb	r0, [r7, #15]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	f000 fabc 	bl	80067f8 <USER_SPI_read>
 8006280:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
 8006294:	603b      	str	r3, [r7, #0]
 8006296:	4603      	mov	r3, r0
 8006298:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 800629a:	7bf8      	ldrb	r0, [r7, #15]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	68b9      	ldr	r1, [r7, #8]
 80062a2:	f000 fb0f 	bl	80068c4 <USER_SPI_write>
 80062a6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	4603      	mov	r3, r0
 80062b8:	603a      	str	r2, [r7, #0]
 80062ba:	71fb      	strb	r3, [r7, #7]
 80062bc:	460b      	mov	r3, r1
 80062be:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80062c0:	79b9      	ldrb	r1, [r7, #6]
 80062c2:	79fb      	ldrb	r3, [r7, #7]
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 fb78 	bl	80069bc <USER_SPI_ioctl>
 80062cc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
	...

080062d8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80062e0:	f7fc fb66 	bl	80029b0 <HAL_GetTick>
 80062e4:	4603      	mov	r3, r0
 80062e6:	4a04      	ldr	r2, [pc, #16]	; (80062f8 <SPI_Timer_On+0x20>)
 80062e8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80062ea:	4a04      	ldr	r2, [pc, #16]	; (80062fc <SPI_Timer_On+0x24>)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6013      	str	r3, [r2, #0]
}
 80062f0:	bf00      	nop
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	20007294 	.word	0x20007294
 80062fc:	20007298 	.word	0x20007298

08006300 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006300:	b580      	push	{r7, lr}
 8006302:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006304:	f7fc fb54 	bl	80029b0 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	4b06      	ldr	r3, [pc, #24]	; (8006324 <SPI_Timer_Status+0x24>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	1ad2      	subs	r2, r2, r3
 8006310:	4b05      	ldr	r3, [pc, #20]	; (8006328 <SPI_Timer_Status+0x28>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	429a      	cmp	r2, r3
 8006316:	bf34      	ite	cc
 8006318:	2301      	movcc	r3, #1
 800631a:	2300      	movcs	r3, #0
 800631c:	b2db      	uxtb	r3, r3
}
 800631e:	4618      	mov	r0, r3
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	20007294 	.word	0x20007294
 8006328:	20007298 	.word	0x20007298

0800632c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af02      	add	r7, sp, #8
 8006332:	4603      	mov	r3, r0
 8006334:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006336:	f107 020f 	add.w	r2, r7, #15
 800633a:	1df9      	adds	r1, r7, #7
 800633c:	2332      	movs	r3, #50	; 0x32
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	2301      	movs	r3, #1
 8006342:	4804      	ldr	r0, [pc, #16]	; (8006354 <xchg_spi+0x28>)
 8006344:	f7fe f81b 	bl	800437e <HAL_SPI_TransmitReceive>
    return rxDat;
 8006348:	7bfb      	ldrb	r3, [r7, #15]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	200000a4 	.word	0x200000a4

08006358 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006358:	b590      	push	{r4, r7, lr}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8006362:	2300      	movs	r3, #0
 8006364:	60fb      	str	r3, [r7, #12]
 8006366:	e00a      	b.n	800637e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	18d4      	adds	r4, r2, r3
 800636e:	20ff      	movs	r0, #255	; 0xff
 8006370:	f7ff ffdc 	bl	800632c <xchg_spi>
 8006374:	4603      	mov	r3, r0
 8006376:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	3301      	adds	r3, #1
 800637c:	60fb      	str	r3, [r7, #12]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d3f0      	bcc.n	8006368 <rcvr_spi_multi+0x10>
	}
}
 8006386:	bf00      	nop
 8006388:	bf00      	nop
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	bd90      	pop	{r4, r7, pc}

08006390 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800639a:	2300      	movs	r3, #0
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	e009      	b.n	80063b4 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4413      	add	r3, r2
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7ff ffbf 	bl	800632c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3301      	adds	r3, #1
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d3f1      	bcc.n	80063a0 <xmit_spi_multi+0x10>
	}
}
 80063bc:	bf00      	nop
 80063be:	bf00      	nop
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b086      	sub	sp, #24
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80063ce:	f7fc faef 	bl	80029b0 <HAL_GetTick>
 80063d2:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80063d8:	20ff      	movs	r0, #255	; 0xff
 80063da:	f7ff ffa7 	bl	800632c <xchg_spi>
 80063de:	4603      	mov	r3, r0
 80063e0:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
 80063e4:	2bff      	cmp	r3, #255	; 0xff
 80063e6:	d007      	beq.n	80063f8 <wait_ready+0x32>
 80063e8:	f7fc fae2 	bl	80029b0 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d8ef      	bhi.n	80063d8 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
 80063fa:	2bff      	cmp	r3, #255	; 0xff
 80063fc:	bf0c      	ite	eq
 80063fe:	2301      	moveq	r3, #1
 8006400:	2300      	movne	r3, #0
 8006402:	b2db      	uxtb	r3, r3
}
 8006404:	4618      	mov	r0, r3
 8006406:	3718      	adds	r7, #24
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006410:	2201      	movs	r2, #1
 8006412:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006416:	4804      	ldr	r0, [pc, #16]	; (8006428 <despiselect+0x1c>)
 8006418:	f7fd f922 	bl	8003660 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800641c:	20ff      	movs	r0, #255	; 0xff
 800641e:	f7ff ff85 	bl	800632c <xchg_spi>

}
 8006422:	bf00      	nop
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	40020000 	.word	0x40020000

0800642c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800642c:	b580      	push	{r7, lr}
 800642e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006430:	2200      	movs	r2, #0
 8006432:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006436:	480a      	ldr	r0, [pc, #40]	; (8006460 <spiselect+0x34>)
 8006438:	f7fd f912 	bl	8003660 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800643c:	20ff      	movs	r0, #255	; 0xff
 800643e:	f7ff ff75 	bl	800632c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006442:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006446:	f7ff ffbe 	bl	80063c6 <wait_ready>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <spiselect+0x28>
 8006450:	2301      	movs	r3, #1
 8006452:	e002      	b.n	800645a <spiselect+0x2e>

	despiselect();
 8006454:	f7ff ffda 	bl	800640c <despiselect>
	return 0;	/* Timeout */
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	40020000 	.word	0x40020000

08006464 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800646e:	20c8      	movs	r0, #200	; 0xc8
 8006470:	f7ff ff32 	bl	80062d8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006474:	20ff      	movs	r0, #255	; 0xff
 8006476:	f7ff ff59 	bl	800632c <xchg_spi>
 800647a:	4603      	mov	r3, r0
 800647c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	2bff      	cmp	r3, #255	; 0xff
 8006482:	d104      	bne.n	800648e <rcvr_datablock+0x2a>
 8006484:	f7ff ff3c 	bl	8006300 <SPI_Timer_Status>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1f2      	bne.n	8006474 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800648e:	7bfb      	ldrb	r3, [r7, #15]
 8006490:	2bfe      	cmp	r3, #254	; 0xfe
 8006492:	d001      	beq.n	8006498 <rcvr_datablock+0x34>
 8006494:	2300      	movs	r3, #0
 8006496:	e00a      	b.n	80064ae <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7ff ff5c 	bl	8006358 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80064a0:	20ff      	movs	r0, #255	; 0xff
 80064a2:	f7ff ff43 	bl	800632c <xchg_spi>
 80064a6:	20ff      	movs	r0, #255	; 0xff
 80064a8:	f7ff ff40 	bl	800632c <xchg_spi>

	return 1;						/* Function succeeded */
 80064ac:	2301      	movs	r3, #1
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b084      	sub	sp, #16
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	460b      	mov	r3, r1
 80064c0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80064c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80064c6:	f7ff ff7e 	bl	80063c6 <wait_ready>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <xmit_datablock+0x1e>
 80064d0:	2300      	movs	r3, #0
 80064d2:	e01e      	b.n	8006512 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80064d4:	78fb      	ldrb	r3, [r7, #3]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7ff ff28 	bl	800632c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80064dc:	78fb      	ldrb	r3, [r7, #3]
 80064de:	2bfd      	cmp	r3, #253	; 0xfd
 80064e0:	d016      	beq.n	8006510 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80064e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7ff ff52 	bl	8006390 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80064ec:	20ff      	movs	r0, #255	; 0xff
 80064ee:	f7ff ff1d 	bl	800632c <xchg_spi>
 80064f2:	20ff      	movs	r0, #255	; 0xff
 80064f4:	f7ff ff1a 	bl	800632c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80064f8:	20ff      	movs	r0, #255	; 0xff
 80064fa:	f7ff ff17 	bl	800632c <xchg_spi>
 80064fe:	4603      	mov	r3, r0
 8006500:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006502:	7bfb      	ldrb	r3, [r7, #15]
 8006504:	f003 031f 	and.w	r3, r3, #31
 8006508:	2b05      	cmp	r3, #5
 800650a:	d001      	beq.n	8006510 <xmit_datablock+0x5a>
 800650c:	2300      	movs	r3, #0
 800650e:	e000      	b.n	8006512 <xmit_datablock+0x5c>
	}
	return 1;
 8006510:	2301      	movs	r3, #1
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b084      	sub	sp, #16
 800651e:	af00      	add	r7, sp, #0
 8006520:	4603      	mov	r3, r0
 8006522:	6039      	str	r1, [r7, #0]
 8006524:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800652a:	2b00      	cmp	r3, #0
 800652c:	da0e      	bge.n	800654c <send_cmd+0x32>
		cmd &= 0x7F;
 800652e:	79fb      	ldrb	r3, [r7, #7]
 8006530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006534:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006536:	2100      	movs	r1, #0
 8006538:	2037      	movs	r0, #55	; 0x37
 800653a:	f7ff ffee 	bl	800651a <send_cmd>
 800653e:	4603      	mov	r3, r0
 8006540:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006542:	7bbb      	ldrb	r3, [r7, #14]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d901      	bls.n	800654c <send_cmd+0x32>
 8006548:	7bbb      	ldrb	r3, [r7, #14]
 800654a:	e051      	b.n	80065f0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800654c:	79fb      	ldrb	r3, [r7, #7]
 800654e:	2b0c      	cmp	r3, #12
 8006550:	d008      	beq.n	8006564 <send_cmd+0x4a>
		despiselect();
 8006552:	f7ff ff5b 	bl	800640c <despiselect>
		if (!spiselect()) return 0xFF;
 8006556:	f7ff ff69 	bl	800642c <spiselect>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <send_cmd+0x4a>
 8006560:	23ff      	movs	r3, #255	; 0xff
 8006562:	e045      	b.n	80065f0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006564:	79fb      	ldrb	r3, [r7, #7]
 8006566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800656a:	b2db      	uxtb	r3, r3
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff fedd 	bl	800632c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	0e1b      	lsrs	r3, r3, #24
 8006576:	b2db      	uxtb	r3, r3
 8006578:	4618      	mov	r0, r3
 800657a:	f7ff fed7 	bl	800632c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	0c1b      	lsrs	r3, r3, #16
 8006582:	b2db      	uxtb	r3, r3
 8006584:	4618      	mov	r0, r3
 8006586:	f7ff fed1 	bl	800632c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	0a1b      	lsrs	r3, r3, #8
 800658e:	b2db      	uxtb	r3, r3
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff fecb 	bl	800632c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	b2db      	uxtb	r3, r3
 800659a:	4618      	mov	r0, r3
 800659c:	f7ff fec6 	bl	800632c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80065a0:	2301      	movs	r3, #1
 80065a2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80065a4:	79fb      	ldrb	r3, [r7, #7]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <send_cmd+0x94>
 80065aa:	2395      	movs	r3, #149	; 0x95
 80065ac:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80065ae:	79fb      	ldrb	r3, [r7, #7]
 80065b0:	2b08      	cmp	r3, #8
 80065b2:	d101      	bne.n	80065b8 <send_cmd+0x9e>
 80065b4:	2387      	movs	r3, #135	; 0x87
 80065b6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7ff feb6 	bl	800632c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80065c0:	79fb      	ldrb	r3, [r7, #7]
 80065c2:	2b0c      	cmp	r3, #12
 80065c4:	d102      	bne.n	80065cc <send_cmd+0xb2>
 80065c6:	20ff      	movs	r0, #255	; 0xff
 80065c8:	f7ff feb0 	bl	800632c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80065cc:	230a      	movs	r3, #10
 80065ce:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80065d0:	20ff      	movs	r0, #255	; 0xff
 80065d2:	f7ff feab 	bl	800632c <xchg_spi>
 80065d6:	4603      	mov	r3, r0
 80065d8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80065da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	da05      	bge.n	80065ee <send_cmd+0xd4>
 80065e2:	7bfb      	ldrb	r3, [r7, #15]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	73fb      	strb	r3, [r7, #15]
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1f0      	bne.n	80065d0 <send_cmd+0xb6>

	return res;							/* Return received response */
 80065ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80065f8:	b590      	push	{r4, r7, lr}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	4603      	mov	r3, r0
 8006600:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006602:	79fb      	ldrb	r3, [r7, #7]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <USER_SPI_initialize+0x14>
 8006608:	2301      	movs	r3, #1
 800660a:	e0d4      	b.n	80067b6 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800660c:	4b6c      	ldr	r3, [pc, #432]	; (80067c0 <USER_SPI_initialize+0x1c8>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	b2db      	uxtb	r3, r3
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <USER_SPI_initialize+0x2a>
 800661a:	4b69      	ldr	r3, [pc, #420]	; (80067c0 <USER_SPI_initialize+0x1c8>)
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	b2db      	uxtb	r3, r3
 8006620:	e0c9      	b.n	80067b6 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8006622:	4b68      	ldr	r3, [pc, #416]	; (80067c4 <USER_SPI_initialize+0x1cc>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	4b66      	ldr	r3, [pc, #408]	; (80067c4 <USER_SPI_initialize+0x1cc>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8006630:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006632:	230a      	movs	r3, #10
 8006634:	73fb      	strb	r3, [r7, #15]
 8006636:	e005      	b.n	8006644 <USER_SPI_initialize+0x4c>
 8006638:	20ff      	movs	r0, #255	; 0xff
 800663a:	f7ff fe77 	bl	800632c <xchg_spi>
 800663e:	7bfb      	ldrb	r3, [r7, #15]
 8006640:	3b01      	subs	r3, #1
 8006642:	73fb      	strb	r3, [r7, #15]
 8006644:	7bfb      	ldrb	r3, [r7, #15]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1f6      	bne.n	8006638 <USER_SPI_initialize+0x40>

	ty = 0;
 800664a:	2300      	movs	r3, #0
 800664c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800664e:	2100      	movs	r1, #0
 8006650:	2000      	movs	r0, #0
 8006652:	f7ff ff62 	bl	800651a <send_cmd>
 8006656:	4603      	mov	r3, r0
 8006658:	2b01      	cmp	r3, #1
 800665a:	f040 808b 	bne.w	8006774 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800665e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006662:	f7ff fe39 	bl	80062d8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006666:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800666a:	2008      	movs	r0, #8
 800666c:	f7ff ff55 	bl	800651a <send_cmd>
 8006670:	4603      	mov	r3, r0
 8006672:	2b01      	cmp	r3, #1
 8006674:	d151      	bne.n	800671a <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006676:	2300      	movs	r3, #0
 8006678:	73fb      	strb	r3, [r7, #15]
 800667a:	e00d      	b.n	8006698 <USER_SPI_initialize+0xa0>
 800667c:	7bfc      	ldrb	r4, [r7, #15]
 800667e:	20ff      	movs	r0, #255	; 0xff
 8006680:	f7ff fe54 	bl	800632c <xchg_spi>
 8006684:	4603      	mov	r3, r0
 8006686:	461a      	mov	r2, r3
 8006688:	f104 0310 	add.w	r3, r4, #16
 800668c:	443b      	add	r3, r7
 800668e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006692:	7bfb      	ldrb	r3, [r7, #15]
 8006694:	3301      	adds	r3, #1
 8006696:	73fb      	strb	r3, [r7, #15]
 8006698:	7bfb      	ldrb	r3, [r7, #15]
 800669a:	2b03      	cmp	r3, #3
 800669c:	d9ee      	bls.n	800667c <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800669e:	7abb      	ldrb	r3, [r7, #10]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d167      	bne.n	8006774 <USER_SPI_initialize+0x17c>
 80066a4:	7afb      	ldrb	r3, [r7, #11]
 80066a6:	2baa      	cmp	r3, #170	; 0xaa
 80066a8:	d164      	bne.n	8006774 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80066aa:	bf00      	nop
 80066ac:	f7ff fe28 	bl	8006300 <SPI_Timer_Status>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d007      	beq.n	80066c6 <USER_SPI_initialize+0xce>
 80066b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80066ba:	20a9      	movs	r0, #169	; 0xa9
 80066bc:	f7ff ff2d 	bl	800651a <send_cmd>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1f2      	bne.n	80066ac <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80066c6:	f7ff fe1b 	bl	8006300 <SPI_Timer_Status>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d051      	beq.n	8006774 <USER_SPI_initialize+0x17c>
 80066d0:	2100      	movs	r1, #0
 80066d2:	203a      	movs	r0, #58	; 0x3a
 80066d4:	f7ff ff21 	bl	800651a <send_cmd>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d14a      	bne.n	8006774 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80066de:	2300      	movs	r3, #0
 80066e0:	73fb      	strb	r3, [r7, #15]
 80066e2:	e00d      	b.n	8006700 <USER_SPI_initialize+0x108>
 80066e4:	7bfc      	ldrb	r4, [r7, #15]
 80066e6:	20ff      	movs	r0, #255	; 0xff
 80066e8:	f7ff fe20 	bl	800632c <xchg_spi>
 80066ec:	4603      	mov	r3, r0
 80066ee:	461a      	mov	r2, r3
 80066f0:	f104 0310 	add.w	r3, r4, #16
 80066f4:	443b      	add	r3, r7
 80066f6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
 80066fc:	3301      	adds	r3, #1
 80066fe:	73fb      	strb	r3, [r7, #15]
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	2b03      	cmp	r3, #3
 8006704:	d9ee      	bls.n	80066e4 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006706:	7a3b      	ldrb	r3, [r7, #8]
 8006708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <USER_SPI_initialize+0x11c>
 8006710:	230c      	movs	r3, #12
 8006712:	e000      	b.n	8006716 <USER_SPI_initialize+0x11e>
 8006714:	2304      	movs	r3, #4
 8006716:	737b      	strb	r3, [r7, #13]
 8006718:	e02c      	b.n	8006774 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800671a:	2100      	movs	r1, #0
 800671c:	20a9      	movs	r0, #169	; 0xa9
 800671e:	f7ff fefc 	bl	800651a <send_cmd>
 8006722:	4603      	mov	r3, r0
 8006724:	2b01      	cmp	r3, #1
 8006726:	d804      	bhi.n	8006732 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006728:	2302      	movs	r3, #2
 800672a:	737b      	strb	r3, [r7, #13]
 800672c:	23a9      	movs	r3, #169	; 0xa9
 800672e:	73bb      	strb	r3, [r7, #14]
 8006730:	e003      	b.n	800673a <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006732:	2301      	movs	r3, #1
 8006734:	737b      	strb	r3, [r7, #13]
 8006736:	2301      	movs	r3, #1
 8006738:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800673a:	bf00      	nop
 800673c:	f7ff fde0 	bl	8006300 <SPI_Timer_Status>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d007      	beq.n	8006756 <USER_SPI_initialize+0x15e>
 8006746:	7bbb      	ldrb	r3, [r7, #14]
 8006748:	2100      	movs	r1, #0
 800674a:	4618      	mov	r0, r3
 800674c:	f7ff fee5 	bl	800651a <send_cmd>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1f2      	bne.n	800673c <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006756:	f7ff fdd3 	bl	8006300 <SPI_Timer_Status>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d007      	beq.n	8006770 <USER_SPI_initialize+0x178>
 8006760:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006764:	2010      	movs	r0, #16
 8006766:	f7ff fed8 	bl	800651a <send_cmd>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <USER_SPI_initialize+0x17c>
				ty = 0;
 8006770:	2300      	movs	r3, #0
 8006772:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006774:	4a14      	ldr	r2, [pc, #80]	; (80067c8 <USER_SPI_initialize+0x1d0>)
 8006776:	7b7b      	ldrb	r3, [r7, #13]
 8006778:	7013      	strb	r3, [r2, #0]
	despiselect();
 800677a:	f7ff fe47 	bl	800640c <despiselect>

	if (ty) {			/* OK */
 800677e:	7b7b      	ldrb	r3, [r7, #13]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d012      	beq.n	80067aa <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8006784:	4b0f      	ldr	r3, [pc, #60]	; (80067c4 <USER_SPI_initialize+0x1cc>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800678e:	4b0d      	ldr	r3, [pc, #52]	; (80067c4 <USER_SPI_initialize+0x1cc>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0218 	orr.w	r2, r2, #24
 8006796:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006798:	4b09      	ldr	r3, [pc, #36]	; (80067c0 <USER_SPI_initialize+0x1c8>)
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	b2db      	uxtb	r3, r3
 800679e:	f023 0301 	bic.w	r3, r3, #1
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	4b06      	ldr	r3, [pc, #24]	; (80067c0 <USER_SPI_initialize+0x1c8>)
 80067a6:	701a      	strb	r2, [r3, #0]
 80067a8:	e002      	b.n	80067b0 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80067aa:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <USER_SPI_initialize+0x1c8>)
 80067ac:	2201      	movs	r2, #1
 80067ae:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80067b0:	4b03      	ldr	r3, [pc, #12]	; (80067c0 <USER_SPI_initialize+0x1c8>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	b2db      	uxtb	r3, r3
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd90      	pop	{r4, r7, pc}
 80067be:	bf00      	nop
 80067c0:	20000020 	.word	0x20000020
 80067c4:	200000a4 	.word	0x200000a4
 80067c8:	20007290 	.word	0x20007290

080067cc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	4603      	mov	r3, r0
 80067d4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80067d6:	79fb      	ldrb	r3, [r7, #7]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d001      	beq.n	80067e0 <USER_SPI_status+0x14>
 80067dc:	2301      	movs	r3, #1
 80067de:	e002      	b.n	80067e6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80067e0:	4b04      	ldr	r3, [pc, #16]	; (80067f4 <USER_SPI_status+0x28>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	b2db      	uxtb	r3, r3
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	20000020 	.word	0x20000020

080067f8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60b9      	str	r1, [r7, #8]
 8006800:	607a      	str	r2, [r7, #4]
 8006802:	603b      	str	r3, [r7, #0]
 8006804:	4603      	mov	r3, r0
 8006806:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006808:	7bfb      	ldrb	r3, [r7, #15]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d102      	bne.n	8006814 <USER_SPI_read+0x1c>
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <USER_SPI_read+0x20>
 8006814:	2304      	movs	r3, #4
 8006816:	e04d      	b.n	80068b4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006818:	4b28      	ldr	r3, [pc, #160]	; (80068bc <USER_SPI_read+0xc4>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <USER_SPI_read+0x32>
 8006826:	2303      	movs	r3, #3
 8006828:	e044      	b.n	80068b4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800682a:	4b25      	ldr	r3, [pc, #148]	; (80068c0 <USER_SPI_read+0xc8>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	f003 0308 	and.w	r3, r3, #8
 8006832:	2b00      	cmp	r3, #0
 8006834:	d102      	bne.n	800683c <USER_SPI_read+0x44>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	025b      	lsls	r3, r3, #9
 800683a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d111      	bne.n	8006866 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8006842:	6879      	ldr	r1, [r7, #4]
 8006844:	2011      	movs	r0, #17
 8006846:	f7ff fe68 	bl	800651a <send_cmd>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d129      	bne.n	80068a4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8006850:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006854:	68b8      	ldr	r0, [r7, #8]
 8006856:	f7ff fe05 	bl	8006464 <rcvr_datablock>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d021      	beq.n	80068a4 <USER_SPI_read+0xac>
			count = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	603b      	str	r3, [r7, #0]
 8006864:	e01e      	b.n	80068a4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006866:	6879      	ldr	r1, [r7, #4]
 8006868:	2012      	movs	r0, #18
 800686a:	f7ff fe56 	bl	800651a <send_cmd>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d117      	bne.n	80068a4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006874:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006878:	68b8      	ldr	r0, [r7, #8]
 800687a:	f7ff fdf3 	bl	8006464 <rcvr_datablock>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00a      	beq.n	800689a <USER_SPI_read+0xa2>
				buff += 512;
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800688a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	3b01      	subs	r3, #1
 8006890:	603b      	str	r3, [r7, #0]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1ed      	bne.n	8006874 <USER_SPI_read+0x7c>
 8006898:	e000      	b.n	800689c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800689a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800689c:	2100      	movs	r1, #0
 800689e:	200c      	movs	r0, #12
 80068a0:	f7ff fe3b 	bl	800651a <send_cmd>
		}
	}
	despiselect();
 80068a4:	f7ff fdb2 	bl	800640c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	bf14      	ite	ne
 80068ae:	2301      	movne	r3, #1
 80068b0:	2300      	moveq	r3, #0
 80068b2:	b2db      	uxtb	r3, r3
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	20000020 	.word	0x20000020
 80068c0:	20007290 	.word	0x20007290

080068c4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60b9      	str	r1, [r7, #8]
 80068cc:	607a      	str	r2, [r7, #4]
 80068ce:	603b      	str	r3, [r7, #0]
 80068d0:	4603      	mov	r3, r0
 80068d2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d102      	bne.n	80068e0 <USER_SPI_write+0x1c>
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <USER_SPI_write+0x20>
 80068e0:	2304      	movs	r3, #4
 80068e2:	e063      	b.n	80069ac <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80068e4:	4b33      	ldr	r3, [pc, #204]	; (80069b4 <USER_SPI_write+0xf0>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <USER_SPI_write+0x32>
 80068f2:	2303      	movs	r3, #3
 80068f4:	e05a      	b.n	80069ac <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80068f6:	4b2f      	ldr	r3, [pc, #188]	; (80069b4 <USER_SPI_write+0xf0>)
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	f003 0304 	and.w	r3, r3, #4
 8006900:	2b00      	cmp	r3, #0
 8006902:	d001      	beq.n	8006908 <USER_SPI_write+0x44>
 8006904:	2302      	movs	r3, #2
 8006906:	e051      	b.n	80069ac <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006908:	4b2b      	ldr	r3, [pc, #172]	; (80069b8 <USER_SPI_write+0xf4>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	f003 0308 	and.w	r3, r3, #8
 8006910:	2b00      	cmp	r3, #0
 8006912:	d102      	bne.n	800691a <USER_SPI_write+0x56>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	025b      	lsls	r3, r3, #9
 8006918:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d110      	bne.n	8006942 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006920:	6879      	ldr	r1, [r7, #4]
 8006922:	2018      	movs	r0, #24
 8006924:	f7ff fdf9 	bl	800651a <send_cmd>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d136      	bne.n	800699c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800692e:	21fe      	movs	r1, #254	; 0xfe
 8006930:	68b8      	ldr	r0, [r7, #8]
 8006932:	f7ff fdc0 	bl	80064b6 <xmit_datablock>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d02f      	beq.n	800699c <USER_SPI_write+0xd8>
			count = 0;
 800693c:	2300      	movs	r3, #0
 800693e:	603b      	str	r3, [r7, #0]
 8006940:	e02c      	b.n	800699c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8006942:	4b1d      	ldr	r3, [pc, #116]	; (80069b8 <USER_SPI_write+0xf4>)
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	f003 0306 	and.w	r3, r3, #6
 800694a:	2b00      	cmp	r3, #0
 800694c:	d003      	beq.n	8006956 <USER_SPI_write+0x92>
 800694e:	6839      	ldr	r1, [r7, #0]
 8006950:	2097      	movs	r0, #151	; 0x97
 8006952:	f7ff fde2 	bl	800651a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8006956:	6879      	ldr	r1, [r7, #4]
 8006958:	2019      	movs	r0, #25
 800695a:	f7ff fdde 	bl	800651a <send_cmd>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d11b      	bne.n	800699c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8006964:	21fc      	movs	r1, #252	; 0xfc
 8006966:	68b8      	ldr	r0, [r7, #8]
 8006968:	f7ff fda5 	bl	80064b6 <xmit_datablock>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <USER_SPI_write+0xc4>
				buff += 512;
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006978:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	3b01      	subs	r3, #1
 800697e:	603b      	str	r3, [r7, #0]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1ee      	bne.n	8006964 <USER_SPI_write+0xa0>
 8006986:	e000      	b.n	800698a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006988:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800698a:	21fd      	movs	r1, #253	; 0xfd
 800698c:	2000      	movs	r0, #0
 800698e:	f7ff fd92 	bl	80064b6 <xmit_datablock>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <USER_SPI_write+0xd8>
 8006998:	2301      	movs	r3, #1
 800699a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800699c:	f7ff fd36 	bl	800640c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	bf14      	ite	ne
 80069a6:	2301      	movne	r3, #1
 80069a8:	2300      	moveq	r3, #0
 80069aa:	b2db      	uxtb	r3, r3
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	20000020 	.word	0x20000020
 80069b8:	20007290 	.word	0x20007290

080069bc <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08c      	sub	sp, #48	; 0x30
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	4603      	mov	r3, r0
 80069c4:	603a      	str	r2, [r7, #0]
 80069c6:	71fb      	strb	r3, [r7, #7]
 80069c8:	460b      	mov	r3, r1
 80069ca:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80069cc:	79fb      	ldrb	r3, [r7, #7]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <USER_SPI_ioctl+0x1a>
 80069d2:	2304      	movs	r3, #4
 80069d4:	e15a      	b.n	8006c8c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80069d6:	4baf      	ldr	r3, [pc, #700]	; (8006c94 <USER_SPI_ioctl+0x2d8>)
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <USER_SPI_ioctl+0x2c>
 80069e4:	2303      	movs	r3, #3
 80069e6:	e151      	b.n	8006c8c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80069ee:	79bb      	ldrb	r3, [r7, #6]
 80069f0:	2b04      	cmp	r3, #4
 80069f2:	f200 8136 	bhi.w	8006c62 <USER_SPI_ioctl+0x2a6>
 80069f6:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <USER_SPI_ioctl+0x40>)
 80069f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fc:	08006a11 	.word	0x08006a11
 8006a00:	08006a25 	.word	0x08006a25
 8006a04:	08006c63 	.word	0x08006c63
 8006a08:	08006ad1 	.word	0x08006ad1
 8006a0c:	08006bc7 	.word	0x08006bc7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8006a10:	f7ff fd0c 	bl	800642c <spiselect>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 8127 	beq.w	8006c6a <USER_SPI_ioctl+0x2ae>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006a22:	e122      	b.n	8006c6a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006a24:	2100      	movs	r1, #0
 8006a26:	2009      	movs	r0, #9
 8006a28:	f7ff fd77 	bl	800651a <send_cmd>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f040 811d 	bne.w	8006c6e <USER_SPI_ioctl+0x2b2>
 8006a34:	f107 030c 	add.w	r3, r7, #12
 8006a38:	2110      	movs	r1, #16
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7ff fd12 	bl	8006464 <rcvr_datablock>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 8113 	beq.w	8006c6e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006a48:	7b3b      	ldrb	r3, [r7, #12]
 8006a4a:	099b      	lsrs	r3, r3, #6
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d111      	bne.n	8006a76 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8006a52:	7d7b      	ldrb	r3, [r7, #21]
 8006a54:	461a      	mov	r2, r3
 8006a56:	7d3b      	ldrb	r3, [r7, #20]
 8006a58:	021b      	lsls	r3, r3, #8
 8006a5a:	4413      	add	r3, r2
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	7cfb      	ldrb	r3, [r7, #19]
 8006a60:	041b      	lsls	r3, r3, #16
 8006a62:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006a66:	4413      	add	r3, r2
 8006a68:	3301      	adds	r3, #1
 8006a6a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	029a      	lsls	r2, r3, #10
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	e028      	b.n	8006ac8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006a76:	7c7b      	ldrb	r3, [r7, #17]
 8006a78:	f003 030f 	and.w	r3, r3, #15
 8006a7c:	b2da      	uxtb	r2, r3
 8006a7e:	7dbb      	ldrb	r3, [r7, #22]
 8006a80:	09db      	lsrs	r3, r3, #7
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	4413      	add	r3, r2
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	7d7b      	ldrb	r3, [r7, #21]
 8006a8a:	005b      	lsls	r3, r3, #1
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	f003 0306 	and.w	r3, r3, #6
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	4413      	add	r3, r2
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	3302      	adds	r3, #2
 8006a9a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006a9e:	7d3b      	ldrb	r3, [r7, #20]
 8006aa0:	099b      	lsrs	r3, r3, #6
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	7cfb      	ldrb	r3, [r7, #19]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	441a      	add	r2, r3
 8006aac:	7cbb      	ldrb	r3, [r7, #18]
 8006aae:	029b      	lsls	r3, r3, #10
 8006ab0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ab4:	4413      	add	r3, r2
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8006aba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006abe:	3b09      	subs	r3, #9
 8006ac0:	69fa      	ldr	r2, [r7, #28]
 8006ac2:	409a      	lsls	r2, r3
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006ace:	e0ce      	b.n	8006c6e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006ad0:	4b71      	ldr	r3, [pc, #452]	; (8006c98 <USER_SPI_ioctl+0x2dc>)
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	f003 0304 	and.w	r3, r3, #4
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d031      	beq.n	8006b40 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006adc:	2100      	movs	r1, #0
 8006ade:	208d      	movs	r0, #141	; 0x8d
 8006ae0:	f7ff fd1b 	bl	800651a <send_cmd>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f040 80c3 	bne.w	8006c72 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006aec:	20ff      	movs	r0, #255	; 0xff
 8006aee:	f7ff fc1d 	bl	800632c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006af2:	f107 030c 	add.w	r3, r7, #12
 8006af6:	2110      	movs	r1, #16
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7ff fcb3 	bl	8006464 <rcvr_datablock>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 80b6 	beq.w	8006c72 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8006b06:	2330      	movs	r3, #48	; 0x30
 8006b08:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006b0c:	e007      	b.n	8006b1e <USER_SPI_ioctl+0x162>
 8006b0e:	20ff      	movs	r0, #255	; 0xff
 8006b10:	f7ff fc0c 	bl	800632c <xchg_spi>
 8006b14:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006b1e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1f3      	bne.n	8006b0e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006b26:	7dbb      	ldrb	r3, [r7, #22]
 8006b28:	091b      	lsrs	r3, r3, #4
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	2310      	movs	r3, #16
 8006b30:	fa03 f202 	lsl.w	r2, r3, r2
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006b3e:	e098      	b.n	8006c72 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006b40:	2100      	movs	r1, #0
 8006b42:	2009      	movs	r0, #9
 8006b44:	f7ff fce9 	bl	800651a <send_cmd>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f040 8091 	bne.w	8006c72 <USER_SPI_ioctl+0x2b6>
 8006b50:	f107 030c 	add.w	r3, r7, #12
 8006b54:	2110      	movs	r1, #16
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7ff fc84 	bl	8006464 <rcvr_datablock>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 8087 	beq.w	8006c72 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006b64:	4b4c      	ldr	r3, [pc, #304]	; (8006c98 <USER_SPI_ioctl+0x2dc>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d012      	beq.n	8006b96 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006b70:	7dbb      	ldrb	r3, [r7, #22]
 8006b72:	005b      	lsls	r3, r3, #1
 8006b74:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006b78:	7dfa      	ldrb	r2, [r7, #23]
 8006b7a:	09d2      	lsrs	r2, r2, #7
 8006b7c:	b2d2      	uxtb	r2, r2
 8006b7e:	4413      	add	r3, r2
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	7e7b      	ldrb	r3, [r7, #25]
 8006b84:	099b      	lsrs	r3, r3, #6
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8e:	461a      	mov	r2, r3
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	e013      	b.n	8006bbe <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8006b96:	7dbb      	ldrb	r3, [r7, #22]
 8006b98:	109b      	asrs	r3, r3, #2
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	f003 031f 	and.w	r3, r3, #31
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	7dfa      	ldrb	r2, [r7, #23]
 8006ba4:	00d2      	lsls	r2, r2, #3
 8006ba6:	f002 0218 	and.w	r2, r2, #24
 8006baa:	7df9      	ldrb	r1, [r7, #23]
 8006bac:	0949      	lsrs	r1, r1, #5
 8006bae:	b2c9      	uxtb	r1, r1
 8006bb0:	440a      	add	r2, r1
 8006bb2:	3201      	adds	r2, #1
 8006bb4:	fb02 f303 	mul.w	r3, r2, r3
 8006bb8:	461a      	mov	r2, r3
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006bc4:	e055      	b.n	8006c72 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006bc6:	4b34      	ldr	r3, [pc, #208]	; (8006c98 <USER_SPI_ioctl+0x2dc>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	f003 0306 	and.w	r3, r3, #6
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d051      	beq.n	8006c76 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006bd2:	f107 020c 	add.w	r2, r7, #12
 8006bd6:	79fb      	ldrb	r3, [r7, #7]
 8006bd8:	210b      	movs	r1, #11
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7ff feee 	bl	80069bc <USER_SPI_ioctl>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d149      	bne.n	8006c7a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006be6:	7b3b      	ldrb	r3, [r7, #12]
 8006be8:	099b      	lsrs	r3, r3, #6
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d104      	bne.n	8006bfa <USER_SPI_ioctl+0x23e>
 8006bf0:	7dbb      	ldrb	r3, [r7, #22]
 8006bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d041      	beq.n	8006c7e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	623b      	str	r3, [r7, #32]
 8006bfe:	6a3b      	ldr	r3, [r7, #32]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8006c0a:	4b23      	ldr	r3, [pc, #140]	; (8006c98 <USER_SPI_ioctl+0x2dc>)
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	f003 0308 	and.w	r3, r3, #8
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d105      	bne.n	8006c22 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8006c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c18:	025b      	lsls	r3, r3, #9
 8006c1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	025b      	lsls	r3, r3, #9
 8006c20:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8006c22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c24:	2020      	movs	r0, #32
 8006c26:	f7ff fc78 	bl	800651a <send_cmd>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d128      	bne.n	8006c82 <USER_SPI_ioctl+0x2c6>
 8006c30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c32:	2021      	movs	r0, #33	; 0x21
 8006c34:	f7ff fc71 	bl	800651a <send_cmd>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d121      	bne.n	8006c82 <USER_SPI_ioctl+0x2c6>
 8006c3e:	2100      	movs	r1, #0
 8006c40:	2026      	movs	r0, #38	; 0x26
 8006c42:	f7ff fc6a 	bl	800651a <send_cmd>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d11a      	bne.n	8006c82 <USER_SPI_ioctl+0x2c6>
 8006c4c:	f247 5030 	movw	r0, #30000	; 0x7530
 8006c50:	f7ff fbb9 	bl	80063c6 <wait_ready>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d013      	beq.n	8006c82 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006c60:	e00f      	b.n	8006c82 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8006c62:	2304      	movs	r3, #4
 8006c64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006c68:	e00c      	b.n	8006c84 <USER_SPI_ioctl+0x2c8>
		break;
 8006c6a:	bf00      	nop
 8006c6c:	e00a      	b.n	8006c84 <USER_SPI_ioctl+0x2c8>
		break;
 8006c6e:	bf00      	nop
 8006c70:	e008      	b.n	8006c84 <USER_SPI_ioctl+0x2c8>
		break;
 8006c72:	bf00      	nop
 8006c74:	e006      	b.n	8006c84 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006c76:	bf00      	nop
 8006c78:	e004      	b.n	8006c84 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006c7a:	bf00      	nop
 8006c7c:	e002      	b.n	8006c84 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006c7e:	bf00      	nop
 8006c80:	e000      	b.n	8006c84 <USER_SPI_ioctl+0x2c8>
		break;
 8006c82:	bf00      	nop
	}

	despiselect();
 8006c84:	f7ff fbc2 	bl	800640c <despiselect>

	return res;
 8006c88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3730      	adds	r7, #48	; 0x30
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	20000020 	.word	0x20000020
 8006c98:	20007290 	.word	0x20007290

08006c9c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006ca6:	79fb      	ldrb	r3, [r7, #7]
 8006ca8:	4a08      	ldr	r2, [pc, #32]	; (8006ccc <disk_status+0x30>)
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	79fa      	ldrb	r2, [r7, #7]
 8006cb4:	4905      	ldr	r1, [pc, #20]	; (8006ccc <disk_status+0x30>)
 8006cb6:	440a      	add	r2, r1
 8006cb8:	7a12      	ldrb	r2, [r2, #8]
 8006cba:	4610      	mov	r0, r2
 8006cbc:	4798      	blx	r3
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	200072c4 	.word	0x200072c4

08006cd0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006cde:	79fb      	ldrb	r3, [r7, #7]
 8006ce0:	4a0d      	ldr	r2, [pc, #52]	; (8006d18 <disk_initialize+0x48>)
 8006ce2:	5cd3      	ldrb	r3, [r2, r3]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d111      	bne.n	8006d0c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006ce8:	79fb      	ldrb	r3, [r7, #7]
 8006cea:	4a0b      	ldr	r2, [pc, #44]	; (8006d18 <disk_initialize+0x48>)
 8006cec:	2101      	movs	r1, #1
 8006cee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006cf0:	79fb      	ldrb	r3, [r7, #7]
 8006cf2:	4a09      	ldr	r2, [pc, #36]	; (8006d18 <disk_initialize+0x48>)
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	79fa      	ldrb	r2, [r7, #7]
 8006cfe:	4906      	ldr	r1, [pc, #24]	; (8006d18 <disk_initialize+0x48>)
 8006d00:	440a      	add	r2, r1
 8006d02:	7a12      	ldrb	r2, [r2, #8]
 8006d04:	4610      	mov	r0, r2
 8006d06:	4798      	blx	r3
 8006d08:	4603      	mov	r3, r0
 8006d0a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	200072c4 	.word	0x200072c4

08006d1c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006d1c:	b590      	push	{r4, r7, lr}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60b9      	str	r1, [r7, #8]
 8006d24:	607a      	str	r2, [r7, #4]
 8006d26:	603b      	str	r3, [r7, #0]
 8006d28:	4603      	mov	r3, r0
 8006d2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
 8006d2e:	4a0a      	ldr	r2, [pc, #40]	; (8006d58 <disk_read+0x3c>)
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	689c      	ldr	r4, [r3, #8]
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	4a07      	ldr	r2, [pc, #28]	; (8006d58 <disk_read+0x3c>)
 8006d3c:	4413      	add	r3, r2
 8006d3e:	7a18      	ldrb	r0, [r3, #8]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	68b9      	ldr	r1, [r7, #8]
 8006d46:	47a0      	blx	r4
 8006d48:	4603      	mov	r3, r0
 8006d4a:	75fb      	strb	r3, [r7, #23]
  return res;
 8006d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	371c      	adds	r7, #28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd90      	pop	{r4, r7, pc}
 8006d56:	bf00      	nop
 8006d58:	200072c4 	.word	0x200072c4

08006d5c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006d5c:	b590      	push	{r4, r7, lr}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	607a      	str	r2, [r7, #4]
 8006d66:	603b      	str	r3, [r7, #0]
 8006d68:	4603      	mov	r3, r0
 8006d6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
 8006d6e:	4a0a      	ldr	r2, [pc, #40]	; (8006d98 <disk_write+0x3c>)
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	68dc      	ldr	r4, [r3, #12]
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
 8006d7a:	4a07      	ldr	r2, [pc, #28]	; (8006d98 <disk_write+0x3c>)
 8006d7c:	4413      	add	r3, r2
 8006d7e:	7a18      	ldrb	r0, [r3, #8]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	68b9      	ldr	r1, [r7, #8]
 8006d86:	47a0      	blx	r4
 8006d88:	4603      	mov	r3, r0
 8006d8a:	75fb      	strb	r3, [r7, #23]
  return res;
 8006d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd90      	pop	{r4, r7, pc}
 8006d96:	bf00      	nop
 8006d98:	200072c4 	.word	0x200072c4

08006d9c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	4603      	mov	r3, r0
 8006da4:	603a      	str	r2, [r7, #0]
 8006da6:	71fb      	strb	r3, [r7, #7]
 8006da8:	460b      	mov	r3, r1
 8006daa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006dac:	79fb      	ldrb	r3, [r7, #7]
 8006dae:	4a09      	ldr	r2, [pc, #36]	; (8006dd4 <disk_ioctl+0x38>)
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	79fa      	ldrb	r2, [r7, #7]
 8006dba:	4906      	ldr	r1, [pc, #24]	; (8006dd4 <disk_ioctl+0x38>)
 8006dbc:	440a      	add	r2, r1
 8006dbe:	7a10      	ldrb	r0, [r2, #8]
 8006dc0:	79b9      	ldrb	r1, [r7, #6]
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	4798      	blx	r3
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	73fb      	strb	r3, [r7, #15]
  return res;
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	200072c4 	.word	0x200072c4

08006dd8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	3301      	adds	r3, #1
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006de8:	89fb      	ldrh	r3, [r7, #14]
 8006dea:	021b      	lsls	r3, r3, #8
 8006dec:	b21a      	sxth	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	b21b      	sxth	r3, r3
 8006df4:	4313      	orrs	r3, r2
 8006df6:	b21b      	sxth	r3, r3
 8006df8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006dfa:	89fb      	ldrh	r3, [r7, #14]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	3303      	adds	r3, #3
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	021b      	lsls	r3, r3, #8
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	3202      	adds	r2, #2
 8006e20:	7812      	ldrb	r2, [r2, #0]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	021b      	lsls	r3, r3, #8
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	3201      	adds	r2, #1
 8006e2e:	7812      	ldrb	r2, [r2, #0]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	021b      	lsls	r3, r3, #8
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	7812      	ldrb	r2, [r2, #0]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006e40:	68fb      	ldr	r3, [r7, #12]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	460b      	mov	r3, r1
 8006e58:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	1c5a      	adds	r2, r3, #1
 8006e5e:	607a      	str	r2, [r7, #4]
 8006e60:	887a      	ldrh	r2, [r7, #2]
 8006e62:	b2d2      	uxtb	r2, r2
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	887b      	ldrh	r3, [r7, #2]
 8006e68:	0a1b      	lsrs	r3, r3, #8
 8006e6a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	1c5a      	adds	r2, r3, #1
 8006e70:	607a      	str	r2, [r7, #4]
 8006e72:	887a      	ldrh	r2, [r7, #2]
 8006e74:	b2d2      	uxtb	r2, r2
 8006e76:	701a      	strb	r2, [r3, #0]
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	683a      	ldr	r2, [r7, #0]
 8006e96:	b2d2      	uxtb	r2, r2
 8006e98:	701a      	strb	r2, [r3, #0]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	0a1b      	lsrs	r3, r3, #8
 8006e9e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	607a      	str	r2, [r7, #4]
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	b2d2      	uxtb	r2, r2
 8006eaa:	701a      	strb	r2, [r3, #0]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	0a1b      	lsrs	r3, r3, #8
 8006eb0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	1c5a      	adds	r2, r3, #1
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	701a      	strb	r2, [r3, #0]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	0a1b      	lsrs	r3, r3, #8
 8006ec2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	607a      	str	r2, [r7, #4]
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006edc:	b480      	push	{r7}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00d      	beq.n	8006f12 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	1c53      	adds	r3, r2, #1
 8006efa:	613b      	str	r3, [r7, #16]
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	1c59      	adds	r1, r3, #1
 8006f00:	6179      	str	r1, [r7, #20]
 8006f02:	7812      	ldrb	r2, [r2, #0]
 8006f04:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	607b      	str	r3, [r7, #4]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1f1      	bne.n	8006ef6 <mem_cpy+0x1a>
	}
}
 8006f12:	bf00      	nop
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006f1e:	b480      	push	{r7}
 8006f20:	b087      	sub	sp, #28
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	617a      	str	r2, [r7, #20]
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	b2d2      	uxtb	r2, r2
 8006f38:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	607b      	str	r3, [r7, #4]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1f3      	bne.n	8006f2e <mem_set+0x10>
}
 8006f46:	bf00      	nop
 8006f48:	bf00      	nop
 8006f4a:	371c      	adds	r7, #28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006f54:	b480      	push	{r7}
 8006f56:	b089      	sub	sp, #36	; 0x24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	61fb      	str	r3, [r7, #28]
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	61fa      	str	r2, [r7, #28]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	4619      	mov	r1, r3
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	1c5a      	adds	r2, r3, #1
 8006f7a:	61ba      	str	r2, [r7, #24]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	1acb      	subs	r3, r1, r3
 8006f80:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	3b01      	subs	r3, #1
 8006f86:	607b      	str	r3, [r7, #4]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d002      	beq.n	8006f94 <mem_cmp+0x40>
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d0eb      	beq.n	8006f6c <mem_cmp+0x18>

	return r;
 8006f94:	697b      	ldr	r3, [r7, #20]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3724      	adds	r7, #36	; 0x24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006fac:	e002      	b.n	8006fb4 <chk_chr+0x12>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	607b      	str	r3, [r7, #4]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d005      	beq.n	8006fc8 <chk_chr+0x26>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d1f2      	bne.n	8006fae <chk_chr+0xc>
	return *str;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	781b      	ldrb	r3, [r3, #0]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60bb      	str	r3, [r7, #8]
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	60fb      	str	r3, [r7, #12]
 8006fea:	e029      	b.n	8007040 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006fec:	4a27      	ldr	r2, [pc, #156]	; (800708c <chk_lock+0xb4>)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	011b      	lsls	r3, r3, #4
 8006ff2:	4413      	add	r3, r2
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d01d      	beq.n	8007036 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006ffa:	4a24      	ldr	r2, [pc, #144]	; (800708c <chk_lock+0xb4>)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	011b      	lsls	r3, r3, #4
 8007000:	4413      	add	r3, r2
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	429a      	cmp	r2, r3
 800700a:	d116      	bne.n	800703a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800700c:	4a1f      	ldr	r2, [pc, #124]	; (800708c <chk_lock+0xb4>)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	011b      	lsls	r3, r3, #4
 8007012:	4413      	add	r3, r2
 8007014:	3304      	adds	r3, #4
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800701c:	429a      	cmp	r2, r3
 800701e:	d10c      	bne.n	800703a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007020:	4a1a      	ldr	r2, [pc, #104]	; (800708c <chk_lock+0xb4>)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	011b      	lsls	r3, r3, #4
 8007026:	4413      	add	r3, r2
 8007028:	3308      	adds	r3, #8
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007030:	429a      	cmp	r2, r3
 8007032:	d102      	bne.n	800703a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007034:	e007      	b.n	8007046 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007036:	2301      	movs	r3, #1
 8007038:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	3301      	adds	r3, #1
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d9d2      	bls.n	8006fec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2b02      	cmp	r3, #2
 800704a:	d109      	bne.n	8007060 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d102      	bne.n	8007058 <chk_lock+0x80>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b02      	cmp	r3, #2
 8007056:	d101      	bne.n	800705c <chk_lock+0x84>
 8007058:	2300      	movs	r3, #0
 800705a:	e010      	b.n	800707e <chk_lock+0xa6>
 800705c:	2312      	movs	r3, #18
 800705e:	e00e      	b.n	800707e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d108      	bne.n	8007078 <chk_lock+0xa0>
 8007066:	4a09      	ldr	r2, [pc, #36]	; (800708c <chk_lock+0xb4>)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	4413      	add	r3, r2
 800706e:	330c      	adds	r3, #12
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007076:	d101      	bne.n	800707c <chk_lock+0xa4>
 8007078:	2310      	movs	r3, #16
 800707a:	e000      	b.n	800707e <chk_lock+0xa6>
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	200072a4 	.word	0x200072a4

08007090 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007096:	2300      	movs	r3, #0
 8007098:	607b      	str	r3, [r7, #4]
 800709a:	e002      	b.n	80070a2 <enq_lock+0x12>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3301      	adds	r3, #1
 80070a0:	607b      	str	r3, [r7, #4]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d806      	bhi.n	80070b6 <enq_lock+0x26>
 80070a8:	4a09      	ldr	r2, [pc, #36]	; (80070d0 <enq_lock+0x40>)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	011b      	lsls	r3, r3, #4
 80070ae:	4413      	add	r3, r2
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1f2      	bne.n	800709c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	bf14      	ite	ne
 80070bc:	2301      	movne	r3, #1
 80070be:	2300      	moveq	r3, #0
 80070c0:	b2db      	uxtb	r3, r3
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	200072a4 	.word	0x200072a4

080070d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	e01f      	b.n	8007124 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80070e4:	4a41      	ldr	r2, [pc, #260]	; (80071ec <inc_lock+0x118>)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	011b      	lsls	r3, r3, #4
 80070ea:	4413      	add	r3, r2
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d113      	bne.n	800711e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80070f6:	4a3d      	ldr	r2, [pc, #244]	; (80071ec <inc_lock+0x118>)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	011b      	lsls	r3, r3, #4
 80070fc:	4413      	add	r3, r2
 80070fe:	3304      	adds	r3, #4
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007106:	429a      	cmp	r2, r3
 8007108:	d109      	bne.n	800711e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800710a:	4a38      	ldr	r2, [pc, #224]	; (80071ec <inc_lock+0x118>)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	011b      	lsls	r3, r3, #4
 8007110:	4413      	add	r3, r2
 8007112:	3308      	adds	r3, #8
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800711a:	429a      	cmp	r2, r3
 800711c:	d006      	beq.n	800712c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3301      	adds	r3, #1
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d9dc      	bls.n	80070e4 <inc_lock+0x10>
 800712a:	e000      	b.n	800712e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800712c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2b02      	cmp	r3, #2
 8007132:	d132      	bne.n	800719a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007134:	2300      	movs	r3, #0
 8007136:	60fb      	str	r3, [r7, #12]
 8007138:	e002      	b.n	8007140 <inc_lock+0x6c>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3301      	adds	r3, #1
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d806      	bhi.n	8007154 <inc_lock+0x80>
 8007146:	4a29      	ldr	r2, [pc, #164]	; (80071ec <inc_lock+0x118>)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	011b      	lsls	r3, r3, #4
 800714c:	4413      	add	r3, r2
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1f2      	bne.n	800713a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b02      	cmp	r3, #2
 8007158:	d101      	bne.n	800715e <inc_lock+0x8a>
 800715a:	2300      	movs	r3, #0
 800715c:	e040      	b.n	80071e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	4922      	ldr	r1, [pc, #136]	; (80071ec <inc_lock+0x118>)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	440b      	add	r3, r1
 800716a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	491e      	ldr	r1, [pc, #120]	; (80071ec <inc_lock+0x118>)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	011b      	lsls	r3, r3, #4
 8007176:	440b      	add	r3, r1
 8007178:	3304      	adds	r3, #4
 800717a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	695a      	ldr	r2, [r3, #20]
 8007180:	491a      	ldr	r1, [pc, #104]	; (80071ec <inc_lock+0x118>)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	011b      	lsls	r3, r3, #4
 8007186:	440b      	add	r3, r1
 8007188:	3308      	adds	r3, #8
 800718a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800718c:	4a17      	ldr	r2, [pc, #92]	; (80071ec <inc_lock+0x118>)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	011b      	lsls	r3, r3, #4
 8007192:	4413      	add	r3, r2
 8007194:	330c      	adds	r3, #12
 8007196:	2200      	movs	r2, #0
 8007198:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d009      	beq.n	80071b4 <inc_lock+0xe0>
 80071a0:	4a12      	ldr	r2, [pc, #72]	; (80071ec <inc_lock+0x118>)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	011b      	lsls	r3, r3, #4
 80071a6:	4413      	add	r3, r2
 80071a8:	330c      	adds	r3, #12
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <inc_lock+0xe0>
 80071b0:	2300      	movs	r3, #0
 80071b2:	e015      	b.n	80071e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d108      	bne.n	80071cc <inc_lock+0xf8>
 80071ba:	4a0c      	ldr	r2, [pc, #48]	; (80071ec <inc_lock+0x118>)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	011b      	lsls	r3, r3, #4
 80071c0:	4413      	add	r3, r2
 80071c2:	330c      	adds	r3, #12
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	3301      	adds	r3, #1
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	e001      	b.n	80071d0 <inc_lock+0xfc>
 80071cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071d0:	4906      	ldr	r1, [pc, #24]	; (80071ec <inc_lock+0x118>)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	011b      	lsls	r3, r3, #4
 80071d6:	440b      	add	r3, r1
 80071d8:	330c      	adds	r3, #12
 80071da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	3301      	adds	r3, #1
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	200072a4 	.word	0x200072a4

080071f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	3b01      	subs	r3, #1
 80071fc:	607b      	str	r3, [r7, #4]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d825      	bhi.n	8007250 <dec_lock+0x60>
		n = Files[i].ctr;
 8007204:	4a17      	ldr	r2, [pc, #92]	; (8007264 <dec_lock+0x74>)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	011b      	lsls	r3, r3, #4
 800720a:	4413      	add	r3, r2
 800720c:	330c      	adds	r3, #12
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007212:	89fb      	ldrh	r3, [r7, #14]
 8007214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007218:	d101      	bne.n	800721e <dec_lock+0x2e>
 800721a:	2300      	movs	r3, #0
 800721c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800721e:	89fb      	ldrh	r3, [r7, #14]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <dec_lock+0x3a>
 8007224:	89fb      	ldrh	r3, [r7, #14]
 8007226:	3b01      	subs	r3, #1
 8007228:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800722a:	4a0e      	ldr	r2, [pc, #56]	; (8007264 <dec_lock+0x74>)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	011b      	lsls	r3, r3, #4
 8007230:	4413      	add	r3, r2
 8007232:	330c      	adds	r3, #12
 8007234:	89fa      	ldrh	r2, [r7, #14]
 8007236:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007238:	89fb      	ldrh	r3, [r7, #14]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d105      	bne.n	800724a <dec_lock+0x5a>
 800723e:	4a09      	ldr	r2, [pc, #36]	; (8007264 <dec_lock+0x74>)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	011b      	lsls	r3, r3, #4
 8007244:	4413      	add	r3, r2
 8007246:	2200      	movs	r2, #0
 8007248:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	737b      	strb	r3, [r7, #13]
 800724e:	e001      	b.n	8007254 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007250:	2302      	movs	r3, #2
 8007252:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007254:	7b7b      	ldrb	r3, [r7, #13]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	200072a4 	.word	0x200072a4

08007268 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007270:	2300      	movs	r3, #0
 8007272:	60fb      	str	r3, [r7, #12]
 8007274:	e010      	b.n	8007298 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007276:	4a0d      	ldr	r2, [pc, #52]	; (80072ac <clear_lock+0x44>)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	011b      	lsls	r3, r3, #4
 800727c:	4413      	add	r3, r2
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	429a      	cmp	r2, r3
 8007284:	d105      	bne.n	8007292 <clear_lock+0x2a>
 8007286:	4a09      	ldr	r2, [pc, #36]	; (80072ac <clear_lock+0x44>)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	011b      	lsls	r3, r3, #4
 800728c:	4413      	add	r3, r2
 800728e:	2200      	movs	r2, #0
 8007290:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3301      	adds	r3, #1
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d9eb      	bls.n	8007276 <clear_lock+0xe>
	}
}
 800729e:	bf00      	nop
 80072a0:	bf00      	nop
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	200072a4 	.word	0x200072a4

080072b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	78db      	ldrb	r3, [r3, #3]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d034      	beq.n	800732e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	7858      	ldrb	r0, [r3, #1]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072d4:	2301      	movs	r3, #1
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	f7ff fd40 	bl	8006d5c <disk_write>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d002      	beq.n	80072e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	73fb      	strb	r3, [r7, #15]
 80072e6:	e022      	b.n	800732e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	1ad2      	subs	r2, r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d217      	bcs.n	800732e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	789b      	ldrb	r3, [r3, #2]
 8007302:	613b      	str	r3, [r7, #16]
 8007304:	e010      	b.n	8007328 <sync_window+0x78>
					wsect += fs->fsize;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	4413      	add	r3, r2
 800730e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	7858      	ldrb	r0, [r3, #1]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800731a:	2301      	movs	r3, #1
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	f7ff fd1d 	bl	8006d5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	3b01      	subs	r3, #1
 8007326:	613b      	str	r3, [r7, #16]
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d8eb      	bhi.n	8007306 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800732e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3718      	adds	r7, #24
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	429a      	cmp	r2, r3
 800734e:	d01b      	beq.n	8007388 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f7ff ffad 	bl	80072b0 <sync_window>
 8007356:	4603      	mov	r3, r0
 8007358:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800735a:	7bfb      	ldrb	r3, [r7, #15]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d113      	bne.n	8007388 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	7858      	ldrb	r0, [r3, #1]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800736a:	2301      	movs	r3, #1
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	f7ff fcd5 	bl	8006d1c <disk_read>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d004      	beq.n	8007382 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007378:	f04f 33ff 	mov.w	r3, #4294967295
 800737c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800737e:	2301      	movs	r3, #1
 8007380:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007388:	7bfb      	ldrb	r3, [r7, #15]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
	...

08007394 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f7ff ff87 	bl	80072b0 <sync_window>
 80073a2:	4603      	mov	r3, r0
 80073a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d158      	bne.n	800745e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b03      	cmp	r3, #3
 80073b2:	d148      	bne.n	8007446 <sync_fs+0xb2>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	791b      	ldrb	r3, [r3, #4]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d144      	bne.n	8007446 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	3330      	adds	r3, #48	; 0x30
 80073c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073c4:	2100      	movs	r1, #0
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7ff fda9 	bl	8006f1e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	3330      	adds	r3, #48	; 0x30
 80073d0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80073d4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80073d8:	4618      	mov	r0, r3
 80073da:	f7ff fd38 	bl	8006e4e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	3330      	adds	r3, #48	; 0x30
 80073e2:	4921      	ldr	r1, [pc, #132]	; (8007468 <sync_fs+0xd4>)
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7ff fd4d 	bl	8006e84 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	3330      	adds	r3, #48	; 0x30
 80073ee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80073f2:	491e      	ldr	r1, [pc, #120]	; (800746c <sync_fs+0xd8>)
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff fd45 	bl	8006e84 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	3330      	adds	r3, #48	; 0x30
 80073fe:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	4619      	mov	r1, r3
 8007408:	4610      	mov	r0, r2
 800740a:	f7ff fd3b 	bl	8006e84 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	3330      	adds	r3, #48	; 0x30
 8007412:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	4619      	mov	r1, r3
 800741c:	4610      	mov	r0, r2
 800741e:	f7ff fd31 	bl	8006e84 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	7858      	ldrb	r0, [r3, #1]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800743a:	2301      	movs	r3, #1
 800743c:	f7ff fc8e 	bl	8006d5c <disk_write>
			fs->fsi_flag = 0;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	785b      	ldrb	r3, [r3, #1]
 800744a:	2200      	movs	r2, #0
 800744c:	2100      	movs	r1, #0
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff fca4 	bl	8006d9c <disk_ioctl>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <sync_fs+0xca>
 800745a:	2301      	movs	r3, #1
 800745c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800745e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	41615252 	.word	0x41615252
 800746c:	61417272 	.word	0x61417272

08007470 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	3b02      	subs	r3, #2
 800747e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	3b02      	subs	r3, #2
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	429a      	cmp	r2, r3
 800748a:	d301      	bcc.n	8007490 <clust2sect+0x20>
 800748c:	2300      	movs	r3, #0
 800748e:	e008      	b.n	80074a2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	895b      	ldrh	r3, [r3, #10]
 8007494:	461a      	mov	r2, r3
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	fb03 f202 	mul.w	r2, r3, r2
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a0:	4413      	add	r3, r2
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	370c      	adds	r7, #12
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b086      	sub	sp, #24
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d904      	bls.n	80074ce <get_fat+0x20>
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d302      	bcc.n	80074d4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80074ce:	2301      	movs	r3, #1
 80074d0:	617b      	str	r3, [r7, #20]
 80074d2:	e08f      	b.n	80075f4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80074d4:	f04f 33ff 	mov.w	r3, #4294967295
 80074d8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	2b03      	cmp	r3, #3
 80074e0:	d062      	beq.n	80075a8 <get_fat+0xfa>
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	dc7c      	bgt.n	80075e0 <get_fat+0x132>
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d002      	beq.n	80074f0 <get_fat+0x42>
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d042      	beq.n	8007574 <get_fat+0xc6>
 80074ee:	e077      	b.n	80075e0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	60fb      	str	r3, [r7, #12]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	085b      	lsrs	r3, r3, #1
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	4413      	add	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	6a1a      	ldr	r2, [r3, #32]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	0a5b      	lsrs	r3, r3, #9
 8007506:	4413      	add	r3, r2
 8007508:	4619      	mov	r1, r3
 800750a:	6938      	ldr	r0, [r7, #16]
 800750c:	f7ff ff14 	bl	8007338 <move_window>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d167      	bne.n	80075e6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	1c5a      	adds	r2, r3, #1
 800751a:	60fa      	str	r2, [r7, #12]
 800751c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007520:	693a      	ldr	r2, [r7, #16]
 8007522:	4413      	add	r3, r2
 8007524:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007528:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	6a1a      	ldr	r2, [r3, #32]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	0a5b      	lsrs	r3, r3, #9
 8007532:	4413      	add	r3, r2
 8007534:	4619      	mov	r1, r3
 8007536:	6938      	ldr	r0, [r7, #16]
 8007538:	f7ff fefe 	bl	8007338 <move_window>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d153      	bne.n	80075ea <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	4413      	add	r3, r2
 800754c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007550:	021b      	lsls	r3, r3, #8
 8007552:	461a      	mov	r2, r3
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	4313      	orrs	r3, r2
 8007558:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	f003 0301 	and.w	r3, r3, #1
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <get_fat+0xbc>
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	091b      	lsrs	r3, r3, #4
 8007568:	e002      	b.n	8007570 <get_fat+0xc2>
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007570:	617b      	str	r3, [r7, #20]
			break;
 8007572:	e03f      	b.n	80075f4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	6a1a      	ldr	r2, [r3, #32]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	0a1b      	lsrs	r3, r3, #8
 800757c:	4413      	add	r3, r2
 800757e:	4619      	mov	r1, r3
 8007580:	6938      	ldr	r0, [r7, #16]
 8007582:	f7ff fed9 	bl	8007338 <move_window>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d130      	bne.n	80075ee <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	005b      	lsls	r3, r3, #1
 8007596:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800759a:	4413      	add	r3, r2
 800759c:	4618      	mov	r0, r3
 800759e:	f7ff fc1b 	bl	8006dd8 <ld_word>
 80075a2:	4603      	mov	r3, r0
 80075a4:	617b      	str	r3, [r7, #20]
			break;
 80075a6:	e025      	b.n	80075f4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	6a1a      	ldr	r2, [r3, #32]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	09db      	lsrs	r3, r3, #7
 80075b0:	4413      	add	r3, r2
 80075b2:	4619      	mov	r1, r3
 80075b4:	6938      	ldr	r0, [r7, #16]
 80075b6:	f7ff febf 	bl	8007338 <move_window>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d118      	bne.n	80075f2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80075ce:	4413      	add	r3, r2
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff fc19 	bl	8006e08 <ld_dword>
 80075d6:	4603      	mov	r3, r0
 80075d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80075dc:	617b      	str	r3, [r7, #20]
			break;
 80075de:	e009      	b.n	80075f4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80075e0:	2301      	movs	r3, #1
 80075e2:	617b      	str	r3, [r7, #20]
 80075e4:	e006      	b.n	80075f4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075e6:	bf00      	nop
 80075e8:	e004      	b.n	80075f4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075ea:	bf00      	nop
 80075ec:	e002      	b.n	80075f4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80075ee:	bf00      	nop
 80075f0:	e000      	b.n	80075f4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80075f2:	bf00      	nop
		}
	}

	return val;
 80075f4:	697b      	ldr	r3, [r7, #20]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80075fe:	b590      	push	{r4, r7, lr}
 8007600:	b089      	sub	sp, #36	; 0x24
 8007602:	af00      	add	r7, sp, #0
 8007604:	60f8      	str	r0, [r7, #12]
 8007606:	60b9      	str	r1, [r7, #8]
 8007608:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800760a:	2302      	movs	r3, #2
 800760c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	2b01      	cmp	r3, #1
 8007612:	f240 80d2 	bls.w	80077ba <put_fat+0x1bc>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	429a      	cmp	r2, r3
 800761e:	f080 80cc 	bcs.w	80077ba <put_fat+0x1bc>
		switch (fs->fs_type) {
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	2b03      	cmp	r3, #3
 8007628:	f000 8096 	beq.w	8007758 <put_fat+0x15a>
 800762c:	2b03      	cmp	r3, #3
 800762e:	f300 80cd 	bgt.w	80077cc <put_fat+0x1ce>
 8007632:	2b01      	cmp	r3, #1
 8007634:	d002      	beq.n	800763c <put_fat+0x3e>
 8007636:	2b02      	cmp	r3, #2
 8007638:	d06e      	beq.n	8007718 <put_fat+0x11a>
 800763a:	e0c7      	b.n	80077cc <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	61bb      	str	r3, [r7, #24]
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	085b      	lsrs	r3, r3, #1
 8007644:	69ba      	ldr	r2, [r7, #24]
 8007646:	4413      	add	r3, r2
 8007648:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6a1a      	ldr	r2, [r3, #32]
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	0a5b      	lsrs	r3, r3, #9
 8007652:	4413      	add	r3, r2
 8007654:	4619      	mov	r1, r3
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f7ff fe6e 	bl	8007338 <move_window>
 800765c:	4603      	mov	r3, r0
 800765e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007660:	7ffb      	ldrb	r3, [r7, #31]
 8007662:	2b00      	cmp	r3, #0
 8007664:	f040 80ab 	bne.w	80077be <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	1c59      	adds	r1, r3, #1
 8007672:	61b9      	str	r1, [r7, #24]
 8007674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007678:	4413      	add	r3, r2
 800767a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00d      	beq.n	80076a2 <put_fat+0xa4>
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	b25b      	sxtb	r3, r3
 800768c:	f003 030f 	and.w	r3, r3, #15
 8007690:	b25a      	sxtb	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	011b      	lsls	r3, r3, #4
 8007698:	b25b      	sxtb	r3, r3
 800769a:	4313      	orrs	r3, r2
 800769c:	b25b      	sxtb	r3, r3
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	e001      	b.n	80076a6 <put_fat+0xa8>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2201      	movs	r2, #1
 80076ae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6a1a      	ldr	r2, [r3, #32]
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	0a5b      	lsrs	r3, r3, #9
 80076b8:	4413      	add	r3, r2
 80076ba:	4619      	mov	r1, r3
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f7ff fe3b 	bl	8007338 <move_window>
 80076c2:	4603      	mov	r3, r0
 80076c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80076c6:	7ffb      	ldrb	r3, [r7, #31]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d17a      	bne.n	80077c2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d8:	4413      	add	r3, r2
 80076da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d003      	beq.n	80076ee <put_fat+0xf0>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	091b      	lsrs	r3, r3, #4
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	e00e      	b.n	800770c <put_fat+0x10e>
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	b25b      	sxtb	r3, r3
 80076f4:	f023 030f 	bic.w	r3, r3, #15
 80076f8:	b25a      	sxtb	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	0a1b      	lsrs	r3, r3, #8
 80076fe:	b25b      	sxtb	r3, r3
 8007700:	f003 030f 	and.w	r3, r3, #15
 8007704:	b25b      	sxtb	r3, r3
 8007706:	4313      	orrs	r3, r2
 8007708:	b25b      	sxtb	r3, r3
 800770a:	b2db      	uxtb	r3, r3
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2201      	movs	r2, #1
 8007714:	70da      	strb	r2, [r3, #3]
			break;
 8007716:	e059      	b.n	80077cc <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6a1a      	ldr	r2, [r3, #32]
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	0a1b      	lsrs	r3, r3, #8
 8007720:	4413      	add	r3, r2
 8007722:	4619      	mov	r1, r3
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f7ff fe07 	bl	8007338 <move_window>
 800772a:	4603      	mov	r3, r0
 800772c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800772e:	7ffb      	ldrb	r3, [r7, #31]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d148      	bne.n	80077c6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	005b      	lsls	r3, r3, #1
 800773e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007742:	4413      	add	r3, r2
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	b292      	uxth	r2, r2
 8007748:	4611      	mov	r1, r2
 800774a:	4618      	mov	r0, r3
 800774c:	f7ff fb7f 	bl	8006e4e <st_word>
			fs->wflag = 1;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2201      	movs	r2, #1
 8007754:	70da      	strb	r2, [r3, #3]
			break;
 8007756:	e039      	b.n	80077cc <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6a1a      	ldr	r2, [r3, #32]
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	09db      	lsrs	r3, r3, #7
 8007760:	4413      	add	r3, r2
 8007762:	4619      	mov	r1, r3
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f7ff fde7 	bl	8007338 <move_window>
 800776a:	4603      	mov	r3, r0
 800776c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800776e:	7ffb      	ldrb	r3, [r7, #31]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d12a      	bne.n	80077ca <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007788:	4413      	add	r3, r2
 800778a:	4618      	mov	r0, r3
 800778c:	f7ff fb3c 	bl	8006e08 <ld_dword>
 8007790:	4603      	mov	r3, r0
 8007792:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007796:	4323      	orrs	r3, r4
 8007798:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80077a8:	4413      	add	r3, r2
 80077aa:	6879      	ldr	r1, [r7, #4]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7ff fb69 	bl	8006e84 <st_dword>
			fs->wflag = 1;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2201      	movs	r2, #1
 80077b6:	70da      	strb	r2, [r3, #3]
			break;
 80077b8:	e008      	b.n	80077cc <put_fat+0x1ce>
		}
	}
 80077ba:	bf00      	nop
 80077bc:	e006      	b.n	80077cc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80077be:	bf00      	nop
 80077c0:	e004      	b.n	80077cc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80077c2:	bf00      	nop
 80077c4:	e002      	b.n	80077cc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80077c6:	bf00      	nop
 80077c8:	e000      	b.n	80077cc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80077ca:	bf00      	nop
	return res;
 80077cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3724      	adds	r7, #36	; 0x24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd90      	pop	{r4, r7, pc}

080077d6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b088      	sub	sp, #32
 80077da:	af00      	add	r7, sp, #0
 80077dc:	60f8      	str	r0, [r7, #12]
 80077de:	60b9      	str	r1, [r7, #8]
 80077e0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d904      	bls.n	80077fc <remove_chain+0x26>
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d301      	bcc.n	8007800 <remove_chain+0x2a>
 80077fc:	2302      	movs	r3, #2
 80077fe:	e04b      	b.n	8007898 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00c      	beq.n	8007820 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007806:	f04f 32ff 	mov.w	r2, #4294967295
 800780a:	6879      	ldr	r1, [r7, #4]
 800780c:	69b8      	ldr	r0, [r7, #24]
 800780e:	f7ff fef6 	bl	80075fe <put_fat>
 8007812:	4603      	mov	r3, r0
 8007814:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007816:	7ffb      	ldrb	r3, [r7, #31]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d001      	beq.n	8007820 <remove_chain+0x4a>
 800781c:	7ffb      	ldrb	r3, [r7, #31]
 800781e:	e03b      	b.n	8007898 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007820:	68b9      	ldr	r1, [r7, #8]
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f7ff fe43 	bl	80074ae <get_fat>
 8007828:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d031      	beq.n	8007894 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d101      	bne.n	800783a <remove_chain+0x64>
 8007836:	2302      	movs	r3, #2
 8007838:	e02e      	b.n	8007898 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007840:	d101      	bne.n	8007846 <remove_chain+0x70>
 8007842:	2301      	movs	r3, #1
 8007844:	e028      	b.n	8007898 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007846:	2200      	movs	r2, #0
 8007848:	68b9      	ldr	r1, [r7, #8]
 800784a:	69b8      	ldr	r0, [r7, #24]
 800784c:	f7ff fed7 	bl	80075fe <put_fat>
 8007850:	4603      	mov	r3, r0
 8007852:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007854:	7ffb      	ldrb	r3, [r7, #31]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d001      	beq.n	800785e <remove_chain+0x88>
 800785a:	7ffb      	ldrb	r3, [r7, #31]
 800785c:	e01c      	b.n	8007898 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	691a      	ldr	r2, [r3, #16]
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	3b02      	subs	r3, #2
 8007868:	429a      	cmp	r2, r3
 800786a:	d20b      	bcs.n	8007884 <remove_chain+0xae>
			fs->free_clst++;
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	1c5a      	adds	r2, r3, #1
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	791b      	ldrb	r3, [r3, #4]
 800787a:	f043 0301 	orr.w	r3, r3, #1
 800787e:	b2da      	uxtb	r2, r3
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	429a      	cmp	r2, r3
 8007890:	d3c6      	bcc.n	8007820 <remove_chain+0x4a>
 8007892:	e000      	b.n	8007896 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007894:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3720      	adds	r7, #32
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b088      	sub	sp, #32
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10d      	bne.n	80078d2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d004      	beq.n	80078cc <create_chain+0x2c>
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	69ba      	ldr	r2, [r7, #24]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d31b      	bcc.n	8007904 <create_chain+0x64>
 80078cc:	2301      	movs	r3, #1
 80078ce:	61bb      	str	r3, [r7, #24]
 80078d0:	e018      	b.n	8007904 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7ff fdea 	bl	80074ae <get_fat>
 80078da:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d801      	bhi.n	80078e6 <create_chain+0x46>
 80078e2:	2301      	movs	r3, #1
 80078e4:	e070      	b.n	80079c8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ec:	d101      	bne.n	80078f2 <create_chain+0x52>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	e06a      	b.n	80079c8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d201      	bcs.n	8007900 <create_chain+0x60>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	e063      	b.n	80079c8 <create_chain+0x128>
		scl = clst;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	3301      	adds	r3, #1
 800790c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	69fa      	ldr	r2, [r7, #28]
 8007914:	429a      	cmp	r2, r3
 8007916:	d307      	bcc.n	8007928 <create_chain+0x88>
				ncl = 2;
 8007918:	2302      	movs	r3, #2
 800791a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800791c:	69fa      	ldr	r2, [r7, #28]
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	429a      	cmp	r2, r3
 8007922:	d901      	bls.n	8007928 <create_chain+0x88>
 8007924:	2300      	movs	r3, #0
 8007926:	e04f      	b.n	80079c8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007928:	69f9      	ldr	r1, [r7, #28]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7ff fdbf 	bl	80074ae <get_fat>
 8007930:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00e      	beq.n	8007956 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d003      	beq.n	8007946 <create_chain+0xa6>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007944:	d101      	bne.n	800794a <create_chain+0xaa>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	e03e      	b.n	80079c8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800794a:	69fa      	ldr	r2, [r7, #28]
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	429a      	cmp	r2, r3
 8007950:	d1da      	bne.n	8007908 <create_chain+0x68>
 8007952:	2300      	movs	r3, #0
 8007954:	e038      	b.n	80079c8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007956:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007958:	f04f 32ff 	mov.w	r2, #4294967295
 800795c:	69f9      	ldr	r1, [r7, #28]
 800795e:	6938      	ldr	r0, [r7, #16]
 8007960:	f7ff fe4d 	bl	80075fe <put_fat>
 8007964:	4603      	mov	r3, r0
 8007966:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007968:	7dfb      	ldrb	r3, [r7, #23]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d109      	bne.n	8007982 <create_chain+0xe2>
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d006      	beq.n	8007982 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007974:	69fa      	ldr	r2, [r7, #28]
 8007976:	6839      	ldr	r1, [r7, #0]
 8007978:	6938      	ldr	r0, [r7, #16]
 800797a:	f7ff fe40 	bl	80075fe <put_fat>
 800797e:	4603      	mov	r3, r0
 8007980:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007982:	7dfb      	ldrb	r3, [r7, #23]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d116      	bne.n	80079b6 <create_chain+0x116>
		fs->last_clst = ncl;
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	69fa      	ldr	r2, [r7, #28]
 800798c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	691a      	ldr	r2, [r3, #16]
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	3b02      	subs	r3, #2
 8007998:	429a      	cmp	r2, r3
 800799a:	d804      	bhi.n	80079a6 <create_chain+0x106>
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	1e5a      	subs	r2, r3, #1
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	791b      	ldrb	r3, [r3, #4]
 80079aa:	f043 0301 	orr.w	r3, r3, #1
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	711a      	strb	r2, [r3, #4]
 80079b4:	e007      	b.n	80079c6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80079b6:	7dfb      	ldrb	r3, [r7, #23]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d102      	bne.n	80079c2 <create_chain+0x122>
 80079bc:	f04f 33ff 	mov.w	r3, #4294967295
 80079c0:	e000      	b.n	80079c4 <create_chain+0x124>
 80079c2:	2301      	movs	r3, #1
 80079c4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80079c6:	69fb      	ldr	r3, [r7, #28]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3720      	adds	r7, #32
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b087      	sub	sp, #28
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e4:	3304      	adds	r3, #4
 80079e6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	0a5b      	lsrs	r3, r3, #9
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	8952      	ldrh	r2, [r2, #10]
 80079f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80079f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	1d1a      	adds	r2, r3, #4
 80079fa:	613a      	str	r2, [r7, #16]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <clmt_clust+0x3a>
 8007a06:	2300      	movs	r3, #0
 8007a08:	e010      	b.n	8007a2c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d307      	bcc.n	8007a22 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	617b      	str	r3, [r7, #20]
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	3304      	adds	r3, #4
 8007a1e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007a20:	e7e9      	b.n	80079f6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007a22:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	4413      	add	r3, r2
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	371c      	adds	r7, #28
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a4e:	d204      	bcs.n	8007a5a <dir_sdi+0x22>
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	f003 031f 	and.w	r3, r3, #31
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <dir_sdi+0x26>
		return FR_INT_ERR;
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	e063      	b.n	8007b26 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	683a      	ldr	r2, [r7, #0]
 8007a62:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d106      	bne.n	8007a7e <dir_sdi+0x46>
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d902      	bls.n	8007a7e <dir_sdi+0x46>
		clst = fs->dirbase;
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10c      	bne.n	8007a9e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	095b      	lsrs	r3, r3, #5
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	8912      	ldrh	r2, [r2, #8]
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d301      	bcc.n	8007a94 <dir_sdi+0x5c>
 8007a90:	2302      	movs	r3, #2
 8007a92:	e048      	b.n	8007b26 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	61da      	str	r2, [r3, #28]
 8007a9c:	e029      	b.n	8007af2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	895b      	ldrh	r3, [r3, #10]
 8007aa2:	025b      	lsls	r3, r3, #9
 8007aa4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007aa6:	e019      	b.n	8007adc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6979      	ldr	r1, [r7, #20]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7ff fcfe 	bl	80074ae <get_fat>
 8007ab2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aba:	d101      	bne.n	8007ac0 <dir_sdi+0x88>
 8007abc:	2301      	movs	r3, #1
 8007abe:	e032      	b.n	8007b26 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d904      	bls.n	8007ad0 <dir_sdi+0x98>
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	695b      	ldr	r3, [r3, #20]
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d301      	bcc.n	8007ad4 <dir_sdi+0x9c>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e028      	b.n	8007b26 <dir_sdi+0xee>
			ofs -= csz;
 8007ad4:	683a      	ldr	r2, [r7, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d2e1      	bcs.n	8007aa8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007ae4:	6979      	ldr	r1, [r7, #20]
 8007ae6:	6938      	ldr	r0, [r7, #16]
 8007ae8:	f7ff fcc2 	bl	8007470 <clust2sect>
 8007aec:	4602      	mov	r2, r0
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	69db      	ldr	r3, [r3, #28]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <dir_sdi+0xcc>
 8007b00:	2302      	movs	r3, #2
 8007b02:	e010      	b.n	8007b26 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	69da      	ldr	r2, [r3, #28]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	0a5b      	lsrs	r3, r3, #9
 8007b0c:	441a      	add	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b1e:	441a      	add	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3718      	adds	r7, #24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b086      	sub	sp, #24
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	3320      	adds	r3, #32
 8007b44:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d003      	beq.n	8007b56 <dir_next+0x28>
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b54:	d301      	bcc.n	8007b5a <dir_next+0x2c>
 8007b56:	2304      	movs	r3, #4
 8007b58:	e0aa      	b.n	8007cb0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f040 8098 	bne.w	8007c96 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	69db      	ldr	r3, [r3, #28]
 8007b6a:	1c5a      	adds	r2, r3, #1
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10b      	bne.n	8007b90 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	095b      	lsrs	r3, r3, #5
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	8912      	ldrh	r2, [r2, #8]
 8007b80:	4293      	cmp	r3, r2
 8007b82:	f0c0 8088 	bcc.w	8007c96 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	61da      	str	r2, [r3, #28]
 8007b8c:	2304      	movs	r3, #4
 8007b8e:	e08f      	b.n	8007cb0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	0a5b      	lsrs	r3, r3, #9
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	8952      	ldrh	r2, [r2, #10]
 8007b98:	3a01      	subs	r2, #1
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d17a      	bne.n	8007c96 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	4610      	mov	r0, r2
 8007baa:	f7ff fc80 	bl	80074ae <get_fat>
 8007bae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d801      	bhi.n	8007bba <dir_next+0x8c>
 8007bb6:	2302      	movs	r3, #2
 8007bb8:	e07a      	b.n	8007cb0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc0:	d101      	bne.n	8007bc6 <dir_next+0x98>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e074      	b.n	8007cb0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d358      	bcc.n	8007c82 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d104      	bne.n	8007be0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	61da      	str	r2, [r3, #28]
 8007bdc:	2304      	movs	r3, #4
 8007bde:	e067      	b.n	8007cb0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	4619      	mov	r1, r3
 8007be8:	4610      	mov	r0, r2
 8007bea:	f7ff fe59 	bl	80078a0 <create_chain>
 8007bee:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <dir_next+0xcc>
 8007bf6:	2307      	movs	r3, #7
 8007bf8:	e05a      	b.n	8007cb0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d101      	bne.n	8007c04 <dir_next+0xd6>
 8007c00:	2302      	movs	r3, #2
 8007c02:	e055      	b.n	8007cb0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0a:	d101      	bne.n	8007c10 <dir_next+0xe2>
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e04f      	b.n	8007cb0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f7ff fb4d 	bl	80072b0 <sync_window>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d001      	beq.n	8007c20 <dir_next+0xf2>
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e047      	b.n	8007cb0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3330      	adds	r3, #48	; 0x30
 8007c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c28:	2100      	movs	r1, #0
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7ff f977 	bl	8006f1e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007c30:	2300      	movs	r3, #0
 8007c32:	613b      	str	r3, [r7, #16]
 8007c34:	6979      	ldr	r1, [r7, #20]
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f7ff fc1a 	bl	8007470 <clust2sect>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	62da      	str	r2, [r3, #44]	; 0x2c
 8007c42:	e012      	b.n	8007c6a <dir_next+0x13c>
						fs->wflag = 1;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2201      	movs	r2, #1
 8007c48:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f7ff fb30 	bl	80072b0 <sync_window>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <dir_next+0x12c>
 8007c56:	2301      	movs	r3, #1
 8007c58:	e02a      	b.n	8007cb0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	613b      	str	r3, [r7, #16]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c64:	1c5a      	adds	r2, r3, #1
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	62da      	str	r2, [r3, #44]	; 0x2c
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	895b      	ldrh	r3, [r3, #10]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d3e6      	bcc.n	8007c44 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	1ad2      	subs	r2, r2, r3
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007c88:	6979      	ldr	r1, [r7, #20]
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f7ff fbf0 	bl	8007470 <clust2sect>
 8007c90:	4602      	mov	r2, r0
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ca8:	441a      	add	r2, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3718      	adds	r7, #24
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007cc8:	2100      	movs	r1, #0
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f7ff feb4 	bl	8007a38 <dir_sdi>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007cd4:	7dfb      	ldrb	r3, [r7, #23]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d12b      	bne.n	8007d32 <dir_alloc+0x7a>
		n = 0;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	69db      	ldr	r3, [r3, #28]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f7ff fb27 	bl	8007338 <move_window>
 8007cea:	4603      	mov	r3, r0
 8007cec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007cee:	7dfb      	ldrb	r3, [r7, #23]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d11d      	bne.n	8007d30 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a1b      	ldr	r3, [r3, #32]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	2be5      	cmp	r3, #229	; 0xe5
 8007cfc:	d004      	beq.n	8007d08 <dir_alloc+0x50>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d107      	bne.n	8007d18 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	613b      	str	r3, [r7, #16]
 8007d0e:	693a      	ldr	r2, [r7, #16]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d102      	bne.n	8007d1c <dir_alloc+0x64>
 8007d16:	e00c      	b.n	8007d32 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007d18:	2300      	movs	r3, #0
 8007d1a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7ff ff05 	bl	8007b2e <dir_next>
 8007d24:	4603      	mov	r3, r0
 8007d26:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007d28:	7dfb      	ldrb	r3, [r7, #23]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d0d7      	beq.n	8007cde <dir_alloc+0x26>
 8007d2e:	e000      	b.n	8007d32 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007d30:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
 8007d34:	2b04      	cmp	r3, #4
 8007d36:	d101      	bne.n	8007d3c <dir_alloc+0x84>
 8007d38:	2307      	movs	r3, #7
 8007d3a:	75fb      	strb	r3, [r7, #23]
	return res;
 8007d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3718      	adds	r7, #24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b084      	sub	sp, #16
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	331a      	adds	r3, #26
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7ff f83f 	bl	8006dd8 <ld_word>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	d109      	bne.n	8007d7a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	3314      	adds	r3, #20
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7ff f834 	bl	8006dd8 <ld_word>
 8007d70:	4603      	mov	r3, r0
 8007d72:	041b      	lsls	r3, r3, #16
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	331a      	adds	r3, #26
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	b292      	uxth	r2, r2
 8007d98:	4611      	mov	r1, r2
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7ff f857 	bl	8006e4e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	2b03      	cmp	r3, #3
 8007da6:	d109      	bne.n	8007dbc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	f103 0214 	add.w	r2, r3, #20
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	0c1b      	lsrs	r3, r3, #16
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	4619      	mov	r1, r3
 8007db6:	4610      	mov	r0, r2
 8007db8:	f7ff f849 	bl	8006e4e <st_word>
	}
}
 8007dbc:	bf00      	nop
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8007dce:	2304      	movs	r3, #4
 8007dd0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8007dd8:	e03c      	b.n	8007e54 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	4619      	mov	r1, r3
 8007de0:	6938      	ldr	r0, [r7, #16]
 8007de2:	f7ff faa9 	bl	8007338 <move_window>
 8007de6:	4603      	mov	r3, r0
 8007de8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007dea:	7dfb      	ldrb	r3, [r7, #23]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d136      	bne.n	8007e5e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8007df8:	7bfb      	ldrb	r3, [r7, #15]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d102      	bne.n	8007e04 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8007dfe:	2304      	movs	r3, #4
 8007e00:	75fb      	strb	r3, [r7, #23]
 8007e02:	e031      	b.n	8007e68 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a1b      	ldr	r3, [r3, #32]
 8007e08:	330b      	adds	r3, #11
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e10:	73bb      	strb	r3, [r7, #14]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	7bba      	ldrb	r2, [r7, #14]
 8007e16:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	2be5      	cmp	r3, #229	; 0xe5
 8007e1c:	d011      	beq.n	8007e42 <dir_read+0x7e>
 8007e1e:	7bfb      	ldrb	r3, [r7, #15]
 8007e20:	2b2e      	cmp	r3, #46	; 0x2e
 8007e22:	d00e      	beq.n	8007e42 <dir_read+0x7e>
 8007e24:	7bbb      	ldrb	r3, [r7, #14]
 8007e26:	2b0f      	cmp	r3, #15
 8007e28:	d00b      	beq.n	8007e42 <dir_read+0x7e>
 8007e2a:	7bbb      	ldrb	r3, [r7, #14]
 8007e2c:	f023 0320 	bic.w	r3, r3, #32
 8007e30:	2b08      	cmp	r3, #8
 8007e32:	bf0c      	ite	eq
 8007e34:	2301      	moveq	r3, #1
 8007e36:	2300      	movne	r3, #0
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d00f      	beq.n	8007e62 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8007e42:	2100      	movs	r1, #0
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f7ff fe72 	bl	8007b2e <dir_next>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007e4e:	7dfb      	ldrb	r3, [r7, #23]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d108      	bne.n	8007e66 <dir_read+0xa2>
	while (dp->sect) {
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	69db      	ldr	r3, [r3, #28]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1be      	bne.n	8007dda <dir_read+0x16>
 8007e5c:	e004      	b.n	8007e68 <dir_read+0xa4>
		if (res != FR_OK) break;
 8007e5e:	bf00      	nop
 8007e60:	e002      	b.n	8007e68 <dir_read+0xa4>
				break;
 8007e62:	bf00      	nop
 8007e64:	e000      	b.n	8007e68 <dir_read+0xa4>
		if (res != FR_OK) break;
 8007e66:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007e68:	7dfb      	ldrb	r3, [r7, #23]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d002      	beq.n	8007e74 <dir_read+0xb0>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	61da      	str	r2, [r3, #28]
	return res;
 8007e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b086      	sub	sp, #24
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7ff fdd2 	bl	8007a38 <dir_sdi>
 8007e94:	4603      	mov	r3, r0
 8007e96:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007e98:	7dfb      	ldrb	r3, [r7, #23]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d001      	beq.n	8007ea2 <dir_find+0x24>
 8007e9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ea0:	e03e      	b.n	8007f20 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	69db      	ldr	r3, [r3, #28]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6938      	ldr	r0, [r7, #16]
 8007eaa:	f7ff fa45 	bl	8007338 <move_window>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007eb2:	7dfb      	ldrb	r3, [r7, #23]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d12f      	bne.n	8007f18 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a1b      	ldr	r3, [r3, #32]
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d102      	bne.n	8007ecc <dir_find+0x4e>
 8007ec6:	2304      	movs	r3, #4
 8007ec8:	75fb      	strb	r3, [r7, #23]
 8007eca:	e028      	b.n	8007f1e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	330b      	adds	r3, #11
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	330b      	adds	r3, #11
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	f003 0308 	and.w	r3, r3, #8
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10a      	bne.n	8007f04 <dir_find+0x86>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a18      	ldr	r0, [r3, #32]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3324      	adds	r3, #36	; 0x24
 8007ef6:	220b      	movs	r2, #11
 8007ef8:	4619      	mov	r1, r3
 8007efa:	f7ff f82b 	bl	8006f54 <mem_cmp>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00b      	beq.n	8007f1c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007f04:	2100      	movs	r1, #0
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f7ff fe11 	bl	8007b2e <dir_next>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d0c5      	beq.n	8007ea2 <dir_find+0x24>
 8007f16:	e002      	b.n	8007f1e <dir_find+0xa0>
		if (res != FR_OK) break;
 8007f18:	bf00      	nop
 8007f1a:	e000      	b.n	8007f1e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007f1c:	bf00      	nop

	return res;
 8007f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3718      	adds	r7, #24
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007f36:	2101      	movs	r1, #1
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f7ff febd 	bl	8007cb8 <dir_alloc>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007f42:	7bfb      	ldrb	r3, [r7, #15]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d11c      	bne.n	8007f82 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	69db      	ldr	r3, [r3, #28]
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	68b8      	ldr	r0, [r7, #8]
 8007f50:	f7ff f9f2 	bl	8007338 <move_window>
 8007f54:	4603      	mov	r3, r0
 8007f56:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d111      	bne.n	8007f82 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	2220      	movs	r2, #32
 8007f64:	2100      	movs	r1, #0
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fe ffd9 	bl	8006f1e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a18      	ldr	r0, [r3, #32]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	3324      	adds	r3, #36	; 0x24
 8007f74:	220b      	movs	r2, #11
 8007f76:	4619      	mov	r1, r3
 8007f78:	f7fe ffb0 	bl	8006edc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	69db      	ldr	r3, [r3, #28]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d04e      	beq.n	8008042 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	613b      	str	r3, [r7, #16]
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8007fac:	e021      	b.n	8007ff2 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a1a      	ldr	r2, [r3, #32]
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	1c59      	adds	r1, r3, #1
 8007fb6:	6179      	str	r1, [r7, #20]
 8007fb8:	4413      	add	r3, r2
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
 8007fc0:	2b20      	cmp	r3, #32
 8007fc2:	d100      	bne.n	8007fc6 <get_fileinfo+0x3a>
 8007fc4:	e015      	b.n	8007ff2 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007fc6:	7bfb      	ldrb	r3, [r7, #15]
 8007fc8:	2b05      	cmp	r3, #5
 8007fca:	d101      	bne.n	8007fd0 <get_fileinfo+0x44>
 8007fcc:	23e5      	movs	r3, #229	; 0xe5
 8007fce:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	2b09      	cmp	r3, #9
 8007fd4:	d106      	bne.n	8007fe4 <get_fileinfo+0x58>
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	1c5a      	adds	r2, r3, #1
 8007fda:	613a      	str	r2, [r7, #16]
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	4413      	add	r3, r2
 8007fe0:	222e      	movs	r2, #46	; 0x2e
 8007fe2:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	1c5a      	adds	r2, r3, #1
 8007fe8:	613a      	str	r2, [r7, #16]
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	4413      	add	r3, r2
 8007fee:	7bfa      	ldrb	r2, [r7, #15]
 8007ff0:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	2b0a      	cmp	r3, #10
 8007ff6:	d9da      	bls.n	8007fae <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	3309      	adds	r3, #9
 8008000:	2200      	movs	r2, #0
 8008002:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a1b      	ldr	r3, [r3, #32]
 8008008:	7ada      	ldrb	r2, [r3, #11]
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a1b      	ldr	r3, [r3, #32]
 8008012:	331c      	adds	r3, #28
 8008014:	4618      	mov	r0, r3
 8008016:	f7fe fef7 	bl	8006e08 <ld_dword>
 800801a:	4602      	mov	r2, r0
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a1b      	ldr	r3, [r3, #32]
 8008024:	3316      	adds	r3, #22
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe feee 	bl	8006e08 <ld_dword>
 800802c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	b29a      	uxth	r2, r3
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	80da      	strh	r2, [r3, #6]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	0c1b      	lsrs	r3, r3, #16
 800803a:	b29a      	uxth	r2, r3
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	809a      	strh	r2, [r3, #4]
 8008040:	e000      	b.n	8008044 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008042:	bf00      	nop
}
 8008044:	3718      	adds	r7, #24
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
	...

0800804c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b088      	sub	sp, #32
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	60fb      	str	r3, [r7, #12]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	3324      	adds	r3, #36	; 0x24
 8008060:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008062:	220b      	movs	r2, #11
 8008064:	2120      	movs	r1, #32
 8008066:	68b8      	ldr	r0, [r7, #8]
 8008068:	f7fe ff59 	bl	8006f1e <mem_set>
	si = i = 0; ni = 8;
 800806c:	2300      	movs	r3, #0
 800806e:	613b      	str	r3, [r7, #16]
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	61fb      	str	r3, [r7, #28]
 8008074:	2308      	movs	r3, #8
 8008076:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	1c5a      	adds	r2, r3, #1
 800807c:	61fa      	str	r2, [r7, #28]
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	4413      	add	r3, r2
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008086:	7efb      	ldrb	r3, [r7, #27]
 8008088:	2b20      	cmp	r3, #32
 800808a:	d94e      	bls.n	800812a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800808c:	7efb      	ldrb	r3, [r7, #27]
 800808e:	2b2f      	cmp	r3, #47	; 0x2f
 8008090:	d006      	beq.n	80080a0 <create_name+0x54>
 8008092:	7efb      	ldrb	r3, [r7, #27]
 8008094:	2b5c      	cmp	r3, #92	; 0x5c
 8008096:	d110      	bne.n	80080ba <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008098:	e002      	b.n	80080a0 <create_name+0x54>
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	3301      	adds	r3, #1
 800809e:	61fb      	str	r3, [r7, #28]
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	4413      	add	r3, r2
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	2b2f      	cmp	r3, #47	; 0x2f
 80080aa:	d0f6      	beq.n	800809a <create_name+0x4e>
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	4413      	add	r3, r2
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	2b5c      	cmp	r3, #92	; 0x5c
 80080b6:	d0f0      	beq.n	800809a <create_name+0x4e>
			break;
 80080b8:	e038      	b.n	800812c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80080ba:	7efb      	ldrb	r3, [r7, #27]
 80080bc:	2b2e      	cmp	r3, #46	; 0x2e
 80080be:	d003      	beq.n	80080c8 <create_name+0x7c>
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d30c      	bcc.n	80080e2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	2b0b      	cmp	r3, #11
 80080cc:	d002      	beq.n	80080d4 <create_name+0x88>
 80080ce:	7efb      	ldrb	r3, [r7, #27]
 80080d0:	2b2e      	cmp	r3, #46	; 0x2e
 80080d2:	d001      	beq.n	80080d8 <create_name+0x8c>
 80080d4:	2306      	movs	r3, #6
 80080d6:	e044      	b.n	8008162 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80080d8:	2308      	movs	r3, #8
 80080da:	613b      	str	r3, [r7, #16]
 80080dc:	230b      	movs	r3, #11
 80080de:	617b      	str	r3, [r7, #20]
			continue;
 80080e0:	e022      	b.n	8008128 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80080e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	da04      	bge.n	80080f4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80080ea:	7efb      	ldrb	r3, [r7, #27]
 80080ec:	3b80      	subs	r3, #128	; 0x80
 80080ee:	4a1f      	ldr	r2, [pc, #124]	; (800816c <create_name+0x120>)
 80080f0:	5cd3      	ldrb	r3, [r2, r3]
 80080f2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80080f4:	7efb      	ldrb	r3, [r7, #27]
 80080f6:	4619      	mov	r1, r3
 80080f8:	481d      	ldr	r0, [pc, #116]	; (8008170 <create_name+0x124>)
 80080fa:	f7fe ff52 	bl	8006fa2 <chk_chr>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <create_name+0xbc>
 8008104:	2306      	movs	r3, #6
 8008106:	e02c      	b.n	8008162 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008108:	7efb      	ldrb	r3, [r7, #27]
 800810a:	2b60      	cmp	r3, #96	; 0x60
 800810c:	d905      	bls.n	800811a <create_name+0xce>
 800810e:	7efb      	ldrb	r3, [r7, #27]
 8008110:	2b7a      	cmp	r3, #122	; 0x7a
 8008112:	d802      	bhi.n	800811a <create_name+0xce>
 8008114:	7efb      	ldrb	r3, [r7, #27]
 8008116:	3b20      	subs	r3, #32
 8008118:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	1c5a      	adds	r2, r3, #1
 800811e:	613a      	str	r2, [r7, #16]
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	4413      	add	r3, r2
 8008124:	7efa      	ldrb	r2, [r7, #27]
 8008126:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008128:	e7a6      	b.n	8008078 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800812a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	441a      	add	r2, r3
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d101      	bne.n	8008140 <create_name+0xf4>
 800813c:	2306      	movs	r3, #6
 800813e:	e010      	b.n	8008162 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	2be5      	cmp	r3, #229	; 0xe5
 8008146:	d102      	bne.n	800814e <create_name+0x102>
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2205      	movs	r2, #5
 800814c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800814e:	7efb      	ldrb	r3, [r7, #27]
 8008150:	2b20      	cmp	r3, #32
 8008152:	d801      	bhi.n	8008158 <create_name+0x10c>
 8008154:	2204      	movs	r2, #4
 8008156:	e000      	b.n	800815a <create_name+0x10e>
 8008158:	2200      	movs	r2, #0
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	330b      	adds	r3, #11
 800815e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008160:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008162:	4618      	mov	r0, r3
 8008164:	3720      	adds	r7, #32
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	0800a8d0 	.word	0x0800a8d0
 8008170:	0800a4e4 	.word	0x0800a4e4

08008174 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008188:	e002      	b.n	8008190 <follow_path+0x1c>
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	3301      	adds	r3, #1
 800818e:	603b      	str	r3, [r7, #0]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	2b2f      	cmp	r3, #47	; 0x2f
 8008196:	d0f8      	beq.n	800818a <follow_path+0x16>
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	2b5c      	cmp	r3, #92	; 0x5c
 800819e:	d0f4      	beq.n	800818a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	2200      	movs	r2, #0
 80081a4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	2b1f      	cmp	r3, #31
 80081ac:	d80a      	bhi.n	80081c4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2280      	movs	r2, #128	; 0x80
 80081b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80081b6:	2100      	movs	r1, #0
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7ff fc3d 	bl	8007a38 <dir_sdi>
 80081be:	4603      	mov	r3, r0
 80081c0:	75fb      	strb	r3, [r7, #23]
 80081c2:	e043      	b.n	800824c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80081c4:	463b      	mov	r3, r7
 80081c6:	4619      	mov	r1, r3
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f7ff ff3f 	bl	800804c <create_name>
 80081ce:	4603      	mov	r3, r0
 80081d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80081d2:	7dfb      	ldrb	r3, [r7, #23]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d134      	bne.n	8008242 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7ff fe50 	bl	8007e7e <dir_find>
 80081de:	4603      	mov	r3, r0
 80081e0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80081e8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00a      	beq.n	8008206 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80081f0:	7dfb      	ldrb	r3, [r7, #23]
 80081f2:	2b04      	cmp	r3, #4
 80081f4:	d127      	bne.n	8008246 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80081f6:	7afb      	ldrb	r3, [r7, #11]
 80081f8:	f003 0304 	and.w	r3, r3, #4
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d122      	bne.n	8008246 <follow_path+0xd2>
 8008200:	2305      	movs	r3, #5
 8008202:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008204:	e01f      	b.n	8008246 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008206:	7afb      	ldrb	r3, [r7, #11]
 8008208:	f003 0304 	and.w	r3, r3, #4
 800820c:	2b00      	cmp	r3, #0
 800820e:	d11c      	bne.n	800824a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	799b      	ldrb	r3, [r3, #6]
 8008214:	f003 0310 	and.w	r3, r3, #16
 8008218:	2b00      	cmp	r3, #0
 800821a:	d102      	bne.n	8008222 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800821c:	2305      	movs	r3, #5
 800821e:	75fb      	strb	r3, [r7, #23]
 8008220:	e014      	b.n	800824c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008230:	4413      	add	r3, r2
 8008232:	4619      	mov	r1, r3
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f7ff fd86 	bl	8007d46 <ld_clust>
 800823a:	4602      	mov	r2, r0
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008240:	e7c0      	b.n	80081c4 <follow_path+0x50>
			if (res != FR_OK) break;
 8008242:	bf00      	nop
 8008244:	e002      	b.n	800824c <follow_path+0xd8>
				break;
 8008246:	bf00      	nop
 8008248:	e000      	b.n	800824c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800824a:	bf00      	nop
			}
		}
	}

	return res;
 800824c:	7dfb      	ldrb	r3, [r7, #23]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3718      	adds	r7, #24
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008256:	b480      	push	{r7}
 8008258:	b087      	sub	sp, #28
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800825e:	f04f 33ff 	mov.w	r3, #4294967295
 8008262:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d031      	beq.n	80082d0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	617b      	str	r3, [r7, #20]
 8008272:	e002      	b.n	800827a <get_ldnumber+0x24>
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	3301      	adds	r3, #1
 8008278:	617b      	str	r3, [r7, #20]
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	2b20      	cmp	r3, #32
 8008280:	d903      	bls.n	800828a <get_ldnumber+0x34>
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	2b3a      	cmp	r3, #58	; 0x3a
 8008288:	d1f4      	bne.n	8008274 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	2b3a      	cmp	r3, #58	; 0x3a
 8008290:	d11c      	bne.n	80082cc <get_ldnumber+0x76>
			tp = *path;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	1c5a      	adds	r2, r3, #1
 800829c:	60fa      	str	r2, [r7, #12]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	3b30      	subs	r3, #48	; 0x30
 80082a2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	2b09      	cmp	r3, #9
 80082a8:	d80e      	bhi.n	80082c8 <get_ldnumber+0x72>
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d10a      	bne.n	80082c8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d107      	bne.n	80082c8 <get_ldnumber+0x72>
					vol = (int)i;
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	3301      	adds	r3, #1
 80082c0:	617b      	str	r3, [r7, #20]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	697a      	ldr	r2, [r7, #20]
 80082c6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	e002      	b.n	80082d2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80082cc:	2300      	movs	r3, #0
 80082ce:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80082d0:	693b      	ldr	r3, [r7, #16]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	371c      	adds	r7, #28
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
	...

080082e0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	70da      	strb	r2, [r3, #3]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f04f 32ff 	mov.w	r2, #4294967295
 80082f6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7ff f81c 	bl	8007338 <move_window>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d001      	beq.n	800830a <check_fs+0x2a>
 8008306:	2304      	movs	r3, #4
 8008308:	e038      	b.n	800837c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	3330      	adds	r3, #48	; 0x30
 800830e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008312:	4618      	mov	r0, r3
 8008314:	f7fe fd60 	bl	8006dd8 <ld_word>
 8008318:	4603      	mov	r3, r0
 800831a:	461a      	mov	r2, r3
 800831c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008320:	429a      	cmp	r2, r3
 8008322:	d001      	beq.n	8008328 <check_fs+0x48>
 8008324:	2303      	movs	r3, #3
 8008326:	e029      	b.n	800837c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800832e:	2be9      	cmp	r3, #233	; 0xe9
 8008330:	d009      	beq.n	8008346 <check_fs+0x66>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008338:	2beb      	cmp	r3, #235	; 0xeb
 800833a:	d11e      	bne.n	800837a <check_fs+0x9a>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008342:	2b90      	cmp	r3, #144	; 0x90
 8008344:	d119      	bne.n	800837a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	3330      	adds	r3, #48	; 0x30
 800834a:	3336      	adds	r3, #54	; 0x36
 800834c:	4618      	mov	r0, r3
 800834e:	f7fe fd5b 	bl	8006e08 <ld_dword>
 8008352:	4603      	mov	r3, r0
 8008354:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008358:	4a0a      	ldr	r2, [pc, #40]	; (8008384 <check_fs+0xa4>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d101      	bne.n	8008362 <check_fs+0x82>
 800835e:	2300      	movs	r3, #0
 8008360:	e00c      	b.n	800837c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	3330      	adds	r3, #48	; 0x30
 8008366:	3352      	adds	r3, #82	; 0x52
 8008368:	4618      	mov	r0, r3
 800836a:	f7fe fd4d 	bl	8006e08 <ld_dword>
 800836e:	4603      	mov	r3, r0
 8008370:	4a05      	ldr	r2, [pc, #20]	; (8008388 <check_fs+0xa8>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d101      	bne.n	800837a <check_fs+0x9a>
 8008376:	2300      	movs	r3, #0
 8008378:	e000      	b.n	800837c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800837a:	2302      	movs	r3, #2
}
 800837c:	4618      	mov	r0, r3
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	00544146 	.word	0x00544146
 8008388:	33544146 	.word	0x33544146

0800838c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b096      	sub	sp, #88	; 0x58
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	4613      	mov	r3, r2
 8008398:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2200      	movs	r2, #0
 800839e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f7ff ff58 	bl	8008256 <get_ldnumber>
 80083a6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80083a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	da01      	bge.n	80083b2 <find_volume+0x26>
 80083ae:	230b      	movs	r3, #11
 80083b0:	e22d      	b.n	800880e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80083b2:	4aa1      	ldr	r2, [pc, #644]	; (8008638 <find_volume+0x2ac>)
 80083b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083ba:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80083bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d101      	bne.n	80083c6 <find_volume+0x3a>
 80083c2:	230c      	movs	r3, #12
 80083c4:	e223      	b.n	800880e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083ca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80083cc:	79fb      	ldrb	r3, [r7, #7]
 80083ce:	f023 0301 	bic.w	r3, r3, #1
 80083d2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80083d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d01a      	beq.n	8008412 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80083dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083de:	785b      	ldrb	r3, [r3, #1]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7fe fc5b 	bl	8006c9c <disk_status>
 80083e6:	4603      	mov	r3, r0
 80083e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80083ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80083f0:	f003 0301 	and.w	r3, r3, #1
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10c      	bne.n	8008412 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80083f8:	79fb      	ldrb	r3, [r7, #7]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d007      	beq.n	800840e <find_volume+0x82>
 80083fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008402:	f003 0304 	and.w	r3, r3, #4
 8008406:	2b00      	cmp	r3, #0
 8008408:	d001      	beq.n	800840e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800840a:	230a      	movs	r3, #10
 800840c:	e1ff      	b.n	800880e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800840e:	2300      	movs	r3, #0
 8008410:	e1fd      	b.n	800880e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008414:	2200      	movs	r2, #0
 8008416:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800841a:	b2da      	uxtb	r2, r3
 800841c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008422:	785b      	ldrb	r3, [r3, #1]
 8008424:	4618      	mov	r0, r3
 8008426:	f7fe fc53 	bl	8006cd0 <disk_initialize>
 800842a:	4603      	mov	r3, r0
 800842c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008430:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008434:	f003 0301 	and.w	r3, r3, #1
 8008438:	2b00      	cmp	r3, #0
 800843a:	d001      	beq.n	8008440 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800843c:	2303      	movs	r3, #3
 800843e:	e1e6      	b.n	800880e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008440:	79fb      	ldrb	r3, [r7, #7]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d007      	beq.n	8008456 <find_volume+0xca>
 8008446:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800844a:	f003 0304 	and.w	r3, r3, #4
 800844e:	2b00      	cmp	r3, #0
 8008450:	d001      	beq.n	8008456 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008452:	230a      	movs	r3, #10
 8008454:	e1db      	b.n	800880e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008456:	2300      	movs	r3, #0
 8008458:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800845a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800845c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800845e:	f7ff ff3f 	bl	80082e0 <check_fs>
 8008462:	4603      	mov	r3, r0
 8008464:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008468:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800846c:	2b02      	cmp	r3, #2
 800846e:	d149      	bne.n	8008504 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008470:	2300      	movs	r3, #0
 8008472:	643b      	str	r3, [r7, #64]	; 0x40
 8008474:	e01e      	b.n	80084b4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008478:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800847c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800847e:	011b      	lsls	r3, r3, #4
 8008480:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008484:	4413      	add	r3, r2
 8008486:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848a:	3304      	adds	r3, #4
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d006      	beq.n	80084a0 <find_volume+0x114>
 8008492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008494:	3308      	adds	r3, #8
 8008496:	4618      	mov	r0, r3
 8008498:	f7fe fcb6 	bl	8006e08 <ld_dword>
 800849c:	4602      	mov	r2, r0
 800849e:	e000      	b.n	80084a2 <find_volume+0x116>
 80084a0:	2200      	movs	r2, #0
 80084a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	3358      	adds	r3, #88	; 0x58
 80084a8:	443b      	add	r3, r7
 80084aa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80084ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084b0:	3301      	adds	r3, #1
 80084b2:	643b      	str	r3, [r7, #64]	; 0x40
 80084b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d9dd      	bls.n	8008476 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80084ba:	2300      	movs	r3, #0
 80084bc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80084be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <find_volume+0x13e>
 80084c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084c6:	3b01      	subs	r3, #1
 80084c8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80084ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	3358      	adds	r3, #88	; 0x58
 80084d0:	443b      	add	r3, r7
 80084d2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80084d6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80084d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d005      	beq.n	80084ea <find_volume+0x15e>
 80084de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80084e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084e2:	f7ff fefd 	bl	80082e0 <check_fs>
 80084e6:	4603      	mov	r3, r0
 80084e8:	e000      	b.n	80084ec <find_volume+0x160>
 80084ea:	2303      	movs	r3, #3
 80084ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80084f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d905      	bls.n	8008504 <find_volume+0x178>
 80084f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084fa:	3301      	adds	r3, #1
 80084fc:	643b      	str	r3, [r7, #64]	; 0x40
 80084fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008500:	2b03      	cmp	r3, #3
 8008502:	d9e2      	bls.n	80084ca <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008504:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008508:	2b04      	cmp	r3, #4
 800850a:	d101      	bne.n	8008510 <find_volume+0x184>
 800850c:	2301      	movs	r3, #1
 800850e:	e17e      	b.n	800880e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008510:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008514:	2b01      	cmp	r3, #1
 8008516:	d901      	bls.n	800851c <find_volume+0x190>
 8008518:	230d      	movs	r3, #13
 800851a:	e178      	b.n	800880e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800851c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851e:	3330      	adds	r3, #48	; 0x30
 8008520:	330b      	adds	r3, #11
 8008522:	4618      	mov	r0, r3
 8008524:	f7fe fc58 	bl	8006dd8 <ld_word>
 8008528:	4603      	mov	r3, r0
 800852a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800852e:	d001      	beq.n	8008534 <find_volume+0x1a8>
 8008530:	230d      	movs	r3, #13
 8008532:	e16c      	b.n	800880e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008536:	3330      	adds	r3, #48	; 0x30
 8008538:	3316      	adds	r3, #22
 800853a:	4618      	mov	r0, r3
 800853c:	f7fe fc4c 	bl	8006dd8 <ld_word>
 8008540:	4603      	mov	r3, r0
 8008542:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008546:	2b00      	cmp	r3, #0
 8008548:	d106      	bne.n	8008558 <find_volume+0x1cc>
 800854a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854c:	3330      	adds	r3, #48	; 0x30
 800854e:	3324      	adds	r3, #36	; 0x24
 8008550:	4618      	mov	r0, r3
 8008552:	f7fe fc59 	bl	8006e08 <ld_dword>
 8008556:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800855c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800855e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008560:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008566:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856a:	789b      	ldrb	r3, [r3, #2]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d005      	beq.n	800857c <find_volume+0x1f0>
 8008570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008572:	789b      	ldrb	r3, [r3, #2]
 8008574:	2b02      	cmp	r3, #2
 8008576:	d001      	beq.n	800857c <find_volume+0x1f0>
 8008578:	230d      	movs	r3, #13
 800857a:	e148      	b.n	800880e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800857c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857e:	789b      	ldrb	r3, [r3, #2]
 8008580:	461a      	mov	r2, r3
 8008582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008584:	fb02 f303 	mul.w	r3, r2, r3
 8008588:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800858a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008590:	b29a      	uxth	r2, r3
 8008592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008594:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008598:	895b      	ldrh	r3, [r3, #10]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d008      	beq.n	80085b0 <find_volume+0x224>
 800859e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a0:	895b      	ldrh	r3, [r3, #10]
 80085a2:	461a      	mov	r2, r3
 80085a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a6:	895b      	ldrh	r3, [r3, #10]
 80085a8:	3b01      	subs	r3, #1
 80085aa:	4013      	ands	r3, r2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <find_volume+0x228>
 80085b0:	230d      	movs	r3, #13
 80085b2:	e12c      	b.n	800880e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80085b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b6:	3330      	adds	r3, #48	; 0x30
 80085b8:	3311      	adds	r3, #17
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fe fc0c 	bl	8006dd8 <ld_word>
 80085c0:	4603      	mov	r3, r0
 80085c2:	461a      	mov	r2, r3
 80085c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80085c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ca:	891b      	ldrh	r3, [r3, #8]
 80085cc:	f003 030f 	and.w	r3, r3, #15
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d001      	beq.n	80085da <find_volume+0x24e>
 80085d6:	230d      	movs	r3, #13
 80085d8:	e119      	b.n	800880e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80085da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085dc:	3330      	adds	r3, #48	; 0x30
 80085de:	3313      	adds	r3, #19
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fe fbf9 	bl	8006dd8 <ld_word>
 80085e6:	4603      	mov	r3, r0
 80085e8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80085ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d106      	bne.n	80085fe <find_volume+0x272>
 80085f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f2:	3330      	adds	r3, #48	; 0x30
 80085f4:	3320      	adds	r3, #32
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fe fc06 	bl	8006e08 <ld_dword>
 80085fc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80085fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008600:	3330      	adds	r3, #48	; 0x30
 8008602:	330e      	adds	r3, #14
 8008604:	4618      	mov	r0, r3
 8008606:	f7fe fbe7 	bl	8006dd8 <ld_word>
 800860a:	4603      	mov	r3, r0
 800860c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800860e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008610:	2b00      	cmp	r3, #0
 8008612:	d101      	bne.n	8008618 <find_volume+0x28c>
 8008614:	230d      	movs	r3, #13
 8008616:	e0fa      	b.n	800880e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008618:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800861a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800861c:	4413      	add	r3, r2
 800861e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008620:	8912      	ldrh	r2, [r2, #8]
 8008622:	0912      	lsrs	r2, r2, #4
 8008624:	b292      	uxth	r2, r2
 8008626:	4413      	add	r3, r2
 8008628:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800862a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800862c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862e:	429a      	cmp	r2, r3
 8008630:	d204      	bcs.n	800863c <find_volume+0x2b0>
 8008632:	230d      	movs	r3, #13
 8008634:	e0eb      	b.n	800880e <find_volume+0x482>
 8008636:	bf00      	nop
 8008638:	2000729c 	.word	0x2000729c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800863c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800863e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008644:	8952      	ldrh	r2, [r2, #10]
 8008646:	fbb3 f3f2 	udiv	r3, r3, r2
 800864a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	2b00      	cmp	r3, #0
 8008650:	d101      	bne.n	8008656 <find_volume+0x2ca>
 8008652:	230d      	movs	r3, #13
 8008654:	e0db      	b.n	800880e <find_volume+0x482>
		fmt = FS_FAT32;
 8008656:	2303      	movs	r3, #3
 8008658:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800865c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008662:	4293      	cmp	r3, r2
 8008664:	d802      	bhi.n	800866c <find_volume+0x2e0>
 8008666:	2302      	movs	r3, #2
 8008668:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008672:	4293      	cmp	r3, r2
 8008674:	d802      	bhi.n	800867c <find_volume+0x2f0>
 8008676:	2301      	movs	r3, #1
 8008678:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867e:	1c9a      	adds	r2, r3, #2
 8008680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008682:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008686:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008688:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800868a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800868c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800868e:	441a      	add	r2, r3
 8008690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008692:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008694:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008698:	441a      	add	r2, r3
 800869a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800869e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086a2:	2b03      	cmp	r3, #3
 80086a4:	d11e      	bne.n	80086e4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80086a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a8:	3330      	adds	r3, #48	; 0x30
 80086aa:	332a      	adds	r3, #42	; 0x2a
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7fe fb93 	bl	8006dd8 <ld_word>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d001      	beq.n	80086bc <find_volume+0x330>
 80086b8:	230d      	movs	r3, #13
 80086ba:	e0a8      	b.n	800880e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80086bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086be:	891b      	ldrh	r3, [r3, #8]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d001      	beq.n	80086c8 <find_volume+0x33c>
 80086c4:	230d      	movs	r3, #13
 80086c6:	e0a2      	b.n	800880e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80086c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ca:	3330      	adds	r3, #48	; 0x30
 80086cc:	332c      	adds	r3, #44	; 0x2c
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fe fb9a 	bl	8006e08 <ld_dword>
 80086d4:	4602      	mov	r2, r0
 80086d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80086da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086dc:	695b      	ldr	r3, [r3, #20]
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	647b      	str	r3, [r7, #68]	; 0x44
 80086e2:	e01f      	b.n	8008724 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80086e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e6:	891b      	ldrh	r3, [r3, #8]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d101      	bne.n	80086f0 <find_volume+0x364>
 80086ec:	230d      	movs	r3, #13
 80086ee:	e08e      	b.n	800880e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80086f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f2:	6a1a      	ldr	r2, [r3, #32]
 80086f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086f6:	441a      	add	r2, r3
 80086f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fa:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80086fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008700:	2b02      	cmp	r3, #2
 8008702:	d103      	bne.n	800870c <find_volume+0x380>
 8008704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	e00a      	b.n	8008722 <find_volume+0x396>
 800870c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870e:	695a      	ldr	r2, [r3, #20]
 8008710:	4613      	mov	r3, r2
 8008712:	005b      	lsls	r3, r3, #1
 8008714:	4413      	add	r3, r2
 8008716:	085a      	lsrs	r2, r3, #1
 8008718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871a:	695b      	ldr	r3, [r3, #20]
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008722:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008726:	699a      	ldr	r2, [r3, #24]
 8008728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800872a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800872e:	0a5b      	lsrs	r3, r3, #9
 8008730:	429a      	cmp	r2, r3
 8008732:	d201      	bcs.n	8008738 <find_volume+0x3ac>
 8008734:	230d      	movs	r3, #13
 8008736:	e06a      	b.n	800880e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873a:	f04f 32ff 	mov.w	r2, #4294967295
 800873e:	611a      	str	r2, [r3, #16]
 8008740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008742:	691a      	ldr	r2, [r3, #16]
 8008744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008746:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874a:	2280      	movs	r2, #128	; 0x80
 800874c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800874e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008752:	2b03      	cmp	r3, #3
 8008754:	d149      	bne.n	80087ea <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008758:	3330      	adds	r3, #48	; 0x30
 800875a:	3330      	adds	r3, #48	; 0x30
 800875c:	4618      	mov	r0, r3
 800875e:	f7fe fb3b 	bl	8006dd8 <ld_word>
 8008762:	4603      	mov	r3, r0
 8008764:	2b01      	cmp	r3, #1
 8008766:	d140      	bne.n	80087ea <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800876a:	3301      	adds	r3, #1
 800876c:	4619      	mov	r1, r3
 800876e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008770:	f7fe fde2 	bl	8007338 <move_window>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d137      	bne.n	80087ea <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800877a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877c:	2200      	movs	r2, #0
 800877e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008782:	3330      	adds	r3, #48	; 0x30
 8008784:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008788:	4618      	mov	r0, r3
 800878a:	f7fe fb25 	bl	8006dd8 <ld_word>
 800878e:	4603      	mov	r3, r0
 8008790:	461a      	mov	r2, r3
 8008792:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008796:	429a      	cmp	r2, r3
 8008798:	d127      	bne.n	80087ea <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800879a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879c:	3330      	adds	r3, #48	; 0x30
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fe fb32 	bl	8006e08 <ld_dword>
 80087a4:	4603      	mov	r3, r0
 80087a6:	4a1c      	ldr	r2, [pc, #112]	; (8008818 <find_volume+0x48c>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d11e      	bne.n	80087ea <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80087ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ae:	3330      	adds	r3, #48	; 0x30
 80087b0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7fe fb27 	bl	8006e08 <ld_dword>
 80087ba:	4603      	mov	r3, r0
 80087bc:	4a17      	ldr	r2, [pc, #92]	; (800881c <find_volume+0x490>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d113      	bne.n	80087ea <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80087c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c4:	3330      	adds	r3, #48	; 0x30
 80087c6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fe fb1c 	bl	8006e08 <ld_dword>
 80087d0:	4602      	mov	r2, r0
 80087d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80087d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d8:	3330      	adds	r3, #48	; 0x30
 80087da:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fe fb12 	bl	8006e08 <ld_dword>
 80087e4:	4602      	mov	r2, r0
 80087e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80087ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ec:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80087f0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80087f2:	4b0b      	ldr	r3, [pc, #44]	; (8008820 <find_volume+0x494>)
 80087f4:	881b      	ldrh	r3, [r3, #0]
 80087f6:	3301      	adds	r3, #1
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	4b09      	ldr	r3, [pc, #36]	; (8008820 <find_volume+0x494>)
 80087fc:	801a      	strh	r2, [r3, #0]
 80087fe:	4b08      	ldr	r3, [pc, #32]	; (8008820 <find_volume+0x494>)
 8008800:	881a      	ldrh	r2, [r3, #0]
 8008802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008804:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008806:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008808:	f7fe fd2e 	bl	8007268 <clear_lock>
#endif
	return FR_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3758      	adds	r7, #88	; 0x58
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	41615252 	.word	0x41615252
 800881c:	61417272 	.word	0x61417272
 8008820:	200072a0 	.word	0x200072a0

08008824 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800882e:	2309      	movs	r3, #9
 8008830:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d01c      	beq.n	8008872 <validate+0x4e>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d018      	beq.n	8008872 <validate+0x4e>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d013      	beq.n	8008872 <validate+0x4e>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	889a      	ldrh	r2, [r3, #4]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	88db      	ldrh	r3, [r3, #6]
 8008854:	429a      	cmp	r2, r3
 8008856:	d10c      	bne.n	8008872 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	785b      	ldrb	r3, [r3, #1]
 800885e:	4618      	mov	r0, r3
 8008860:	f7fe fa1c 	bl	8006c9c <disk_status>
 8008864:	4603      	mov	r3, r0
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	2b00      	cmp	r3, #0
 800886c:	d101      	bne.n	8008872 <validate+0x4e>
			res = FR_OK;
 800886e:	2300      	movs	r3, #0
 8008870:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008872:	7bfb      	ldrb	r3, [r7, #15]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d102      	bne.n	800887e <validate+0x5a>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	e000      	b.n	8008880 <validate+0x5c>
 800887e:	2300      	movs	r3, #0
 8008880:	683a      	ldr	r2, [r7, #0]
 8008882:	6013      	str	r3, [r2, #0]
	return res;
 8008884:	7bfb      	ldrb	r3, [r7, #15]
}
 8008886:	4618      	mov	r0, r3
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
	...

08008890 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b088      	sub	sp, #32
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	4613      	mov	r3, r2
 800889c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80088a2:	f107 0310 	add.w	r3, r7, #16
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7ff fcd5 	bl	8008256 <get_ldnumber>
 80088ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	da01      	bge.n	80088b8 <f_mount+0x28>
 80088b4:	230b      	movs	r3, #11
 80088b6:	e02b      	b.n	8008910 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80088b8:	4a17      	ldr	r2, [pc, #92]	; (8008918 <f_mount+0x88>)
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d005      	beq.n	80088d4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80088c8:	69b8      	ldr	r0, [r7, #24]
 80088ca:	f7fe fccd 	bl	8007268 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	2200      	movs	r2, #0
 80088d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d002      	beq.n	80088e0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	490d      	ldr	r1, [pc, #52]	; (8008918 <f_mount+0x88>)
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d002      	beq.n	80088f6 <f_mount+0x66>
 80088f0:	79fb      	ldrb	r3, [r7, #7]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d001      	beq.n	80088fa <f_mount+0x6a>
 80088f6:	2300      	movs	r3, #0
 80088f8:	e00a      	b.n	8008910 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80088fa:	f107 010c 	add.w	r1, r7, #12
 80088fe:	f107 0308 	add.w	r3, r7, #8
 8008902:	2200      	movs	r2, #0
 8008904:	4618      	mov	r0, r3
 8008906:	f7ff fd41 	bl	800838c <find_volume>
 800890a:	4603      	mov	r3, r0
 800890c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800890e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008910:	4618      	mov	r0, r3
 8008912:	3720      	adds	r7, #32
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	2000729c 	.word	0x2000729c

0800891c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b098      	sub	sp, #96	; 0x60
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	4613      	mov	r3, r2
 8008928:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d101      	bne.n	8008934 <f_open+0x18>
 8008930:	2309      	movs	r3, #9
 8008932:	e1ad      	b.n	8008c90 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008934:	79fb      	ldrb	r3, [r7, #7]
 8008936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800893a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800893c:	79fa      	ldrb	r2, [r7, #7]
 800893e:	f107 0110 	add.w	r1, r7, #16
 8008942:	f107 0308 	add.w	r3, r7, #8
 8008946:	4618      	mov	r0, r3
 8008948:	f7ff fd20 	bl	800838c <find_volume>
 800894c:	4603      	mov	r3, r0
 800894e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008952:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008956:	2b00      	cmp	r3, #0
 8008958:	f040 8191 	bne.w	8008c7e <f_open+0x362>
		dj.obj.fs = fs;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	f107 0314 	add.w	r3, r7, #20
 8008966:	4611      	mov	r1, r2
 8008968:	4618      	mov	r0, r3
 800896a:	f7ff fc03 	bl	8008174 <follow_path>
 800896e:	4603      	mov	r3, r0
 8008970:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008974:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008978:	2b00      	cmp	r3, #0
 800897a:	d11a      	bne.n	80089b2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800897c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008980:	b25b      	sxtb	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	da03      	bge.n	800898e <f_open+0x72>
				res = FR_INVALID_NAME;
 8008986:	2306      	movs	r3, #6
 8008988:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800898c:	e011      	b.n	80089b2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800898e:	79fb      	ldrb	r3, [r7, #7]
 8008990:	f023 0301 	bic.w	r3, r3, #1
 8008994:	2b00      	cmp	r3, #0
 8008996:	bf14      	ite	ne
 8008998:	2301      	movne	r3, #1
 800899a:	2300      	moveq	r3, #0
 800899c:	b2db      	uxtb	r3, r3
 800899e:	461a      	mov	r2, r3
 80089a0:	f107 0314 	add.w	r3, r7, #20
 80089a4:	4611      	mov	r1, r2
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fe fb16 	bl	8006fd8 <chk_lock>
 80089ac:	4603      	mov	r3, r0
 80089ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80089b2:	79fb      	ldrb	r3, [r7, #7]
 80089b4:	f003 031c 	and.w	r3, r3, #28
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d07f      	beq.n	8008abc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80089bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d017      	beq.n	80089f4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80089c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089c8:	2b04      	cmp	r3, #4
 80089ca:	d10e      	bne.n	80089ea <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80089cc:	f7fe fb60 	bl	8007090 <enq_lock>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d006      	beq.n	80089e4 <f_open+0xc8>
 80089d6:	f107 0314 	add.w	r3, r7, #20
 80089da:	4618      	mov	r0, r3
 80089dc:	f7ff faa4 	bl	8007f28 <dir_register>
 80089e0:	4603      	mov	r3, r0
 80089e2:	e000      	b.n	80089e6 <f_open+0xca>
 80089e4:	2312      	movs	r3, #18
 80089e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80089ea:	79fb      	ldrb	r3, [r7, #7]
 80089ec:	f043 0308 	orr.w	r3, r3, #8
 80089f0:	71fb      	strb	r3, [r7, #7]
 80089f2:	e010      	b.n	8008a16 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80089f4:	7ebb      	ldrb	r3, [r7, #26]
 80089f6:	f003 0311 	and.w	r3, r3, #17
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d003      	beq.n	8008a06 <f_open+0xea>
					res = FR_DENIED;
 80089fe:	2307      	movs	r3, #7
 8008a00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008a04:	e007      	b.n	8008a16 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008a06:	79fb      	ldrb	r3, [r7, #7]
 8008a08:	f003 0304 	and.w	r3, r3, #4
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d002      	beq.n	8008a16 <f_open+0xfa>
 8008a10:	2308      	movs	r3, #8
 8008a12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008a16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d168      	bne.n	8008af0 <f_open+0x1d4>
 8008a1e:	79fb      	ldrb	r3, [r7, #7]
 8008a20:	f003 0308 	and.w	r3, r3, #8
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d063      	beq.n	8008af0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008a28:	f7fd fbf8 	bl	800621c <get_fattime>
 8008a2c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a30:	330e      	adds	r3, #14
 8008a32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7fe fa25 	bl	8006e84 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a3c:	3316      	adds	r3, #22
 8008a3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7fe fa1f 	bl	8006e84 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a48:	330b      	adds	r3, #11
 8008a4a:	2220      	movs	r2, #32
 8008a4c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a52:	4611      	mov	r1, r2
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7ff f976 	bl	8007d46 <ld_clust>
 8008a5a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008a60:	2200      	movs	r2, #0
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7ff f98e 	bl	8007d84 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a6a:	331c      	adds	r3, #28
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fe fa08 	bl	8006e84 <st_dword>
					fs->wflag = 1;
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	2201      	movs	r2, #1
 8008a78:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d037      	beq.n	8008af0 <f_open+0x1d4>
						dw = fs->winsect;
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a84:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008a86:	f107 0314 	add.w	r3, r7, #20
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7fe fea1 	bl	80077d6 <remove_chain>
 8008a94:	4603      	mov	r3, r0
 8008a96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008a9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d126      	bne.n	8008af0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fe fc46 	bl	8007338 <move_window>
 8008aac:	4603      	mov	r3, r0
 8008aae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ab6:	3a01      	subs	r2, #1
 8008ab8:	60da      	str	r2, [r3, #12]
 8008aba:	e019      	b.n	8008af0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008abc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d115      	bne.n	8008af0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008ac4:	7ebb      	ldrb	r3, [r7, #26]
 8008ac6:	f003 0310 	and.w	r3, r3, #16
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d003      	beq.n	8008ad6 <f_open+0x1ba>
					res = FR_NO_FILE;
 8008ace:	2304      	movs	r3, #4
 8008ad0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008ad4:	e00c      	b.n	8008af0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008ad6:	79fb      	ldrb	r3, [r7, #7]
 8008ad8:	f003 0302 	and.w	r3, r3, #2
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d007      	beq.n	8008af0 <f_open+0x1d4>
 8008ae0:	7ebb      	ldrb	r3, [r7, #26]
 8008ae2:	f003 0301 	and.w	r3, r3, #1
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d002      	beq.n	8008af0 <f_open+0x1d4>
						res = FR_DENIED;
 8008aea:	2307      	movs	r3, #7
 8008aec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008af0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d128      	bne.n	8008b4a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008af8:	79fb      	ldrb	r3, [r7, #7]
 8008afa:	f003 0308 	and.w	r3, r3, #8
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d003      	beq.n	8008b0a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008b02:	79fb      	ldrb	r3, [r7, #7]
 8008b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b08:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008b12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008b18:	79fb      	ldrb	r3, [r7, #7]
 8008b1a:	f023 0301 	bic.w	r3, r3, #1
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	bf14      	ite	ne
 8008b22:	2301      	movne	r3, #1
 8008b24:	2300      	moveq	r3, #0
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	461a      	mov	r2, r3
 8008b2a:	f107 0314 	add.w	r3, r7, #20
 8008b2e:	4611      	mov	r1, r2
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7fe facf 	bl	80070d4 <inc_lock>
 8008b36:	4602      	mov	r2, r0
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d102      	bne.n	8008b4a <f_open+0x22e>
 8008b44:	2302      	movs	r3, #2
 8008b46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008b4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	f040 8095 	bne.w	8008c7e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b58:	4611      	mov	r1, r2
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7ff f8f3 	bl	8007d46 <ld_clust>
 8008b60:	4602      	mov	r2, r0
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b68:	331c      	adds	r3, #28
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7fe f94c 	bl	8006e08 <ld_dword>
 8008b70:	4602      	mov	r2, r0
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	88da      	ldrh	r2, [r3, #6]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	79fa      	ldrb	r2, [r7, #7]
 8008b8e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	3330      	adds	r3, #48	; 0x30
 8008ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008baa:	2100      	movs	r1, #0
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7fe f9b6 	bl	8006f1e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008bb2:	79fb      	ldrb	r3, [r7, #7]
 8008bb4:	f003 0320 	and.w	r3, r3, #32
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d060      	beq.n	8008c7e <f_open+0x362>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d05c      	beq.n	8008c7e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	68da      	ldr	r2, [r3, #12]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	895b      	ldrh	r3, [r3, #10]
 8008bd0:	025b      	lsls	r3, r3, #9
 8008bd2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	657b      	str	r3, [r7, #84]	; 0x54
 8008be0:	e016      	b.n	8008c10 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7fe fc61 	bl	80074ae <get_fat>
 8008bec:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d802      	bhi.n	8008bfa <f_open+0x2de>
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008bfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c00:	d102      	bne.n	8008c08 <f_open+0x2ec>
 8008c02:	2301      	movs	r3, #1
 8008c04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008c08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	657b      	str	r3, [r7, #84]	; 0x54
 8008c10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d103      	bne.n	8008c20 <f_open+0x304>
 8008c18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d8e0      	bhi.n	8008be2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c24:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008c26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d127      	bne.n	8008c7e <f_open+0x362>
 8008c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d022      	beq.n	8008c7e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7fe fc17 	bl	8007470 <clust2sect>
 8008c42:	6478      	str	r0, [r7, #68]	; 0x44
 8008c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d103      	bne.n	8008c52 <f_open+0x336>
						res = FR_INT_ERR;
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008c50:	e015      	b.n	8008c7e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c54:	0a5a      	lsrs	r2, r3, #9
 8008c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c58:	441a      	add	r2, r3
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	7858      	ldrb	r0, [r3, #1]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6a1a      	ldr	r2, [r3, #32]
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	f7fe f855 	bl	8006d1c <disk_read>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d002      	beq.n	8008c7e <f_open+0x362>
 8008c78:	2301      	movs	r3, #1
 8008c7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008c7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d002      	beq.n	8008c8c <f_open+0x370>
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008c8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3760      	adds	r7, #96	; 0x60
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b08e      	sub	sp, #56	; 0x38
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
 8008ca4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	2200      	movs	r2, #0
 8008cae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f107 0214 	add.w	r2, r7, #20
 8008cb6:	4611      	mov	r1, r2
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7ff fdb3 	bl	8008824 <validate>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008cc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d107      	bne.n	8008cdc <f_read+0x44>
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	7d5b      	ldrb	r3, [r3, #21]
 8008cd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008cd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d002      	beq.n	8008ce2 <f_read+0x4a>
 8008cdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ce0:	e115      	b.n	8008f0e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	7d1b      	ldrb	r3, [r3, #20]
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d101      	bne.n	8008cf2 <f_read+0x5a>
 8008cee:	2307      	movs	r3, #7
 8008cf0:	e10d      	b.n	8008f0e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	68da      	ldr	r2, [r3, #12]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	699b      	ldr	r3, [r3, #24]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	6a3b      	ldr	r3, [r7, #32]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	f240 80fe 	bls.w	8008f04 <f_read+0x26c>
 8008d08:	6a3b      	ldr	r3, [r7, #32]
 8008d0a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008d0c:	e0fa      	b.n	8008f04 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f040 80c6 	bne.w	8008ea8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	0a5b      	lsrs	r3, r3, #9
 8008d22:	697a      	ldr	r2, [r7, #20]
 8008d24:	8952      	ldrh	r2, [r2, #10]
 8008d26:	3a01      	subs	r2, #1
 8008d28:	4013      	ands	r3, r2
 8008d2a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d12f      	bne.n	8008d92 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d103      	bne.n	8008d42 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	633b      	str	r3, [r7, #48]	; 0x30
 8008d40:	e013      	b.n	8008d6a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d007      	beq.n	8008d5a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	4619      	mov	r1, r3
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f7fe fe3d 	bl	80079d0 <clmt_clust>
 8008d56:	6338      	str	r0, [r7, #48]	; 0x30
 8008d58:	e007      	b.n	8008d6a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	69db      	ldr	r3, [r3, #28]
 8008d60:	4619      	mov	r1, r3
 8008d62:	4610      	mov	r0, r2
 8008d64:	f7fe fba3 	bl	80074ae <get_fat>
 8008d68:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d804      	bhi.n	8008d7a <f_read+0xe2>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2202      	movs	r2, #2
 8008d74:	755a      	strb	r2, [r3, #21]
 8008d76:	2302      	movs	r3, #2
 8008d78:	e0c9      	b.n	8008f0e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d80:	d104      	bne.n	8008d8c <f_read+0xf4>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2201      	movs	r2, #1
 8008d86:	755a      	strb	r2, [r3, #21]
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e0c0      	b.n	8008f0e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d90:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	69db      	ldr	r3, [r3, #28]
 8008d98:	4619      	mov	r1, r3
 8008d9a:	4610      	mov	r0, r2
 8008d9c:	f7fe fb68 	bl	8007470 <clust2sect>
 8008da0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d104      	bne.n	8008db2 <f_read+0x11a>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2202      	movs	r2, #2
 8008dac:	755a      	strb	r2, [r3, #21]
 8008dae:	2302      	movs	r3, #2
 8008db0:	e0ad      	b.n	8008f0e <f_read+0x276>
			sect += csect;
 8008db2:	69ba      	ldr	r2, [r7, #24]
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	4413      	add	r3, r2
 8008db8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	0a5b      	lsrs	r3, r3, #9
 8008dbe:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d039      	beq.n	8008e3a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008dc6:	69fa      	ldr	r2, [r7, #28]
 8008dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dca:	4413      	add	r3, r2
 8008dcc:	697a      	ldr	r2, [r7, #20]
 8008dce:	8952      	ldrh	r2, [r2, #10]
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d905      	bls.n	8008de0 <f_read+0x148>
					cc = fs->csize - csect;
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	895b      	ldrh	r3, [r3, #10]
 8008dd8:	461a      	mov	r2, r3
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	1ad3      	subs	r3, r2, r3
 8008dde:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	7858      	ldrb	r0, [r3, #1]
 8008de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de6:	69ba      	ldr	r2, [r7, #24]
 8008de8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008dea:	f7fd ff97 	bl	8006d1c <disk_read>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d004      	beq.n	8008dfe <f_read+0x166>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2201      	movs	r2, #1
 8008df8:	755a      	strb	r2, [r3, #21]
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e087      	b.n	8008f0e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	7d1b      	ldrb	r3, [r3, #20]
 8008e02:	b25b      	sxtb	r3, r3
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	da14      	bge.n	8008e32 <f_read+0x19a>
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6a1a      	ldr	r2, [r3, #32]
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	1ad3      	subs	r3, r2, r3
 8008e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d90d      	bls.n	8008e32 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6a1a      	ldr	r2, [r3, #32]
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	025b      	lsls	r3, r3, #9
 8008e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e22:	18d0      	adds	r0, r2, r3
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	3330      	adds	r3, #48	; 0x30
 8008e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	f7fe f855 	bl	8006edc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e34:	025b      	lsls	r3, r3, #9
 8008e36:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008e38:	e050      	b.n	8008edc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6a1b      	ldr	r3, [r3, #32]
 8008e3e:	69ba      	ldr	r2, [r7, #24]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d02e      	beq.n	8008ea2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	7d1b      	ldrb	r3, [r3, #20]
 8008e48:	b25b      	sxtb	r3, r3
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	da18      	bge.n	8008e80 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	7858      	ldrb	r0, [r3, #1]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6a1a      	ldr	r2, [r3, #32]
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	f7fd ff7d 	bl	8006d5c <disk_write>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d004      	beq.n	8008e72 <f_read+0x1da>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	755a      	strb	r2, [r3, #21]
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e04d      	b.n	8008f0e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	7d1b      	ldrb	r3, [r3, #20]
 8008e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e7a:	b2da      	uxtb	r2, r3
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	7858      	ldrb	r0, [r3, #1]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	69ba      	ldr	r2, [r7, #24]
 8008e8e:	f7fd ff45 	bl	8006d1c <disk_read>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d004      	beq.n	8008ea2 <f_read+0x20a>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	755a      	strb	r2, [r3, #21]
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e035      	b.n	8008f0e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	69ba      	ldr	r2, [r7, #24]
 8008ea6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d901      	bls.n	8008ec2 <f_read+0x22a>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	699b      	ldr	r3, [r3, #24]
 8008ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ed0:	4413      	add	r3, r2
 8008ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ed8:	f7fe f800 	bl	8006edc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee0:	4413      	add	r3, r2
 8008ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	699a      	ldr	r2, [r3, #24]
 8008ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eea:	441a      	add	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	619a      	str	r2, [r3, #24]
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef6:	441a      	add	r2, r3
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	601a      	str	r2, [r3, #0]
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f47f af01 	bne.w	8008d0e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3738      	adds	r7, #56	; 0x38
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b086      	sub	sp, #24
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f107 0208 	add.w	r2, r7, #8
 8008f24:	4611      	mov	r1, r2
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7ff fc7c 	bl	8008824 <validate>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008f30:	7dfb      	ldrb	r3, [r7, #23]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d168      	bne.n	8009008 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	7d1b      	ldrb	r3, [r3, #20]
 8008f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d062      	beq.n	8009008 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	7d1b      	ldrb	r3, [r3, #20]
 8008f46:	b25b      	sxtb	r3, r3
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	da15      	bge.n	8008f78 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	7858      	ldrb	r0, [r3, #1]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a1a      	ldr	r2, [r3, #32]
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	f7fd fefe 	bl	8006d5c <disk_write>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d001      	beq.n	8008f6a <f_sync+0x54>
 8008f66:	2301      	movs	r3, #1
 8008f68:	e04f      	b.n	800900a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	7d1b      	ldrb	r3, [r3, #20]
 8008f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f72:	b2da      	uxtb	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008f78:	f7fd f950 	bl	800621c <get_fattime>
 8008f7c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f84:	4619      	mov	r1, r3
 8008f86:	4610      	mov	r0, r2
 8008f88:	f7fe f9d6 	bl	8007338 <move_window>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008f90:	7dfb      	ldrb	r3, [r7, #23]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d138      	bne.n	8009008 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f9a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	330b      	adds	r3, #11
 8008fa0:	781a      	ldrb	r2, [r3, #0]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	330b      	adds	r3, #11
 8008fa6:	f042 0220 	orr.w	r2, r2, #32
 8008faa:	b2d2      	uxtb	r2, r2
 8008fac:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6818      	ldr	r0, [r3, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	68f9      	ldr	r1, [r7, #12]
 8008fba:	f7fe fee3 	bl	8007d84 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f103 021c 	add.w	r2, r3, #28
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	4619      	mov	r1, r3
 8008fca:	4610      	mov	r0, r2
 8008fcc:	f7fd ff5a 	bl	8006e84 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	3316      	adds	r3, #22
 8008fd4:	6939      	ldr	r1, [r7, #16]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fd ff54 	bl	8006e84 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	3312      	adds	r3, #18
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fd ff33 	bl	8006e4e <st_word>
					fs->wflag = 1;
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	2201      	movs	r2, #1
 8008fec:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7fe f9cf 	bl	8007394 <sync_fs>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	7d1b      	ldrb	r3, [r3, #20]
 8008ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009002:	b2da      	uxtb	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009008:	7dfb      	ldrb	r3, [r7, #23]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3718      	adds	r7, #24
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b084      	sub	sp, #16
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f7ff ff7b 	bl	8008f16 <f_sync>
 8009020:	4603      	mov	r3, r0
 8009022:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009024:	7bfb      	ldrb	r3, [r7, #15]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d118      	bne.n	800905c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f107 0208 	add.w	r2, r7, #8
 8009030:	4611      	mov	r1, r2
 8009032:	4618      	mov	r0, r3
 8009034:	f7ff fbf6 	bl	8008824 <validate>
 8009038:	4603      	mov	r3, r0
 800903a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800903c:	7bfb      	ldrb	r3, [r7, #15]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10c      	bne.n	800905c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	4618      	mov	r0, r3
 8009048:	f7fe f8d2 	bl	80071f0 <dec_lock>
 800904c:	4603      	mov	r3, r0
 800904e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009050:	7bfb      	ldrb	r3, [r7, #15]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d102      	bne.n	800905c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800905c:	7bfb      	ldrb	r3, [r7, #15]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b090      	sub	sp, #64	; 0x40
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
 800906e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f107 0208 	add.w	r2, r7, #8
 8009076:	4611      	mov	r1, r2
 8009078:	4618      	mov	r0, r3
 800907a:	f7ff fbd3 	bl	8008824 <validate>
 800907e:	4603      	mov	r3, r0
 8009080:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009084:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009088:	2b00      	cmp	r3, #0
 800908a:	d103      	bne.n	8009094 <f_lseek+0x2e>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	7d5b      	ldrb	r3, [r3, #21]
 8009090:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009094:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009098:	2b00      	cmp	r3, #0
 800909a:	d002      	beq.n	80090a2 <f_lseek+0x3c>
 800909c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80090a0:	e1e6      	b.n	8009470 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f000 80d1 	beq.w	800924e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b2:	d15a      	bne.n	800916a <f_lseek+0x104>
			tbl = fp->cltbl;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80090ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090bc:	1d1a      	adds	r2, r3, #4
 80090be:	627a      	str	r2, [r7, #36]	; 0x24
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	617b      	str	r3, [r7, #20]
 80090c4:	2302      	movs	r3, #2
 80090c6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80090ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d03a      	beq.n	800914a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80090d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d6:	613b      	str	r3, [r7, #16]
 80090d8:	2300      	movs	r3, #0
 80090da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090de:	3302      	adds	r3, #2
 80090e0:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80090e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e4:	60fb      	str	r3, [r7, #12]
 80090e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e8:	3301      	adds	r3, #1
 80090ea:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7fe f9dc 	bl	80074ae <get_fat>
 80090f6:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80090f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d804      	bhi.n	8009108 <f_lseek+0xa2>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2202      	movs	r2, #2
 8009102:	755a      	strb	r2, [r3, #21]
 8009104:	2302      	movs	r3, #2
 8009106:	e1b3      	b.n	8009470 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910e:	d104      	bne.n	800911a <f_lseek+0xb4>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	755a      	strb	r2, [r3, #21]
 8009116:	2301      	movs	r3, #1
 8009118:	e1aa      	b.n	8009470 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	3301      	adds	r3, #1
 800911e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009120:	429a      	cmp	r2, r3
 8009122:	d0de      	beq.n	80090e2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	429a      	cmp	r2, r3
 800912a:	d809      	bhi.n	8009140 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800912c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912e:	1d1a      	adds	r2, r3, #4
 8009130:	627a      	str	r2, [r7, #36]	; 0x24
 8009132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009134:	601a      	str	r2, [r3, #0]
 8009136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009138:	1d1a      	adds	r2, r3, #4
 800913a:	627a      	str	r2, [r7, #36]	; 0x24
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	695b      	ldr	r3, [r3, #20]
 8009144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009146:	429a      	cmp	r2, r3
 8009148:	d3c4      	bcc.n	80090d4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009150:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	429a      	cmp	r2, r3
 8009158:	d803      	bhi.n	8009162 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800915a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915c:	2200      	movs	r2, #0
 800915e:	601a      	str	r2, [r3, #0]
 8009160:	e184      	b.n	800946c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009162:	2311      	movs	r3, #17
 8009164:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009168:	e180      	b.n	800946c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	683a      	ldr	r2, [r7, #0]
 8009170:	429a      	cmp	r2, r3
 8009172:	d902      	bls.n	800917a <f_lseek+0x114>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	683a      	ldr	r2, [r7, #0]
 800917e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	f000 8172 	beq.w	800946c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	3b01      	subs	r3, #1
 800918c:	4619      	mov	r1, r3
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f7fe fc1e 	bl	80079d0 <clmt_clust>
 8009194:	4602      	mov	r2, r0
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	69db      	ldr	r3, [r3, #28]
 80091a0:	4619      	mov	r1, r3
 80091a2:	4610      	mov	r0, r2
 80091a4:	f7fe f964 	bl	8007470 <clust2sect>
 80091a8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d104      	bne.n	80091ba <f_lseek+0x154>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2202      	movs	r2, #2
 80091b4:	755a      	strb	r2, [r3, #21]
 80091b6:	2302      	movs	r3, #2
 80091b8:	e15a      	b.n	8009470 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	3b01      	subs	r3, #1
 80091be:	0a5b      	lsrs	r3, r3, #9
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	8952      	ldrh	r2, [r2, #10]
 80091c4:	3a01      	subs	r2, #1
 80091c6:	4013      	ands	r3, r2
 80091c8:	69ba      	ldr	r2, [r7, #24]
 80091ca:	4413      	add	r3, r2
 80091cc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	699b      	ldr	r3, [r3, #24]
 80091d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	f000 8148 	beq.w	800946c <f_lseek+0x406>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6a1b      	ldr	r3, [r3, #32]
 80091e0:	69ba      	ldr	r2, [r7, #24]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	f000 8142 	beq.w	800946c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	7d1b      	ldrb	r3, [r3, #20]
 80091ec:	b25b      	sxtb	r3, r3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	da18      	bge.n	8009224 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	7858      	ldrb	r0, [r3, #1]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a1a      	ldr	r2, [r3, #32]
 8009200:	2301      	movs	r3, #1
 8009202:	f7fd fdab 	bl	8006d5c <disk_write>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d004      	beq.n	8009216 <f_lseek+0x1b0>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	755a      	strb	r2, [r3, #21]
 8009212:	2301      	movs	r3, #1
 8009214:	e12c      	b.n	8009470 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	7d1b      	ldrb	r3, [r3, #20]
 800921a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800921e:	b2da      	uxtb	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	7858      	ldrb	r0, [r3, #1]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800922e:	2301      	movs	r3, #1
 8009230:	69ba      	ldr	r2, [r7, #24]
 8009232:	f7fd fd73 	bl	8006d1c <disk_read>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d004      	beq.n	8009246 <f_lseek+0x1e0>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	755a      	strb	r2, [r3, #21]
 8009242:	2301      	movs	r3, #1
 8009244:	e114      	b.n	8009470 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	69ba      	ldr	r2, [r7, #24]
 800924a:	621a      	str	r2, [r3, #32]
 800924c:	e10e      	b.n	800946c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	429a      	cmp	r2, r3
 8009256:	d908      	bls.n	800926a <f_lseek+0x204>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	7d1b      	ldrb	r3, [r3, #20]
 800925c:	f003 0302 	and.w	r3, r3, #2
 8009260:	2b00      	cmp	r3, #0
 8009262:	d102      	bne.n	800926a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009270:	2300      	movs	r3, #0
 8009272:	637b      	str	r3, [r7, #52]	; 0x34
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009278:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	f000 80a7 	beq.w	80093d0 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	895b      	ldrh	r3, [r3, #10]
 8009286:	025b      	lsls	r3, r3, #9
 8009288:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800928a:	6a3b      	ldr	r3, [r7, #32]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d01b      	beq.n	80092c8 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	1e5a      	subs	r2, r3, #1
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	fbb2 f2f3 	udiv	r2, r2, r3
 800929a:	6a3b      	ldr	r3, [r7, #32]
 800929c:	1e59      	subs	r1, r3, #1
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d30f      	bcc.n	80092c8 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80092a8:	6a3b      	ldr	r3, [r7, #32]
 80092aa:	1e5a      	subs	r2, r3, #1
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	425b      	negs	r3, r3
 80092b0:	401a      	ands	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	683a      	ldr	r2, [r7, #0]
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	69db      	ldr	r3, [r3, #28]
 80092c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80092c6:	e022      	b.n	800930e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80092ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d119      	bne.n	8009308 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2100      	movs	r1, #0
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fe fae1 	bl	80078a0 <create_chain>
 80092de:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80092e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d104      	bne.n	80092f0 <f_lseek+0x28a>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2202      	movs	r2, #2
 80092ea:	755a      	strb	r2, [r3, #21]
 80092ec:	2302      	movs	r3, #2
 80092ee:	e0bf      	b.n	8009470 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80092f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f6:	d104      	bne.n	8009302 <f_lseek+0x29c>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	755a      	strb	r2, [r3, #21]
 80092fe:	2301      	movs	r3, #1
 8009300:	e0b6      	b.n	8009470 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009306:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800930c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800930e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009310:	2b00      	cmp	r3, #0
 8009312:	d05d      	beq.n	80093d0 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8009314:	e03a      	b.n	800938c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	603b      	str	r3, [r7, #0]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	699a      	ldr	r2, [r3, #24]
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	441a      	add	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	7d1b      	ldrb	r3, [r3, #20]
 800932e:	f003 0302 	and.w	r3, r3, #2
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00b      	beq.n	800934e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800933a:	4618      	mov	r0, r3
 800933c:	f7fe fab0 	bl	80078a0 <create_chain>
 8009340:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8009342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009344:	2b00      	cmp	r3, #0
 8009346:	d108      	bne.n	800935a <f_lseek+0x2f4>
							ofs = 0; break;
 8009348:	2300      	movs	r3, #0
 800934a:	603b      	str	r3, [r7, #0]
 800934c:	e022      	b.n	8009394 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009352:	4618      	mov	r0, r3
 8009354:	f7fe f8ab 	bl	80074ae <get_fat>
 8009358:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800935a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009360:	d104      	bne.n	800936c <f_lseek+0x306>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2201      	movs	r2, #1
 8009366:	755a      	strb	r2, [r3, #21]
 8009368:	2301      	movs	r3, #1
 800936a:	e081      	b.n	8009470 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800936c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936e:	2b01      	cmp	r3, #1
 8009370:	d904      	bls.n	800937c <f_lseek+0x316>
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	695b      	ldr	r3, [r3, #20]
 8009376:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009378:	429a      	cmp	r2, r3
 800937a:	d304      	bcc.n	8009386 <f_lseek+0x320>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2202      	movs	r2, #2
 8009380:	755a      	strb	r2, [r3, #21]
 8009382:	2302      	movs	r3, #2
 8009384:	e074      	b.n	8009470 <f_lseek+0x40a>
					fp->clust = clst;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800938a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800938c:	683a      	ldr	r2, [r7, #0]
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	429a      	cmp	r2, r3
 8009392:	d8c0      	bhi.n	8009316 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	699a      	ldr	r2, [r3, #24]
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	441a      	add	r2, r3
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d012      	beq.n	80093d0 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fe f85e 	bl	8007470 <clust2sect>
 80093b4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80093b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d104      	bne.n	80093c6 <f_lseek+0x360>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2202      	movs	r2, #2
 80093c0:	755a      	strb	r2, [r3, #21]
 80093c2:	2302      	movs	r3, #2
 80093c4:	e054      	b.n	8009470 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	0a5b      	lsrs	r3, r3, #9
 80093ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093cc:	4413      	add	r3, r2
 80093ce:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	699a      	ldr	r2, [r3, #24]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d90a      	bls.n	80093f2 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	699a      	ldr	r2, [r3, #24]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	7d1b      	ldrb	r3, [r3, #20]
 80093e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093ec:	b2da      	uxtb	r2, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	699b      	ldr	r3, [r3, #24]
 80093f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d036      	beq.n	800946c <f_lseek+0x406>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a1b      	ldr	r3, [r3, #32]
 8009402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009404:	429a      	cmp	r2, r3
 8009406:	d031      	beq.n	800946c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	7d1b      	ldrb	r3, [r3, #20]
 800940c:	b25b      	sxtb	r3, r3
 800940e:	2b00      	cmp	r3, #0
 8009410:	da18      	bge.n	8009444 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	7858      	ldrb	r0, [r3, #1]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6a1a      	ldr	r2, [r3, #32]
 8009420:	2301      	movs	r3, #1
 8009422:	f7fd fc9b 	bl	8006d5c <disk_write>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d004      	beq.n	8009436 <f_lseek+0x3d0>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	755a      	strb	r2, [r3, #21]
 8009432:	2301      	movs	r3, #1
 8009434:	e01c      	b.n	8009470 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	7d1b      	ldrb	r3, [r3, #20]
 800943a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800943e:	b2da      	uxtb	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	7858      	ldrb	r0, [r3, #1]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800944e:	2301      	movs	r3, #1
 8009450:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009452:	f7fd fc63 	bl	8006d1c <disk_read>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d004      	beq.n	8009466 <f_lseek+0x400>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	755a      	strb	r2, [r3, #21]
 8009462:	2301      	movs	r3, #1
 8009464:	e004      	b.n	8009470 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800946a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800946c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009470:	4618      	mov	r0, r3
 8009472:	3740      	adds	r7, #64	; 0x40
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b086      	sub	sp, #24
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d101      	bne.n	800948c <f_opendir+0x14>
 8009488:	2309      	movs	r3, #9
 800948a:	e064      	b.n	8009556 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8009490:	f107 010c 	add.w	r1, r7, #12
 8009494:	463b      	mov	r3, r7
 8009496:	2200      	movs	r2, #0
 8009498:	4618      	mov	r0, r3
 800949a:	f7fe ff77 	bl	800838c <find_volume>
 800949e:	4603      	mov	r3, r0
 80094a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80094a2:	7dfb      	ldrb	r3, [r7, #23]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d14f      	bne.n	8009548 <f_opendir+0xd0>
		obj->fs = fs;
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	4619      	mov	r1, r3
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f7fe fe5e 	bl	8008174 <follow_path>
 80094b8:	4603      	mov	r3, r0
 80094ba:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80094bc:	7dfb      	ldrb	r3, [r7, #23]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d13d      	bne.n	800953e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80094c8:	b25b      	sxtb	r3, r3
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	db12      	blt.n	80094f4 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	799b      	ldrb	r3, [r3, #6]
 80094d2:	f003 0310 	and.w	r3, r3, #16
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00a      	beq.n	80094f0 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6a1b      	ldr	r3, [r3, #32]
 80094e0:	4619      	mov	r1, r3
 80094e2:	4610      	mov	r0, r2
 80094e4:	f7fe fc2f 	bl	8007d46 <ld_clust>
 80094e8:	4602      	mov	r2, r0
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	609a      	str	r2, [r3, #8]
 80094ee:	e001      	b.n	80094f4 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80094f0:	2305      	movs	r3, #5
 80094f2:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80094f4:	7dfb      	ldrb	r3, [r7, #23]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d121      	bne.n	800953e <f_opendir+0xc6>
				obj->id = fs->id;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	88da      	ldrh	r2, [r3, #6]
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8009502:	2100      	movs	r1, #0
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7fe fa97 	bl	8007a38 <dir_sdi>
 800950a:	4603      	mov	r3, r0
 800950c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800950e:	7dfb      	ldrb	r3, [r7, #23]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d114      	bne.n	800953e <f_opendir+0xc6>
					if (obj->sclust) {
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00d      	beq.n	8009538 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800951c:	2100      	movs	r1, #0
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f7fd fdd8 	bl	80070d4 <inc_lock>
 8009524:	4602      	mov	r2, r0
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d105      	bne.n	800953e <f_opendir+0xc6>
 8009532:	2312      	movs	r3, #18
 8009534:	75fb      	strb	r3, [r7, #23]
 8009536:	e002      	b.n	800953e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	2200      	movs	r2, #0
 800953c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800953e:	7dfb      	ldrb	r3, [r7, #23]
 8009540:	2b04      	cmp	r3, #4
 8009542:	d101      	bne.n	8009548 <f_opendir+0xd0>
 8009544:	2305      	movs	r3, #5
 8009546:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8009548:	7dfb      	ldrb	r3, [r7, #23]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d002      	beq.n	8009554 <f_opendir+0xdc>
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	2200      	movs	r2, #0
 8009552:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009554:	7dfb      	ldrb	r3, [r7, #23]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3718      	adds	r7, #24
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b084      	sub	sp, #16
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f107 0208 	add.w	r2, r7, #8
 800956c:	4611      	mov	r1, r2
 800956e:	4618      	mov	r0, r3
 8009570:	f7ff f958 	bl	8008824 <validate>
 8009574:	4603      	mov	r3, r0
 8009576:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009578:	7bfb      	ldrb	r3, [r7, #15]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d110      	bne.n	80095a0 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d006      	beq.n	8009594 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	4618      	mov	r0, r3
 800958c:	f7fd fe30 	bl	80071f0 <dec_lock>
 8009590:	4603      	mov	r3, r0
 8009592:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8009594:	7bfb      	ldrb	r3, [r7, #15]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d102      	bne.n	80095a0 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80095a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b084      	sub	sp, #16
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
 80095b2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f107 0208 	add.w	r2, r7, #8
 80095ba:	4611      	mov	r1, r2
 80095bc:	4618      	mov	r0, r3
 80095be:	f7ff f931 	bl	8008824 <validate>
 80095c2:	4603      	mov	r3, r0
 80095c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80095c6:	7bfb      	ldrb	r3, [r7, #15]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d126      	bne.n	800961a <f_readdir+0x70>
		if (!fno) {
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d106      	bne.n	80095e0 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80095d2:	2100      	movs	r1, #0
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f7fe fa2f 	bl	8007a38 <dir_sdi>
 80095da:	4603      	mov	r3, r0
 80095dc:	73fb      	strb	r3, [r7, #15]
 80095de:	e01c      	b.n	800961a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80095e0:	2100      	movs	r1, #0
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7fe fbee 	bl	8007dc4 <dir_read>
 80095e8:	4603      	mov	r3, r0
 80095ea:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80095ec:	7bfb      	ldrb	r3, [r7, #15]
 80095ee:	2b04      	cmp	r3, #4
 80095f0:	d101      	bne.n	80095f6 <f_readdir+0x4c>
 80095f2:	2300      	movs	r3, #0
 80095f4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10e      	bne.n	800961a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80095fc:	6839      	ldr	r1, [r7, #0]
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f7fe fcc4 	bl	8007f8c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8009604:	2100      	movs	r1, #0
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f7fe fa91 	bl	8007b2e <dir_next>
 800960c:	4603      	mov	r3, r0
 800960e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8009610:	7bfb      	ldrb	r3, [r7, #15]
 8009612:	2b04      	cmp	r3, #4
 8009614:	d101      	bne.n	800961a <f_readdir+0x70>
 8009616:	2300      	movs	r3, #0
 8009618:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800961a:	7bfb      	ldrb	r3, [r7, #15]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b092      	sub	sp, #72	; 0x48
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8009630:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009634:	f107 030c 	add.w	r3, r7, #12
 8009638:	2200      	movs	r2, #0
 800963a:	4618      	mov	r0, r3
 800963c:	f7fe fea6 	bl	800838c <find_volume>
 8009640:	4603      	mov	r3, r0
 8009642:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8009646:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800964a:	2b00      	cmp	r3, #0
 800964c:	f040 8099 	bne.w	8009782 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009658:	691a      	ldr	r2, [r3, #16]
 800965a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965c:	695b      	ldr	r3, [r3, #20]
 800965e:	3b02      	subs	r3, #2
 8009660:	429a      	cmp	r2, r3
 8009662:	d804      	bhi.n	800966e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009666:	691a      	ldr	r2, [r3, #16]
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	601a      	str	r2, [r3, #0]
 800966c:	e089      	b.n	8009782 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800966e:	2300      	movs	r3, #0
 8009670:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	2b01      	cmp	r3, #1
 8009678:	d128      	bne.n	80096cc <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800967a:	2302      	movs	r3, #2
 800967c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800967e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009680:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8009682:	f107 0314 	add.w	r3, r7, #20
 8009686:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009688:	4618      	mov	r0, r3
 800968a:	f7fd ff10 	bl	80074ae <get_fat>
 800968e:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009696:	d103      	bne.n	80096a0 <f_getfree+0x7c>
 8009698:	2301      	movs	r3, #1
 800969a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800969e:	e063      	b.n	8009768 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80096a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d103      	bne.n	80096ae <f_getfree+0x8a>
 80096a6:	2302      	movs	r3, #2
 80096a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80096ac:	e05c      	b.n	8009768 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80096ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d102      	bne.n	80096ba <f_getfree+0x96>
 80096b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096b6:	3301      	adds	r3, #1
 80096b8:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80096ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096bc:	3301      	adds	r3, #1
 80096be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c2:	695b      	ldr	r3, [r3, #20]
 80096c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d3db      	bcc.n	8009682 <f_getfree+0x5e>
 80096ca:	e04d      	b.n	8009768 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80096cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ce:	695b      	ldr	r3, [r3, #20]
 80096d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d4:	6a1b      	ldr	r3, [r3, #32]
 80096d6:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80096d8:	2300      	movs	r3, #0
 80096da:	637b      	str	r3, [r7, #52]	; 0x34
 80096dc:	2300      	movs	r3, #0
 80096de:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80096e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d113      	bne.n	800970e <f_getfree+0xea>
							res = move_window(fs, sect++);
 80096e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ea:	1c5a      	adds	r2, r3, #1
 80096ec:	63ba      	str	r2, [r7, #56]	; 0x38
 80096ee:	4619      	mov	r1, r3
 80096f0:	f7fd fe22 	bl	8007338 <move_window>
 80096f4:	4603      	mov	r3, r0
 80096f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80096fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d131      	bne.n	8009766 <f_getfree+0x142>
							p = fs->win;
 8009702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009704:	3330      	adds	r3, #48	; 0x30
 8009706:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8009708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800970c:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800970e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	2b02      	cmp	r3, #2
 8009714:	d10f      	bne.n	8009736 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009716:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009718:	f7fd fb5e 	bl	8006dd8 <ld_word>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d102      	bne.n	8009728 <f_getfree+0x104>
 8009722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009724:	3301      	adds	r3, #1
 8009726:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8009728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972a:	3302      	adds	r3, #2
 800972c:	633b      	str	r3, [r7, #48]	; 0x30
 800972e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009730:	3b02      	subs	r3, #2
 8009732:	637b      	str	r3, [r7, #52]	; 0x34
 8009734:	e010      	b.n	8009758 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009736:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009738:	f7fd fb66 	bl	8006e08 <ld_dword>
 800973c:	4603      	mov	r3, r0
 800973e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009742:	2b00      	cmp	r3, #0
 8009744:	d102      	bne.n	800974c <f_getfree+0x128>
 8009746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009748:	3301      	adds	r3, #1
 800974a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800974c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974e:	3304      	adds	r3, #4
 8009750:	633b      	str	r3, [r7, #48]	; 0x30
 8009752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009754:	3b04      	subs	r3, #4
 8009756:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8009758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800975a:	3b01      	subs	r3, #1
 800975c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800975e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1bd      	bne.n	80096e0 <f_getfree+0xbc>
 8009764:	e000      	b.n	8009768 <f_getfree+0x144>
							if (res != FR_OK) break;
 8009766:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800976c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800976e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009770:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009772:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009776:	791a      	ldrb	r2, [r3, #4]
 8009778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977a:	f042 0201 	orr.w	r2, r2, #1
 800977e:	b2d2      	uxtb	r2, r2
 8009780:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009782:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009786:	4618      	mov	r0, r3
 8009788:	3748      	adds	r7, #72	; 0x48
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
	...

08009790 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009790:	b480      	push	{r7}
 8009792:	b087      	sub	sp, #28
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	4613      	mov	r3, r2
 800979c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800979e:	2301      	movs	r3, #1
 80097a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80097a2:	2300      	movs	r3, #0
 80097a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80097a6:	4b1f      	ldr	r3, [pc, #124]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097a8:	7a5b      	ldrb	r3, [r3, #9]
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d131      	bne.n	8009814 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80097b0:	4b1c      	ldr	r3, [pc, #112]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097b2:	7a5b      	ldrb	r3, [r3, #9]
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	461a      	mov	r2, r3
 80097b8:	4b1a      	ldr	r3, [pc, #104]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097ba:	2100      	movs	r1, #0
 80097bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80097be:	4b19      	ldr	r3, [pc, #100]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097c0:	7a5b      	ldrb	r3, [r3, #9]
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	4a17      	ldr	r2, [pc, #92]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4413      	add	r3, r2
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80097ce:	4b15      	ldr	r3, [pc, #84]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097d0:	7a5b      	ldrb	r3, [r3, #9]
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	461a      	mov	r2, r3
 80097d6:	4b13      	ldr	r3, [pc, #76]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097d8:	4413      	add	r3, r2
 80097da:	79fa      	ldrb	r2, [r7, #7]
 80097dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80097de:	4b11      	ldr	r3, [pc, #68]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097e0:	7a5b      	ldrb	r3, [r3, #9]
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	1c5a      	adds	r2, r3, #1
 80097e6:	b2d1      	uxtb	r1, r2
 80097e8:	4a0e      	ldr	r2, [pc, #56]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097ea:	7251      	strb	r1, [r2, #9]
 80097ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80097ee:	7dbb      	ldrb	r3, [r7, #22]
 80097f0:	3330      	adds	r3, #48	; 0x30
 80097f2:	b2da      	uxtb	r2, r3
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	3301      	adds	r3, #1
 80097fc:	223a      	movs	r2, #58	; 0x3a
 80097fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	3302      	adds	r3, #2
 8009804:	222f      	movs	r2, #47	; 0x2f
 8009806:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	3303      	adds	r3, #3
 800980c:	2200      	movs	r2, #0
 800980e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009810:	2300      	movs	r3, #0
 8009812:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009814:	7dfb      	ldrb	r3, [r7, #23]
}
 8009816:	4618      	mov	r0, r3
 8009818:	371c      	adds	r7, #28
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	200072c4 	.word	0x200072c4

08009828 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009832:	2200      	movs	r2, #0
 8009834:	6839      	ldr	r1, [r7, #0]
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f7ff ffaa 	bl	8009790 <FATFS_LinkDriverEx>
 800983c:	4603      	mov	r3, r0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3708      	adds	r7, #8
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <atoi>:
 8009846:	220a      	movs	r2, #10
 8009848:	2100      	movs	r1, #0
 800984a:	f000 b8e3 	b.w	8009a14 <strtol>
	...

08009850 <__errno>:
 8009850:	4b01      	ldr	r3, [pc, #4]	; (8009858 <__errno+0x8>)
 8009852:	6818      	ldr	r0, [r3, #0]
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop
 8009858:	20000024 	.word	0x20000024

0800985c <__libc_init_array>:
 800985c:	b570      	push	{r4, r5, r6, lr}
 800985e:	4d0d      	ldr	r5, [pc, #52]	; (8009894 <__libc_init_array+0x38>)
 8009860:	4c0d      	ldr	r4, [pc, #52]	; (8009898 <__libc_init_array+0x3c>)
 8009862:	1b64      	subs	r4, r4, r5
 8009864:	10a4      	asrs	r4, r4, #2
 8009866:	2600      	movs	r6, #0
 8009868:	42a6      	cmp	r6, r4
 800986a:	d109      	bne.n	8009880 <__libc_init_array+0x24>
 800986c:	4d0b      	ldr	r5, [pc, #44]	; (800989c <__libc_init_array+0x40>)
 800986e:	4c0c      	ldr	r4, [pc, #48]	; (80098a0 <__libc_init_array+0x44>)
 8009870:	f000 fd54 	bl	800a31c <_init>
 8009874:	1b64      	subs	r4, r4, r5
 8009876:	10a4      	asrs	r4, r4, #2
 8009878:	2600      	movs	r6, #0
 800987a:	42a6      	cmp	r6, r4
 800987c:	d105      	bne.n	800988a <__libc_init_array+0x2e>
 800987e:	bd70      	pop	{r4, r5, r6, pc}
 8009880:	f855 3b04 	ldr.w	r3, [r5], #4
 8009884:	4798      	blx	r3
 8009886:	3601      	adds	r6, #1
 8009888:	e7ee      	b.n	8009868 <__libc_init_array+0xc>
 800988a:	f855 3b04 	ldr.w	r3, [r5], #4
 800988e:	4798      	blx	r3
 8009890:	3601      	adds	r6, #1
 8009892:	e7f2      	b.n	800987a <__libc_init_array+0x1e>
 8009894:	0800aa8c 	.word	0x0800aa8c
 8009898:	0800aa8c 	.word	0x0800aa8c
 800989c:	0800aa8c 	.word	0x0800aa8c
 80098a0:	0800aa90 	.word	0x0800aa90

080098a4 <memcpy>:
 80098a4:	440a      	add	r2, r1
 80098a6:	4291      	cmp	r1, r2
 80098a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80098ac:	d100      	bne.n	80098b0 <memcpy+0xc>
 80098ae:	4770      	bx	lr
 80098b0:	b510      	push	{r4, lr}
 80098b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098ba:	4291      	cmp	r1, r2
 80098bc:	d1f9      	bne.n	80098b2 <memcpy+0xe>
 80098be:	bd10      	pop	{r4, pc}

080098c0 <memset>:
 80098c0:	4402      	add	r2, r0
 80098c2:	4603      	mov	r3, r0
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d100      	bne.n	80098ca <memset+0xa>
 80098c8:	4770      	bx	lr
 80098ca:	f803 1b01 	strb.w	r1, [r3], #1
 80098ce:	e7f9      	b.n	80098c4 <memset+0x4>

080098d0 <siprintf>:
 80098d0:	b40e      	push	{r1, r2, r3}
 80098d2:	b500      	push	{lr}
 80098d4:	b09c      	sub	sp, #112	; 0x70
 80098d6:	ab1d      	add	r3, sp, #116	; 0x74
 80098d8:	9002      	str	r0, [sp, #8]
 80098da:	9006      	str	r0, [sp, #24]
 80098dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098e0:	4809      	ldr	r0, [pc, #36]	; (8009908 <siprintf+0x38>)
 80098e2:	9107      	str	r1, [sp, #28]
 80098e4:	9104      	str	r1, [sp, #16]
 80098e6:	4909      	ldr	r1, [pc, #36]	; (800990c <siprintf+0x3c>)
 80098e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ec:	9105      	str	r1, [sp, #20]
 80098ee:	6800      	ldr	r0, [r0, #0]
 80098f0:	9301      	str	r3, [sp, #4]
 80098f2:	a902      	add	r1, sp, #8
 80098f4:	f000 f92e 	bl	8009b54 <_svfiprintf_r>
 80098f8:	9b02      	ldr	r3, [sp, #8]
 80098fa:	2200      	movs	r2, #0
 80098fc:	701a      	strb	r2, [r3, #0]
 80098fe:	b01c      	add	sp, #112	; 0x70
 8009900:	f85d eb04 	ldr.w	lr, [sp], #4
 8009904:	b003      	add	sp, #12
 8009906:	4770      	bx	lr
 8009908:	20000024 	.word	0x20000024
 800990c:	ffff0208 	.word	0xffff0208

08009910 <_strtol_l.constprop.0>:
 8009910:	2b01      	cmp	r3, #1
 8009912:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009916:	d001      	beq.n	800991c <_strtol_l.constprop.0+0xc>
 8009918:	2b24      	cmp	r3, #36	; 0x24
 800991a:	d906      	bls.n	800992a <_strtol_l.constprop.0+0x1a>
 800991c:	f7ff ff98 	bl	8009850 <__errno>
 8009920:	2316      	movs	r3, #22
 8009922:	6003      	str	r3, [r0, #0]
 8009924:	2000      	movs	r0, #0
 8009926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800992a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009a10 <_strtol_l.constprop.0+0x100>
 800992e:	460d      	mov	r5, r1
 8009930:	462e      	mov	r6, r5
 8009932:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009936:	f814 700c 	ldrb.w	r7, [r4, ip]
 800993a:	f017 0708 	ands.w	r7, r7, #8
 800993e:	d1f7      	bne.n	8009930 <_strtol_l.constprop.0+0x20>
 8009940:	2c2d      	cmp	r4, #45	; 0x2d
 8009942:	d132      	bne.n	80099aa <_strtol_l.constprop.0+0x9a>
 8009944:	782c      	ldrb	r4, [r5, #0]
 8009946:	2701      	movs	r7, #1
 8009948:	1cb5      	adds	r5, r6, #2
 800994a:	2b00      	cmp	r3, #0
 800994c:	d05b      	beq.n	8009a06 <_strtol_l.constprop.0+0xf6>
 800994e:	2b10      	cmp	r3, #16
 8009950:	d109      	bne.n	8009966 <_strtol_l.constprop.0+0x56>
 8009952:	2c30      	cmp	r4, #48	; 0x30
 8009954:	d107      	bne.n	8009966 <_strtol_l.constprop.0+0x56>
 8009956:	782c      	ldrb	r4, [r5, #0]
 8009958:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800995c:	2c58      	cmp	r4, #88	; 0x58
 800995e:	d14d      	bne.n	80099fc <_strtol_l.constprop.0+0xec>
 8009960:	786c      	ldrb	r4, [r5, #1]
 8009962:	2310      	movs	r3, #16
 8009964:	3502      	adds	r5, #2
 8009966:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800996a:	f108 38ff 	add.w	r8, r8, #4294967295
 800996e:	f04f 0c00 	mov.w	ip, #0
 8009972:	fbb8 f9f3 	udiv	r9, r8, r3
 8009976:	4666      	mov	r6, ip
 8009978:	fb03 8a19 	mls	sl, r3, r9, r8
 800997c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009980:	f1be 0f09 	cmp.w	lr, #9
 8009984:	d816      	bhi.n	80099b4 <_strtol_l.constprop.0+0xa4>
 8009986:	4674      	mov	r4, lr
 8009988:	42a3      	cmp	r3, r4
 800998a:	dd24      	ble.n	80099d6 <_strtol_l.constprop.0+0xc6>
 800998c:	f1bc 0f00 	cmp.w	ip, #0
 8009990:	db1e      	blt.n	80099d0 <_strtol_l.constprop.0+0xc0>
 8009992:	45b1      	cmp	r9, r6
 8009994:	d31c      	bcc.n	80099d0 <_strtol_l.constprop.0+0xc0>
 8009996:	d101      	bne.n	800999c <_strtol_l.constprop.0+0x8c>
 8009998:	45a2      	cmp	sl, r4
 800999a:	db19      	blt.n	80099d0 <_strtol_l.constprop.0+0xc0>
 800999c:	fb06 4603 	mla	r6, r6, r3, r4
 80099a0:	f04f 0c01 	mov.w	ip, #1
 80099a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099a8:	e7e8      	b.n	800997c <_strtol_l.constprop.0+0x6c>
 80099aa:	2c2b      	cmp	r4, #43	; 0x2b
 80099ac:	bf04      	itt	eq
 80099ae:	782c      	ldrbeq	r4, [r5, #0]
 80099b0:	1cb5      	addeq	r5, r6, #2
 80099b2:	e7ca      	b.n	800994a <_strtol_l.constprop.0+0x3a>
 80099b4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80099b8:	f1be 0f19 	cmp.w	lr, #25
 80099bc:	d801      	bhi.n	80099c2 <_strtol_l.constprop.0+0xb2>
 80099be:	3c37      	subs	r4, #55	; 0x37
 80099c0:	e7e2      	b.n	8009988 <_strtol_l.constprop.0+0x78>
 80099c2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80099c6:	f1be 0f19 	cmp.w	lr, #25
 80099ca:	d804      	bhi.n	80099d6 <_strtol_l.constprop.0+0xc6>
 80099cc:	3c57      	subs	r4, #87	; 0x57
 80099ce:	e7db      	b.n	8009988 <_strtol_l.constprop.0+0x78>
 80099d0:	f04f 3cff 	mov.w	ip, #4294967295
 80099d4:	e7e6      	b.n	80099a4 <_strtol_l.constprop.0+0x94>
 80099d6:	f1bc 0f00 	cmp.w	ip, #0
 80099da:	da05      	bge.n	80099e8 <_strtol_l.constprop.0+0xd8>
 80099dc:	2322      	movs	r3, #34	; 0x22
 80099de:	6003      	str	r3, [r0, #0]
 80099e0:	4646      	mov	r6, r8
 80099e2:	b942      	cbnz	r2, 80099f6 <_strtol_l.constprop.0+0xe6>
 80099e4:	4630      	mov	r0, r6
 80099e6:	e79e      	b.n	8009926 <_strtol_l.constprop.0+0x16>
 80099e8:	b107      	cbz	r7, 80099ec <_strtol_l.constprop.0+0xdc>
 80099ea:	4276      	negs	r6, r6
 80099ec:	2a00      	cmp	r2, #0
 80099ee:	d0f9      	beq.n	80099e4 <_strtol_l.constprop.0+0xd4>
 80099f0:	f1bc 0f00 	cmp.w	ip, #0
 80099f4:	d000      	beq.n	80099f8 <_strtol_l.constprop.0+0xe8>
 80099f6:	1e69      	subs	r1, r5, #1
 80099f8:	6011      	str	r1, [r2, #0]
 80099fa:	e7f3      	b.n	80099e4 <_strtol_l.constprop.0+0xd4>
 80099fc:	2430      	movs	r4, #48	; 0x30
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1b1      	bne.n	8009966 <_strtol_l.constprop.0+0x56>
 8009a02:	2308      	movs	r3, #8
 8009a04:	e7af      	b.n	8009966 <_strtol_l.constprop.0+0x56>
 8009a06:	2c30      	cmp	r4, #48	; 0x30
 8009a08:	d0a5      	beq.n	8009956 <_strtol_l.constprop.0+0x46>
 8009a0a:	230a      	movs	r3, #10
 8009a0c:	e7ab      	b.n	8009966 <_strtol_l.constprop.0+0x56>
 8009a0e:	bf00      	nop
 8009a10:	0800a951 	.word	0x0800a951

08009a14 <strtol>:
 8009a14:	4613      	mov	r3, r2
 8009a16:	460a      	mov	r2, r1
 8009a18:	4601      	mov	r1, r0
 8009a1a:	4802      	ldr	r0, [pc, #8]	; (8009a24 <strtol+0x10>)
 8009a1c:	6800      	ldr	r0, [r0, #0]
 8009a1e:	f7ff bf77 	b.w	8009910 <_strtol_l.constprop.0>
 8009a22:	bf00      	nop
 8009a24:	20000024 	.word	0x20000024

08009a28 <_vsniprintf_r>:
 8009a28:	b530      	push	{r4, r5, lr}
 8009a2a:	4614      	mov	r4, r2
 8009a2c:	2c00      	cmp	r4, #0
 8009a2e:	b09b      	sub	sp, #108	; 0x6c
 8009a30:	4605      	mov	r5, r0
 8009a32:	461a      	mov	r2, r3
 8009a34:	da05      	bge.n	8009a42 <_vsniprintf_r+0x1a>
 8009a36:	238b      	movs	r3, #139	; 0x8b
 8009a38:	6003      	str	r3, [r0, #0]
 8009a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3e:	b01b      	add	sp, #108	; 0x6c
 8009a40:	bd30      	pop	{r4, r5, pc}
 8009a42:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009a46:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009a4a:	bf14      	ite	ne
 8009a4c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009a50:	4623      	moveq	r3, r4
 8009a52:	9302      	str	r3, [sp, #8]
 8009a54:	9305      	str	r3, [sp, #20]
 8009a56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a5a:	9100      	str	r1, [sp, #0]
 8009a5c:	9104      	str	r1, [sp, #16]
 8009a5e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009a62:	4669      	mov	r1, sp
 8009a64:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009a66:	f000 f875 	bl	8009b54 <_svfiprintf_r>
 8009a6a:	1c43      	adds	r3, r0, #1
 8009a6c:	bfbc      	itt	lt
 8009a6e:	238b      	movlt	r3, #139	; 0x8b
 8009a70:	602b      	strlt	r3, [r5, #0]
 8009a72:	2c00      	cmp	r4, #0
 8009a74:	d0e3      	beq.n	8009a3e <_vsniprintf_r+0x16>
 8009a76:	9b00      	ldr	r3, [sp, #0]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	701a      	strb	r2, [r3, #0]
 8009a7c:	e7df      	b.n	8009a3e <_vsniprintf_r+0x16>
	...

08009a80 <vsniprintf>:
 8009a80:	b507      	push	{r0, r1, r2, lr}
 8009a82:	9300      	str	r3, [sp, #0]
 8009a84:	4613      	mov	r3, r2
 8009a86:	460a      	mov	r2, r1
 8009a88:	4601      	mov	r1, r0
 8009a8a:	4803      	ldr	r0, [pc, #12]	; (8009a98 <vsniprintf+0x18>)
 8009a8c:	6800      	ldr	r0, [r0, #0]
 8009a8e:	f7ff ffcb 	bl	8009a28 <_vsniprintf_r>
 8009a92:	b003      	add	sp, #12
 8009a94:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a98:	20000024 	.word	0x20000024

08009a9c <__ssputs_r>:
 8009a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009aa0:	688e      	ldr	r6, [r1, #8]
 8009aa2:	429e      	cmp	r6, r3
 8009aa4:	4682      	mov	sl, r0
 8009aa6:	460c      	mov	r4, r1
 8009aa8:	4690      	mov	r8, r2
 8009aaa:	461f      	mov	r7, r3
 8009aac:	d838      	bhi.n	8009b20 <__ssputs_r+0x84>
 8009aae:	898a      	ldrh	r2, [r1, #12]
 8009ab0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ab4:	d032      	beq.n	8009b1c <__ssputs_r+0x80>
 8009ab6:	6825      	ldr	r5, [r4, #0]
 8009ab8:	6909      	ldr	r1, [r1, #16]
 8009aba:	eba5 0901 	sub.w	r9, r5, r1
 8009abe:	6965      	ldr	r5, [r4, #20]
 8009ac0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ac4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ac8:	3301      	adds	r3, #1
 8009aca:	444b      	add	r3, r9
 8009acc:	106d      	asrs	r5, r5, #1
 8009ace:	429d      	cmp	r5, r3
 8009ad0:	bf38      	it	cc
 8009ad2:	461d      	movcc	r5, r3
 8009ad4:	0553      	lsls	r3, r2, #21
 8009ad6:	d531      	bpl.n	8009b3c <__ssputs_r+0xa0>
 8009ad8:	4629      	mov	r1, r5
 8009ada:	f000 fb55 	bl	800a188 <_malloc_r>
 8009ade:	4606      	mov	r6, r0
 8009ae0:	b950      	cbnz	r0, 8009af8 <__ssputs_r+0x5c>
 8009ae2:	230c      	movs	r3, #12
 8009ae4:	f8ca 3000 	str.w	r3, [sl]
 8009ae8:	89a3      	ldrh	r3, [r4, #12]
 8009aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aee:	81a3      	strh	r3, [r4, #12]
 8009af0:	f04f 30ff 	mov.w	r0, #4294967295
 8009af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009af8:	6921      	ldr	r1, [r4, #16]
 8009afa:	464a      	mov	r2, r9
 8009afc:	f7ff fed2 	bl	80098a4 <memcpy>
 8009b00:	89a3      	ldrh	r3, [r4, #12]
 8009b02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b0a:	81a3      	strh	r3, [r4, #12]
 8009b0c:	6126      	str	r6, [r4, #16]
 8009b0e:	6165      	str	r5, [r4, #20]
 8009b10:	444e      	add	r6, r9
 8009b12:	eba5 0509 	sub.w	r5, r5, r9
 8009b16:	6026      	str	r6, [r4, #0]
 8009b18:	60a5      	str	r5, [r4, #8]
 8009b1a:	463e      	mov	r6, r7
 8009b1c:	42be      	cmp	r6, r7
 8009b1e:	d900      	bls.n	8009b22 <__ssputs_r+0x86>
 8009b20:	463e      	mov	r6, r7
 8009b22:	6820      	ldr	r0, [r4, #0]
 8009b24:	4632      	mov	r2, r6
 8009b26:	4641      	mov	r1, r8
 8009b28:	f000 faa8 	bl	800a07c <memmove>
 8009b2c:	68a3      	ldr	r3, [r4, #8]
 8009b2e:	1b9b      	subs	r3, r3, r6
 8009b30:	60a3      	str	r3, [r4, #8]
 8009b32:	6823      	ldr	r3, [r4, #0]
 8009b34:	4433      	add	r3, r6
 8009b36:	6023      	str	r3, [r4, #0]
 8009b38:	2000      	movs	r0, #0
 8009b3a:	e7db      	b.n	8009af4 <__ssputs_r+0x58>
 8009b3c:	462a      	mov	r2, r5
 8009b3e:	f000 fb97 	bl	800a270 <_realloc_r>
 8009b42:	4606      	mov	r6, r0
 8009b44:	2800      	cmp	r0, #0
 8009b46:	d1e1      	bne.n	8009b0c <__ssputs_r+0x70>
 8009b48:	6921      	ldr	r1, [r4, #16]
 8009b4a:	4650      	mov	r0, sl
 8009b4c:	f000 fab0 	bl	800a0b0 <_free_r>
 8009b50:	e7c7      	b.n	8009ae2 <__ssputs_r+0x46>
	...

08009b54 <_svfiprintf_r>:
 8009b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b58:	4698      	mov	r8, r3
 8009b5a:	898b      	ldrh	r3, [r1, #12]
 8009b5c:	061b      	lsls	r3, r3, #24
 8009b5e:	b09d      	sub	sp, #116	; 0x74
 8009b60:	4607      	mov	r7, r0
 8009b62:	460d      	mov	r5, r1
 8009b64:	4614      	mov	r4, r2
 8009b66:	d50e      	bpl.n	8009b86 <_svfiprintf_r+0x32>
 8009b68:	690b      	ldr	r3, [r1, #16]
 8009b6a:	b963      	cbnz	r3, 8009b86 <_svfiprintf_r+0x32>
 8009b6c:	2140      	movs	r1, #64	; 0x40
 8009b6e:	f000 fb0b 	bl	800a188 <_malloc_r>
 8009b72:	6028      	str	r0, [r5, #0]
 8009b74:	6128      	str	r0, [r5, #16]
 8009b76:	b920      	cbnz	r0, 8009b82 <_svfiprintf_r+0x2e>
 8009b78:	230c      	movs	r3, #12
 8009b7a:	603b      	str	r3, [r7, #0]
 8009b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b80:	e0d1      	b.n	8009d26 <_svfiprintf_r+0x1d2>
 8009b82:	2340      	movs	r3, #64	; 0x40
 8009b84:	616b      	str	r3, [r5, #20]
 8009b86:	2300      	movs	r3, #0
 8009b88:	9309      	str	r3, [sp, #36]	; 0x24
 8009b8a:	2320      	movs	r3, #32
 8009b8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b90:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b94:	2330      	movs	r3, #48	; 0x30
 8009b96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009d40 <_svfiprintf_r+0x1ec>
 8009b9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b9e:	f04f 0901 	mov.w	r9, #1
 8009ba2:	4623      	mov	r3, r4
 8009ba4:	469a      	mov	sl, r3
 8009ba6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009baa:	b10a      	cbz	r2, 8009bb0 <_svfiprintf_r+0x5c>
 8009bac:	2a25      	cmp	r2, #37	; 0x25
 8009bae:	d1f9      	bne.n	8009ba4 <_svfiprintf_r+0x50>
 8009bb0:	ebba 0b04 	subs.w	fp, sl, r4
 8009bb4:	d00b      	beq.n	8009bce <_svfiprintf_r+0x7a>
 8009bb6:	465b      	mov	r3, fp
 8009bb8:	4622      	mov	r2, r4
 8009bba:	4629      	mov	r1, r5
 8009bbc:	4638      	mov	r0, r7
 8009bbe:	f7ff ff6d 	bl	8009a9c <__ssputs_r>
 8009bc2:	3001      	adds	r0, #1
 8009bc4:	f000 80aa 	beq.w	8009d1c <_svfiprintf_r+0x1c8>
 8009bc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bca:	445a      	add	r2, fp
 8009bcc:	9209      	str	r2, [sp, #36]	; 0x24
 8009bce:	f89a 3000 	ldrb.w	r3, [sl]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f000 80a2 	beq.w	8009d1c <_svfiprintf_r+0x1c8>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	f04f 32ff 	mov.w	r2, #4294967295
 8009bde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009be2:	f10a 0a01 	add.w	sl, sl, #1
 8009be6:	9304      	str	r3, [sp, #16]
 8009be8:	9307      	str	r3, [sp, #28]
 8009bea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bee:	931a      	str	r3, [sp, #104]	; 0x68
 8009bf0:	4654      	mov	r4, sl
 8009bf2:	2205      	movs	r2, #5
 8009bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bf8:	4851      	ldr	r0, [pc, #324]	; (8009d40 <_svfiprintf_r+0x1ec>)
 8009bfa:	f7f6 faf9 	bl	80001f0 <memchr>
 8009bfe:	9a04      	ldr	r2, [sp, #16]
 8009c00:	b9d8      	cbnz	r0, 8009c3a <_svfiprintf_r+0xe6>
 8009c02:	06d0      	lsls	r0, r2, #27
 8009c04:	bf44      	itt	mi
 8009c06:	2320      	movmi	r3, #32
 8009c08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c0c:	0711      	lsls	r1, r2, #28
 8009c0e:	bf44      	itt	mi
 8009c10:	232b      	movmi	r3, #43	; 0x2b
 8009c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c16:	f89a 3000 	ldrb.w	r3, [sl]
 8009c1a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c1c:	d015      	beq.n	8009c4a <_svfiprintf_r+0xf6>
 8009c1e:	9a07      	ldr	r2, [sp, #28]
 8009c20:	4654      	mov	r4, sl
 8009c22:	2000      	movs	r0, #0
 8009c24:	f04f 0c0a 	mov.w	ip, #10
 8009c28:	4621      	mov	r1, r4
 8009c2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c2e:	3b30      	subs	r3, #48	; 0x30
 8009c30:	2b09      	cmp	r3, #9
 8009c32:	d94e      	bls.n	8009cd2 <_svfiprintf_r+0x17e>
 8009c34:	b1b0      	cbz	r0, 8009c64 <_svfiprintf_r+0x110>
 8009c36:	9207      	str	r2, [sp, #28]
 8009c38:	e014      	b.n	8009c64 <_svfiprintf_r+0x110>
 8009c3a:	eba0 0308 	sub.w	r3, r0, r8
 8009c3e:	fa09 f303 	lsl.w	r3, r9, r3
 8009c42:	4313      	orrs	r3, r2
 8009c44:	9304      	str	r3, [sp, #16]
 8009c46:	46a2      	mov	sl, r4
 8009c48:	e7d2      	b.n	8009bf0 <_svfiprintf_r+0x9c>
 8009c4a:	9b03      	ldr	r3, [sp, #12]
 8009c4c:	1d19      	adds	r1, r3, #4
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	9103      	str	r1, [sp, #12]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	bfbb      	ittet	lt
 8009c56:	425b      	neglt	r3, r3
 8009c58:	f042 0202 	orrlt.w	r2, r2, #2
 8009c5c:	9307      	strge	r3, [sp, #28]
 8009c5e:	9307      	strlt	r3, [sp, #28]
 8009c60:	bfb8      	it	lt
 8009c62:	9204      	strlt	r2, [sp, #16]
 8009c64:	7823      	ldrb	r3, [r4, #0]
 8009c66:	2b2e      	cmp	r3, #46	; 0x2e
 8009c68:	d10c      	bne.n	8009c84 <_svfiprintf_r+0x130>
 8009c6a:	7863      	ldrb	r3, [r4, #1]
 8009c6c:	2b2a      	cmp	r3, #42	; 0x2a
 8009c6e:	d135      	bne.n	8009cdc <_svfiprintf_r+0x188>
 8009c70:	9b03      	ldr	r3, [sp, #12]
 8009c72:	1d1a      	adds	r2, r3, #4
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	9203      	str	r2, [sp, #12]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	bfb8      	it	lt
 8009c7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c80:	3402      	adds	r4, #2
 8009c82:	9305      	str	r3, [sp, #20]
 8009c84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009d50 <_svfiprintf_r+0x1fc>
 8009c88:	7821      	ldrb	r1, [r4, #0]
 8009c8a:	2203      	movs	r2, #3
 8009c8c:	4650      	mov	r0, sl
 8009c8e:	f7f6 faaf 	bl	80001f0 <memchr>
 8009c92:	b140      	cbz	r0, 8009ca6 <_svfiprintf_r+0x152>
 8009c94:	2340      	movs	r3, #64	; 0x40
 8009c96:	eba0 000a 	sub.w	r0, r0, sl
 8009c9a:	fa03 f000 	lsl.w	r0, r3, r0
 8009c9e:	9b04      	ldr	r3, [sp, #16]
 8009ca0:	4303      	orrs	r3, r0
 8009ca2:	3401      	adds	r4, #1
 8009ca4:	9304      	str	r3, [sp, #16]
 8009ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009caa:	4826      	ldr	r0, [pc, #152]	; (8009d44 <_svfiprintf_r+0x1f0>)
 8009cac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cb0:	2206      	movs	r2, #6
 8009cb2:	f7f6 fa9d 	bl	80001f0 <memchr>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d038      	beq.n	8009d2c <_svfiprintf_r+0x1d8>
 8009cba:	4b23      	ldr	r3, [pc, #140]	; (8009d48 <_svfiprintf_r+0x1f4>)
 8009cbc:	bb1b      	cbnz	r3, 8009d06 <_svfiprintf_r+0x1b2>
 8009cbe:	9b03      	ldr	r3, [sp, #12]
 8009cc0:	3307      	adds	r3, #7
 8009cc2:	f023 0307 	bic.w	r3, r3, #7
 8009cc6:	3308      	adds	r3, #8
 8009cc8:	9303      	str	r3, [sp, #12]
 8009cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ccc:	4433      	add	r3, r6
 8009cce:	9309      	str	r3, [sp, #36]	; 0x24
 8009cd0:	e767      	b.n	8009ba2 <_svfiprintf_r+0x4e>
 8009cd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cd6:	460c      	mov	r4, r1
 8009cd8:	2001      	movs	r0, #1
 8009cda:	e7a5      	b.n	8009c28 <_svfiprintf_r+0xd4>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	3401      	adds	r4, #1
 8009ce0:	9305      	str	r3, [sp, #20]
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	f04f 0c0a 	mov.w	ip, #10
 8009ce8:	4620      	mov	r0, r4
 8009cea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cee:	3a30      	subs	r2, #48	; 0x30
 8009cf0:	2a09      	cmp	r2, #9
 8009cf2:	d903      	bls.n	8009cfc <_svfiprintf_r+0x1a8>
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d0c5      	beq.n	8009c84 <_svfiprintf_r+0x130>
 8009cf8:	9105      	str	r1, [sp, #20]
 8009cfa:	e7c3      	b.n	8009c84 <_svfiprintf_r+0x130>
 8009cfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d00:	4604      	mov	r4, r0
 8009d02:	2301      	movs	r3, #1
 8009d04:	e7f0      	b.n	8009ce8 <_svfiprintf_r+0x194>
 8009d06:	ab03      	add	r3, sp, #12
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	462a      	mov	r2, r5
 8009d0c:	4b0f      	ldr	r3, [pc, #60]	; (8009d4c <_svfiprintf_r+0x1f8>)
 8009d0e:	a904      	add	r1, sp, #16
 8009d10:	4638      	mov	r0, r7
 8009d12:	f3af 8000 	nop.w
 8009d16:	1c42      	adds	r2, r0, #1
 8009d18:	4606      	mov	r6, r0
 8009d1a:	d1d6      	bne.n	8009cca <_svfiprintf_r+0x176>
 8009d1c:	89ab      	ldrh	r3, [r5, #12]
 8009d1e:	065b      	lsls	r3, r3, #25
 8009d20:	f53f af2c 	bmi.w	8009b7c <_svfiprintf_r+0x28>
 8009d24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d26:	b01d      	add	sp, #116	; 0x74
 8009d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d2c:	ab03      	add	r3, sp, #12
 8009d2e:	9300      	str	r3, [sp, #0]
 8009d30:	462a      	mov	r2, r5
 8009d32:	4b06      	ldr	r3, [pc, #24]	; (8009d4c <_svfiprintf_r+0x1f8>)
 8009d34:	a904      	add	r1, sp, #16
 8009d36:	4638      	mov	r0, r7
 8009d38:	f000 f87a 	bl	8009e30 <_printf_i>
 8009d3c:	e7eb      	b.n	8009d16 <_svfiprintf_r+0x1c2>
 8009d3e:	bf00      	nop
 8009d40:	0800aa51 	.word	0x0800aa51
 8009d44:	0800aa5b 	.word	0x0800aa5b
 8009d48:	00000000 	.word	0x00000000
 8009d4c:	08009a9d 	.word	0x08009a9d
 8009d50:	0800aa57 	.word	0x0800aa57

08009d54 <_printf_common>:
 8009d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d58:	4616      	mov	r6, r2
 8009d5a:	4699      	mov	r9, r3
 8009d5c:	688a      	ldr	r2, [r1, #8]
 8009d5e:	690b      	ldr	r3, [r1, #16]
 8009d60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d64:	4293      	cmp	r3, r2
 8009d66:	bfb8      	it	lt
 8009d68:	4613      	movlt	r3, r2
 8009d6a:	6033      	str	r3, [r6, #0]
 8009d6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d70:	4607      	mov	r7, r0
 8009d72:	460c      	mov	r4, r1
 8009d74:	b10a      	cbz	r2, 8009d7a <_printf_common+0x26>
 8009d76:	3301      	adds	r3, #1
 8009d78:	6033      	str	r3, [r6, #0]
 8009d7a:	6823      	ldr	r3, [r4, #0]
 8009d7c:	0699      	lsls	r1, r3, #26
 8009d7e:	bf42      	ittt	mi
 8009d80:	6833      	ldrmi	r3, [r6, #0]
 8009d82:	3302      	addmi	r3, #2
 8009d84:	6033      	strmi	r3, [r6, #0]
 8009d86:	6825      	ldr	r5, [r4, #0]
 8009d88:	f015 0506 	ands.w	r5, r5, #6
 8009d8c:	d106      	bne.n	8009d9c <_printf_common+0x48>
 8009d8e:	f104 0a19 	add.w	sl, r4, #25
 8009d92:	68e3      	ldr	r3, [r4, #12]
 8009d94:	6832      	ldr	r2, [r6, #0]
 8009d96:	1a9b      	subs	r3, r3, r2
 8009d98:	42ab      	cmp	r3, r5
 8009d9a:	dc26      	bgt.n	8009dea <_printf_common+0x96>
 8009d9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009da0:	1e13      	subs	r3, r2, #0
 8009da2:	6822      	ldr	r2, [r4, #0]
 8009da4:	bf18      	it	ne
 8009da6:	2301      	movne	r3, #1
 8009da8:	0692      	lsls	r2, r2, #26
 8009daa:	d42b      	bmi.n	8009e04 <_printf_common+0xb0>
 8009dac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009db0:	4649      	mov	r1, r9
 8009db2:	4638      	mov	r0, r7
 8009db4:	47c0      	blx	r8
 8009db6:	3001      	adds	r0, #1
 8009db8:	d01e      	beq.n	8009df8 <_printf_common+0xa4>
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	68e5      	ldr	r5, [r4, #12]
 8009dbe:	6832      	ldr	r2, [r6, #0]
 8009dc0:	f003 0306 	and.w	r3, r3, #6
 8009dc4:	2b04      	cmp	r3, #4
 8009dc6:	bf08      	it	eq
 8009dc8:	1aad      	subeq	r5, r5, r2
 8009dca:	68a3      	ldr	r3, [r4, #8]
 8009dcc:	6922      	ldr	r2, [r4, #16]
 8009dce:	bf0c      	ite	eq
 8009dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009dd4:	2500      	movne	r5, #0
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	bfc4      	itt	gt
 8009dda:	1a9b      	subgt	r3, r3, r2
 8009ddc:	18ed      	addgt	r5, r5, r3
 8009dde:	2600      	movs	r6, #0
 8009de0:	341a      	adds	r4, #26
 8009de2:	42b5      	cmp	r5, r6
 8009de4:	d11a      	bne.n	8009e1c <_printf_common+0xc8>
 8009de6:	2000      	movs	r0, #0
 8009de8:	e008      	b.n	8009dfc <_printf_common+0xa8>
 8009dea:	2301      	movs	r3, #1
 8009dec:	4652      	mov	r2, sl
 8009dee:	4649      	mov	r1, r9
 8009df0:	4638      	mov	r0, r7
 8009df2:	47c0      	blx	r8
 8009df4:	3001      	adds	r0, #1
 8009df6:	d103      	bne.n	8009e00 <_printf_common+0xac>
 8009df8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e00:	3501      	adds	r5, #1
 8009e02:	e7c6      	b.n	8009d92 <_printf_common+0x3e>
 8009e04:	18e1      	adds	r1, r4, r3
 8009e06:	1c5a      	adds	r2, r3, #1
 8009e08:	2030      	movs	r0, #48	; 0x30
 8009e0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e0e:	4422      	add	r2, r4
 8009e10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e18:	3302      	adds	r3, #2
 8009e1a:	e7c7      	b.n	8009dac <_printf_common+0x58>
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	4622      	mov	r2, r4
 8009e20:	4649      	mov	r1, r9
 8009e22:	4638      	mov	r0, r7
 8009e24:	47c0      	blx	r8
 8009e26:	3001      	adds	r0, #1
 8009e28:	d0e6      	beq.n	8009df8 <_printf_common+0xa4>
 8009e2a:	3601      	adds	r6, #1
 8009e2c:	e7d9      	b.n	8009de2 <_printf_common+0x8e>
	...

08009e30 <_printf_i>:
 8009e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e34:	7e0f      	ldrb	r7, [r1, #24]
 8009e36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e38:	2f78      	cmp	r7, #120	; 0x78
 8009e3a:	4691      	mov	r9, r2
 8009e3c:	4680      	mov	r8, r0
 8009e3e:	460c      	mov	r4, r1
 8009e40:	469a      	mov	sl, r3
 8009e42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e46:	d807      	bhi.n	8009e58 <_printf_i+0x28>
 8009e48:	2f62      	cmp	r7, #98	; 0x62
 8009e4a:	d80a      	bhi.n	8009e62 <_printf_i+0x32>
 8009e4c:	2f00      	cmp	r7, #0
 8009e4e:	f000 80d8 	beq.w	800a002 <_printf_i+0x1d2>
 8009e52:	2f58      	cmp	r7, #88	; 0x58
 8009e54:	f000 80a3 	beq.w	8009f9e <_printf_i+0x16e>
 8009e58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e60:	e03a      	b.n	8009ed8 <_printf_i+0xa8>
 8009e62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e66:	2b15      	cmp	r3, #21
 8009e68:	d8f6      	bhi.n	8009e58 <_printf_i+0x28>
 8009e6a:	a101      	add	r1, pc, #4	; (adr r1, 8009e70 <_printf_i+0x40>)
 8009e6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e70:	08009ec9 	.word	0x08009ec9
 8009e74:	08009edd 	.word	0x08009edd
 8009e78:	08009e59 	.word	0x08009e59
 8009e7c:	08009e59 	.word	0x08009e59
 8009e80:	08009e59 	.word	0x08009e59
 8009e84:	08009e59 	.word	0x08009e59
 8009e88:	08009edd 	.word	0x08009edd
 8009e8c:	08009e59 	.word	0x08009e59
 8009e90:	08009e59 	.word	0x08009e59
 8009e94:	08009e59 	.word	0x08009e59
 8009e98:	08009e59 	.word	0x08009e59
 8009e9c:	08009fe9 	.word	0x08009fe9
 8009ea0:	08009f0d 	.word	0x08009f0d
 8009ea4:	08009fcb 	.word	0x08009fcb
 8009ea8:	08009e59 	.word	0x08009e59
 8009eac:	08009e59 	.word	0x08009e59
 8009eb0:	0800a00b 	.word	0x0800a00b
 8009eb4:	08009e59 	.word	0x08009e59
 8009eb8:	08009f0d 	.word	0x08009f0d
 8009ebc:	08009e59 	.word	0x08009e59
 8009ec0:	08009e59 	.word	0x08009e59
 8009ec4:	08009fd3 	.word	0x08009fd3
 8009ec8:	682b      	ldr	r3, [r5, #0]
 8009eca:	1d1a      	adds	r2, r3, #4
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	602a      	str	r2, [r5, #0]
 8009ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ed4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e0a3      	b.n	800a024 <_printf_i+0x1f4>
 8009edc:	6820      	ldr	r0, [r4, #0]
 8009ede:	6829      	ldr	r1, [r5, #0]
 8009ee0:	0606      	lsls	r6, r0, #24
 8009ee2:	f101 0304 	add.w	r3, r1, #4
 8009ee6:	d50a      	bpl.n	8009efe <_printf_i+0xce>
 8009ee8:	680e      	ldr	r6, [r1, #0]
 8009eea:	602b      	str	r3, [r5, #0]
 8009eec:	2e00      	cmp	r6, #0
 8009eee:	da03      	bge.n	8009ef8 <_printf_i+0xc8>
 8009ef0:	232d      	movs	r3, #45	; 0x2d
 8009ef2:	4276      	negs	r6, r6
 8009ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ef8:	485e      	ldr	r0, [pc, #376]	; (800a074 <_printf_i+0x244>)
 8009efa:	230a      	movs	r3, #10
 8009efc:	e019      	b.n	8009f32 <_printf_i+0x102>
 8009efe:	680e      	ldr	r6, [r1, #0]
 8009f00:	602b      	str	r3, [r5, #0]
 8009f02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f06:	bf18      	it	ne
 8009f08:	b236      	sxthne	r6, r6
 8009f0a:	e7ef      	b.n	8009eec <_printf_i+0xbc>
 8009f0c:	682b      	ldr	r3, [r5, #0]
 8009f0e:	6820      	ldr	r0, [r4, #0]
 8009f10:	1d19      	adds	r1, r3, #4
 8009f12:	6029      	str	r1, [r5, #0]
 8009f14:	0601      	lsls	r1, r0, #24
 8009f16:	d501      	bpl.n	8009f1c <_printf_i+0xec>
 8009f18:	681e      	ldr	r6, [r3, #0]
 8009f1a:	e002      	b.n	8009f22 <_printf_i+0xf2>
 8009f1c:	0646      	lsls	r6, r0, #25
 8009f1e:	d5fb      	bpl.n	8009f18 <_printf_i+0xe8>
 8009f20:	881e      	ldrh	r6, [r3, #0]
 8009f22:	4854      	ldr	r0, [pc, #336]	; (800a074 <_printf_i+0x244>)
 8009f24:	2f6f      	cmp	r7, #111	; 0x6f
 8009f26:	bf0c      	ite	eq
 8009f28:	2308      	moveq	r3, #8
 8009f2a:	230a      	movne	r3, #10
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f32:	6865      	ldr	r5, [r4, #4]
 8009f34:	60a5      	str	r5, [r4, #8]
 8009f36:	2d00      	cmp	r5, #0
 8009f38:	bfa2      	ittt	ge
 8009f3a:	6821      	ldrge	r1, [r4, #0]
 8009f3c:	f021 0104 	bicge.w	r1, r1, #4
 8009f40:	6021      	strge	r1, [r4, #0]
 8009f42:	b90e      	cbnz	r6, 8009f48 <_printf_i+0x118>
 8009f44:	2d00      	cmp	r5, #0
 8009f46:	d04d      	beq.n	8009fe4 <_printf_i+0x1b4>
 8009f48:	4615      	mov	r5, r2
 8009f4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f4e:	fb03 6711 	mls	r7, r3, r1, r6
 8009f52:	5dc7      	ldrb	r7, [r0, r7]
 8009f54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f58:	4637      	mov	r7, r6
 8009f5a:	42bb      	cmp	r3, r7
 8009f5c:	460e      	mov	r6, r1
 8009f5e:	d9f4      	bls.n	8009f4a <_printf_i+0x11a>
 8009f60:	2b08      	cmp	r3, #8
 8009f62:	d10b      	bne.n	8009f7c <_printf_i+0x14c>
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	07de      	lsls	r6, r3, #31
 8009f68:	d508      	bpl.n	8009f7c <_printf_i+0x14c>
 8009f6a:	6923      	ldr	r3, [r4, #16]
 8009f6c:	6861      	ldr	r1, [r4, #4]
 8009f6e:	4299      	cmp	r1, r3
 8009f70:	bfde      	ittt	le
 8009f72:	2330      	movle	r3, #48	; 0x30
 8009f74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f7c:	1b52      	subs	r2, r2, r5
 8009f7e:	6122      	str	r2, [r4, #16]
 8009f80:	f8cd a000 	str.w	sl, [sp]
 8009f84:	464b      	mov	r3, r9
 8009f86:	aa03      	add	r2, sp, #12
 8009f88:	4621      	mov	r1, r4
 8009f8a:	4640      	mov	r0, r8
 8009f8c:	f7ff fee2 	bl	8009d54 <_printf_common>
 8009f90:	3001      	adds	r0, #1
 8009f92:	d14c      	bne.n	800a02e <_printf_i+0x1fe>
 8009f94:	f04f 30ff 	mov.w	r0, #4294967295
 8009f98:	b004      	add	sp, #16
 8009f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f9e:	4835      	ldr	r0, [pc, #212]	; (800a074 <_printf_i+0x244>)
 8009fa0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009fa4:	6829      	ldr	r1, [r5, #0]
 8009fa6:	6823      	ldr	r3, [r4, #0]
 8009fa8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009fac:	6029      	str	r1, [r5, #0]
 8009fae:	061d      	lsls	r5, r3, #24
 8009fb0:	d514      	bpl.n	8009fdc <_printf_i+0x1ac>
 8009fb2:	07df      	lsls	r7, r3, #31
 8009fb4:	bf44      	itt	mi
 8009fb6:	f043 0320 	orrmi.w	r3, r3, #32
 8009fba:	6023      	strmi	r3, [r4, #0]
 8009fbc:	b91e      	cbnz	r6, 8009fc6 <_printf_i+0x196>
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	f023 0320 	bic.w	r3, r3, #32
 8009fc4:	6023      	str	r3, [r4, #0]
 8009fc6:	2310      	movs	r3, #16
 8009fc8:	e7b0      	b.n	8009f2c <_printf_i+0xfc>
 8009fca:	6823      	ldr	r3, [r4, #0]
 8009fcc:	f043 0320 	orr.w	r3, r3, #32
 8009fd0:	6023      	str	r3, [r4, #0]
 8009fd2:	2378      	movs	r3, #120	; 0x78
 8009fd4:	4828      	ldr	r0, [pc, #160]	; (800a078 <_printf_i+0x248>)
 8009fd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009fda:	e7e3      	b.n	8009fa4 <_printf_i+0x174>
 8009fdc:	0659      	lsls	r1, r3, #25
 8009fde:	bf48      	it	mi
 8009fe0:	b2b6      	uxthmi	r6, r6
 8009fe2:	e7e6      	b.n	8009fb2 <_printf_i+0x182>
 8009fe4:	4615      	mov	r5, r2
 8009fe6:	e7bb      	b.n	8009f60 <_printf_i+0x130>
 8009fe8:	682b      	ldr	r3, [r5, #0]
 8009fea:	6826      	ldr	r6, [r4, #0]
 8009fec:	6961      	ldr	r1, [r4, #20]
 8009fee:	1d18      	adds	r0, r3, #4
 8009ff0:	6028      	str	r0, [r5, #0]
 8009ff2:	0635      	lsls	r5, r6, #24
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	d501      	bpl.n	8009ffc <_printf_i+0x1cc>
 8009ff8:	6019      	str	r1, [r3, #0]
 8009ffa:	e002      	b.n	800a002 <_printf_i+0x1d2>
 8009ffc:	0670      	lsls	r0, r6, #25
 8009ffe:	d5fb      	bpl.n	8009ff8 <_printf_i+0x1c8>
 800a000:	8019      	strh	r1, [r3, #0]
 800a002:	2300      	movs	r3, #0
 800a004:	6123      	str	r3, [r4, #16]
 800a006:	4615      	mov	r5, r2
 800a008:	e7ba      	b.n	8009f80 <_printf_i+0x150>
 800a00a:	682b      	ldr	r3, [r5, #0]
 800a00c:	1d1a      	adds	r2, r3, #4
 800a00e:	602a      	str	r2, [r5, #0]
 800a010:	681d      	ldr	r5, [r3, #0]
 800a012:	6862      	ldr	r2, [r4, #4]
 800a014:	2100      	movs	r1, #0
 800a016:	4628      	mov	r0, r5
 800a018:	f7f6 f8ea 	bl	80001f0 <memchr>
 800a01c:	b108      	cbz	r0, 800a022 <_printf_i+0x1f2>
 800a01e:	1b40      	subs	r0, r0, r5
 800a020:	6060      	str	r0, [r4, #4]
 800a022:	6863      	ldr	r3, [r4, #4]
 800a024:	6123      	str	r3, [r4, #16]
 800a026:	2300      	movs	r3, #0
 800a028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a02c:	e7a8      	b.n	8009f80 <_printf_i+0x150>
 800a02e:	6923      	ldr	r3, [r4, #16]
 800a030:	462a      	mov	r2, r5
 800a032:	4649      	mov	r1, r9
 800a034:	4640      	mov	r0, r8
 800a036:	47d0      	blx	sl
 800a038:	3001      	adds	r0, #1
 800a03a:	d0ab      	beq.n	8009f94 <_printf_i+0x164>
 800a03c:	6823      	ldr	r3, [r4, #0]
 800a03e:	079b      	lsls	r3, r3, #30
 800a040:	d413      	bmi.n	800a06a <_printf_i+0x23a>
 800a042:	68e0      	ldr	r0, [r4, #12]
 800a044:	9b03      	ldr	r3, [sp, #12]
 800a046:	4298      	cmp	r0, r3
 800a048:	bfb8      	it	lt
 800a04a:	4618      	movlt	r0, r3
 800a04c:	e7a4      	b.n	8009f98 <_printf_i+0x168>
 800a04e:	2301      	movs	r3, #1
 800a050:	4632      	mov	r2, r6
 800a052:	4649      	mov	r1, r9
 800a054:	4640      	mov	r0, r8
 800a056:	47d0      	blx	sl
 800a058:	3001      	adds	r0, #1
 800a05a:	d09b      	beq.n	8009f94 <_printf_i+0x164>
 800a05c:	3501      	adds	r5, #1
 800a05e:	68e3      	ldr	r3, [r4, #12]
 800a060:	9903      	ldr	r1, [sp, #12]
 800a062:	1a5b      	subs	r3, r3, r1
 800a064:	42ab      	cmp	r3, r5
 800a066:	dcf2      	bgt.n	800a04e <_printf_i+0x21e>
 800a068:	e7eb      	b.n	800a042 <_printf_i+0x212>
 800a06a:	2500      	movs	r5, #0
 800a06c:	f104 0619 	add.w	r6, r4, #25
 800a070:	e7f5      	b.n	800a05e <_printf_i+0x22e>
 800a072:	bf00      	nop
 800a074:	0800aa62 	.word	0x0800aa62
 800a078:	0800aa73 	.word	0x0800aa73

0800a07c <memmove>:
 800a07c:	4288      	cmp	r0, r1
 800a07e:	b510      	push	{r4, lr}
 800a080:	eb01 0402 	add.w	r4, r1, r2
 800a084:	d902      	bls.n	800a08c <memmove+0x10>
 800a086:	4284      	cmp	r4, r0
 800a088:	4623      	mov	r3, r4
 800a08a:	d807      	bhi.n	800a09c <memmove+0x20>
 800a08c:	1e43      	subs	r3, r0, #1
 800a08e:	42a1      	cmp	r1, r4
 800a090:	d008      	beq.n	800a0a4 <memmove+0x28>
 800a092:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a096:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a09a:	e7f8      	b.n	800a08e <memmove+0x12>
 800a09c:	4402      	add	r2, r0
 800a09e:	4601      	mov	r1, r0
 800a0a0:	428a      	cmp	r2, r1
 800a0a2:	d100      	bne.n	800a0a6 <memmove+0x2a>
 800a0a4:	bd10      	pop	{r4, pc}
 800a0a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0ae:	e7f7      	b.n	800a0a0 <memmove+0x24>

0800a0b0 <_free_r>:
 800a0b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0b2:	2900      	cmp	r1, #0
 800a0b4:	d044      	beq.n	800a140 <_free_r+0x90>
 800a0b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0ba:	9001      	str	r0, [sp, #4]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f1a1 0404 	sub.w	r4, r1, #4
 800a0c2:	bfb8      	it	lt
 800a0c4:	18e4      	addlt	r4, r4, r3
 800a0c6:	f000 f913 	bl	800a2f0 <__malloc_lock>
 800a0ca:	4a1e      	ldr	r2, [pc, #120]	; (800a144 <_free_r+0x94>)
 800a0cc:	9801      	ldr	r0, [sp, #4]
 800a0ce:	6813      	ldr	r3, [r2, #0]
 800a0d0:	b933      	cbnz	r3, 800a0e0 <_free_r+0x30>
 800a0d2:	6063      	str	r3, [r4, #4]
 800a0d4:	6014      	str	r4, [r2, #0]
 800a0d6:	b003      	add	sp, #12
 800a0d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0dc:	f000 b90e 	b.w	800a2fc <__malloc_unlock>
 800a0e0:	42a3      	cmp	r3, r4
 800a0e2:	d908      	bls.n	800a0f6 <_free_r+0x46>
 800a0e4:	6825      	ldr	r5, [r4, #0]
 800a0e6:	1961      	adds	r1, r4, r5
 800a0e8:	428b      	cmp	r3, r1
 800a0ea:	bf01      	itttt	eq
 800a0ec:	6819      	ldreq	r1, [r3, #0]
 800a0ee:	685b      	ldreq	r3, [r3, #4]
 800a0f0:	1949      	addeq	r1, r1, r5
 800a0f2:	6021      	streq	r1, [r4, #0]
 800a0f4:	e7ed      	b.n	800a0d2 <_free_r+0x22>
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	b10b      	cbz	r3, 800a100 <_free_r+0x50>
 800a0fc:	42a3      	cmp	r3, r4
 800a0fe:	d9fa      	bls.n	800a0f6 <_free_r+0x46>
 800a100:	6811      	ldr	r1, [r2, #0]
 800a102:	1855      	adds	r5, r2, r1
 800a104:	42a5      	cmp	r5, r4
 800a106:	d10b      	bne.n	800a120 <_free_r+0x70>
 800a108:	6824      	ldr	r4, [r4, #0]
 800a10a:	4421      	add	r1, r4
 800a10c:	1854      	adds	r4, r2, r1
 800a10e:	42a3      	cmp	r3, r4
 800a110:	6011      	str	r1, [r2, #0]
 800a112:	d1e0      	bne.n	800a0d6 <_free_r+0x26>
 800a114:	681c      	ldr	r4, [r3, #0]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	6053      	str	r3, [r2, #4]
 800a11a:	4421      	add	r1, r4
 800a11c:	6011      	str	r1, [r2, #0]
 800a11e:	e7da      	b.n	800a0d6 <_free_r+0x26>
 800a120:	d902      	bls.n	800a128 <_free_r+0x78>
 800a122:	230c      	movs	r3, #12
 800a124:	6003      	str	r3, [r0, #0]
 800a126:	e7d6      	b.n	800a0d6 <_free_r+0x26>
 800a128:	6825      	ldr	r5, [r4, #0]
 800a12a:	1961      	adds	r1, r4, r5
 800a12c:	428b      	cmp	r3, r1
 800a12e:	bf04      	itt	eq
 800a130:	6819      	ldreq	r1, [r3, #0]
 800a132:	685b      	ldreq	r3, [r3, #4]
 800a134:	6063      	str	r3, [r4, #4]
 800a136:	bf04      	itt	eq
 800a138:	1949      	addeq	r1, r1, r5
 800a13a:	6021      	streq	r1, [r4, #0]
 800a13c:	6054      	str	r4, [r2, #4]
 800a13e:	e7ca      	b.n	800a0d6 <_free_r+0x26>
 800a140:	b003      	add	sp, #12
 800a142:	bd30      	pop	{r4, r5, pc}
 800a144:	200072d0 	.word	0x200072d0

0800a148 <sbrk_aligned>:
 800a148:	b570      	push	{r4, r5, r6, lr}
 800a14a:	4e0e      	ldr	r6, [pc, #56]	; (800a184 <sbrk_aligned+0x3c>)
 800a14c:	460c      	mov	r4, r1
 800a14e:	6831      	ldr	r1, [r6, #0]
 800a150:	4605      	mov	r5, r0
 800a152:	b911      	cbnz	r1, 800a15a <sbrk_aligned+0x12>
 800a154:	f000 f8bc 	bl	800a2d0 <_sbrk_r>
 800a158:	6030      	str	r0, [r6, #0]
 800a15a:	4621      	mov	r1, r4
 800a15c:	4628      	mov	r0, r5
 800a15e:	f000 f8b7 	bl	800a2d0 <_sbrk_r>
 800a162:	1c43      	adds	r3, r0, #1
 800a164:	d00a      	beq.n	800a17c <sbrk_aligned+0x34>
 800a166:	1cc4      	adds	r4, r0, #3
 800a168:	f024 0403 	bic.w	r4, r4, #3
 800a16c:	42a0      	cmp	r0, r4
 800a16e:	d007      	beq.n	800a180 <sbrk_aligned+0x38>
 800a170:	1a21      	subs	r1, r4, r0
 800a172:	4628      	mov	r0, r5
 800a174:	f000 f8ac 	bl	800a2d0 <_sbrk_r>
 800a178:	3001      	adds	r0, #1
 800a17a:	d101      	bne.n	800a180 <sbrk_aligned+0x38>
 800a17c:	f04f 34ff 	mov.w	r4, #4294967295
 800a180:	4620      	mov	r0, r4
 800a182:	bd70      	pop	{r4, r5, r6, pc}
 800a184:	200072d4 	.word	0x200072d4

0800a188 <_malloc_r>:
 800a188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a18c:	1ccd      	adds	r5, r1, #3
 800a18e:	f025 0503 	bic.w	r5, r5, #3
 800a192:	3508      	adds	r5, #8
 800a194:	2d0c      	cmp	r5, #12
 800a196:	bf38      	it	cc
 800a198:	250c      	movcc	r5, #12
 800a19a:	2d00      	cmp	r5, #0
 800a19c:	4607      	mov	r7, r0
 800a19e:	db01      	blt.n	800a1a4 <_malloc_r+0x1c>
 800a1a0:	42a9      	cmp	r1, r5
 800a1a2:	d905      	bls.n	800a1b0 <_malloc_r+0x28>
 800a1a4:	230c      	movs	r3, #12
 800a1a6:	603b      	str	r3, [r7, #0]
 800a1a8:	2600      	movs	r6, #0
 800a1aa:	4630      	mov	r0, r6
 800a1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1b0:	4e2e      	ldr	r6, [pc, #184]	; (800a26c <_malloc_r+0xe4>)
 800a1b2:	f000 f89d 	bl	800a2f0 <__malloc_lock>
 800a1b6:	6833      	ldr	r3, [r6, #0]
 800a1b8:	461c      	mov	r4, r3
 800a1ba:	bb34      	cbnz	r4, 800a20a <_malloc_r+0x82>
 800a1bc:	4629      	mov	r1, r5
 800a1be:	4638      	mov	r0, r7
 800a1c0:	f7ff ffc2 	bl	800a148 <sbrk_aligned>
 800a1c4:	1c43      	adds	r3, r0, #1
 800a1c6:	4604      	mov	r4, r0
 800a1c8:	d14d      	bne.n	800a266 <_malloc_r+0xde>
 800a1ca:	6834      	ldr	r4, [r6, #0]
 800a1cc:	4626      	mov	r6, r4
 800a1ce:	2e00      	cmp	r6, #0
 800a1d0:	d140      	bne.n	800a254 <_malloc_r+0xcc>
 800a1d2:	6823      	ldr	r3, [r4, #0]
 800a1d4:	4631      	mov	r1, r6
 800a1d6:	4638      	mov	r0, r7
 800a1d8:	eb04 0803 	add.w	r8, r4, r3
 800a1dc:	f000 f878 	bl	800a2d0 <_sbrk_r>
 800a1e0:	4580      	cmp	r8, r0
 800a1e2:	d13a      	bne.n	800a25a <_malloc_r+0xd2>
 800a1e4:	6821      	ldr	r1, [r4, #0]
 800a1e6:	3503      	adds	r5, #3
 800a1e8:	1a6d      	subs	r5, r5, r1
 800a1ea:	f025 0503 	bic.w	r5, r5, #3
 800a1ee:	3508      	adds	r5, #8
 800a1f0:	2d0c      	cmp	r5, #12
 800a1f2:	bf38      	it	cc
 800a1f4:	250c      	movcc	r5, #12
 800a1f6:	4629      	mov	r1, r5
 800a1f8:	4638      	mov	r0, r7
 800a1fa:	f7ff ffa5 	bl	800a148 <sbrk_aligned>
 800a1fe:	3001      	adds	r0, #1
 800a200:	d02b      	beq.n	800a25a <_malloc_r+0xd2>
 800a202:	6823      	ldr	r3, [r4, #0]
 800a204:	442b      	add	r3, r5
 800a206:	6023      	str	r3, [r4, #0]
 800a208:	e00e      	b.n	800a228 <_malloc_r+0xa0>
 800a20a:	6822      	ldr	r2, [r4, #0]
 800a20c:	1b52      	subs	r2, r2, r5
 800a20e:	d41e      	bmi.n	800a24e <_malloc_r+0xc6>
 800a210:	2a0b      	cmp	r2, #11
 800a212:	d916      	bls.n	800a242 <_malloc_r+0xba>
 800a214:	1961      	adds	r1, r4, r5
 800a216:	42a3      	cmp	r3, r4
 800a218:	6025      	str	r5, [r4, #0]
 800a21a:	bf18      	it	ne
 800a21c:	6059      	strne	r1, [r3, #4]
 800a21e:	6863      	ldr	r3, [r4, #4]
 800a220:	bf08      	it	eq
 800a222:	6031      	streq	r1, [r6, #0]
 800a224:	5162      	str	r2, [r4, r5]
 800a226:	604b      	str	r3, [r1, #4]
 800a228:	4638      	mov	r0, r7
 800a22a:	f104 060b 	add.w	r6, r4, #11
 800a22e:	f000 f865 	bl	800a2fc <__malloc_unlock>
 800a232:	f026 0607 	bic.w	r6, r6, #7
 800a236:	1d23      	adds	r3, r4, #4
 800a238:	1af2      	subs	r2, r6, r3
 800a23a:	d0b6      	beq.n	800a1aa <_malloc_r+0x22>
 800a23c:	1b9b      	subs	r3, r3, r6
 800a23e:	50a3      	str	r3, [r4, r2]
 800a240:	e7b3      	b.n	800a1aa <_malloc_r+0x22>
 800a242:	6862      	ldr	r2, [r4, #4]
 800a244:	42a3      	cmp	r3, r4
 800a246:	bf0c      	ite	eq
 800a248:	6032      	streq	r2, [r6, #0]
 800a24a:	605a      	strne	r2, [r3, #4]
 800a24c:	e7ec      	b.n	800a228 <_malloc_r+0xa0>
 800a24e:	4623      	mov	r3, r4
 800a250:	6864      	ldr	r4, [r4, #4]
 800a252:	e7b2      	b.n	800a1ba <_malloc_r+0x32>
 800a254:	4634      	mov	r4, r6
 800a256:	6876      	ldr	r6, [r6, #4]
 800a258:	e7b9      	b.n	800a1ce <_malloc_r+0x46>
 800a25a:	230c      	movs	r3, #12
 800a25c:	603b      	str	r3, [r7, #0]
 800a25e:	4638      	mov	r0, r7
 800a260:	f000 f84c 	bl	800a2fc <__malloc_unlock>
 800a264:	e7a1      	b.n	800a1aa <_malloc_r+0x22>
 800a266:	6025      	str	r5, [r4, #0]
 800a268:	e7de      	b.n	800a228 <_malloc_r+0xa0>
 800a26a:	bf00      	nop
 800a26c:	200072d0 	.word	0x200072d0

0800a270 <_realloc_r>:
 800a270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a274:	4680      	mov	r8, r0
 800a276:	4614      	mov	r4, r2
 800a278:	460e      	mov	r6, r1
 800a27a:	b921      	cbnz	r1, 800a286 <_realloc_r+0x16>
 800a27c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a280:	4611      	mov	r1, r2
 800a282:	f7ff bf81 	b.w	800a188 <_malloc_r>
 800a286:	b92a      	cbnz	r2, 800a294 <_realloc_r+0x24>
 800a288:	f7ff ff12 	bl	800a0b0 <_free_r>
 800a28c:	4625      	mov	r5, r4
 800a28e:	4628      	mov	r0, r5
 800a290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a294:	f000 f838 	bl	800a308 <_malloc_usable_size_r>
 800a298:	4284      	cmp	r4, r0
 800a29a:	4607      	mov	r7, r0
 800a29c:	d802      	bhi.n	800a2a4 <_realloc_r+0x34>
 800a29e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2a2:	d812      	bhi.n	800a2ca <_realloc_r+0x5a>
 800a2a4:	4621      	mov	r1, r4
 800a2a6:	4640      	mov	r0, r8
 800a2a8:	f7ff ff6e 	bl	800a188 <_malloc_r>
 800a2ac:	4605      	mov	r5, r0
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	d0ed      	beq.n	800a28e <_realloc_r+0x1e>
 800a2b2:	42bc      	cmp	r4, r7
 800a2b4:	4622      	mov	r2, r4
 800a2b6:	4631      	mov	r1, r6
 800a2b8:	bf28      	it	cs
 800a2ba:	463a      	movcs	r2, r7
 800a2bc:	f7ff faf2 	bl	80098a4 <memcpy>
 800a2c0:	4631      	mov	r1, r6
 800a2c2:	4640      	mov	r0, r8
 800a2c4:	f7ff fef4 	bl	800a0b0 <_free_r>
 800a2c8:	e7e1      	b.n	800a28e <_realloc_r+0x1e>
 800a2ca:	4635      	mov	r5, r6
 800a2cc:	e7df      	b.n	800a28e <_realloc_r+0x1e>
	...

0800a2d0 <_sbrk_r>:
 800a2d0:	b538      	push	{r3, r4, r5, lr}
 800a2d2:	4d06      	ldr	r5, [pc, #24]	; (800a2ec <_sbrk_r+0x1c>)
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	4608      	mov	r0, r1
 800a2da:	602b      	str	r3, [r5, #0]
 800a2dc:	f7f7 fdb4 	bl	8001e48 <_sbrk>
 800a2e0:	1c43      	adds	r3, r0, #1
 800a2e2:	d102      	bne.n	800a2ea <_sbrk_r+0x1a>
 800a2e4:	682b      	ldr	r3, [r5, #0]
 800a2e6:	b103      	cbz	r3, 800a2ea <_sbrk_r+0x1a>
 800a2e8:	6023      	str	r3, [r4, #0]
 800a2ea:	bd38      	pop	{r3, r4, r5, pc}
 800a2ec:	200072d8 	.word	0x200072d8

0800a2f0 <__malloc_lock>:
 800a2f0:	4801      	ldr	r0, [pc, #4]	; (800a2f8 <__malloc_lock+0x8>)
 800a2f2:	f000 b811 	b.w	800a318 <__retarget_lock_acquire_recursive>
 800a2f6:	bf00      	nop
 800a2f8:	200072dc 	.word	0x200072dc

0800a2fc <__malloc_unlock>:
 800a2fc:	4801      	ldr	r0, [pc, #4]	; (800a304 <__malloc_unlock+0x8>)
 800a2fe:	f000 b80c 	b.w	800a31a <__retarget_lock_release_recursive>
 800a302:	bf00      	nop
 800a304:	200072dc 	.word	0x200072dc

0800a308 <_malloc_usable_size_r>:
 800a308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a30c:	1f18      	subs	r0, r3, #4
 800a30e:	2b00      	cmp	r3, #0
 800a310:	bfbc      	itt	lt
 800a312:	580b      	ldrlt	r3, [r1, r0]
 800a314:	18c0      	addlt	r0, r0, r3
 800a316:	4770      	bx	lr

0800a318 <__retarget_lock_acquire_recursive>:
 800a318:	4770      	bx	lr

0800a31a <__retarget_lock_release_recursive>:
 800a31a:	4770      	bx	lr

0800a31c <_init>:
 800a31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a31e:	bf00      	nop
 800a320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a322:	bc08      	pop	{r3}
 800a324:	469e      	mov	lr, r3
 800a326:	4770      	bx	lr

0800a328 <_fini>:
 800a328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a32a:	bf00      	nop
 800a32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a32e:	bc08      	pop	{r3}
 800a330:	469e      	mov	lr, r3
 800a332:	4770      	bx	lr

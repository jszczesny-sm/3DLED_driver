
3DLED_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acb4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000079c  0800ae54  0800ae54  0001ae54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5f0  0800b5f0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5f0  0800b5f0  0001b5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5f8  0800b5f8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5f8  0800b5f8  0001b5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5fc  0800b5fc  0001b5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800b600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e0c  20000088  0800b688  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e94  0800b688  00021e94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016303  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003115  00000000  00000000  000363bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  000394d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001208  00000000  00000000  0003a820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190c8  00000000  00000000  0003ba28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c65  00000000  00000000  00054af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009211b  00000000  00000000  0006d755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff870  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055ac  00000000  00000000  000ff8c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ae3c 	.word	0x0800ae3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	0800ae3c 	.word	0x0800ae3c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	f5ad 4dc3 	sub.w	sp, sp, #24960	; 0x6180
 800059a:	b097      	sub	sp, #92	; 0x5c
 800059c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

    // Layers configuration
    Layer0.timer = &htim1;
 800059e:	4bc5      	ldr	r3, [pc, #788]	; (80008b4 <main+0x320>)
 80005a0:	4ac5      	ldr	r2, [pc, #788]	; (80008b8 <main+0x324>)
 80005a2:	601a      	str	r2, [r3, #0]
    Layer0.dma = &hdma_tim1_ch1;
 80005a4:	4bc3      	ldr	r3, [pc, #780]	; (80008b4 <main+0x320>)
 80005a6:	4ac5      	ldr	r2, [pc, #788]	; (80008bc <main+0x328>)
 80005a8:	605a      	str	r2, [r3, #4]
    Layer0.channel = TIM_CHANNEL_1;
 80005aa:	4bc2      	ldr	r3, [pc, #776]	; (80008b4 <main+0x320>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	721a      	strb	r2, [r3, #8]

    Layer1.timer = &htim2;
 80005b0:	4bc3      	ldr	r3, [pc, #780]	; (80008c0 <main+0x32c>)
 80005b2:	4ac4      	ldr	r2, [pc, #784]	; (80008c4 <main+0x330>)
 80005b4:	601a      	str	r2, [r3, #0]
    Layer1.dma = &hdma_tim2_ch1;
 80005b6:	4bc2      	ldr	r3, [pc, #776]	; (80008c0 <main+0x32c>)
 80005b8:	4ac3      	ldr	r2, [pc, #780]	; (80008c8 <main+0x334>)
 80005ba:	605a      	str	r2, [r3, #4]
    Layer1.channel = TIM_CHANNEL_1;
 80005bc:	4bc0      	ldr	r3, [pc, #768]	; (80008c0 <main+0x32c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	721a      	strb	r2, [r3, #8]

    Layer2.timer = &htim3;
 80005c2:	4bc2      	ldr	r3, [pc, #776]	; (80008cc <main+0x338>)
 80005c4:	4ac2      	ldr	r2, [pc, #776]	; (80008d0 <main+0x33c>)
 80005c6:	601a      	str	r2, [r3, #0]
    Layer2.dma = &hdma_tim3_ch1_trig;
 80005c8:	4bc0      	ldr	r3, [pc, #768]	; (80008cc <main+0x338>)
 80005ca:	4ac2      	ldr	r2, [pc, #776]	; (80008d4 <main+0x340>)
 80005cc:	605a      	str	r2, [r3, #4]
    Layer2.channel = TIM_CHANNEL_1;
 80005ce:	4bbf      	ldr	r3, [pc, #764]	; (80008cc <main+0x338>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	721a      	strb	r2, [r3, #8]

    Layer3.timer = &htim4;
 80005d4:	4bc0      	ldr	r3, [pc, #768]	; (80008d8 <main+0x344>)
 80005d6:	4ac1      	ldr	r2, [pc, #772]	; (80008dc <main+0x348>)
 80005d8:	601a      	str	r2, [r3, #0]
    Layer3.dma = &hdma_tim4_ch1;
 80005da:	4bbf      	ldr	r3, [pc, #764]	; (80008d8 <main+0x344>)
 80005dc:	4ac0      	ldr	r2, [pc, #768]	; (80008e0 <main+0x34c>)
 80005de:	605a      	str	r2, [r3, #4]
    Layer3.channel = TIM_CHANNEL_1;
 80005e0:	4bbd      	ldr	r3, [pc, #756]	; (80008d8 <main+0x344>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	721a      	strb	r2, [r3, #8]

    Layer4.timer = &htim5;
 80005e6:	4bbf      	ldr	r3, [pc, #764]	; (80008e4 <main+0x350>)
 80005e8:	4abf      	ldr	r2, [pc, #764]	; (80008e8 <main+0x354>)
 80005ea:	601a      	str	r2, [r3, #0]
    Layer4.dma = &hdma_tim5_ch1;
 80005ec:	4bbd      	ldr	r3, [pc, #756]	; (80008e4 <main+0x350>)
 80005ee:	4abf      	ldr	r2, [pc, #764]	; (80008ec <main+0x358>)
 80005f0:	605a      	str	r2, [r3, #4]
    Layer4.channel = TIM_CHANNEL_1;
 80005f2:	4bbc      	ldr	r3, [pc, #752]	; (80008e4 <main+0x350>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	721a      	strb	r2, [r3, #8]

    Layers *layers_array[5];
    layers_array[0] = &Layer0;
 80005f8:	4bae      	ldr	r3, [pc, #696]	; (80008b4 <main+0x320>)
 80005fa:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 80005fe:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000602:	6013      	str	r3, [r2, #0]
    layers_array[1] = &Layer1;
 8000604:	4bae      	ldr	r3, [pc, #696]	; (80008c0 <main+0x32c>)
 8000606:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 800060a:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800060e:	6013      	str	r3, [r2, #0]
    layers_array[2] = &Layer2;
 8000610:	4bae      	ldr	r3, [pc, #696]	; (80008cc <main+0x338>)
 8000612:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000616:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800061a:	6013      	str	r3, [r2, #0]
    layers_array[3] = &Layer3;
 800061c:	4bae      	ldr	r3, [pc, #696]	; (80008d8 <main+0x344>)
 800061e:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000622:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8000626:	6013      	str	r3, [r2, #0]
    layers_array[4] = &Layer4;
 8000628:	4bae      	ldr	r3, [pc, #696]	; (80008e4 <main+0x350>)
 800062a:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 800062e:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8000632:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000634:	f002 fed2 	bl	80033dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000638:	f000 fa98 	bl	8000b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 fe5c 	bl	80012f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000640:	f000 fe0c 	bl	800125c <MX_DMA_Init>
  MX_TIM1_Init();
 8000644:	f000 fb6a 	bl	8000d1c <MX_TIM1_Init>
  MX_TIM5_Init();
 8000648:	f000 fd68 	bl	800111c <MX_TIM5_Init>
  MX_FATFS_Init();
 800064c:	f006 fb50 	bl	8006cf0 <MX_FATFS_Init>
  MX_SPI1_Init();
 8000650:	f000 faf8 	bl	8000c44 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000654:	f000 fdd8 	bl	8001208 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000658:	f000 fb2a 	bl	8000cb0 <MX_SPI3_Init>
  MX_TIM3_Init();
 800065c:	f000 fc72 	bl	8000f44 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000660:	f000 fce6 	bl	8001030 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000664:	f000 fbfa 	bl	8000e5c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

    // GPIO configuration
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000668:	2007      	movs	r0, #7
 800066a:	f003 f844 	bl	80036f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800066e:	2008      	movs	r0, #8
 8000670:	f003 f841 	bl	80036f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000674:	2009      	movs	r0, #9
 8000676:	f003 f83e 	bl	80036f6 <HAL_NVIC_EnableIRQ>

    // LCD initialization
    PCD8544_Init(0x24);
 800067a:	2024      	movs	r0, #36	; 0x24
 800067c:	f002 f9e4 	bl	8002a48 <PCD8544_Init>
    PCD8544_GotoXY(8, 21);
 8000680:	2115      	movs	r1, #21
 8000682:	2008      	movs	r0, #8
 8000684:	f002 fb70 	bl	8002d68 <PCD8544_GotoXY>
    PCD8544_Puts("3D_LED_CUBE", PCD8544_Pixel_Set, PCD8544_FontSize_5x7);
 8000688:	2200      	movs	r2, #0
 800068a:	2101      	movs	r1, #1
 800068c:	4898      	ldr	r0, [pc, #608]	; (80008f0 <main+0x35c>)
 800068e:	f002 fc2d 	bl	8002eec <PCD8544_Puts>
    PCD8544_Refresh();
 8000692:	f002 facb 	bl	8002c2c <PCD8544_Refresh>
    HAL_Delay(2000);
 8000696:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800069a:	f002 ff11 	bl	80034c0 <HAL_Delay>

    // SD Card initialization
    uint8_t walk_array[32][256][3] = { 0 };
 800069e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80006a2:	3b20      	subs	r3, #32
 80006a4:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f009 fe84 	bl	800a3b8 <memset>
    ret_status result = STATUS_NULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 80006b6:	f102 0245 	add.w	r2, r2, #69	; 0x45
 80006ba:	7013      	strb	r3, [r2, #0]
    uint8_t number_of_images = 0;
 80006bc:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80006c0:	2200      	movs	r2, #0
 80006c2:	f803 2c21 	strb.w	r2, [r3, #-33]

    result = sd_card_init();
 80006c6:	f001 f93b 	bl	8001940 <sd_card_init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 80006d0:	f102 0245 	add.w	r2, r2, #69	; 0x45
 80006d4:	7013      	strb	r3, [r2, #0]
    if (STATUS_OK != result) {
 80006d6:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 80006da:	f103 0345 	add.w	r3, r3, #69	; 0x45
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d000      	beq.n	80006e6 <main+0x152>
//        lcd_clear();
//        lcd_draw_text(0, 0,
//                "Error!!! problem with mount SD card. Try re-attach card and press RESET button",0);
//        lcd_copy();
        while (1)
 80006e4:	e7fe      	b.n	80006e4 <main+0x150>
            ;
    }

    char path[256];

    strcpy(path, "0:/");
 80006e6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80006ea:	3b24      	subs	r3, #36	; 0x24
 80006ec:	4a81      	ldr	r2, [pc, #516]	; (80008f4 <main+0x360>)
 80006ee:	601a      	str	r2, [r3, #0]
    myprintf("Starting scan dir\n");
 80006f0:	4881      	ldr	r0, [pc, #516]	; (80008f8 <main+0x364>)
 80006f2:	f001 f8ff 	bl	80018f4 <myprintf>
    result = sd_card_scan_file((char*) path, (char*) buffor_dirs, &number_of_dirs);
 80006f6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80006fa:	3b24      	subs	r3, #36	; 0x24
 80006fc:	4a7f      	ldr	r2, [pc, #508]	; (80008fc <main+0x368>)
 80006fe:	4980      	ldr	r1, [pc, #512]	; (8000900 <main+0x36c>)
 8000700:	4618      	mov	r0, r3
 8000702:	f001 f97d 	bl	8001a00 <sd_card_scan_file>
 8000706:	4603      	mov	r3, r0
 8000708:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 800070c:	f102 0245 	add.w	r2, r2, #69	; 0x45
 8000710:	7013      	strb	r3, [r2, #0]
    if (STATUS_OK != result) {
 8000712:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000716:	f103 0345 	add.w	r3, r3, #69	; 0x45
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d002      	beq.n	8000726 <main+0x192>
//        lcd_clear();
//        lcd_draw_text(0, 0,
//                "Error!!!      problem with scan file in SD card        Press RESET button",0);
//        lcd_copy();
        sd_card_close();
 8000720:	f001 f9f8 	bl	8001b14 <sd_card_close>
        while (1)
 8000724:	e7fe      	b.n	8000724 <main+0x190>
            ;
    }

    while (1) {
        HAL_Delay(500);
 8000726:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800072a:	f002 fec9 	bl	80034c0 <HAL_Delay>
        handleMenu();
 800072e:	f000 fe97 	bl	8001460 <handleMenu>
        if (playState)
 8000732:	4b74      	ldr	r3, [pc, #464]	; (8000904 <main+0x370>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d100      	bne.n	800073c <main+0x1a8>
        HAL_Delay(500);
 800073a:	e7f4      	b.n	8000726 <main+0x192>
            break;
 800073c:	bf00      	nop
    }

    myprintf("Starting read data\n");
 800073e:	4872      	ldr	r0, [pc, #456]	; (8000908 <main+0x374>)
 8000740:	f001 f8d8 	bl	80018f4 <myprintf>
    struct layers_struct layers_config[5];
    result = sd_card_read_data((char*)buffor_dirs[selected], (uint8_t*)walk_array,
 8000744:	4b71      	ldr	r3, [pc, #452]	; (800090c <main+0x378>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	011b      	lsls	r3, r3, #4
 800074a:	4a6d      	ldr	r2, [pc, #436]	; (8000900 <main+0x36c>)
 800074c:	1898      	adds	r0, r3, r2
 800074e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000752:	3b21      	subs	r3, #33	; 0x21
 8000754:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000758:	3a50      	subs	r2, #80	; 0x50
 800075a:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 800075e:	3920      	subs	r1, #32
 8000760:	f001 f9ee 	bl	8001b40 <sd_card_read_data>
 8000764:	4603      	mov	r3, r0
 8000766:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 800076a:	f102 0245 	add.w	r2, r2, #69	; 0x45
 800076e:	7013      	strb	r3, [r2, #0]
            (struct layers_struct*) layers_config, &number_of_images);

    sd_card_close();
 8000770:	f001 f9d0 	bl	8001b14 <sd_card_close>

    if (STATUS_OK != result) {
 8000774:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000778:	f103 0345 	add.w	r3, r3, #69	; 0x45
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d000      	beq.n	8000784 <main+0x1f0>
//        lcd_clear();
//        lcd_draw_text(0, 0,
//                "Error!!!      problem with read data from SD card        Press RESET button",0);
//        lcd_copy();
        while (1)
 8000782:	e7fe      	b.n	8000782 <main+0x1ee>
            ;
    }
    PCD8544_GotoXY(20, 38);
 8000784:	2126      	movs	r1, #38	; 0x26
 8000786:	2014      	movs	r0, #20
 8000788:	f002 faee 	bl	8002d68 <PCD8544_GotoXY>
    PCD8544_Puts("Playing...", PCD8544_Pixel_Set, PCD8544_FontSize_5x7);
 800078c:	2200      	movs	r2, #0
 800078e:	2101      	movs	r1, #1
 8000790:	485f      	ldr	r0, [pc, #380]	; (8000910 <main+0x37c>)
 8000792:	f002 fbab 	bl	8002eec <PCD8544_Puts>
    PCD8544_Refresh();
 8000796:	f002 fa49 	bl	8002c2c <PCD8544_Refresh>
//    for (size_t j = 0; j < 10; j++){
//        myprintf("\nIMAGE_%d:\n", j);
//        for (size_t i = 0; i < 4; i++)
//            myprintf("{%d, %d, %d},", walk_array[j][i][0], walk_array[j][i][1], walk_array[j][i][2]);
//    }
    uint8_t odd = 1;
 800079a:	2301      	movs	r3, #1
 800079c:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 80007a0:	f102 024f 	add.w	r2, r2, #79	; 0x4f
 80007a4:	7013      	strb	r3, [r2, #0]
    uint8_t index = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 80007ac:	f102 024e 	add.w	r2, r2, #78	; 0x4e
 80007b0:	7013      	strb	r3, [r2, #0]
    uint8_t counter = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 80007b8:	f102 024d 	add.w	r2, r2, #77	; 0x4d
 80007bc:	7013      	strb	r3, [r2, #0]
    uint8_t number_of_animation = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 80007c4:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 80007c8:	7013      	strb	r3, [r2, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


            for (uint16_t layer_index = 0; layer_index < 5; layer_index++) {
 80007ca:	2300      	movs	r3, #0
 80007cc:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 80007d0:	f102 024a 	add.w	r2, r2, #74	; 0x4a
 80007d4:	8013      	strh	r3, [r2, #0]
 80007d6:	e1a0      	b.n	8000b1a <main+0x586>
                for (uint8_t x = 0; x < layers_config[layer_index].count; x++) {
 80007d8:	2300      	movs	r3, #0
 80007da:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 80007de:	f102 0249 	add.w	r2, r2, #73	; 0x49
 80007e2:	7013      	strb	r3, [r2, #0]
 80007e4:	e153      	b.n	8000a8e <main+0x4fa>
                    if (layers_config[layer_index].values[x] == number_of_animation) {
 80007e6:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 80007ea:	f103 034a 	add.w	r3, r3, #74	; 0x4a
 80007ee:	881a      	ldrh	r2, [r3, #0]
 80007f0:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 80007f4:	f103 0349 	add.w	r3, r3, #73	; 0x49
 80007f8:	7819      	ldrb	r1, [r3, #0]
 80007fa:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80007fe:	f5a3 70e8 	sub.w	r0, r3, #464	; 0x1d0
 8000802:	4613      	mov	r3, r2
 8000804:	011b      	lsls	r3, r3, #4
 8000806:	4413      	add	r3, r2
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	4403      	add	r3, r0
 800080c:	440b      	add	r3, r1
 800080e:	3302      	adds	r3, #2
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000816:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 800081a:	7812      	ldrb	r2, [r2, #0]
 800081c:	429a      	cmp	r2, r3
 800081e:	f040 8108 	bne.w	8000a32 <main+0x49e>
                        for (uint16_t i = 0; i < 256; i++) {
 8000822:	2300      	movs	r3, #0
 8000824:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000828:	f102 0246 	add.w	r2, r2, #70	; 0x46
 800082c:	8013      	strh	r3, [r2, #0]
 800082e:	e0f7      	b.n	8000a20 <main+0x48c>
                            if (i % 16 == 0) {
 8000830:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000834:	f103 0346 	add.w	r3, r3, #70	; 0x46
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	f003 030f 	and.w	r3, r3, #15
 800083e:	b29b      	uxth	r3, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	d116      	bne.n	8000872 <main+0x2de>
                                odd ^= 1;
 8000844:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000848:	f103 034f 	add.w	r3, r3, #79	; 0x4f
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	f083 0301 	eor.w	r3, r3, #1
 8000852:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000856:	f102 024f 	add.w	r2, r2, #79	; 0x4f
 800085a:	7013      	strb	r3, [r2, #0]
                                counter++;
 800085c:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000860:	f103 034d 	add.w	r3, r3, #77	; 0x4d
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	3301      	adds	r3, #1
 8000868:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 800086c:	f102 024d 	add.w	r2, r2, #77	; 0x4d
 8000870:	7013      	strb	r3, [r2, #0]
                            }
                            if (odd) {
 8000872:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000876:	f103 034f 	add.w	r3, r3, #79	; 0x4f
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d049      	beq.n	8000914 <main+0x380>
                                index = (counter * 16 - 1) - (i % 16);
 8000880:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000884:	f103 034d 	add.w	r3, r3, #77	; 0x4d
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	011b      	lsls	r3, r3, #4
 800088c:	b2da      	uxtb	r2, r3
 800088e:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000892:	f103 0346 	add.w	r3, r3, #70	; 0x46
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	f003 030f 	and.w	r3, r3, #15
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	3b01      	subs	r3, #1
 80008a6:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 80008aa:	f102 024e 	add.w	r2, r2, #78	; 0x4e
 80008ae:	7013      	strb	r3, [r2, #0]
 80008b0:	e03a      	b.n	8000928 <main+0x394>
 80008b2:	bf00      	nop
 80008b4:	20000588 	.word	0x20000588
 80008b8:	20000154 	.word	0x20000154
 80008bc:	200002bc 	.word	0x200002bc
 80008c0:	200008f8 	.word	0x200008f8
 80008c4:	2000019c 	.word	0x2000019c
 80008c8:	2000031c 	.word	0x2000031c
 80008cc:	20000c68 	.word	0x20000c68
 80008d0:	200001e4 	.word	0x200001e4
 80008d4:	2000037c 	.word	0x2000037c
 80008d8:	20000fd8 	.word	0x20000fd8
 80008dc:	2000022c 	.word	0x2000022c
 80008e0:	200003dc 	.word	0x200003dc
 80008e4:	20001348 	.word	0x20001348
 80008e8:	20000274 	.word	0x20000274
 80008ec:	2000043c 	.word	0x2000043c
 80008f0:	0800ae54 	.word	0x0800ae54
 80008f4:	002f3a30 	.word	0x002f3a30
 80008f8:	0800ae60 	.word	0x0800ae60
 80008fc:	20000584 	.word	0x20000584
 8000900:	200004e4 	.word	0x200004e4
 8000904:	20000586 	.word	0x20000586
 8000908:	0800ae74 	.word	0x0800ae74
 800090c:	20000585 	.word	0x20000585
 8000910:	0800ae88 	.word	0x0800ae88
                            } else {
                                index = i;
 8000914:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000918:	f103 0346 	add.w	r3, r3, #70	; 0x46
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000922:	f102 024e 	add.w	r2, r2, #78	; 0x4e
 8000926:	7013      	strb	r3, [r2, #0]
                            }
                            led_set_RGB(layers_array[layer_index], i,
 8000928:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 800092c:	f103 034a 	add.w	r3, r3, #74	; 0x4a
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 8000938:	f103 0350 	add.w	r3, r3, #80	; 0x50
 800093c:	443b      	add	r3, r7
 800093e:	f853 0c20 	ldr.w	r0, [r3, #-32]
 8000942:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000946:	f103 0346 	add.w	r3, r3, #70	; 0x46
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	b2dc      	uxtb	r4, r3
 800094e:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000952:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000956:	7819      	ldrb	r1, [r3, #0]
 8000958:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 800095c:	f103 034e 	add.w	r3, r3, #78	; 0x4e
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8000966:	4615      	mov	r5, r2
 8000968:	461a      	mov	r2, r3
 800096a:	0052      	lsls	r2, r2, #1
 800096c:	441a      	add	r2, r3
 800096e:	460b      	mov	r3, r1
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	440b      	add	r3, r1
 8000974:	021b      	lsls	r3, r3, #8
 8000976:	4413      	add	r3, r2
 8000978:	442b      	add	r3, r5
 800097a:	3b20      	subs	r3, #32
 800097c:	781d      	ldrb	r5, [r3, #0]
 800097e:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000982:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000986:	7819      	ldrb	r1, [r3, #0]
 8000988:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 800098c:	f103 034e 	add.w	r3, r3, #78	; 0x4e
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8000996:	4616      	mov	r6, r2
 8000998:	461a      	mov	r2, r3
 800099a:	0052      	lsls	r2, r2, #1
 800099c:	441a      	add	r2, r3
 800099e:	460b      	mov	r3, r1
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	440b      	add	r3, r1
 80009a4:	021b      	lsls	r3, r3, #8
 80009a6:	4413      	add	r3, r2
 80009a8:	4433      	add	r3, r6
 80009aa:	3b1f      	subs	r3, #31
 80009ac:	781e      	ldrb	r6, [r3, #0]
 80009ae:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 80009b2:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 80009b6:	7819      	ldrb	r1, [r3, #0]
 80009b8:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 80009bc:	f103 034e 	add.w	r3, r3, #78	; 0x4e
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 80009c6:	4694      	mov	ip, r2
 80009c8:	461a      	mov	r2, r3
 80009ca:	0052      	lsls	r2, r2, #1
 80009cc:	441a      	add	r2, r3
 80009ce:	460b      	mov	r3, r1
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	440b      	add	r3, r1
 80009d4:	021b      	lsls	r3, r3, #8
 80009d6:	4413      	add	r3, r2
 80009d8:	4463      	add	r3, ip
 80009da:	3b1e      	subs	r3, #30
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	4633      	mov	r3, r6
 80009e2:	462a      	mov	r2, r5
 80009e4:	4621      	mov	r1, r4
 80009e6:	f002 fba6 	bl	8003136 <led_set_RGB>
                                walk_array[number_of_animation][index][0],
                                walk_array[number_of_animation][index][1],
                                walk_array[number_of_animation][index][2]);
                            layers_config[layer_index].isSet = 1;
 80009ea:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 80009ee:	f103 034a 	add.w	r3, r3, #74	; 0x4a
 80009f2:	881a      	ldrh	r2, [r3, #0]
 80009f4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80009f8:	f5a3 71e8 	sub.w	r1, r3, #464	; 0x1d0
 80009fc:	4613      	mov	r3, r2
 80009fe:	011b      	lsls	r3, r3, #4
 8000a00:	4413      	add	r3, r2
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	440b      	add	r3, r1
 8000a06:	2201      	movs	r2, #1
 8000a08:	701a      	strb	r2, [r3, #0]
                        for (uint16_t i = 0; i < 256; i++) {
 8000a0a:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000a0e:	f103 0346 	add.w	r3, r3, #70	; 0x46
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000a1a:	f102 0246 	add.w	r2, r2, #70	; 0x46
 8000a1e:	8013      	strh	r3, [r2, #0]
 8000a20:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000a24:	f103 0346 	add.w	r3, r3, #70	; 0x46
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	2bff      	cmp	r3, #255	; 0xff
 8000a2c:	f67f af00 	bls.w	8000830 <main+0x29c>
 8000a30:	e022      	b.n	8000a78 <main+0x4e4>
                    }
                } else if(layers_config[layer_index].isSet == 0){
 8000a32:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000a36:	f103 034a 	add.w	r3, r3, #74	; 0x4a
 8000a3a:	881a      	ldrh	r2, [r3, #0]
 8000a3c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000a40:	f5a3 71e8 	sub.w	r1, r3, #464	; 0x1d0
 8000a44:	4613      	mov	r3, r2
 8000a46:	011b      	lsls	r3, r3, #4
 8000a48:	4413      	add	r3, r2
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	440b      	add	r3, r1
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d111      	bne.n	8000a78 <main+0x4e4>
                    led_set_all_RGB(layers_array[layer_index], 100, 0, 0);
 8000a54:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000a58:	f103 034a 	add.w	r3, r3, #74	; 0x4a
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 8000a64:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8000a68:	443b      	add	r3, r7
 8000a6a:	f853 0c20 	ldr.w	r0, [r3, #-32]
 8000a6e:	2300      	movs	r3, #0
 8000a70:	2200      	movs	r2, #0
 8000a72:	2164      	movs	r1, #100	; 0x64
 8000a74:	f002 fb96 	bl	80031a4 <led_set_all_RGB>
                for (uint8_t x = 0; x < layers_config[layer_index].count; x++) {
 8000a78:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000a7c:	f103 0349 	add.w	r3, r3, #73	; 0x49
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	3301      	adds	r3, #1
 8000a84:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000a88:	f102 0249 	add.w	r2, r2, #73	; 0x49
 8000a8c:	7013      	strb	r3, [r2, #0]
 8000a8e:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000a92:	f103 034a 	add.w	r3, r3, #74	; 0x4a
 8000a96:	881a      	ldrh	r2, [r3, #0]
 8000a98:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000a9c:	f5a3 71e8 	sub.w	r1, r3, #464	; 0x1d0
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	011b      	lsls	r3, r3, #4
 8000aa4:	4413      	add	r3, r2
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	440b      	add	r3, r1
 8000aaa:	3301      	adds	r3, #1
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000ab2:	f102 0249 	add.w	r2, r2, #73	; 0x49
 8000ab6:	7812      	ldrb	r2, [r2, #0]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	f4ff ae94 	bcc.w	80007e6 <main+0x252>
                }
            }
            layers_config[layer_index].isSet = 0;
 8000abe:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000ac2:	f103 034a 	add.w	r3, r3, #74	; 0x4a
 8000ac6:	881a      	ldrh	r2, [r3, #0]
 8000ac8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000acc:	f5a3 71e8 	sub.w	r1, r3, #464	; 0x1d0
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	011b      	lsls	r3, r3, #4
 8000ad4:	4413      	add	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	440b      	add	r3, r1
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
            led_render(layers_array[layer_index]);
 8000ade:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000ae2:	f103 034a 	add.w	r3, r3, #74	; 0x4a
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 8000aee:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8000af2:	443b      	add	r3, r7
 8000af4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f002 fb78 	bl	80031ee <led_render>
            HAL_Delay(10);
 8000afe:	200a      	movs	r0, #10
 8000b00:	f002 fcde 	bl	80034c0 <HAL_Delay>
            for (uint16_t layer_index = 0; layer_index < 5; layer_index++) {
 8000b04:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000b08:	f103 034a 	add.w	r3, r3, #74	; 0x4a
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000b14:	f102 024a 	add.w	r2, r2, #74	; 0x4a
 8000b18:	8013      	strh	r3, [r2, #0]
 8000b1a:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000b1e:	f103 034a 	add.w	r3, r3, #74	; 0x4a
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	2b04      	cmp	r3, #4
 8000b26:	f67f ae57 	bls.w	80007d8 <main+0x244>
        }
        if (++number_of_animation == number_of_images)
 8000b2a:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000b2e:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	3301      	adds	r3, #1
 8000b36:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000b3a:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8000b3e:	7013      	strb	r3, [r2, #0]
 8000b40:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000b44:	f813 3c21 	ldrb.w	r3, [r3, #-33]
 8000b48:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000b4c:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8000b50:	7812      	ldrb	r2, [r2, #0]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d105      	bne.n	8000b62 <main+0x5ce>
            number_of_animation = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000b5c:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8000b60:	7013      	strb	r3, [r2, #0]

        HAL_Delay(500);
 8000b62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b66:	f002 fcab 	bl	80034c0 <HAL_Delay>
            for (uint16_t layer_index = 0; layer_index < 5; layer_index++) {
 8000b6a:	e62e      	b.n	80007ca <main+0x236>

08000b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b094      	sub	sp, #80	; 0x50
 8000b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b72:	f107 0320 	add.w	r3, r7, #32
 8000b76:	2230      	movs	r2, #48	; 0x30
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f009 fc1c 	bl	800a3b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b80:	f107 030c 	add.w	r3, r7, #12
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	4b29      	ldr	r3, [pc, #164]	; (8000c3c <SystemClock_Config+0xd0>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <SystemClock_Config+0xd0>)
 8000b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba0:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <SystemClock_Config+0xd0>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	4b23      	ldr	r3, [pc, #140]	; (8000c40 <SystemClock_Config+0xd4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bb8:	4a21      	ldr	r2, [pc, #132]	; (8000c40 <SystemClock_Config+0xd4>)
 8000bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bbe:	6013      	str	r3, [r2, #0]
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <SystemClock_Config+0xd4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd4:	2310      	movs	r3, #16
 8000bd6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000be0:	2308      	movs	r3, #8
 8000be2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000be4:	2354      	movs	r3, #84	; 0x54
 8000be6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000be8:	2302      	movs	r3, #2
 8000bea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000bec:	2303      	movs	r3, #3
 8000bee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf0:	f107 0320 	add.w	r3, r7, #32
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f003 fae1 	bl	80041bc <HAL_RCC_OscConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c00:	f000 fe72 	bl	80018e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c04:	230f      	movs	r3, #15
 8000c06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	2102      	movs	r1, #2
 8000c22:	4618      	mov	r0, r3
 8000c24:	f003 fd42 	bl	80046ac <HAL_RCC_ClockConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c2e:	f000 fe5b 	bl	80018e8 <Error_Handler>
  }
}
 8000c32:	bf00      	nop
 8000c34:	3750      	adds	r7, #80	; 0x50
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40007000 	.word	0x40007000

08000c44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c48:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <MX_SPI1_Init+0x64>)
 8000c4a:	4a18      	ldr	r2, [pc, #96]	; (8000cac <MX_SPI1_Init+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <MX_SPI1_Init+0x64>)
 8000c50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c56:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <MX_SPI1_Init+0x64>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <MX_SPI1_Init+0x64>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <MX_SPI1_Init+0x64>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <MX_SPI1_Init+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <MX_SPI1_Init+0x64>)
 8000c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <MX_SPI1_Init+0x64>)
 8000c78:	2238      	movs	r2, #56	; 0x38
 8000c7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <MX_SPI1_Init+0x64>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <MX_SPI1_Init+0x64>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <MX_SPI1_Init+0x64>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <MX_SPI1_Init+0x64>)
 8000c90:	220a      	movs	r2, #10
 8000c92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c94:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <MX_SPI1_Init+0x64>)
 8000c96:	f003 ff29 	bl	8004aec <HAL_SPI_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ca0:	f000 fe22 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200000a4 	.word	0x200000a4
 8000cac:	40013000 	.word	0x40013000

08000cb0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <MX_SPI3_Init+0x64>)
 8000cb6:	4a18      	ldr	r2, [pc, #96]	; (8000d18 <MX_SPI3_Init+0x68>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <MX_SPI3_Init+0x64>)
 8000cbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cc0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cc2:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <MX_SPI3_Init+0x64>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <MX_SPI3_Init+0x64>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_SPI3_Init+0x64>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <MX_SPI3_Init+0x64>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MX_SPI3_Init+0x64>)
 8000cdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_SPI3_Init+0x64>)
 8000ce4:	2228      	movs	r2, #40	; 0x28
 8000ce6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <MX_SPI3_Init+0x64>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_SPI3_Init+0x64>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <MX_SPI3_Init+0x64>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_SPI3_Init+0x64>)
 8000cfc:	220a      	movs	r2, #10
 8000cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d00:	4804      	ldr	r0, [pc, #16]	; (8000d14 <MX_SPI3_Init+0x64>)
 8000d02:	f003 fef3 	bl	8004aec <HAL_SPI_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000d0c:	f000 fdec 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200000fc 	.word	0x200000fc
 8000d18:	40003c00 	.word	0x40003c00

08000d1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b096      	sub	sp, #88	; 0x58
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
 8000d4a:	615a      	str	r2, [r3, #20]
 8000d4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2220      	movs	r2, #32
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f009 fb2f 	bl	800a3b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d5a:	4b3e      	ldr	r3, [pc, #248]	; (8000e54 <MX_TIM1_Init+0x138>)
 8000d5c:	4a3e      	ldr	r2, [pc, #248]	; (8000e58 <MX_TIM1_Init+0x13c>)
 8000d5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d60:	4b3c      	ldr	r3, [pc, #240]	; (8000e54 <MX_TIM1_Init+0x138>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d66:	4b3b      	ldr	r3, [pc, #236]	; (8000e54 <MX_TIM1_Init+0x138>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 104;
 8000d6c:	4b39      	ldr	r3, [pc, #228]	; (8000e54 <MX_TIM1_Init+0x138>)
 8000d6e:	2268      	movs	r2, #104	; 0x68
 8000d70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d72:	4b38      	ldr	r3, [pc, #224]	; (8000e54 <MX_TIM1_Init+0x138>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d78:	4b36      	ldr	r3, [pc, #216]	; (8000e54 <MX_TIM1_Init+0x138>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7e:	4b35      	ldr	r3, [pc, #212]	; (8000e54 <MX_TIM1_Init+0x138>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d84:	4833      	ldr	r0, [pc, #204]	; (8000e54 <MX_TIM1_Init+0x138>)
 8000d86:	f004 fae3 	bl	8005350 <HAL_TIM_Base_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000d90:	f000 fdaa 	bl	80018e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d98:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d9e:	4619      	mov	r1, r3
 8000da0:	482c      	ldr	r0, [pc, #176]	; (8000e54 <MX_TIM1_Init+0x138>)
 8000da2:	f004 feb5 	bl	8005b10 <HAL_TIM_ConfigClockSource>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000dac:	f000 fd9c 	bl	80018e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000db0:	4828      	ldr	r0, [pc, #160]	; (8000e54 <MX_TIM1_Init+0x138>)
 8000db2:	f004 fb1c 	bl	80053ee <HAL_TIM_PWM_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000dbc:	f000 fd94 	bl	80018e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4821      	ldr	r0, [pc, #132]	; (8000e54 <MX_TIM1_Init+0x138>)
 8000dd0:	f005 fb0c 	bl	80063ec <HAL_TIMEx_MasterConfigSynchronization>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000dda:	f000 fd85 	bl	80018e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dde:	2360      	movs	r3, #96	; 0x60
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dea:	2300      	movs	r3, #0
 8000dec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000df6:	2300      	movs	r3, #0
 8000df8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfe:	2200      	movs	r2, #0
 8000e00:	4619      	mov	r1, r3
 8000e02:	4814      	ldr	r0, [pc, #80]	; (8000e54 <MX_TIM1_Init+0x138>)
 8000e04:	f004 fdc2 	bl	800598c <HAL_TIM_PWM_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000e0e:	f000 fd6b 	bl	80018e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e2a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	4619      	mov	r1, r3
 8000e34:	4807      	ldr	r0, [pc, #28]	; (8000e54 <MX_TIM1_Init+0x138>)
 8000e36:	f005 fb47 	bl	80064c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000e40:	f000 fd52 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e44:	4803      	ldr	r0, [pc, #12]	; (8000e54 <MX_TIM1_Init+0x138>)
 8000e46:	f001 fbc7 	bl	80025d8 <HAL_TIM_MspPostInit>

}
 8000e4a:	bf00      	nop
 8000e4c:	3758      	adds	r7, #88	; 0x58
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000154 	.word	0x20000154
 8000e58:	40010000 	.word	0x40010000

08000e5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08e      	sub	sp, #56	; 0x38
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e70:	f107 0320 	add.w	r3, r7, #32
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
 8000e88:	615a      	str	r2, [r3, #20]
 8000e8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e8c:	4b2c      	ldr	r3, [pc, #176]	; (8000f40 <MX_TIM2_Init+0xe4>)
 8000e8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e94:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <MX_TIM2_Init+0xe4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9a:	4b29      	ldr	r3, [pc, #164]	; (8000f40 <MX_TIM2_Init+0xe4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 104;
 8000ea0:	4b27      	ldr	r3, [pc, #156]	; (8000f40 <MX_TIM2_Init+0xe4>)
 8000ea2:	2268      	movs	r2, #104	; 0x68
 8000ea4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea6:	4b26      	ldr	r3, [pc, #152]	; (8000f40 <MX_TIM2_Init+0xe4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eac:	4b24      	ldr	r3, [pc, #144]	; (8000f40 <MX_TIM2_Init+0xe4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eb2:	4823      	ldr	r0, [pc, #140]	; (8000f40 <MX_TIM2_Init+0xe4>)
 8000eb4:	f004 fa4c 	bl	8005350 <HAL_TIM_Base_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000ebe:	f000 fd13 	bl	80018e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ec8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ecc:	4619      	mov	r1, r3
 8000ece:	481c      	ldr	r0, [pc, #112]	; (8000f40 <MX_TIM2_Init+0xe4>)
 8000ed0:	f004 fe1e 	bl	8005b10 <HAL_TIM_ConfigClockSource>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000eda:	f000 fd05 	bl	80018e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ede:	4818      	ldr	r0, [pc, #96]	; (8000f40 <MX_TIM2_Init+0xe4>)
 8000ee0:	f004 fa85 	bl	80053ee <HAL_TIM_PWM_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000eea:	f000 fcfd 	bl	80018e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ef6:	f107 0320 	add.w	r3, r7, #32
 8000efa:	4619      	mov	r1, r3
 8000efc:	4810      	ldr	r0, [pc, #64]	; (8000f40 <MX_TIM2_Init+0xe4>)
 8000efe:	f005 fa75 	bl	80063ec <HAL_TIMEx_MasterConfigSynchronization>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000f08:	f000 fcee 	bl	80018e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f0c:	2360      	movs	r3, #96	; 0x60
 8000f0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2200      	movs	r2, #0
 8000f20:	4619      	mov	r1, r3
 8000f22:	4807      	ldr	r0, [pc, #28]	; (8000f40 <MX_TIM2_Init+0xe4>)
 8000f24:	f004 fd32 	bl	800598c <HAL_TIM_PWM_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000f2e:	f000 fcdb 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f32:	4803      	ldr	r0, [pc, #12]	; (8000f40 <MX_TIM2_Init+0xe4>)
 8000f34:	f001 fb50 	bl	80025d8 <HAL_TIM_MspPostInit>

}
 8000f38:	bf00      	nop
 8000f3a:	3738      	adds	r7, #56	; 0x38
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	2000019c 	.word	0x2000019c

08000f44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08e      	sub	sp, #56	; 0x38
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f58:	f107 0320 	add.w	r3, r7, #32
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
 8000f70:	615a      	str	r2, [r3, #20]
 8000f72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f74:	4b2c      	ldr	r3, [pc, #176]	; (8001028 <MX_TIM3_Init+0xe4>)
 8000f76:	4a2d      	ldr	r2, [pc, #180]	; (800102c <MX_TIM3_Init+0xe8>)
 8000f78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f7a:	4b2b      	ldr	r3, [pc, #172]	; (8001028 <MX_TIM3_Init+0xe4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f80:	4b29      	ldr	r3, [pc, #164]	; (8001028 <MX_TIM3_Init+0xe4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 104;
 8000f86:	4b28      	ldr	r3, [pc, #160]	; (8001028 <MX_TIM3_Init+0xe4>)
 8000f88:	2268      	movs	r2, #104	; 0x68
 8000f8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8c:	4b26      	ldr	r3, [pc, #152]	; (8001028 <MX_TIM3_Init+0xe4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f92:	4b25      	ldr	r3, [pc, #148]	; (8001028 <MX_TIM3_Init+0xe4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f98:	4823      	ldr	r0, [pc, #140]	; (8001028 <MX_TIM3_Init+0xe4>)
 8000f9a:	f004 f9d9 	bl	8005350 <HAL_TIM_Base_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000fa4:	f000 fca0 	bl	80018e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	481c      	ldr	r0, [pc, #112]	; (8001028 <MX_TIM3_Init+0xe4>)
 8000fb6:	f004 fdab 	bl	8005b10 <HAL_TIM_ConfigClockSource>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000fc0:	f000 fc92 	bl	80018e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fc4:	4818      	ldr	r0, [pc, #96]	; (8001028 <MX_TIM3_Init+0xe4>)
 8000fc6:	f004 fa12 	bl	80053ee <HAL_TIM_PWM_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000fd0:	f000 fc8a 	bl	80018e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fdc:	f107 0320 	add.w	r3, r7, #32
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4811      	ldr	r0, [pc, #68]	; (8001028 <MX_TIM3_Init+0xe4>)
 8000fe4:	f005 fa02 	bl	80063ec <HAL_TIMEx_MasterConfigSynchronization>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000fee:	f000 fc7b 	bl	80018e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ff2:	2360      	movs	r3, #96	; 0x60
 8000ff4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2200      	movs	r2, #0
 8001006:	4619      	mov	r1, r3
 8001008:	4807      	ldr	r0, [pc, #28]	; (8001028 <MX_TIM3_Init+0xe4>)
 800100a:	f004 fcbf 	bl	800598c <HAL_TIM_PWM_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001014:	f000 fc68 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001018:	4803      	ldr	r0, [pc, #12]	; (8001028 <MX_TIM3_Init+0xe4>)
 800101a:	f001 fadd 	bl	80025d8 <HAL_TIM_MspPostInit>

}
 800101e:	bf00      	nop
 8001020:	3738      	adds	r7, #56	; 0x38
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200001e4 	.word	0x200001e4
 800102c:	40000400 	.word	0x40000400

08001030 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08e      	sub	sp, #56	; 0x38
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001036:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001044:	f107 0320 	add.w	r3, r7, #32
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
 800105c:	615a      	str	r2, [r3, #20]
 800105e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001060:	4b2c      	ldr	r3, [pc, #176]	; (8001114 <MX_TIM4_Init+0xe4>)
 8001062:	4a2d      	ldr	r2, [pc, #180]	; (8001118 <MX_TIM4_Init+0xe8>)
 8001064:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001066:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <MX_TIM4_Init+0xe4>)
 8001068:	2200      	movs	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106c:	4b29      	ldr	r3, [pc, #164]	; (8001114 <MX_TIM4_Init+0xe4>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 104;
 8001072:	4b28      	ldr	r3, [pc, #160]	; (8001114 <MX_TIM4_Init+0xe4>)
 8001074:	2268      	movs	r2, #104	; 0x68
 8001076:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <MX_TIM4_Init+0xe4>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107e:	4b25      	ldr	r3, [pc, #148]	; (8001114 <MX_TIM4_Init+0xe4>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001084:	4823      	ldr	r0, [pc, #140]	; (8001114 <MX_TIM4_Init+0xe4>)
 8001086:	f004 f963 	bl	8005350 <HAL_TIM_Base_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001090:	f000 fc2a 	bl	80018e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800109a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109e:	4619      	mov	r1, r3
 80010a0:	481c      	ldr	r0, [pc, #112]	; (8001114 <MX_TIM4_Init+0xe4>)
 80010a2:	f004 fd35 	bl	8005b10 <HAL_TIM_ConfigClockSource>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80010ac:	f000 fc1c 	bl	80018e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010b0:	4818      	ldr	r0, [pc, #96]	; (8001114 <MX_TIM4_Init+0xe4>)
 80010b2:	f004 f99c 	bl	80053ee <HAL_TIM_PWM_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80010bc:	f000 fc14 	bl	80018e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010c8:	f107 0320 	add.w	r3, r7, #32
 80010cc:	4619      	mov	r1, r3
 80010ce:	4811      	ldr	r0, [pc, #68]	; (8001114 <MX_TIM4_Init+0xe4>)
 80010d0:	f005 f98c 	bl	80063ec <HAL_TIMEx_MasterConfigSynchronization>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80010da:	f000 fc05 	bl	80018e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010de:	2360      	movs	r3, #96	; 0x60
 80010e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2200      	movs	r2, #0
 80010f2:	4619      	mov	r1, r3
 80010f4:	4807      	ldr	r0, [pc, #28]	; (8001114 <MX_TIM4_Init+0xe4>)
 80010f6:	f004 fc49 	bl	800598c <HAL_TIM_PWM_ConfigChannel>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001100:	f000 fbf2 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001104:	4803      	ldr	r0, [pc, #12]	; (8001114 <MX_TIM4_Init+0xe4>)
 8001106:	f001 fa67 	bl	80025d8 <HAL_TIM_MspPostInit>

}
 800110a:	bf00      	nop
 800110c:	3738      	adds	r7, #56	; 0x38
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000022c 	.word	0x2000022c
 8001118:	40000800 	.word	0x40000800

0800111c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08e      	sub	sp, #56	; 0x38
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001122:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001130:	f107 0320 	add.w	r3, r7, #32
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
 8001148:	615a      	str	r2, [r3, #20]
 800114a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800114c:	4b2c      	ldr	r3, [pc, #176]	; (8001200 <MX_TIM5_Init+0xe4>)
 800114e:	4a2d      	ldr	r2, [pc, #180]	; (8001204 <MX_TIM5_Init+0xe8>)
 8001150:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001152:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <MX_TIM5_Init+0xe4>)
 8001154:	2200      	movs	r2, #0
 8001156:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001158:	4b29      	ldr	r3, [pc, #164]	; (8001200 <MX_TIM5_Init+0xe4>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 104;
 800115e:	4b28      	ldr	r3, [pc, #160]	; (8001200 <MX_TIM5_Init+0xe4>)
 8001160:	2268      	movs	r2, #104	; 0x68
 8001162:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001164:	4b26      	ldr	r3, [pc, #152]	; (8001200 <MX_TIM5_Init+0xe4>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116a:	4b25      	ldr	r3, [pc, #148]	; (8001200 <MX_TIM5_Init+0xe4>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001170:	4823      	ldr	r0, [pc, #140]	; (8001200 <MX_TIM5_Init+0xe4>)
 8001172:	f004 f8ed 	bl	8005350 <HAL_TIM_Base_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 800117c:	f000 fbb4 	bl	80018e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001186:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800118a:	4619      	mov	r1, r3
 800118c:	481c      	ldr	r0, [pc, #112]	; (8001200 <MX_TIM5_Init+0xe4>)
 800118e:	f004 fcbf 	bl	8005b10 <HAL_TIM_ConfigClockSource>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8001198:	f000 fba6 	bl	80018e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800119c:	4818      	ldr	r0, [pc, #96]	; (8001200 <MX_TIM5_Init+0xe4>)
 800119e:	f004 f926 	bl	80053ee <HAL_TIM_PWM_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80011a8:	f000 fb9e 	bl	80018e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ac:	2300      	movs	r3, #0
 80011ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80011b4:	f107 0320 	add.w	r3, r7, #32
 80011b8:	4619      	mov	r1, r3
 80011ba:	4811      	ldr	r0, [pc, #68]	; (8001200 <MX_TIM5_Init+0xe4>)
 80011bc:	f005 f916 	bl	80063ec <HAL_TIMEx_MasterConfigSynchronization>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 80011c6:	f000 fb8f 	bl	80018e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ca:	2360      	movs	r3, #96	; 0x60
 80011cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	2200      	movs	r2, #0
 80011de:	4619      	mov	r1, r3
 80011e0:	4807      	ldr	r0, [pc, #28]	; (8001200 <MX_TIM5_Init+0xe4>)
 80011e2:	f004 fbd3 	bl	800598c <HAL_TIM_PWM_ConfigChannel>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 80011ec:	f000 fb7c 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80011f0:	4803      	ldr	r0, [pc, #12]	; (8001200 <MX_TIM5_Init+0xe4>)
 80011f2:	f001 f9f1 	bl	80025d8 <HAL_TIM_MspPostInit>

}
 80011f6:	bf00      	nop
 80011f8:	3738      	adds	r7, #56	; 0x38
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000274 	.word	0x20000274
 8001204:	40000c00 	.word	0x40000c00

08001208 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_USART2_UART_Init+0x4c>)
 800120e:	4a12      	ldr	r2, [pc, #72]	; (8001258 <MX_USART2_UART_Init+0x50>)
 8001210:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <MX_USART2_UART_Init+0x4c>)
 8001214:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001218:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_USART2_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_USART2_UART_Init+0x4c>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <MX_USART2_UART_Init+0x4c>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_USART2_UART_Init+0x4c>)
 800122e:	220c      	movs	r2, #12
 8001230:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <MX_USART2_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_USART2_UART_Init+0x4c>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_USART2_UART_Init+0x4c>)
 8001240:	f005 f994 	bl	800656c <HAL_UART_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800124a:	f000 fb4d 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	2000049c 	.word	0x2000049c
 8001258:	40004400 	.word	0x40004400

0800125c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <MX_DMA_Init+0x98>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a22      	ldr	r2, [pc, #136]	; (80012f4 <MX_DMA_Init+0x98>)
 800126c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <MX_DMA_Init+0x98>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <MX_DMA_Init+0x98>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a1b      	ldr	r2, [pc, #108]	; (80012f4 <MX_DMA_Init+0x98>)
 8001288:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <MX_DMA_Init+0x98>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	200b      	movs	r0, #11
 80012a0:	f002 fa0d 	bl	80036be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012a4:	200b      	movs	r0, #11
 80012a6:	f002 fa26 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	200d      	movs	r0, #13
 80012b0:	f002 fa05 	bl	80036be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80012b4:	200d      	movs	r0, #13
 80012b6:	f002 fa1e 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	200f      	movs	r0, #15
 80012c0:	f002 f9fd 	bl	80036be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80012c4:	200f      	movs	r0, #15
 80012c6:	f002 fa16 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	2010      	movs	r0, #16
 80012d0:	f002 f9f5 	bl	80036be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012d4:	2010      	movs	r0, #16
 80012d6:	f002 fa0e 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2039      	movs	r0, #57	; 0x39
 80012e0:	f002 f9ed 	bl	80036be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80012e4:	2039      	movs	r0, #57	; 0x39
 80012e6:	f002 fa06 	bl	80036f6 <HAL_NVIC_EnableIRQ>

}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800

080012f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	4b3d      	ldr	r3, [pc, #244]	; (8001408 <MX_GPIO_Init+0x110>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a3c      	ldr	r2, [pc, #240]	; (8001408 <MX_GPIO_Init+0x110>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b3a      	ldr	r3, [pc, #232]	; (8001408 <MX_GPIO_Init+0x110>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	4b36      	ldr	r3, [pc, #216]	; (8001408 <MX_GPIO_Init+0x110>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a35      	ldr	r2, [pc, #212]	; (8001408 <MX_GPIO_Init+0x110>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b33      	ldr	r3, [pc, #204]	; (8001408 <MX_GPIO_Init+0x110>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <MX_GPIO_Init+0x110>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a2e      	ldr	r2, [pc, #184]	; (8001408 <MX_GPIO_Init+0x110>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b2c      	ldr	r3, [pc, #176]	; (8001408 <MX_GPIO_Init+0x110>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_Pin|SD_CS_Pin|LCD_CE_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	f240 6102 	movw	r1, #1538	; 0x602
 8001368:	4828      	ldr	r0, [pc, #160]	; (800140c <MX_GPIO_Init+0x114>)
 800136a:	f002 fef5 	bl	8004158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001374:	4826      	ldr	r0, [pc, #152]	; (8001410 <MX_GPIO_Init+0x118>)
 8001376:	f002 feef 	bl	8004158 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_UP_Pin BUTTON_MID_Pin BUTTON_DOWN_Pin */
  GPIO_InitStruct.Pin = BUTTON_UP_Pin|BUTTON_MID_Pin|BUTTON_DOWN_Pin;
 800137a:	230e      	movs	r3, #14
 800137c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800137e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001382:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001384:	2302      	movs	r3, #2
 8001386:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4619      	mov	r1, r3
 800138e:	4821      	ldr	r0, [pc, #132]	; (8001414 <MX_GPIO_Init+0x11c>)
 8001390:	f002 fd5e 	bl	8003e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin SD_CS_Pin LCD_CE_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|SD_CS_Pin|LCD_CE_Pin;
 8001394:	f240 6302 	movw	r3, #1538	; 0x602
 8001398:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	4619      	mov	r1, r3
 80013ac:	4817      	ldr	r0, [pc, #92]	; (800140c <MX_GPIO_Init+0x114>)
 80013ae:	f002 fd4f 	bl	8003e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin;
 80013b2:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80013b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	4619      	mov	r1, r3
 80013ca:	4811      	ldr	r0, [pc, #68]	; (8001410 <MX_GPIO_Init+0x118>)
 80013cc:	f002 fd40 	bl	8003e50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2100      	movs	r1, #0
 80013d4:	2007      	movs	r0, #7
 80013d6:	f002 f972 	bl	80036be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80013da:	2007      	movs	r0, #7
 80013dc:	f002 f98b 	bl	80036f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2100      	movs	r1, #0
 80013e4:	2008      	movs	r0, #8
 80013e6:	f002 f96a 	bl	80036be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80013ea:	2008      	movs	r0, #8
 80013ec:	f002 f983 	bl	80036f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2100      	movs	r1, #0
 80013f4:	2009      	movs	r0, #9
 80013f6:	f002 f962 	bl	80036be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80013fa:	2009      	movs	r0, #9
 80013fc:	f002 f97b 	bl	80036f6 <HAL_NVIC_EnableIRQ>

}
 8001400:	bf00      	nop
 8001402:	3720      	adds	r7, #32
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40023800 	.word	0x40023800
 800140c:	40020000 	.word	0x40020000
 8001410:	40020400 	.word	0x40020400
 8001414:	40020800 	.word	0x40020800

08001418 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin) {
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	2b08      	cmp	r3, #8
 8001426:	d006      	beq.n	8001436 <HAL_GPIO_EXTI_Callback+0x1e>
 8001428:	2b08      	cmp	r3, #8
 800142a:	dc10      	bgt.n	800144e <HAL_GPIO_EXTI_Callback+0x36>
 800142c:	2b02      	cmp	r3, #2
 800142e:	d00a      	beq.n	8001446 <HAL_GPIO_EXTI_Callback+0x2e>
 8001430:	2b04      	cmp	r3, #4
 8001432:	d004      	beq.n	800143e <HAL_GPIO_EXTI_Callback+0x26>
    case BUTTON_UP_Pin:
        button_event = BUTTON_UP;
        break;
    }

}
 8001434:	e00b      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x36>
        button_event = BUTTON_DOWN;
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_GPIO_EXTI_Callback+0x44>)
 8001438:	2203      	movs	r2, #3
 800143a:	701a      	strb	r2, [r3, #0]
        break;
 800143c:	e007      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x36>
        button_event = BUTTON_MID;
 800143e:	4b07      	ldr	r3, [pc, #28]	; (800145c <HAL_GPIO_EXTI_Callback+0x44>)
 8001440:	2202      	movs	r2, #2
 8001442:	701a      	strb	r2, [r3, #0]
        break;
 8001444:	e003      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x36>
        button_event = BUTTON_UP;
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <HAL_GPIO_EXTI_Callback+0x44>)
 8001448:	2201      	movs	r2, #1
 800144a:	701a      	strb	r2, [r3, #0]
        break;
 800144c:	bf00      	nop
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	200004e0 	.word	0x200004e0

08001460 <handleMenu>:

void handleMenu(void) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af02      	add	r7, sp, #8
    switch (button_event) {
 8001466:	4b47      	ldr	r3, [pc, #284]	; (8001584 <handleMenu+0x124>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b03      	cmp	r3, #3
 800146e:	d82c      	bhi.n	80014ca <handleMenu+0x6a>
 8001470:	a201      	add	r2, pc, #4	; (adr r2, 8001478 <handleMenu+0x18>)
 8001472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001476:	bf00      	nop
 8001478:	080014cb 	.word	0x080014cb
 800147c:	080014b5 	.word	0x080014b5
 8001480:	080014a5 	.word	0x080014a5
 8001484:	08001489 	.word	0x08001489
    case BUTTON_NULL:
        break;
    case BUTTON_DOWN:
        if ((selected + 1) < number_of_dirs)
 8001488:	4b3f      	ldr	r3, [pc, #252]	; (8001588 <handleMenu+0x128>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	3301      	adds	r3, #1
 800148e:	4a3f      	ldr	r2, [pc, #252]	; (800158c <handleMenu+0x12c>)
 8001490:	7812      	ldrb	r2, [r2, #0]
 8001492:	4293      	cmp	r3, r2
 8001494:	da1b      	bge.n	80014ce <handleMenu+0x6e>
            selected++;
 8001496:	4b3c      	ldr	r3, [pc, #240]	; (8001588 <handleMenu+0x128>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b3a      	ldr	r3, [pc, #232]	; (8001588 <handleMenu+0x128>)
 80014a0:	701a      	strb	r2, [r3, #0]
        break;
 80014a2:	e014      	b.n	80014ce <handleMenu+0x6e>
    case BUTTON_MID:
        playState ^= 1;
 80014a4:	4b3a      	ldr	r3, [pc, #232]	; (8001590 <handleMenu+0x130>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	f083 0301 	eor.w	r3, r3, #1
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4b38      	ldr	r3, [pc, #224]	; (8001590 <handleMenu+0x130>)
 80014b0:	701a      	strb	r2, [r3, #0]
        break;
 80014b2:	e00f      	b.n	80014d4 <handleMenu+0x74>
    case BUTTON_UP:
        if (0 < selected)
 80014b4:	4b34      	ldr	r3, [pc, #208]	; (8001588 <handleMenu+0x128>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00a      	beq.n	80014d2 <handleMenu+0x72>
            selected--;
 80014bc:	4b32      	ldr	r3, [pc, #200]	; (8001588 <handleMenu+0x128>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	4b30      	ldr	r3, [pc, #192]	; (8001588 <handleMenu+0x128>)
 80014c6:	701a      	strb	r2, [r3, #0]
        break;
 80014c8:	e003      	b.n	80014d2 <handleMenu+0x72>
    default:
        break;
 80014ca:	bf00      	nop
 80014cc:	e002      	b.n	80014d4 <handleMenu+0x74>
        break;
 80014ce:	bf00      	nop
 80014d0:	e000      	b.n	80014d4 <handleMenu+0x74>
        break;
 80014d2:	bf00      	nop
    }

    PCD8544_Clear();
 80014d4:	f001 fb78 	bl	8002bc8 <PCD8544_Clear>

    for (int i = 0; i < number_of_dirs; i++) {
 80014d8:	2300      	movs	r3, #0
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	e046      	b.n	800156c <handleMenu+0x10c>
        if (i == selected) {
 80014de:	4b2a      	ldr	r3, [pc, #168]	; (8001588 <handleMenu+0x128>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d128      	bne.n	800153c <handleMenu+0xdc>
            PCD8544_DrawFilledRectangle(0, i * 9, 84, i * 9 + 9,
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	461a      	mov	r2, r3
 80014f0:	00d2      	lsls	r2, r2, #3
 80014f2:	4413      	add	r3, r2
 80014f4:	b2d9      	uxtb	r1, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3301      	adds	r3, #1
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	461a      	mov	r2, r3
 80014fe:	00d2      	lsls	r2, r2, #3
 8001500:	4413      	add	r3, r2
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2201      	movs	r2, #1
 8001506:	9200      	str	r2, [sp, #0]
 8001508:	2254      	movs	r2, #84	; 0x54
 800150a:	2000      	movs	r0, #0
 800150c:	f001 fdda 	bl	80030c4 <PCD8544_DrawFilledRectangle>
                    PCD8544_Pixel_Set);
            PCD8544_GotoXY(4, i * 9 + 1);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	461a      	mov	r2, r3
 8001516:	00d2      	lsls	r2, r2, #3
 8001518:	4413      	add	r3, r2
 800151a:	b2db      	uxtb	r3, r3
 800151c:	3301      	adds	r3, #1
 800151e:	b2db      	uxtb	r3, r3
 8001520:	4619      	mov	r1, r3
 8001522:	2004      	movs	r0, #4
 8001524:	f001 fc20 	bl	8002d68 <PCD8544_GotoXY>
            PCD8544_Puts(buffor_dirs[i], PCD8544_Pixel_Clear,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	4a19      	ldr	r2, [pc, #100]	; (8001594 <handleMenu+0x134>)
 800152e:	4413      	add	r3, r2
 8001530:	2200      	movs	r2, #0
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f001 fcd9 	bl	8002eec <PCD8544_Puts>
 800153a:	e014      	b.n	8001566 <handleMenu+0x106>
                    PCD8544_FontSize_5x7);
        } else {
            PCD8544_GotoXY(4, i * 9 + 1);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	461a      	mov	r2, r3
 8001542:	00d2      	lsls	r2, r2, #3
 8001544:	4413      	add	r3, r2
 8001546:	b2db      	uxtb	r3, r3
 8001548:	3301      	adds	r3, #1
 800154a:	b2db      	uxtb	r3, r3
 800154c:	4619      	mov	r1, r3
 800154e:	2004      	movs	r0, #4
 8001550:	f001 fc0a 	bl	8002d68 <PCD8544_GotoXY>
            PCD8544_Puts(buffor_dirs[i], PCD8544_Pixel_Clear,
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	011b      	lsls	r3, r3, #4
 8001558:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <handleMenu+0x134>)
 800155a:	4413      	add	r3, r2
 800155c:	2200      	movs	r2, #0
 800155e:	2100      	movs	r1, #0
 8001560:	4618      	mov	r0, r3
 8001562:	f001 fcc3 	bl	8002eec <PCD8544_Puts>
    for (int i = 0; i < number_of_dirs; i++) {
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3301      	adds	r3, #1
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <handleMenu+0x12c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4293      	cmp	r3, r2
 8001576:	dbb2      	blt.n	80014de <handleMenu+0x7e>
                    PCD8544_FontSize_5x7);
        }
    }
    PCD8544_Refresh();
 8001578:	f001 fb58 	bl	8002c2c <PCD8544_Refresh>
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200004e0 	.word	0x200004e0
 8001588:	20000585 	.word	0x20000585
 800158c:	20000584 	.word	0x20000584
 8001590:	20000586 	.word	0x20000586
 8001594:	200004e4 	.word	0x200004e4

08001598 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

    return (((uint32_t) r + m) << 16) | (((uint32_t) g + m) << 8)
            | ((uint32_t) b + m);
}

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8001598:	b480      	push	{r7}
 800159a:	b087      	sub	sp, #28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

    Layers *layer;

    if (htim == &htim1) {
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a5a      	ldr	r2, [pc, #360]	; (800170c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x174>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d102      	bne.n	80015ae <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
        layer = &Layer0;
 80015a8:	4b59      	ldr	r3, [pc, #356]	; (8001710 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x178>)
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	e01b      	b.n	80015e6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x4e>
    } else if (htim == &htim2) {
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a58      	ldr	r2, [pc, #352]	; (8001714 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x17c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d102      	bne.n	80015bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x24>
        layer = &Layer1;
 80015b6:	4b58      	ldr	r3, [pc, #352]	; (8001718 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x180>)
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	e014      	b.n	80015e6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x4e>
    } else if (htim == &htim3) {
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a57      	ldr	r2, [pc, #348]	; (800171c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x184>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d102      	bne.n	80015ca <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x32>
        layer = &Layer2;
 80015c4:	4b56      	ldr	r3, [pc, #344]	; (8001720 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x188>)
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	e00d      	b.n	80015e6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x4e>
    } else if (htim == &htim4) {
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a55      	ldr	r2, [pc, #340]	; (8001724 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x18c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d102      	bne.n	80015d8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x40>
        layer = &Layer3;
 80015d2:	4b55      	ldr	r3, [pc, #340]	; (8001728 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x190>)
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	e006      	b.n	80015e6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x4e>
    } else if (htim == &htim5) {
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a54      	ldr	r2, [pc, #336]	; (800172c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x194>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	f040 808f 	bne.w	8001700 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x168>
        layer = &Layer4;
 80015e2:	4b53      	ldr	r3, [pc, #332]	; (8001730 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x198>)
 80015e4:	617b      	str	r3, [r7, #20]
    } else
        return;

    // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
    if (layer->wr_buf_p < NUM_PIXELS) {
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 80015ec:	2bff      	cmp	r3, #255	; 0xff
 80015ee:	d868      	bhi.n	80016c2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x12a>
        // We're in. Fill the even buffer
        for (uint_fast8_t i = 0; i < 8; ++i) {
 80015f0:	2300      	movs	r3, #0
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	e05a      	b.n	80016ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x114>
            layer->wr_buf[i] =
            PWM_LO << (((layer->rgb_arr[3 * layer->wr_buf_p] << i) & 0x80) > 0);
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 80015fc:	4613      	mov	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	4413      	add	r3, r2
 8001606:	7a5b      	ldrb	r3, [r3, #9]
 8001608:	461a      	mov	r2, r3
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	f003 0380 	and.w	r3, r3, #128	; 0x80
            layer->wr_buf[i] =
 8001614:	2b00      	cmp	r3, #0
 8001616:	dd01      	ble.n	800161c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x84>
 8001618:	2142      	movs	r1, #66	; 0x42
 800161a:	e000      	b.n	800161e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x86>
 800161c:	2121      	movs	r1, #33	; 0x21
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	460a      	mov	r2, r1
 800162c:	805a      	strh	r2, [r3, #2]
            layer->wr_buf[i + 8] = PWM_LO
                    << (((layer->rgb_arr[3 * layer->wr_buf_p + 1] << i) & 0x80)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 8001634:	4613      	mov	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4413      	add	r3, r2
 800163a:	3301      	adds	r3, #1
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	4413      	add	r3, r2
 8001640:	7a5b      	ldrb	r3, [r3, #9]
 8001642:	461a      	mov	r2, r3
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	f003 0380 	and.w	r3, r3, #128	; 0x80
            layer->wr_buf[i + 8] = PWM_LO
 800164e:	2b00      	cmp	r3, #0
 8001650:	dd01      	ble.n	8001656 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xbe>
 8001652:	2142      	movs	r1, #66	; 0x42
 8001654:	e000      	b.n	8001658 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc0>
 8001656:	2121      	movs	r1, #33	; 0x21
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	3308      	adds	r3, #8
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	460a      	mov	r2, r1
 8001668:	805a      	strh	r2, [r3, #2]
                            > 0);
            layer->wr_buf[i + 16] = PWM_LO
                    << (((layer->rgb_arr[3 * layer->wr_buf_p + 2] << i) & 0x80)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 8001670:	4613      	mov	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4413      	add	r3, r2
 8001676:	3302      	adds	r3, #2
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	4413      	add	r3, r2
 800167c:	7a5b      	ldrb	r3, [r3, #9]
 800167e:	461a      	mov	r2, r3
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	f003 0380 	and.w	r3, r3, #128	; 0x80
            layer->wr_buf[i + 16] = PWM_LO
 800168a:	2b00      	cmp	r3, #0
 800168c:	dd01      	ble.n	8001692 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfa>
 800168e:	2142      	movs	r1, #66	; 0x42
 8001690:	e000      	b.n	8001694 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xfc>
 8001692:	2121      	movs	r1, #33	; 0x21
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	3310      	adds	r3, #16
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	460a      	mov	r2, r1
 80016a4:	805a      	strh	r2, [r3, #2]
        for (uint_fast8_t i = 0; i < 8; ++i) {
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	3301      	adds	r3, #1
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	2b07      	cmp	r3, #7
 80016b0:	d9a1      	bls.n	80015f6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x5e>
                            > 0);
        }
        layer->wr_buf_p++;
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 80016c0:	e01f      	b.n	8001702 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16a>
    } else if (layer->wr_buf_p < NUM_PIXELS + 2) {
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 80016c8:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 80016cc:	d219      	bcs.n	8001702 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16a>
        // Last two transfers are resets.
        //                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
        // First half reset zero fill
        for (uint8_t i = 0; i < WR_BUF_LEN / 2; ++i)
 80016ce:	2300      	movs	r3, #0
 80016d0:	73fb      	strb	r3, [r7, #15]
 80016d2:	e00a      	b.n	80016ea <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x152>
            layer->wr_buf[i] = 0;
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4413      	add	r3, r2
 80016e0:	2200      	movs	r2, #0
 80016e2:	805a      	strh	r2, [r3, #2]
        for (uint8_t i = 0; i < WR_BUF_LEN / 2; ++i)
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	3301      	adds	r3, #1
 80016e8:	73fb      	strb	r3, [r7, #15]
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	2b17      	cmp	r3, #23
 80016ee:	d9f1      	bls.n	80016d4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x13c>
        layer->wr_buf_p++;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 80016fe:	e000      	b.n	8001702 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16a>
        return;
 8001700:	bf00      	nop
    }
}
 8001702:	371c      	adds	r7, #28
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	20000154 	.word	0x20000154
 8001710:	20000588 	.word	0x20000588
 8001714:	2000019c 	.word	0x2000019c
 8001718:	200008f8 	.word	0x200008f8
 800171c:	200001e4 	.word	0x200001e4
 8001720:	20000c68 	.word	0x20000c68
 8001724:	2000022c 	.word	0x2000022c
 8001728:	20000fd8 	.word	0x20000fd8
 800172c:	20000274 	.word	0x20000274
 8001730:	20001348 	.word	0x20001348

08001734 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

    Layers *layer;

    if (htim == &htim1) {
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a60      	ldr	r2, [pc, #384]	; (80018c0 <HAL_TIM_PWM_PulseFinishedCallback+0x18c>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d102      	bne.n	800174a <HAL_TIM_PWM_PulseFinishedCallback+0x16>
        layer = &Layer0;
 8001744:	4b5f      	ldr	r3, [pc, #380]	; (80018c4 <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	e01b      	b.n	8001782 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
    } else if (htim == &htim2) {
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a5e      	ldr	r2, [pc, #376]	; (80018c8 <HAL_TIM_PWM_PulseFinishedCallback+0x194>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d102      	bne.n	8001758 <HAL_TIM_PWM_PulseFinishedCallback+0x24>
        layer = &Layer1;
 8001752:	4b5e      	ldr	r3, [pc, #376]	; (80018cc <HAL_TIM_PWM_PulseFinishedCallback+0x198>)
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	e014      	b.n	8001782 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
    } else if (htim == &htim3) {
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a5d      	ldr	r2, [pc, #372]	; (80018d0 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d102      	bne.n	8001766 <HAL_TIM_PWM_PulseFinishedCallback+0x32>
        layer = &Layer2;
 8001760:	4b5c      	ldr	r3, [pc, #368]	; (80018d4 <HAL_TIM_PWM_PulseFinishedCallback+0x1a0>)
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	e00d      	b.n	8001782 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
    } else if (htim == &htim4) {
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a5b      	ldr	r2, [pc, #364]	; (80018d8 <HAL_TIM_PWM_PulseFinishedCallback+0x1a4>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d102      	bne.n	8001774 <HAL_TIM_PWM_PulseFinishedCallback+0x40>
        layer = &Layer3;
 800176e:	4b5b      	ldr	r3, [pc, #364]	; (80018dc <HAL_TIM_PWM_PulseFinishedCallback+0x1a8>)
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	e006      	b.n	8001782 <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
    } else if (htim == &htim5) {
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a5a      	ldr	r2, [pc, #360]	; (80018e0 <HAL_TIM_PWM_PulseFinishedCallback+0x1ac>)
 8001778:	4293      	cmp	r3, r2
 800177a:	f040 809d 	bne.w	80018b8 <HAL_TIM_PWM_PulseFinishedCallback+0x184>
        layer = &Layer4;
 800177e:	4b59      	ldr	r3, [pc, #356]	; (80018e4 <HAL_TIM_PWM_PulseFinishedCallback+0x1b0>)
 8001780:	617b      	str	r3, [r7, #20]
    } else
        return;

    // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
    if (layer->wr_buf_p < NUM_PIXELS) {
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8001788:	2bff      	cmp	r3, #255	; 0xff
 800178a:	d869      	bhi.n	8001860 <HAL_TIM_PWM_PulseFinishedCallback+0x12c>
        // We're in. Fill the odd buffer
        for (uint_fast8_t i = 0; i < 8; ++i) {
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	e05b      	b.n	800184a <HAL_TIM_PWM_PulseFinishedCallback+0x116>
            layer->wr_buf[i + 24] =
            PWM_LO << (((layer->rgb_arr[3 * layer->wr_buf_p] << i) & 0x80) > 0);
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 8001798:	4613      	mov	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4413      	add	r3, r2
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	4413      	add	r3, r2
 80017a2:	7a5b      	ldrb	r3, [r3, #9]
 80017a4:	461a      	mov	r2, r3
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
            layer->wr_buf[i + 24] =
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	dd01      	ble.n	80017b8 <HAL_TIM_PWM_PulseFinishedCallback+0x84>
 80017b4:	2142      	movs	r1, #66	; 0x42
 80017b6:	e000      	b.n	80017ba <HAL_TIM_PWM_PulseFinishedCallback+0x86>
 80017b8:	2121      	movs	r1, #33	; 0x21
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	3318      	adds	r3, #24
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	460a      	mov	r2, r1
 80017ca:	805a      	strh	r2, [r3, #2]
            layer->wr_buf[i + 32] = PWM_LO
                    << (((layer->rgb_arr[3 * layer->wr_buf_p + 1] << i) & 0x80)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 80017d2:	4613      	mov	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4413      	add	r3, r2
 80017d8:	3301      	adds	r3, #1
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4413      	add	r3, r2
 80017de:	7a5b      	ldrb	r3, [r3, #9]
 80017e0:	461a      	mov	r2, r3
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
            layer->wr_buf[i + 32] = PWM_LO
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	dd01      	ble.n	80017f4 <HAL_TIM_PWM_PulseFinishedCallback+0xc0>
 80017f0:	2142      	movs	r1, #66	; 0x42
 80017f2:	e000      	b.n	80017f6 <HAL_TIM_PWM_PulseFinishedCallback+0xc2>
 80017f4:	2121      	movs	r1, #33	; 0x21
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	3320      	adds	r3, #32
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4413      	add	r3, r2
 8001804:	460a      	mov	r2, r1
 8001806:	805a      	strh	r2, [r3, #2]
                            > 0);
            layer->wr_buf[i + 40] = PWM_LO
                    << (((layer->rgb_arr[3 * layer->wr_buf_p + 2] << i) & 0x80)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 800180e:	4613      	mov	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4413      	add	r3, r2
 8001814:	3302      	adds	r3, #2
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	4413      	add	r3, r2
 800181a:	7a5b      	ldrb	r3, [r3, #9]
 800181c:	461a      	mov	r2, r3
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	f003 0380 	and.w	r3, r3, #128	; 0x80
            layer->wr_buf[i + 40] = PWM_LO
 8001828:	2b00      	cmp	r3, #0
 800182a:	dd01      	ble.n	8001830 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>
 800182c:	2142      	movs	r1, #66	; 0x42
 800182e:	e000      	b.n	8001832 <HAL_TIM_PWM_PulseFinishedCallback+0xfe>
 8001830:	2121      	movs	r1, #33	; 0x21
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	3328      	adds	r3, #40	; 0x28
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	460a      	mov	r2, r1
 8001842:	805a      	strh	r2, [r3, #2]
        for (uint_fast8_t i = 0; i < 8; ++i) {
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	3301      	adds	r3, #1
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	2b07      	cmp	r3, #7
 800184e:	d9a0      	bls.n	8001792 <HAL_TIM_PWM_PulseFinishedCallback+0x5e>
                            > 0);
        }

        layer->wr_buf_p++;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 800185e:	e02c      	b.n	80018ba <HAL_TIM_PWM_PulseFinishedCallback+0x186>

    } else if (layer->wr_buf_p < NUM_PIXELS + 2) {
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8001866:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800186a:	d218      	bcs.n	800189e <HAL_TIM_PWM_PulseFinishedCallback+0x16a>
        // Second half reset zero fill
        for (uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i)
 800186c:	2318      	movs	r3, #24
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	e00a      	b.n	8001888 <HAL_TIM_PWM_PulseFinishedCallback+0x154>
            layer->wr_buf[i] = 0;
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	2200      	movs	r2, #0
 8001880:	805a      	strh	r2, [r3, #2]
        for (uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i)
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	3301      	adds	r3, #1
 8001886:	73fb      	strb	r3, [r7, #15]
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	2b2f      	cmp	r3, #47	; 0x2f
 800188c:	d9f1      	bls.n	8001872 <HAL_TIM_PWM_PulseFinishedCallback+0x13e>
        ++layer->wr_buf_p;
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 800189c:	e00d      	b.n	80018ba <HAL_TIM_PWM_PulseFinishedCallback+0x186>
    } else {
        // We're done. Lean back and until next time!
        layer->wr_buf_p = 0;
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
        HAL_TIM_PWM_Stop_DMA(layer->timer, layer->channel);
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	7a1b      	ldrb	r3, [r3, #8]
 80018ae:	4619      	mov	r1, r3
 80018b0:	4610      	mov	r0, r2
 80018b2:	f003 ffa5 	bl	8005800 <HAL_TIM_PWM_Stop_DMA>
 80018b6:	e000      	b.n	80018ba <HAL_TIM_PWM_PulseFinishedCallback+0x186>
        return;
 80018b8:	bf00      	nop
    }
}
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000154 	.word	0x20000154
 80018c4:	20000588 	.word	0x20000588
 80018c8:	2000019c 	.word	0x2000019c
 80018cc:	200008f8 	.word	0x200008f8
 80018d0:	200001e4 	.word	0x200001e4
 80018d4:	20000c68 	.word	0x20000c68
 80018d8:	2000022c 	.word	0x2000022c
 80018dc:	20000fd8 	.word	0x20000fd8
 80018e0:	20000274 	.word	0x20000274
 80018e4:	20001348 	.word	0x20001348

080018e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ec:	b672      	cpsid	i
}
 80018ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 80018f0:	e7fe      	b.n	80018f0 <Error_Handler+0x8>
	...

080018f4 <myprintf>:
#include "fatfs.h"

extern SPI_HandleTypeDef hspi1;
extern UART_HandleTypeDef huart2;

void myprintf(const char *fmt, ...) {
 80018f4:	b40f      	push	{r0, r1, r2, r3}
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
    static char buffer[256];
    va_list args;
    va_start(args, fmt);
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	603b      	str	r3, [r7, #0]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	f44f 7180 	mov.w	r1, #256	; 0x100
 800190a:	480b      	ldr	r0, [pc, #44]	; (8001938 <myprintf+0x44>)
 800190c:	f008 fe48 	bl	800a5a0 <vsniprintf>
    va_end(args);

    int len = strlen(buffer);
 8001910:	4809      	ldr	r0, [pc, #36]	; (8001938 <myprintf+0x44>)
 8001912:	f7fe fc65 	bl	80001e0 <strlen>
 8001916:	4603      	mov	r3, r0
 8001918:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) buffer, len, -1);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	b29a      	uxth	r2, r3
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
 8001922:	4905      	ldr	r1, [pc, #20]	; (8001938 <myprintf+0x44>)
 8001924:	4805      	ldr	r0, [pc, #20]	; (800193c <myprintf+0x48>)
 8001926:	f004 fe6e 	bl	8006606 <HAL_UART_Transmit>

}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001934:	b004      	add	sp, #16
 8001936:	4770      	bx	lr
 8001938:	20001b1c 	.word	0x20001b1c
 800193c:	2000049c 	.word	0x2000049c

08001940 <sd_card_init>:
//some variables for FatFs
FATFS FatFs; 	//Fatfs handle
FIL fil; 		//File handle
FRESULT fres; //Result after operations

ret_status sd_card_init(void) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
    myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 8001946:	4827      	ldr	r0, [pc, #156]	; (80019e4 <sd_card_init+0xa4>)
 8001948:	f7ff ffd4 	bl	80018f4 <myprintf>

    HAL_Delay(1000); //a short delay is important to let the SD card settle
 800194c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001950:	f001 fdb6 	bl	80034c0 <HAL_Delay>

    fres = f_mount(&FatFs, "", 1); //1=mount now
 8001954:	2201      	movs	r2, #1
 8001956:	4924      	ldr	r1, [pc, #144]	; (80019e8 <sd_card_init+0xa8>)
 8001958:	4824      	ldr	r0, [pc, #144]	; (80019ec <sd_card_init+0xac>)
 800195a:	f007 fd15 	bl	8009388 <f_mount>
 800195e:	4603      	mov	r3, r0
 8001960:	461a      	mov	r2, r3
 8001962:	4b23      	ldr	r3, [pc, #140]	; (80019f0 <sd_card_init+0xb0>)
 8001964:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 8001966:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <sd_card_init+0xb0>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d007      	beq.n	800197e <sd_card_init+0x3e>
        myprintf("f_mount error (%i)\r\n", fres);
 800196e:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <sd_card_init+0xb0>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	4619      	mov	r1, r3
 8001974:	481f      	ldr	r0, [pc, #124]	; (80019f4 <sd_card_init+0xb4>)
 8001976:	f7ff ffbd 	bl	80018f4 <myprintf>
        return STATUS_ERROR;
 800197a:	2302      	movs	r3, #2
 800197c:	e02d      	b.n	80019da <sd_card_init+0x9a>
    }
    DWORD free_clusters, free_sectors, total_sectors;

    FATFS *getFreeFs;

    fres = f_getfree("", &free_clusters, &getFreeFs);
 800197e:	463a      	mov	r2, r7
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	4619      	mov	r1, r3
 8001984:	4818      	ldr	r0, [pc, #96]	; (80019e8 <sd_card_init+0xa8>)
 8001986:	f008 fbc9 	bl	800a11c <f_getfree>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <sd_card_init+0xb0>)
 8001990:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 8001992:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <sd_card_init+0xb0>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d007      	beq.n	80019aa <sd_card_init+0x6a>
        myprintf("f_getfree error (%i)\r\n", fres);
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <sd_card_init+0xb0>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	4619      	mov	r1, r3
 80019a0:	4815      	ldr	r0, [pc, #84]	; (80019f8 <sd_card_init+0xb8>)
 80019a2:	f7ff ffa7 	bl	80018f4 <myprintf>

        return STATUS_ERROR;
 80019a6:	2302      	movs	r3, #2
 80019a8:	e017      	b.n	80019da <sd_card_init+0x9a>
    }

    //Formula comes from ChaN's documentation
    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	3b02      	subs	r3, #2
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	8952      	ldrh	r2, [r2, #10]
 80019b4:	fb02 f303 	mul.w	r3, r2, r3
 80019b8:	60fb      	str	r3, [r7, #12]
    free_sectors = free_clusters * getFreeFs->csize;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	895b      	ldrh	r3, [r3, #10]
 80019be:	461a      	mov	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	fb02 f303 	mul.w	r3, r2, r3
 80019c6:	60bb      	str	r3, [r7, #8]

    myprintf(
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	0859      	lsrs	r1, r3, #1
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	085b      	lsrs	r3, r3, #1
 80019d0:	461a      	mov	r2, r3
 80019d2:	480a      	ldr	r0, [pc, #40]	; (80019fc <sd_card_init+0xbc>)
 80019d4:	f7ff ff8e 	bl	80018f4 <myprintf>
//	} else {
//		myprintf("f_write error (%i)\r\n", fres);
//	}
//

    return STATUS_OK;
 80019d8:	2301      	movs	r3, #1
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	0800ae94 	.word	0x0800ae94
 80019e8:	0800aeb4 	.word	0x0800aeb4
 80019ec:	200016b8 	.word	0x200016b8
 80019f0:	20001b18 	.word	0x20001b18
 80019f4:	0800aeb8 	.word	0x0800aeb8
 80019f8:	0800aed0 	.word	0x0800aed0
 80019fc:	0800aee8 	.word	0x0800aee8

08001a00 <sd_card_scan_file>:

ret_status sd_card_scan_file(char *path, char* buffor_dirs, uint8_t* number_of_dirs) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b092      	sub	sp, #72	; 0x48
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]

    FRESULT res;
    DIR dir;
    UINT i;
    static FILINFO fno;
    res = f_opendir(&dir, path); /* Open the directory */
 8001a0c:	f107 0310 	add.w	r3, r7, #16
 8001a10:	68f9      	ldr	r1, [r7, #12]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f008 faac 	bl	8009f70 <f_opendir>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (res == FR_OK) {
 8001a1e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d15f      	bne.n	8001ae6 <sd_card_scan_file+0xe6>
        while (1) {
            res = f_readdir(&dir, &fno); /* Read a directory item */
 8001a26:	f107 0310 	add.w	r3, r7, #16
 8001a2a:	4934      	ldr	r1, [pc, #208]	; (8001afc <sd_card_scan_file+0xfc>)
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f008 fb38 	bl	800a0a2 <f_readdir>
 8001a32:	4603      	mov	r3, r0
 8001a34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            if (res != FR_OK || fno.fname[0] == 0)
 8001a38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d14b      	bne.n	8001ad8 <sd_card_scan_file+0xd8>
 8001a40:	4b2e      	ldr	r3, [pc, #184]	; (8001afc <sd_card_scan_file+0xfc>)
 8001a42:	7a5b      	ldrb	r3, [r3, #9]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d047      	beq.n	8001ad8 <sd_card_scan_file+0xd8>
                break; /* Break on error or end of dir */
            if (fno.fattrib & AM_DIR && !(fno.fattrib & AM_HID)
 8001a48:	4b2c      	ldr	r3, [pc, #176]	; (8001afc <sd_card_scan_file+0xfc>)
 8001a4a:	7a1b      	ldrb	r3, [r3, #8]
 8001a4c:	f003 0310 	and.w	r3, r3, #16
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d03a      	beq.n	8001aca <sd_card_scan_file+0xca>
 8001a54:	4b29      	ldr	r3, [pc, #164]	; (8001afc <sd_card_scan_file+0xfc>)
 8001a56:	7a1b      	ldrb	r3, [r3, #8]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d134      	bne.n	8001aca <sd_card_scan_file+0xca>
                    && !(fno.fattrib & AM_SYS)) { /* It is a directory */
 8001a60:	4b26      	ldr	r3, [pc, #152]	; (8001afc <sd_card_scan_file+0xfc>)
 8001a62:	7a1b      	ldrb	r3, [r3, #8]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d12e      	bne.n	8001aca <sd_card_scan_file+0xca>
                i = strlen(path);
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f7fe fbb7 	bl	80001e0 <strlen>
 8001a72:	6438      	str	r0, [r7, #64]	; 0x40
                sprintf(&path[i], "/%s", fno.fname);
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a78:	4413      	add	r3, r2
 8001a7a:	4a21      	ldr	r2, [pc, #132]	; (8001b00 <sd_card_scan_file+0x100>)
 8001a7c:	4921      	ldr	r1, [pc, #132]	; (8001b04 <sd_card_scan_file+0x104>)
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f008 fca2 	bl	800a3c8 <siprintf>
                sprintf((char*)(buffor_dirs + (*number_of_dirs)*16), "%s", path);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4413      	add	r3, r2
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	491d      	ldr	r1, [pc, #116]	; (8001b08 <sd_card_scan_file+0x108>)
 8001a94:	4618      	mov	r0, r3
 8001a96:	f008 fc97 	bl	800a3c8 <siprintf>
                (*number_of_dirs)++;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	701a      	strb	r2, [r3, #0]
                res = sd_card_scan_file(path, NULL, NULL); /* Enter the directory */
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f7ff ffa8 	bl	8001a00 <sd_card_scan_file>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if (res != FR_OK)
 8001ab6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10b      	bne.n	8001ad6 <sd_card_scan_file+0xd6>
                    break;
                path[i] = 0;
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ac2:	4413      	add	r3, r2
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	e004      	b.n	8001ad4 <sd_card_scan_file+0xd4>
            } else { /* It is a file. */
                myprintf("%s/%s\r\n", path, fno.fname);
 8001aca:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <sd_card_scan_file+0x100>)
 8001acc:	68f9      	ldr	r1, [r7, #12]
 8001ace:	480f      	ldr	r0, [pc, #60]	; (8001b0c <sd_card_scan_file+0x10c>)
 8001ad0:	f7ff ff10 	bl	80018f4 <myprintf>
            res = f_readdir(&dir, &fno); /* Read a directory item */
 8001ad4:	e7a7      	b.n	8001a26 <sd_card_scan_file+0x26>
                    break;
 8001ad6:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	4618      	mov	r0, r3
 8001ade:	f008 faba 	bl	800a056 <f_closedir>
    }
    else {
        myprintf("Error!!! Scanning dir error: %d\n", res);
        return STATUS_ERROR;
    }
    return STATUS_OK;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e006      	b.n	8001af4 <sd_card_scan_file+0xf4>
        myprintf("Error!!! Scanning dir error: %d\n", res);
 8001ae6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001aea:	4619      	mov	r1, r3
 8001aec:	4808      	ldr	r0, [pc, #32]	; (8001b10 <sd_card_scan_file+0x110>)
 8001aee:	f7ff ff01 	bl	80018f4 <myprintf>
        return STATUS_ERROR;
 8001af2:	2302      	movs	r3, #2
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3748      	adds	r7, #72	; 0x48
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20001c1c 	.word	0x20001c1c
 8001b00:	20001c25 	.word	0x20001c25
 8001b04:	0800af30 	.word	0x0800af30
 8001b08:	0800af34 	.word	0x0800af34
 8001b0c:	0800af38 	.word	0x0800af38
 8001b10:	0800af40 	.word	0x0800af40

08001b14 <sd_card_close>:

ret_status sd_card_close(void) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
    f_close(&fil);
 8001b18:	4806      	ldr	r0, [pc, #24]	; (8001b34 <sd_card_close+0x20>)
 8001b1a:	f007 fff6 	bl	8009b0a <f_close>
    f_mount(NULL, "", 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	4905      	ldr	r1, [pc, #20]	; (8001b38 <sd_card_close+0x24>)
 8001b22:	2000      	movs	r0, #0
 8001b24:	f007 fc30 	bl	8009388 <f_mount>
    myprintf("\r\nSD card is UNMOUNTED\r\n");
 8001b28:	4804      	ldr	r0, [pc, #16]	; (8001b3c <sd_card_close+0x28>)
 8001b2a:	f7ff fee3 	bl	80018f4 <myprintf>
    return STATUS_ERROR;
 8001b2e:	2302      	movs	r3, #2
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	200018e8 	.word	0x200018e8
 8001b38:	0800aeb4 	.word	0x0800aeb4
 8001b3c:	0800af64 	.word	0x0800af64

08001b40 <sd_card_read_data>:

ret_status sd_card_read_data(char *path, uint8_t *data, struct layers_struct *layers, uint8_t *number_of_images) {
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	f5ad 7d31 	sub.w	sp, sp, #708	; 0x2c4
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	f507 7430 	add.w	r4, r7, #704	; 0x2c0
 8001b4c:	f5a4 742d 	sub.w	r4, r4, #692	; 0x2b4
 8001b50:	6020      	str	r0, [r4, #0]
 8001b52:	f507 7030 	add.w	r0, r7, #704	; 0x2c0
 8001b56:	f5a0 702e 	sub.w	r0, r0, #696	; 0x2b8
 8001b5a:	6001      	str	r1, [r0, #0]
 8001b5c:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8001b60:	f5a1 712f 	sub.w	r1, r1, #700	; 0x2bc
 8001b64:	600a      	str	r2, [r1, #0]
 8001b66:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8001b6a:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 8001b6e:	6013      	str	r3, [r2, #0]


    FIL file;
    UINT br;
    char name[20] = { 0 };
 8001b70:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001b74:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]

    // #### READING CONGFIGURATION
    sprintf((char*)name, "%s//%s", (char*)path, "CONFIG~1.txt");
 8001b88:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001b8c:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 8001b90:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001b94:	4bbb      	ldr	r3, [pc, #748]	; (8001e84 <sd_card_read_data+0x344>)
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	49bb      	ldr	r1, [pc, #748]	; (8001e88 <sd_card_read_data+0x348>)
 8001b9a:	f008 fc15 	bl	800a3c8 <siprintf>
    myprintf("start reading file: %s\r\n", name);
 8001b9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	48b9      	ldr	r0, [pc, #740]	; (8001e8c <sd_card_read_data+0x34c>)
 8001ba6:	f7ff fea5 	bl	80018f4 <myprintf>
    fres = f_open(&file, name, FA_READ);
 8001baa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001bae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f007 fc2d 	bl	8009414 <f_open>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4bb4      	ldr	r3, [pc, #720]	; (8001e90 <sd_card_read_data+0x350>)
 8001bc0:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 8001bc2:	4bb3      	ldr	r3, [pc, #716]	; (8001e90 <sd_card_read_data+0x350>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d007      	beq.n	8001bda <sd_card_read_data+0x9a>
        myprintf("f_open error (%i)\r\n", fres);
 8001bca:	4bb1      	ldr	r3, [pc, #708]	; (8001e90 <sd_card_read_data+0x350>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	4619      	mov	r1, r3
 8001bd0:	48b0      	ldr	r0, [pc, #704]	; (8001e94 <sd_card_read_data+0x354>)
 8001bd2:	f7ff fe8f 	bl	80018f4 <myprintf>
        return STATUS_ERROR;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e2c2      	b.n	8002160 <sd_card_read_data+0x620>
    }

    UINT num = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc

    uint8_t isComment = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f887 32bb 	strb.w	r3, [r7, #699]	; 0x2bb
    char ch;
    TCHAR buffor[32] = {0};
 8001be6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001bea:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]
 8001c00:	615a      	str	r2, [r3, #20]
 8001c02:	619a      	str	r2, [r3, #24]
    while(!f_eof(&file)){
 8001c04:	e191      	b.n	8001f2a <sd_card_read_data+0x3ea>
        fres = f_read(&file, &ch, 1, &br);
 8001c06:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c0a:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8001c0e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001c12:	2201      	movs	r2, #1
 8001c14:	f007 fdbc 	bl	8009790 <f_read>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b9c      	ldr	r3, [pc, #624]	; (8001e90 <sd_card_read_data+0x350>)
 8001c1e:	701a      	strb	r2, [r3, #0]
        if (fres != FR_OK) {
 8001c20:	4b9b      	ldr	r3, [pc, #620]	; (8001e90 <sd_card_read_data+0x350>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d007      	beq.n	8001c38 <sd_card_read_data+0xf8>
            myprintf("f_read error (%i)\r\n", fres);
 8001c28:	4b99      	ldr	r3, [pc, #612]	; (8001e90 <sd_card_read_data+0x350>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	489a      	ldr	r0, [pc, #616]	; (8001e98 <sd_card_read_data+0x358>)
 8001c30:	f7ff fe60 	bl	80018f4 <myprintf>
            return STATUS_ERROR;
 8001c34:	2302      	movs	r3, #2
 8001c36:	e293      	b.n	8002160 <sd_card_read_data+0x620>
        }

        if('\n' == ch){
 8001c38:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001c3c:	f2a3 2369 	subw	r3, r3, #617	; 0x269
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b0a      	cmp	r3, #10
 8001c44:	d103      	bne.n	8001c4e <sd_card_read_data+0x10e>
            isComment = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f887 32bb 	strb.w	r3, [r7, #699]	; 0x2bb
            continue;
 8001c4c:	e16d      	b.n	8001f2a <sd_card_read_data+0x3ea>
        }
        if(isComment) continue;
 8001c4e:	f897 32bb 	ldrb.w	r3, [r7, #699]	; 0x2bb
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d000      	beq.n	8001c58 <sd_card_read_data+0x118>
 8001c56:	e168      	b.n	8001f2a <sd_card_read_data+0x3ea>
        if('#' == ch){
 8001c58:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001c5c:	f2a3 2369 	subw	r3, r3, #617	; 0x269
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b23      	cmp	r3, #35	; 0x23
 8001c64:	d103      	bne.n	8001c6e <sd_card_read_data+0x12e>
            isComment = 1;
 8001c66:	2301      	movs	r3, #1
 8001c68:	f887 32bb 	strb.w	r3, [r7, #699]	; 0x2bb
            continue;
 8001c6c:	e15d      	b.n	8001f2a <sd_card_read_data+0x3ea>
        }

        // Check number of images in animation
        if('N' == ch){
 8001c6e:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001c72:	f2a3 2369 	subw	r3, r3, #617	; 0x269
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b4e      	cmp	r3, #78	; 0x4e
 8001c7a:	f040 809d 	bne.w	8001db8 <sd_card_read_data+0x278>
            uint8_t length_of_line = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f887 32ba 	strb.w	r3, [r7, #698]	; 0x2ba
            uint8_t position_of_char = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
            char c = 0;
 8001c8a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001c8e:	f2a3 238d 	subw	r3, r3, #653	; 0x28d
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]
            while(';' != c){
 8001c96:	e028      	b.n	8001cea <sd_card_read_data+0x1aa>
                length_of_line++;
 8001c98:	f897 32ba 	ldrb.w	r3, [r7, #698]	; 0x2ba
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	f887 32ba 	strb.w	r3, [r7, #698]	; 0x2ba

                if('=' == c) position_of_char = length_of_line;
 8001ca2:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001ca6:	f2a3 238d 	subw	r3, r3, #653	; 0x28d
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b3d      	cmp	r3, #61	; 0x3d
 8001cae:	d103      	bne.n	8001cb8 <sd_card_read_data+0x178>
 8001cb0:	f897 32ba 	ldrb.w	r3, [r7, #698]	; 0x2ba
 8001cb4:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9

                fres = f_read(&file, &c, 1, &br);
 8001cb8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cbc:	f107 0133 	add.w	r1, r7, #51	; 0x33
 8001cc0:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f007 fd63 	bl	8009790 <f_read>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b70      	ldr	r3, [pc, #448]	; (8001e90 <sd_card_read_data+0x350>)
 8001cd0:	701a      	strb	r2, [r3, #0]
                if (fres != FR_OK) {
 8001cd2:	4b6f      	ldr	r3, [pc, #444]	; (8001e90 <sd_card_read_data+0x350>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d007      	beq.n	8001cea <sd_card_read_data+0x1aa>
                    myprintf("f_read error (%i)\r\n", fres);
 8001cda:	4b6d      	ldr	r3, [pc, #436]	; (8001e90 <sd_card_read_data+0x350>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	4619      	mov	r1, r3
 8001ce0:	486d      	ldr	r0, [pc, #436]	; (8001e98 <sd_card_read_data+0x358>)
 8001ce2:	f7ff fe07 	bl	80018f4 <myprintf>
                    return STATUS_ERROR;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e23a      	b.n	8002160 <sd_card_read_data+0x620>
            while(';' != c){
 8001cea:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001cee:	f2a3 238d 	subw	r3, r3, #653	; 0x28d
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b3b      	cmp	r3, #59	; 0x3b
 8001cf6:	d1cf      	bne.n	8001c98 <sd_card_read_data+0x158>
                }
            }
            f_lseek(&file, f_tell(&file)-length_of_line);
 8001cf8:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001cfc:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001d00:	699a      	ldr	r2, [r3, #24]
 8001d02:	f897 32ba 	ldrb.w	r3, [r7, #698]	; 0x2ba
 8001d06:	1ad2      	subs	r2, r2, r3
 8001d08:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f007 ff25 	bl	8009b5e <f_lseek>
            fres = f_read(&file, &buffor, length_of_line, &br);
 8001d14:	f897 22ba 	ldrb.w	r2, [r7, #698]	; 0x2ba
 8001d18:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d1c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001d20:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001d24:	f007 fd34 	bl	8009790 <f_read>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4b58      	ldr	r3, [pc, #352]	; (8001e90 <sd_card_read_data+0x350>)
 8001d2e:	701a      	strb	r2, [r3, #0]
            if (fres != FR_OK) {
 8001d30:	4b57      	ldr	r3, [pc, #348]	; (8001e90 <sd_card_read_data+0x350>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d007      	beq.n	8001d48 <sd_card_read_data+0x208>
                myprintf("f_read error (%i)\r\n", fres);
 8001d38:	4b55      	ldr	r3, [pc, #340]	; (8001e90 <sd_card_read_data+0x350>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4856      	ldr	r0, [pc, #344]	; (8001e98 <sd_card_read_data+0x358>)
 8001d40:	f7ff fdd8 	bl	80018f4 <myprintf>
                return STATUS_ERROR;
 8001d44:	2302      	movs	r3, #2
 8001d46:	e20b      	b.n	8002160 <sd_card_read_data+0x620>
            }
            char buffor_number_of_image[3] = {0};
 8001d48:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001d4c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001d50:	4a52      	ldr	r2, [pc, #328]	; (8001e9c <sd_card_read_data+0x35c>)
 8001d52:	8812      	ldrh	r2, [r2, #0]
 8001d54:	801a      	strh	r2, [r3, #0]
 8001d56:	2200      	movs	r2, #0
 8001d58:	709a      	strb	r2, [r3, #2]
            buffor_number_of_image[2] = '\0';
 8001d5a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001d5e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001d62:	2200      	movs	r2, #0
 8001d64:	709a      	strb	r2, [r3, #2]
            if('=' != buffor[15]){
 8001d66:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001d6a:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8001d6e:	7bdb      	ldrb	r3, [r3, #15]
 8001d70:	2b3d      	cmp	r3, #61	; 0x3d
 8001d72:	d004      	beq.n	8001d7e <sd_card_read_data+0x23e>
                myprintf("Wrong format of NUMBER_OF_IMAGES in configuration.txt");
 8001d74:	484a      	ldr	r0, [pc, #296]	; (8001ea0 <sd_card_read_data+0x360>)
 8001d76:	f7ff fdbd 	bl	80018f4 <myprintf>
                return STATUS_ERROR;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	e1f0      	b.n	8002160 <sd_card_read_data+0x620>
            }
            strncpy(buffor_number_of_image, &buffor[16], length_of_line-position_of_char);
 8001d7e:	f897 22ba 	ldrb.w	r2, [r7, #698]	; 0x2ba
 8001d82:	f897 32b9 	ldrb.w	r3, [r7, #697]	; 0x2b9
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	461a      	mov	r2, r3
 8001d8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d8e:	f103 0110 	add.w	r1, r3, #16
 8001d92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d96:	4618      	mov	r0, r3
 8001d98:	f008 fb36 	bl	800a408 <strncpy>
            *number_of_images = (uint8_t)atoi(buffor_number_of_image);
 8001d9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001da0:	4618      	mov	r0, r3
 8001da2:	f008 facc 	bl	800a33e <atoi>
 8001da6:	4603      	mov	r3, r0
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001dae:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	701a      	strb	r2, [r3, #0]
 8001db6:	e0b8      	b.n	8001f2a <sd_card_read_data+0x3ea>
            continue;
        }


        // Check what image should show on the property layer
        if('L' == ch){
 8001db8:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001dbc:	f2a3 2369 	subw	r3, r3, #617	; 0x269
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b4c      	cmp	r3, #76	; 0x4c
 8001dc4:	f040 80b1 	bne.w	8001f2a <sd_card_read_data+0x3ea>
            uint8_t length = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f887 32b8 	strb.w	r3, [r7, #696]	; 0x2b8
            char c = 0;
 8001dce:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001dd2:	f2a3 2391 	subw	r3, r3, #657	; 0x291
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
            while(';' != c){
 8001dda:	e01d      	b.n	8001e18 <sd_card_read_data+0x2d8>
                length++;
 8001ddc:	f897 32b8 	ldrb.w	r3, [r7, #696]	; 0x2b8
 8001de0:	3301      	adds	r3, #1
 8001de2:	f887 32b8 	strb.w	r3, [r7, #696]	; 0x2b8
                fres = f_read(&file, &c, 1, &br);
 8001de6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001dea:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 8001dee:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001df2:	2201      	movs	r2, #1
 8001df4:	f007 fccc 	bl	8009790 <f_read>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <sd_card_read_data+0x350>)
 8001dfe:	701a      	strb	r2, [r3, #0]
                if (fres != FR_OK) {
 8001e00:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <sd_card_read_data+0x350>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d007      	beq.n	8001e18 <sd_card_read_data+0x2d8>
                    myprintf("f_read error (%i)\r\n", fres);
 8001e08:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <sd_card_read_data+0x350>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4822      	ldr	r0, [pc, #136]	; (8001e98 <sd_card_read_data+0x358>)
 8001e10:	f7ff fd70 	bl	80018f4 <myprintf>
                    return STATUS_ERROR;
 8001e14:	2302      	movs	r3, #2
 8001e16:	e1a3      	b.n	8002160 <sd_card_read_data+0x620>
            while(';' != c){
 8001e18:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001e1c:	f2a3 2391 	subw	r3, r3, #657	; 0x291
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b3b      	cmp	r3, #59	; 0x3b
 8001e24:	d1da      	bne.n	8001ddc <sd_card_read_data+0x29c>
                }
            }
            f_lseek(&file, f_tell(&file)-length);
 8001e26:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001e2a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001e2e:	699a      	ldr	r2, [r3, #24]
 8001e30:	f897 32b8 	ldrb.w	r3, [r7, #696]	; 0x2b8
 8001e34:	1ad2      	subs	r2, r2, r3
 8001e36:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f007 fe8e 	bl	8009b5e <f_lseek>
            fres = f_read(&file, &buffor, length, &br);
 8001e42:	f897 22b8 	ldrb.w	r2, [r7, #696]	; 0x2b8
 8001e46:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e4a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001e4e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001e52:	f007 fc9d 	bl	8009790 <f_read>
 8001e56:	4603      	mov	r3, r0
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <sd_card_read_data+0x350>)
 8001e5c:	701a      	strb	r2, [r3, #0]
            if (fres != FR_OK) {
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <sd_card_read_data+0x350>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d007      	beq.n	8001e76 <sd_card_read_data+0x336>
                myprintf("f_read error (%i)\r\n", fres);
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <sd_card_read_data+0x350>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	480a      	ldr	r0, [pc, #40]	; (8001e98 <sd_card_read_data+0x358>)
 8001e6e:	f7ff fd41 	bl	80018f4 <myprintf>
                return STATUS_ERROR;
 8001e72:	2302      	movs	r3, #2
 8001e74:	e174      	b.n	8002160 <sd_card_read_data+0x620>
            }
            int i = 7;
 8001e76:	2307      	movs	r3, #7
 8001e78:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
            int count = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
            while(length > i){
 8001e82:	e036      	b.n	8001ef2 <sd_card_read_data+0x3b2>
 8001e84:	0800af80 	.word	0x0800af80
 8001e88:	0800af90 	.word	0x0800af90
 8001e8c:	0800af98 	.word	0x0800af98
 8001e90:	20001b18 	.word	0x20001b18
 8001e94:	0800afb4 	.word	0x0800afb4
 8001e98:	0800afc8 	.word	0x0800afc8
 8001e9c:	0800b04c 	.word	0x0800b04c
 8001ea0:	0800afdc 	.word	0x0800afdc
                layers[num].values[count] = atoi(&buffor[i]);
 8001ea4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001ea8:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8001eac:	4413      	add	r3, r2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f008 fa45 	bl	800a33e <atoi>
 8001eb4:	4601      	mov	r1, r0
 8001eb6:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8001eba:	4613      	mov	r3, r2
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	4413      	add	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001ec8:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	441a      	add	r2, r3
 8001ed0:	b2c9      	uxtb	r1, r1
 8001ed2:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3302      	adds	r3, #2
 8001eda:	460a      	mov	r2, r1
 8001edc:	701a      	strb	r2, [r3, #0]
                i+=2;
 8001ede:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
                count++;
 8001ee8:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8001eec:	3301      	adds	r3, #1
 8001eee:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
            while(length > i){
 8001ef2:	f897 32b8 	ldrb.w	r3, [r7, #696]	; 0x2b8
 8001ef6:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 8001efa:	429a      	cmp	r2, r3
 8001efc:	dbd2      	blt.n	8001ea4 <sd_card_read_data+0x364>
            }
            layers[num].count = count;
 8001efe:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8001f02:	4613      	mov	r3, r2
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	4413      	add	r3, r2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001f10:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4413      	add	r3, r2
 8001f18:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	705a      	strb	r2, [r3, #1]
            num++;
 8001f20:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8001f24:	3301      	adds	r3, #1
 8001f26:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
    while(!f_eof(&file)){
 8001f2a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001f2e:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001f32:	699a      	ldr	r2, [r3, #24]
 8001f34:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001f38:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	f47f ae61 	bne.w	8001c06 <sd_card_read_data+0xc6>
        }

    }
    f_close(&file);
 8001f44:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f007 fdde 	bl	8009b0a <f_close>

    // #### READING FILES
//    myprintf("Reading files with animation\r\n");
    for (uint8_t image = 0; image < 10; image++) {
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f887 32af 	strb.w	r3, [r7, #687]	; 0x2af
 8001f54:	e0fe      	b.n	8002154 <sd_card_read_data+0x614>
        char name[20] = { 0 };
 8001f56:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001f5a:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	3304      	adds	r3, #4
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
        sprintf((char*)name, "%s//%d.txt", (char*)path, image);
 8001f6e:	f897 32af 	ldrb.w	r3, [r7, #687]	; 0x2af
 8001f72:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8001f76:	f5a2 722d 	sub.w	r2, r2, #692	; 0x2b4
 8001f7a:	f107 0018 	add.w	r0, r7, #24
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	497a      	ldr	r1, [pc, #488]	; (800216c <sd_card_read_data+0x62c>)
 8001f82:	f008 fa21 	bl	800a3c8 <siprintf>

		fres = f_open(&file, name, FA_READ);
 8001f86:	f107 0118 	add.w	r1, r7, #24
 8001f8a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4618      	mov	r0, r3
 8001f92:	f007 fa3f 	bl	8009414 <f_open>
 8001f96:	4603      	mov	r3, r0
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b75      	ldr	r3, [pc, #468]	; (8002170 <sd_card_read_data+0x630>)
 8001f9c:	701a      	strb	r2, [r3, #0]
		if (fres != FR_OK) {
 8001f9e:	4b74      	ldr	r3, [pc, #464]	; (8002170 <sd_card_read_data+0x630>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d007      	beq.n	8001fb6 <sd_card_read_data+0x476>
			myprintf("f_open error (%i)\r\n", fres);
 8001fa6:	4b72      	ldr	r3, [pc, #456]	; (8002170 <sd_card_read_data+0x630>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	4619      	mov	r1, r3
 8001fac:	4871      	ldr	r0, [pc, #452]	; (8002174 <sd_card_read_data+0x634>)
 8001fae:	f7ff fca1 	bl	80018f4 <myprintf>
			return STATUS_ERROR;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e0d4      	b.n	8002160 <sd_card_read_data+0x620>
		}

        UINT num = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
        int i = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
        int j = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
        while(i < 256){
 8001fc8:	e0af      	b.n	800212a <sd_card_read_data+0x5ea>
            num = 1;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
            TCHAR c[2] = {0};
 8001fd0:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001fd4:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8001fd8:	2200      	movs	r2, #0
 8001fda:	801a      	strh	r2, [r3, #0]
            TCHAR string[4] = {0};
 8001fdc:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001fe0:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]

            fres = f_read(&file, c, 1, &br);
 8001fe8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fec:	f107 0114 	add.w	r1, r7, #20
 8001ff0:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f007 fbcb 	bl	8009790 <f_read>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b5c      	ldr	r3, [pc, #368]	; (8002170 <sd_card_read_data+0x630>)
 8002000:	701a      	strb	r2, [r3, #0]
            if (fres != FR_OK) {
 8002002:	4b5b      	ldr	r3, [pc, #364]	; (8002170 <sd_card_read_data+0x630>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d025      	beq.n	8002056 <sd_card_read_data+0x516>
                myprintf("f_read error (%i)\r\n", fres);
 800200a:	4b59      	ldr	r3, [pc, #356]	; (8002170 <sd_card_read_data+0x630>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	4619      	mov	r1, r3
 8002010:	4859      	ldr	r0, [pc, #356]	; (8002178 <sd_card_read_data+0x638>)
 8002012:	f7ff fc6f 	bl	80018f4 <myprintf>
                return STATUS_ERROR;
 8002016:	2302      	movs	r3, #2
 8002018:	e0a2      	b.n	8002160 <sd_card_read_data+0x620>
            }
            while(',' != c[0]){
                num++;
 800201a:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 800201e:	3301      	adds	r3, #1
 8002020:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
                fres = f_read(&file, c, 1, &br);
 8002024:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002028:	f107 0114 	add.w	r1, r7, #20
 800202c:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8002030:	2201      	movs	r2, #1
 8002032:	f007 fbad 	bl	8009790 <f_read>
 8002036:	4603      	mov	r3, r0
 8002038:	461a      	mov	r2, r3
 800203a:	4b4d      	ldr	r3, [pc, #308]	; (8002170 <sd_card_read_data+0x630>)
 800203c:	701a      	strb	r2, [r3, #0]
                if (fres != FR_OK) {
 800203e:	4b4c      	ldr	r3, [pc, #304]	; (8002170 <sd_card_read_data+0x630>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d007      	beq.n	8002056 <sd_card_read_data+0x516>
                    myprintf("f_read error (%i)\r\n", fres);
 8002046:	4b4a      	ldr	r3, [pc, #296]	; (8002170 <sd_card_read_data+0x630>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	4619      	mov	r1, r3
 800204c:	484a      	ldr	r0, [pc, #296]	; (8002178 <sd_card_read_data+0x638>)
 800204e:	f7ff fc51 	bl	80018f4 <myprintf>
                    return STATUS_ERROR;
 8002052:	2302      	movs	r3, #2
 8002054:	e068      	b.n	8002128 <sd_card_read_data+0x5e8>
            while(',' != c[0]){
 8002056:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800205a:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b2c      	cmp	r3, #44	; 0x2c
 8002062:	d1da      	bne.n	800201a <sd_card_read_data+0x4da>
                }
            }
            f_lseek(&file, f_tell(&file)-num);
 8002064:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8002068:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800206c:	699a      	ldr	r2, [r3, #24]
 800206e:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8002072:	1ad2      	subs	r2, r2, r3
 8002074:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002078:	4611      	mov	r1, r2
 800207a:	4618      	mov	r0, r3
 800207c:	f007 fd6f 	bl	8009b5e <f_lseek>
            fres = f_read(&file, string, num-1, &br);
 8002080:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8002084:	1e5a      	subs	r2, r3, #1
 8002086:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800208a:	f107 0110 	add.w	r1, r7, #16
 800208e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8002092:	f007 fb7d 	bl	8009790 <f_read>
 8002096:	4603      	mov	r3, r0
 8002098:	461a      	mov	r2, r3
 800209a:	4b35      	ldr	r3, [pc, #212]	; (8002170 <sd_card_read_data+0x630>)
 800209c:	701a      	strb	r2, [r3, #0]
            if (fres != FR_OK) {
 800209e:	4b34      	ldr	r3, [pc, #208]	; (8002170 <sd_card_read_data+0x630>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d007      	beq.n	80020b6 <sd_card_read_data+0x576>
                myprintf("f_read error (%i)\r\n", fres);
 80020a6:	4b32      	ldr	r3, [pc, #200]	; (8002170 <sd_card_read_data+0x630>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	4619      	mov	r1, r3
 80020ac:	4832      	ldr	r0, [pc, #200]	; (8002178 <sd_card_read_data+0x638>)
 80020ae:	f7ff fc21 	bl	80018f4 <myprintf>
                return STATUS_ERROR;
 80020b2:	2302      	movs	r3, #2
 80020b4:	e038      	b.n	8002128 <sd_card_read_data+0x5e8>
            }
            f_lseek(&file, f_tell(&file)+1);
 80020b6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80020ba:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f007 fd48 	bl	8009b5e <f_lseek>
            *(data + image*256*3 + i*3 + j++) = atoi(string);
 80020ce:	f107 0310 	add.w	r3, r7, #16
 80020d2:	4618      	mov	r0, r3
 80020d4:	f008 f933 	bl	800a33e <atoi>
 80020d8:	f897 22af 	ldrb.w	r2, [r7, #687]	; 0x2af
 80020dc:	4613      	mov	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	4413      	add	r3, r2
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	4619      	mov	r1, r3
 80020e6:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 80020ea:	4613      	mov	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4413      	add	r3, r2
 80020f0:	18ca      	adds	r2, r1, r3
 80020f2:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 80020f6:	1c59      	adds	r1, r3, #1
 80020f8:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 80020fc:	4413      	add	r3, r2
 80020fe:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8002102:	f5a2 722e 	sub.w	r2, r2, #696	; 0x2b8
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	4413      	add	r3, r2
 800210a:	b2c2      	uxtb	r2, r0
 800210c:	701a      	strb	r2, [r3, #0]
            if(j>2){
 800210e:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8002112:	2b02      	cmp	r3, #2
 8002114:	dd09      	ble.n	800212a <sd_card_read_data+0x5ea>
                j = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
                i++;
 800211c:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8002120:	3301      	adds	r3, #1
 8002122:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8002126:	e000      	b.n	800212a <sd_card_read_data+0x5ea>
			return STATUS_ERROR;
 8002128:	e01a      	b.n	8002160 <sd_card_read_data+0x620>
        while(i < 256){
 800212a:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 800212e:	2bff      	cmp	r3, #255	; 0xff
 8002130:	f77f af4b 	ble.w	8001fca <sd_card_read_data+0x48a>
            }
        }
        f_close(&file);
 8002134:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002138:	4618      	mov	r0, r3
 800213a:	f007 fce6 	bl	8009b0a <f_close>
        myprintf("Reading file %s is completed successfully\n", name);
 800213e:	f107 0318 	add.w	r3, r7, #24
 8002142:	4619      	mov	r1, r3
 8002144:	480d      	ldr	r0, [pc, #52]	; (800217c <sd_card_read_data+0x63c>)
 8002146:	f7ff fbd5 	bl	80018f4 <myprintf>
    for (uint8_t image = 0; image < 10; image++) {
 800214a:	f897 32af 	ldrb.w	r3, [r7, #687]	; 0x2af
 800214e:	3301      	adds	r3, #1
 8002150:	f887 32af 	strb.w	r3, [r7, #687]	; 0x2af
 8002154:	f897 32af 	ldrb.w	r3, [r7, #687]	; 0x2af
 8002158:	2b09      	cmp	r3, #9
 800215a:	f67f aefc 	bls.w	8001f56 <sd_card_read_data+0x416>
    }
    return STATUS_OK;
 800215e:	2301      	movs	r3, #1
}
 8002160:	4618      	mov	r0, r3
 8002162:	f507 7731 	add.w	r7, r7, #708	; 0x2c4
 8002166:	46bd      	mov	sp, r7
 8002168:	bd90      	pop	{r4, r7, pc}
 800216a:	bf00      	nop
 800216c:	0800b014 	.word	0x0800b014
 8002170:	20001b18 	.word	0x20001b18
 8002174:	0800afb4 	.word	0x0800afb4
 8002178:	0800afc8 	.word	0x0800afc8
 800217c:	0800b020 	.word	0x0800b020

08002180 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	4b10      	ldr	r3, [pc, #64]	; (80021cc <HAL_MspInit+0x4c>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	4a0f      	ldr	r2, [pc, #60]	; (80021cc <HAL_MspInit+0x4c>)
 8002190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002194:	6453      	str	r3, [r2, #68]	; 0x44
 8002196:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <HAL_MspInit+0x4c>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	4b09      	ldr	r3, [pc, #36]	; (80021cc <HAL_MspInit+0x4c>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	4a08      	ldr	r2, [pc, #32]	; (80021cc <HAL_MspInit+0x4c>)
 80021ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b0:	6413      	str	r3, [r2, #64]	; 0x40
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <HAL_MspInit+0x4c>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40023800 	.word	0x40023800

080021d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08c      	sub	sp, #48	; 0x30
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	f107 031c 	add.w	r3, r7, #28
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a32      	ldr	r2, [pc, #200]	; (80022b8 <HAL_SPI_MspInit+0xe8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d12c      	bne.n	800224c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	4b31      	ldr	r3, [pc, #196]	; (80022bc <HAL_SPI_MspInit+0xec>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	4a30      	ldr	r2, [pc, #192]	; (80022bc <HAL_SPI_MspInit+0xec>)
 80021fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002200:	6453      	str	r3, [r2, #68]	; 0x44
 8002202:	4b2e      	ldr	r3, [pc, #184]	; (80022bc <HAL_SPI_MspInit+0xec>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	4b2a      	ldr	r3, [pc, #168]	; (80022bc <HAL_SPI_MspInit+0xec>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a29      	ldr	r2, [pc, #164]	; (80022bc <HAL_SPI_MspInit+0xec>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b27      	ldr	r3, [pc, #156]	; (80022bc <HAL_SPI_MspInit+0xec>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800222a:	23e0      	movs	r3, #224	; 0xe0
 800222c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002236:	2303      	movs	r3, #3
 8002238:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800223a:	2305      	movs	r3, #5
 800223c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223e:	f107 031c 	add.w	r3, r7, #28
 8002242:	4619      	mov	r1, r3
 8002244:	481e      	ldr	r0, [pc, #120]	; (80022c0 <HAL_SPI_MspInit+0xf0>)
 8002246:	f001 fe03 	bl	8003e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800224a:	e030      	b.n	80022ae <HAL_SPI_MspInit+0xde>
  else if(hspi->Instance==SPI3)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1c      	ldr	r2, [pc, #112]	; (80022c4 <HAL_SPI_MspInit+0xf4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d12b      	bne.n	80022ae <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	4b18      	ldr	r3, [pc, #96]	; (80022bc <HAL_SPI_MspInit+0xec>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	4a17      	ldr	r2, [pc, #92]	; (80022bc <HAL_SPI_MspInit+0xec>)
 8002260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <HAL_SPI_MspInit+0xec>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	4b11      	ldr	r3, [pc, #68]	; (80022bc <HAL_SPI_MspInit+0xec>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a10      	ldr	r2, [pc, #64]	; (80022bc <HAL_SPI_MspInit+0xec>)
 800227c:	f043 0302 	orr.w	r3, r3, #2
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <HAL_SPI_MspInit+0xec>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_CLK_Pin|LCD_DIN_Pin;
 800228e:	2328      	movs	r3, #40	; 0x28
 8002290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002292:	2302      	movs	r3, #2
 8002294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229a:	2303      	movs	r3, #3
 800229c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800229e:	2306      	movs	r3, #6
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a2:	f107 031c 	add.w	r3, r7, #28
 80022a6:	4619      	mov	r1, r3
 80022a8:	4807      	ldr	r0, [pc, #28]	; (80022c8 <HAL_SPI_MspInit+0xf8>)
 80022aa:	f001 fdd1 	bl	8003e50 <HAL_GPIO_Init>
}
 80022ae:	bf00      	nop
 80022b0:	3730      	adds	r7, #48	; 0x30
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40013000 	.word	0x40013000
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40020000 	.word	0x40020000
 80022c4:	40003c00 	.word	0x40003c00
 80022c8:	40020400 	.word	0x40020400

080022cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a8b      	ldr	r2, [pc, #556]	; (8002508 <HAL_TIM_Base_MspInit+0x23c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d13f      	bne.n	800235e <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	4b8a      	ldr	r3, [pc, #552]	; (800250c <HAL_TIM_Base_MspInit+0x240>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	4a89      	ldr	r2, [pc, #548]	; (800250c <HAL_TIM_Base_MspInit+0x240>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6453      	str	r3, [r2, #68]	; 0x44
 80022ee:	4b87      	ldr	r3, [pc, #540]	; (800250c <HAL_TIM_Base_MspInit+0x240>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	61fb      	str	r3, [r7, #28]
 80022f8:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80022fa:	4b85      	ldr	r3, [pc, #532]	; (8002510 <HAL_TIM_Base_MspInit+0x244>)
 80022fc:	4a85      	ldr	r2, [pc, #532]	; (8002514 <HAL_TIM_Base_MspInit+0x248>)
 80022fe:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8002300:	4b83      	ldr	r3, [pc, #524]	; (8002510 <HAL_TIM_Base_MspInit+0x244>)
 8002302:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002306:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002308:	4b81      	ldr	r3, [pc, #516]	; (8002510 <HAL_TIM_Base_MspInit+0x244>)
 800230a:	2240      	movs	r2, #64	; 0x40
 800230c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800230e:	4b80      	ldr	r3, [pc, #512]	; (8002510 <HAL_TIM_Base_MspInit+0x244>)
 8002310:	2200      	movs	r2, #0
 8002312:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002314:	4b7e      	ldr	r3, [pc, #504]	; (8002510 <HAL_TIM_Base_MspInit+0x244>)
 8002316:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800231a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800231c:	4b7c      	ldr	r3, [pc, #496]	; (8002510 <HAL_TIM_Base_MspInit+0x244>)
 800231e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002322:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002324:	4b7a      	ldr	r3, [pc, #488]	; (8002510 <HAL_TIM_Base_MspInit+0x244>)
 8002326:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800232a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 800232c:	4b78      	ldr	r3, [pc, #480]	; (8002510 <HAL_TIM_Base_MspInit+0x244>)
 800232e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002332:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002334:	4b76      	ldr	r3, [pc, #472]	; (8002510 <HAL_TIM_Base_MspInit+0x244>)
 8002336:	2200      	movs	r2, #0
 8002338:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800233a:	4b75      	ldr	r3, [pc, #468]	; (8002510 <HAL_TIM_Base_MspInit+0x244>)
 800233c:	2200      	movs	r2, #0
 800233e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002340:	4873      	ldr	r0, [pc, #460]	; (8002510 <HAL_TIM_Base_MspInit+0x244>)
 8002342:	f001 f9f3 	bl	800372c <HAL_DMA_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 800234c:	f7ff facc 	bl	80018e8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a6f      	ldr	r2, [pc, #444]	; (8002510 <HAL_TIM_Base_MspInit+0x244>)
 8002354:	625a      	str	r2, [r3, #36]	; 0x24
 8002356:	4a6e      	ldr	r2, [pc, #440]	; (8002510 <HAL_TIM_Base_MspInit+0x244>)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800235c:	e130      	b.n	80025c0 <HAL_TIM_Base_MspInit+0x2f4>
  else if(htim_base->Instance==TIM2)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002366:	d13f      	bne.n	80023e8 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002368:	2300      	movs	r3, #0
 800236a:	61bb      	str	r3, [r7, #24]
 800236c:	4b67      	ldr	r3, [pc, #412]	; (800250c <HAL_TIM_Base_MspInit+0x240>)
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	4a66      	ldr	r2, [pc, #408]	; (800250c <HAL_TIM_Base_MspInit+0x240>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	6413      	str	r3, [r2, #64]	; 0x40
 8002378:	4b64      	ldr	r3, [pc, #400]	; (800250c <HAL_TIM_Base_MspInit+0x240>)
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	61bb      	str	r3, [r7, #24]
 8002382:	69bb      	ldr	r3, [r7, #24]
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002384:	4b64      	ldr	r3, [pc, #400]	; (8002518 <HAL_TIM_Base_MspInit+0x24c>)
 8002386:	4a65      	ldr	r2, [pc, #404]	; (800251c <HAL_TIM_Base_MspInit+0x250>)
 8002388:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 800238a:	4b63      	ldr	r3, [pc, #396]	; (8002518 <HAL_TIM_Base_MspInit+0x24c>)
 800238c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002390:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002392:	4b61      	ldr	r3, [pc, #388]	; (8002518 <HAL_TIM_Base_MspInit+0x24c>)
 8002394:	2240      	movs	r2, #64	; 0x40
 8002396:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002398:	4b5f      	ldr	r3, [pc, #380]	; (8002518 <HAL_TIM_Base_MspInit+0x24c>)
 800239a:	2200      	movs	r2, #0
 800239c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800239e:	4b5e      	ldr	r3, [pc, #376]	; (8002518 <HAL_TIM_Base_MspInit+0x24c>)
 80023a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023a4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023a6:	4b5c      	ldr	r3, [pc, #368]	; (8002518 <HAL_TIM_Base_MspInit+0x24c>)
 80023a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023ac:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023ae:	4b5a      	ldr	r3, [pc, #360]	; (8002518 <HAL_TIM_Base_MspInit+0x24c>)
 80023b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023b4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80023b6:	4b58      	ldr	r3, [pc, #352]	; (8002518 <HAL_TIM_Base_MspInit+0x24c>)
 80023b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023bc:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80023be:	4b56      	ldr	r3, [pc, #344]	; (8002518 <HAL_TIM_Base_MspInit+0x24c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023c4:	4b54      	ldr	r3, [pc, #336]	; (8002518 <HAL_TIM_Base_MspInit+0x24c>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80023ca:	4853      	ldr	r0, [pc, #332]	; (8002518 <HAL_TIM_Base_MspInit+0x24c>)
 80023cc:	f001 f9ae 	bl	800372c <HAL_DMA_Init>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_TIM_Base_MspInit+0x10e>
      Error_Handler();
 80023d6:	f7ff fa87 	bl	80018e8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a4e      	ldr	r2, [pc, #312]	; (8002518 <HAL_TIM_Base_MspInit+0x24c>)
 80023de:	625a      	str	r2, [r3, #36]	; 0x24
 80023e0:	4a4d      	ldr	r2, [pc, #308]	; (8002518 <HAL_TIM_Base_MspInit+0x24c>)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80023e6:	e0eb      	b.n	80025c0 <HAL_TIM_Base_MspInit+0x2f4>
  else if(htim_base->Instance==TIM3)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a4c      	ldr	r2, [pc, #304]	; (8002520 <HAL_TIM_Base_MspInit+0x254>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d145      	bne.n	800247e <HAL_TIM_Base_MspInit+0x1b2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	4b45      	ldr	r3, [pc, #276]	; (800250c <HAL_TIM_Base_MspInit+0x240>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	4a44      	ldr	r2, [pc, #272]	; (800250c <HAL_TIM_Base_MspInit+0x240>)
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	6413      	str	r3, [r2, #64]	; 0x40
 8002402:	4b42      	ldr	r3, [pc, #264]	; (800250c <HAL_TIM_Base_MspInit+0x240>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	697b      	ldr	r3, [r7, #20]
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 800240e:	4b45      	ldr	r3, [pc, #276]	; (8002524 <HAL_TIM_Base_MspInit+0x258>)
 8002410:	4a45      	ldr	r2, [pc, #276]	; (8002528 <HAL_TIM_Base_MspInit+0x25c>)
 8002412:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8002414:	4b43      	ldr	r3, [pc, #268]	; (8002524 <HAL_TIM_Base_MspInit+0x258>)
 8002416:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800241a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800241c:	4b41      	ldr	r3, [pc, #260]	; (8002524 <HAL_TIM_Base_MspInit+0x258>)
 800241e:	2240      	movs	r2, #64	; 0x40
 8002420:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002422:	4b40      	ldr	r3, [pc, #256]	; (8002524 <HAL_TIM_Base_MspInit+0x258>)
 8002424:	2200      	movs	r2, #0
 8002426:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002428:	4b3e      	ldr	r3, [pc, #248]	; (8002524 <HAL_TIM_Base_MspInit+0x258>)
 800242a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800242e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002430:	4b3c      	ldr	r3, [pc, #240]	; (8002524 <HAL_TIM_Base_MspInit+0x258>)
 8002432:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002436:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002438:	4b3a      	ldr	r3, [pc, #232]	; (8002524 <HAL_TIM_Base_MspInit+0x258>)
 800243a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800243e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8002440:	4b38      	ldr	r3, [pc, #224]	; (8002524 <HAL_TIM_Base_MspInit+0x258>)
 8002442:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002446:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8002448:	4b36      	ldr	r3, [pc, #216]	; (8002524 <HAL_TIM_Base_MspInit+0x258>)
 800244a:	2200      	movs	r2, #0
 800244c:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800244e:	4b35      	ldr	r3, [pc, #212]	; (8002524 <HAL_TIM_Base_MspInit+0x258>)
 8002450:	2200      	movs	r2, #0
 8002452:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8002454:	4833      	ldr	r0, [pc, #204]	; (8002524 <HAL_TIM_Base_MspInit+0x258>)
 8002456:	f001 f969 	bl	800372c <HAL_DMA_Init>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_TIM_Base_MspInit+0x198>
      Error_Handler();
 8002460:	f7ff fa42 	bl	80018e8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a2f      	ldr	r2, [pc, #188]	; (8002524 <HAL_TIM_Base_MspInit+0x258>)
 8002468:	625a      	str	r2, [r3, #36]	; 0x24
 800246a:	4a2e      	ldr	r2, [pc, #184]	; (8002524 <HAL_TIM_Base_MspInit+0x258>)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a2c      	ldr	r2, [pc, #176]	; (8002524 <HAL_TIM_Base_MspInit+0x258>)
 8002474:	639a      	str	r2, [r3, #56]	; 0x38
 8002476:	4a2b      	ldr	r2, [pc, #172]	; (8002524 <HAL_TIM_Base_MspInit+0x258>)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800247c:	e0a0      	b.n	80025c0 <HAL_TIM_Base_MspInit+0x2f4>
  else if(htim_base->Instance==TIM4)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a2a      	ldr	r2, [pc, #168]	; (800252c <HAL_TIM_Base_MspInit+0x260>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d157      	bne.n	8002538 <HAL_TIM_Base_MspInit+0x26c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002488:	2300      	movs	r3, #0
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	4b1f      	ldr	r3, [pc, #124]	; (800250c <HAL_TIM_Base_MspInit+0x240>)
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	4a1e      	ldr	r2, [pc, #120]	; (800250c <HAL_TIM_Base_MspInit+0x240>)
 8002492:	f043 0304 	orr.w	r3, r3, #4
 8002496:	6413      	str	r3, [r2, #64]	; 0x40
 8002498:	4b1c      	ldr	r3, [pc, #112]	; (800250c <HAL_TIM_Base_MspInit+0x240>)
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	693b      	ldr	r3, [r7, #16]
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 80024a4:	4b22      	ldr	r3, [pc, #136]	; (8002530 <HAL_TIM_Base_MspInit+0x264>)
 80024a6:	4a23      	ldr	r2, [pc, #140]	; (8002534 <HAL_TIM_Base_MspInit+0x268>)
 80024a8:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 80024aa:	4b21      	ldr	r3, [pc, #132]	; (8002530 <HAL_TIM_Base_MspInit+0x264>)
 80024ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024b0:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024b2:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <HAL_TIM_Base_MspInit+0x264>)
 80024b4:	2240      	movs	r2, #64	; 0x40
 80024b6:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024b8:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <HAL_TIM_Base_MspInit+0x264>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80024be:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <HAL_TIM_Base_MspInit+0x264>)
 80024c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024c4:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024c6:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <HAL_TIM_Base_MspInit+0x264>)
 80024c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024cc:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024ce:	4b18      	ldr	r3, [pc, #96]	; (8002530 <HAL_TIM_Base_MspInit+0x264>)
 80024d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024d4:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 80024d6:	4b16      	ldr	r3, [pc, #88]	; (8002530 <HAL_TIM_Base_MspInit+0x264>)
 80024d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024dc:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80024de:	4b14      	ldr	r3, [pc, #80]	; (8002530 <HAL_TIM_Base_MspInit+0x264>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024e4:	4b12      	ldr	r3, [pc, #72]	; (8002530 <HAL_TIM_Base_MspInit+0x264>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80024ea:	4811      	ldr	r0, [pc, #68]	; (8002530 <HAL_TIM_Base_MspInit+0x264>)
 80024ec:	f001 f91e 	bl	800372c <HAL_DMA_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_TIM_Base_MspInit+0x22e>
      Error_Handler();
 80024f6:	f7ff f9f7 	bl	80018e8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a0c      	ldr	r2, [pc, #48]	; (8002530 <HAL_TIM_Base_MspInit+0x264>)
 80024fe:	625a      	str	r2, [r3, #36]	; 0x24
 8002500:	4a0b      	ldr	r2, [pc, #44]	; (8002530 <HAL_TIM_Base_MspInit+0x264>)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002506:	e05b      	b.n	80025c0 <HAL_TIM_Base_MspInit+0x2f4>
 8002508:	40010000 	.word	0x40010000
 800250c:	40023800 	.word	0x40023800
 8002510:	200002bc 	.word	0x200002bc
 8002514:	40026428 	.word	0x40026428
 8002518:	2000031c 	.word	0x2000031c
 800251c:	40026088 	.word	0x40026088
 8002520:	40000400 	.word	0x40000400
 8002524:	2000037c 	.word	0x2000037c
 8002528:	40026070 	.word	0x40026070
 800252c:	40000800 	.word	0x40000800
 8002530:	200003dc 	.word	0x200003dc
 8002534:	40026010 	.word	0x40026010
  else if(htim_base->Instance==TIM5)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a22      	ldr	r2, [pc, #136]	; (80025c8 <HAL_TIM_Base_MspInit+0x2fc>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d13e      	bne.n	80025c0 <HAL_TIM_Base_MspInit+0x2f4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	4b21      	ldr	r3, [pc, #132]	; (80025cc <HAL_TIM_Base_MspInit+0x300>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	4a20      	ldr	r2, [pc, #128]	; (80025cc <HAL_TIM_Base_MspInit+0x300>)
 800254c:	f043 0308 	orr.w	r3, r3, #8
 8002550:	6413      	str	r3, [r2, #64]	; 0x40
 8002552:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <HAL_TIM_Base_MspInit+0x300>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 800255e:	4b1c      	ldr	r3, [pc, #112]	; (80025d0 <HAL_TIM_Base_MspInit+0x304>)
 8002560:	4a1c      	ldr	r2, [pc, #112]	; (80025d4 <HAL_TIM_Base_MspInit+0x308>)
 8002562:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8002564:	4b1a      	ldr	r3, [pc, #104]	; (80025d0 <HAL_TIM_Base_MspInit+0x304>)
 8002566:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800256a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800256c:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <HAL_TIM_Base_MspInit+0x304>)
 800256e:	2240      	movs	r2, #64	; 0x40
 8002570:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002572:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <HAL_TIM_Base_MspInit+0x304>)
 8002574:	2200      	movs	r2, #0
 8002576:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002578:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <HAL_TIM_Base_MspInit+0x304>)
 800257a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800257e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002580:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <HAL_TIM_Base_MspInit+0x304>)
 8002582:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002586:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <HAL_TIM_Base_MspInit+0x304>)
 800258a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800258e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_CIRCULAR;
 8002590:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <HAL_TIM_Base_MspInit+0x304>)
 8002592:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002596:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002598:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <HAL_TIM_Base_MspInit+0x304>)
 800259a:	2200      	movs	r2, #0
 800259c:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800259e:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <HAL_TIM_Base_MspInit+0x304>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 80025a4:	480a      	ldr	r0, [pc, #40]	; (80025d0 <HAL_TIM_Base_MspInit+0x304>)
 80025a6:	f001 f8c1 	bl	800372c <HAL_DMA_Init>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <HAL_TIM_Base_MspInit+0x2e8>
      Error_Handler();
 80025b0:	f7ff f99a 	bl	80018e8 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a06      	ldr	r2, [pc, #24]	; (80025d0 <HAL_TIM_Base_MspInit+0x304>)
 80025b8:	625a      	str	r2, [r3, #36]	; 0x24
 80025ba:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <HAL_TIM_Base_MspInit+0x304>)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6393      	str	r3, [r2, #56]	; 0x38
}
 80025c0:	bf00      	nop
 80025c2:	3720      	adds	r7, #32
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40000c00 	.word	0x40000c00
 80025cc:	40023800 	.word	0x40023800
 80025d0:	2000043c 	.word	0x2000043c
 80025d4:	40026040 	.word	0x40026040

080025d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08c      	sub	sp, #48	; 0x30
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	f107 031c 	add.w	r3, r7, #28
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a5b      	ldr	r2, [pc, #364]	; (8002764 <HAL_TIM_MspPostInit+0x18c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d11f      	bne.n	800263a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
 80025fe:	4b5a      	ldr	r3, [pc, #360]	; (8002768 <HAL_TIM_MspPostInit+0x190>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	4a59      	ldr	r2, [pc, #356]	; (8002768 <HAL_TIM_MspPostInit+0x190>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6313      	str	r3, [r2, #48]	; 0x30
 800260a:	4b57      	ldr	r3, [pc, #348]	; (8002768 <HAL_TIM_MspPostInit+0x190>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	61bb      	str	r3, [r7, #24]
 8002614:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800261a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261c:	2302      	movs	r3, #2
 800261e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002624:	2300      	movs	r3, #0
 8002626:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002628:	2301      	movs	r3, #1
 800262a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262c:	f107 031c 	add.w	r3, r7, #28
 8002630:	4619      	mov	r1, r3
 8002632:	484e      	ldr	r0, [pc, #312]	; (800276c <HAL_TIM_MspPostInit+0x194>)
 8002634:	f001 fc0c 	bl	8003e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002638:	e08f      	b.n	800275a <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM2)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002642:	d11f      	bne.n	8002684 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	4b47      	ldr	r3, [pc, #284]	; (8002768 <HAL_TIM_MspPostInit+0x190>)
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	4a46      	ldr	r2, [pc, #280]	; (8002768 <HAL_TIM_MspPostInit+0x190>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6313      	str	r3, [r2, #48]	; 0x30
 8002654:	4b44      	ldr	r3, [pc, #272]	; (8002768 <HAL_TIM_MspPostInit+0x190>)
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002660:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	2302      	movs	r3, #2
 8002668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	2300      	movs	r3, #0
 8002670:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002672:	2301      	movs	r3, #1
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002676:	f107 031c 	add.w	r3, r7, #28
 800267a:	4619      	mov	r1, r3
 800267c:	483b      	ldr	r0, [pc, #236]	; (800276c <HAL_TIM_MspPostInit+0x194>)
 800267e:	f001 fbe7 	bl	8003e50 <HAL_GPIO_Init>
}
 8002682:	e06a      	b.n	800275a <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM3)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a39      	ldr	r2, [pc, #228]	; (8002770 <HAL_TIM_MspPostInit+0x198>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d11e      	bne.n	80026cc <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	4b35      	ldr	r3, [pc, #212]	; (8002768 <HAL_TIM_MspPostInit+0x190>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	4a34      	ldr	r2, [pc, #208]	; (8002768 <HAL_TIM_MspPostInit+0x190>)
 8002698:	f043 0304 	orr.w	r3, r3, #4
 800269c:	6313      	str	r3, [r2, #48]	; 0x30
 800269e:	4b32      	ldr	r3, [pc, #200]	; (8002768 <HAL_TIM_MspPostInit+0x190>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026aa:	2340      	movs	r3, #64	; 0x40
 80026ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b6:	2300      	movs	r3, #0
 80026b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026ba:	2302      	movs	r3, #2
 80026bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026be:	f107 031c 	add.w	r3, r7, #28
 80026c2:	4619      	mov	r1, r3
 80026c4:	482b      	ldr	r0, [pc, #172]	; (8002774 <HAL_TIM_MspPostInit+0x19c>)
 80026c6:	f001 fbc3 	bl	8003e50 <HAL_GPIO_Init>
}
 80026ca:	e046      	b.n	800275a <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM4)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a29      	ldr	r2, [pc, #164]	; (8002778 <HAL_TIM_MspPostInit+0x1a0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d11e      	bne.n	8002714 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	4b23      	ldr	r3, [pc, #140]	; (8002768 <HAL_TIM_MspPostInit+0x190>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	4a22      	ldr	r2, [pc, #136]	; (8002768 <HAL_TIM_MspPostInit+0x190>)
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	6313      	str	r3, [r2, #48]	; 0x30
 80026e6:	4b20      	ldr	r3, [pc, #128]	; (8002768 <HAL_TIM_MspPostInit+0x190>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026f2:	2340      	movs	r3, #64	; 0x40
 80026f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f6:	2302      	movs	r3, #2
 80026f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fe:	2300      	movs	r3, #0
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002702:	2302      	movs	r3, #2
 8002704:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002706:	f107 031c 	add.w	r3, r7, #28
 800270a:	4619      	mov	r1, r3
 800270c:	481b      	ldr	r0, [pc, #108]	; (800277c <HAL_TIM_MspPostInit+0x1a4>)
 800270e:	f001 fb9f 	bl	8003e50 <HAL_GPIO_Init>
}
 8002712:	e022      	b.n	800275a <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM5)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a19      	ldr	r2, [pc, #100]	; (8002780 <HAL_TIM_MspPostInit+0x1a8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d11d      	bne.n	800275a <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <HAL_TIM_MspPostInit+0x190>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	4a10      	ldr	r2, [pc, #64]	; (8002768 <HAL_TIM_MspPostInit+0x190>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6313      	str	r3, [r2, #48]	; 0x30
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <HAL_TIM_MspPostInit+0x190>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800273a:	2301      	movs	r3, #1
 800273c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002746:	2300      	movs	r3, #0
 8002748:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800274a:	2302      	movs	r3, #2
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274e:	f107 031c 	add.w	r3, r7, #28
 8002752:	4619      	mov	r1, r3
 8002754:	4805      	ldr	r0, [pc, #20]	; (800276c <HAL_TIM_MspPostInit+0x194>)
 8002756:	f001 fb7b 	bl	8003e50 <HAL_GPIO_Init>
}
 800275a:	bf00      	nop
 800275c:	3730      	adds	r7, #48	; 0x30
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40010000 	.word	0x40010000
 8002768:	40023800 	.word	0x40023800
 800276c:	40020000 	.word	0x40020000
 8002770:	40000400 	.word	0x40000400
 8002774:	40020800 	.word	0x40020800
 8002778:	40000800 	.word	0x40000800
 800277c:	40020400 	.word	0x40020400
 8002780:	40000c00 	.word	0x40000c00

08002784 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b08a      	sub	sp, #40	; 0x28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a19      	ldr	r2, [pc, #100]	; (8002808 <HAL_UART_MspInit+0x84>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d12b      	bne.n	80027fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	4b18      	ldr	r3, [pc, #96]	; (800280c <HAL_UART_MspInit+0x88>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	4a17      	ldr	r2, [pc, #92]	; (800280c <HAL_UART_MspInit+0x88>)
 80027b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b4:	6413      	str	r3, [r2, #64]	; 0x40
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <HAL_UART_MspInit+0x88>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <HAL_UART_MspInit+0x88>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a10      	ldr	r2, [pc, #64]	; (800280c <HAL_UART_MspInit+0x88>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b0e      	ldr	r3, [pc, #56]	; (800280c <HAL_UART_MspInit+0x88>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027de:	230c      	movs	r3, #12
 80027e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e2:	2302      	movs	r3, #2
 80027e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ea:	2303      	movs	r3, #3
 80027ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027ee:	2307      	movs	r3, #7
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f2:	f107 0314 	add.w	r3, r7, #20
 80027f6:	4619      	mov	r1, r3
 80027f8:	4805      	ldr	r0, [pc, #20]	; (8002810 <HAL_UART_MspInit+0x8c>)
 80027fa:	f001 fb29 	bl	8003e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027fe:	bf00      	nop
 8002800:	3728      	adds	r7, #40	; 0x28
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40004400 	.word	0x40004400
 800280c:	40023800 	.word	0x40023800
 8002810:	40020000 	.word	0x40020000

08002814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002818:	e7fe      	b.n	8002818 <NMI_Handler+0x4>

0800281a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800281a:	b480      	push	{r7}
 800281c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800281e:	e7fe      	b.n	800281e <HardFault_Handler+0x4>

08002820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002824:	e7fe      	b.n	8002824 <MemManage_Handler+0x4>

08002826 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002826:	b480      	push	{r7}
 8002828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800282a:	e7fe      	b.n	800282a <BusFault_Handler+0x4>

0800282c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002830:	e7fe      	b.n	8002830 <UsageFault_Handler+0x4>

08002832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002832:	b480      	push	{r7}
 8002834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002860:	f000 fe0e 	bl	8003480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002864:	bf00      	nop
 8002866:	bd80      	pop	{r7, pc}

08002868 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_UP_Pin);
 800286c:	2002      	movs	r0, #2
 800286e:	f001 fc8d 	bl	800418c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}

08002876 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_MID_Pin);
 800287a:	2004      	movs	r0, #4
 800287c:	f001 fc86 	bl	800418c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002880:	bf00      	nop
 8002882:	bd80      	pop	{r7, pc}

08002884 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_DOWN_Pin);
 8002888:	2008      	movs	r0, #8
 800288a:	f001 fc7f 	bl	800418c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002898:	4802      	ldr	r0, [pc, #8]	; (80028a4 <DMA1_Stream0_IRQHandler+0x10>)
 800289a:	f001 f86f 	bl	800397c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	200003dc 	.word	0x200003dc

080028a8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 80028ac:	4802      	ldr	r0, [pc, #8]	; (80028b8 <DMA1_Stream2_IRQHandler+0x10>)
 80028ae:	f001 f865 	bl	800397c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	2000043c 	.word	0x2000043c

080028bc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80028c0:	4802      	ldr	r0, [pc, #8]	; (80028cc <DMA1_Stream4_IRQHandler+0x10>)
 80028c2:	f001 f85b 	bl	800397c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	2000037c 	.word	0x2000037c

080028d0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80028d4:	4802      	ldr	r0, [pc, #8]	; (80028e0 <DMA1_Stream5_IRQHandler+0x10>)
 80028d6:	f001 f851 	bl	800397c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	2000031c 	.word	0x2000031c

080028e4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80028e8:	4802      	ldr	r0, [pc, #8]	; (80028f4 <DMA2_Stream1_IRQHandler+0x10>)
 80028ea:	f001 f847 	bl	800397c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	200002bc 	.word	0x200002bc

080028f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002900:	4a14      	ldr	r2, [pc, #80]	; (8002954 <_sbrk+0x5c>)
 8002902:	4b15      	ldr	r3, [pc, #84]	; (8002958 <_sbrk+0x60>)
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800290c:	4b13      	ldr	r3, [pc, #76]	; (800295c <_sbrk+0x64>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d102      	bne.n	800291a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002914:	4b11      	ldr	r3, [pc, #68]	; (800295c <_sbrk+0x64>)
 8002916:	4a12      	ldr	r2, [pc, #72]	; (8002960 <_sbrk+0x68>)
 8002918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800291a:	4b10      	ldr	r3, [pc, #64]	; (800295c <_sbrk+0x64>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	429a      	cmp	r2, r3
 8002926:	d207      	bcs.n	8002938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002928:	f007 fd0e 	bl	800a348 <__errno>
 800292c:	4603      	mov	r3, r0
 800292e:	220c      	movs	r2, #12
 8002930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002932:	f04f 33ff 	mov.w	r3, #4294967295
 8002936:	e009      	b.n	800294c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002938:	4b08      	ldr	r3, [pc, #32]	; (800295c <_sbrk+0x64>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800293e:	4b07      	ldr	r3, [pc, #28]	; (800295c <_sbrk+0x64>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	4a05      	ldr	r2, [pc, #20]	; (800295c <_sbrk+0x64>)
 8002948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800294a:	68fb      	ldr	r3, [r7, #12]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20018000 	.word	0x20018000
 8002958:	00000400 	.word	0x00000400
 800295c:	20001c34 	.word	0x20001c34
 8002960:	20001e98 	.word	0x20001e98

08002964 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <SystemInit+0x20>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	4a05      	ldr	r2, [pc, #20]	; (8002984 <SystemInit+0x20>)
 8002970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <PCD8544_send>:
	{ 0x11, 0x1B, 0x04 },   // }
	{ 0x04, 0x06, 0x02 },   // ~
	{ 0x1F, 0x1F, 0x1F },   // delete
};

void PCD8544_send(unsigned char data) {
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	71fb      	strb	r3, [r7, #7]
    PCD8544_CE_LOW;
 8002992:	2200      	movs	r2, #0
 8002994:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002998:	4809      	ldr	r0, [pc, #36]	; (80029c0 <PCD8544_send+0x38>)
 800299a:	f001 fbdd 	bl	8004158 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, &data, 1, HAL_MAX_DELAY);
 800299e:	1df9      	adds	r1, r7, #7
 80029a0:	f04f 33ff 	mov.w	r3, #4294967295
 80029a4:	2201      	movs	r2, #1
 80029a6:	4807      	ldr	r0, [pc, #28]	; (80029c4 <PCD8544_send+0x3c>)
 80029a8:	f002 f929 	bl	8004bfe <HAL_SPI_Transmit>
    PCD8544_CE_HIGH;
 80029ac:	2201      	movs	r2, #1
 80029ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029b2:	4803      	ldr	r0, [pc, #12]	; (80029c0 <PCD8544_send+0x38>)
 80029b4:	f001 fbd0 	bl	8004158 <HAL_GPIO_WritePin>
}
 80029b8:	bf00      	nop
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40020000 	.word	0x40020000
 80029c4:	200000fc 	.word	0x200000fc

080029c8 <PCD8544_Pin>:

void PCD8544_Pin(PCD8544_Pin_t pin, PCD8544_State_t state) {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	460a      	mov	r2, r1
 80029d2:	71fb      	strb	r3, [r7, #7]
 80029d4:	4613      	mov	r3, r2
 80029d6:	71bb      	strb	r3, [r7, #6]
	switch (pin) {
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d002      	beq.n	80029e4 <PCD8544_Pin+0x1c>
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d00f      	beq.n	8002a02 <PCD8544_Pin+0x3a>
			    HAL_GPIO_WritePin(PCD8544_RST_PORT, PCD8544_RST_PIN, GPIO_PIN_SET);
			} else {
			    HAL_GPIO_WritePin(PCD8544_RST_PORT, PCD8544_RST_PIN, GPIO_PIN_RESET);
			}
			break;
		default: break;
 80029e2:	e01f      	b.n	8002a24 <PCD8544_Pin+0x5c>
			if (state != PCD8544_State_Low) {
 80029e4:	79bb      	ldrb	r3, [r7, #6]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d005      	beq.n	80029f6 <PCD8544_Pin+0x2e>
				HAL_GPIO_WritePin(PCD8544_DC_PORT, PCD8544_DC_PIN, GPIO_PIN_SET);
 80029ea:	2201      	movs	r2, #1
 80029ec:	2110      	movs	r1, #16
 80029ee:	480f      	ldr	r0, [pc, #60]	; (8002a2c <PCD8544_Pin+0x64>)
 80029f0:	f001 fbb2 	bl	8004158 <HAL_GPIO_WritePin>
			break;
 80029f4:	e016      	b.n	8002a24 <PCD8544_Pin+0x5c>
			    HAL_GPIO_WritePin(PCD8544_DC_PORT, PCD8544_DC_PIN, GPIO_PIN_RESET);
 80029f6:	2200      	movs	r2, #0
 80029f8:	2110      	movs	r1, #16
 80029fa:	480c      	ldr	r0, [pc, #48]	; (8002a2c <PCD8544_Pin+0x64>)
 80029fc:	f001 fbac 	bl	8004158 <HAL_GPIO_WritePin>
			break;
 8002a00:	e010      	b.n	8002a24 <PCD8544_Pin+0x5c>
			if (state != PCD8544_State_Low) {
 8002a02:	79bb      	ldrb	r3, [r7, #6]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d006      	beq.n	8002a16 <PCD8544_Pin+0x4e>
			    HAL_GPIO_WritePin(PCD8544_RST_PORT, PCD8544_RST_PIN, GPIO_PIN_SET);
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a0e:	4807      	ldr	r0, [pc, #28]	; (8002a2c <PCD8544_Pin+0x64>)
 8002a10:	f001 fba2 	bl	8004158 <HAL_GPIO_WritePin>
			break;
 8002a14:	e005      	b.n	8002a22 <PCD8544_Pin+0x5a>
			    HAL_GPIO_WritePin(PCD8544_RST_PORT, PCD8544_RST_PIN, GPIO_PIN_RESET);
 8002a16:	2200      	movs	r2, #0
 8002a18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a1c:	4803      	ldr	r0, [pc, #12]	; (8002a2c <PCD8544_Pin+0x64>)
 8002a1e:	f001 fb9b 	bl	8004158 <HAL_GPIO_WritePin>
			break;
 8002a22:	bf00      	nop
	}
}
 8002a24:	bf00      	nop
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40020400 	.word	0x40020400

08002a30 <PCD8544_Delay>:


void PCD8544_Delay(unsigned long micros) {
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
    HAL_Delay(micros);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 fd41 	bl	80034c0 <HAL_Delay>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <PCD8544_Init>:

void PCD8544_Init(unsigned char contrast) {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	71fb      	strb	r3, [r7, #7]
	//Reset
	PCD8544_Pin(PCD8544_Pin_RST, PCD8544_State_Low);
 8002a52:	2100      	movs	r1, #0
 8002a54:	2002      	movs	r0, #2
 8002a56:	f7ff ffb7 	bl	80029c8 <PCD8544_Pin>
	PCD8544_Delay(2000);
 8002a5a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a5e:	f7ff ffe7 	bl	8002a30 <PCD8544_Delay>
	PCD8544_Pin(PCD8544_Pin_RST, PCD8544_State_High);
 8002a62:	2101      	movs	r1, #1
 8002a64:	2002      	movs	r0, #2
 8002a66:	f7ff ffaf 	bl	80029c8 <PCD8544_Pin>

	//Turn ON BL
	HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	2102      	movs	r1, #2
 8002a6e:	4816      	ldr	r0, [pc, #88]	; (8002ac8 <PCD8544_Init+0x80>)
 8002a70:	f001 fb72 	bl	8004158 <HAL_GPIO_WritePin>
	// Go in extended mode
	PCD8544_Write(PCD8544_COMMAND, PCD8544_FUNCTIONSET | PCD8544_EXTENDEDINSTRUCTION);
 8002a74:	2121      	movs	r1, #33	; 0x21
 8002a76:	2000      	movs	r0, #0
 8002a78:	f000 f828 	bl	8002acc <PCD8544_Write>

	// LCD bias select
	PCD8544_Write(PCD8544_COMMAND, PCD8544_SETBIAS | 0x4);
 8002a7c:	2114      	movs	r1, #20
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f000 f824 	bl	8002acc <PCD8544_Write>

	// set VOP
	if (contrast > 0x7F) {
 8002a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	da01      	bge.n	8002a90 <PCD8544_Init+0x48>
		contrast = 0x7F;
 8002a8c:	237f      	movs	r3, #127	; 0x7f
 8002a8e:	71fb      	strb	r3, [r7, #7]
	}
	PCD8544_Write(PCD8544_COMMAND, PCD8544_SETVOP | contrast);
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	4619      	mov	r1, r3
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f000 f816 	bl	8002acc <PCD8544_Write>

	// normal mode
	PCD8544_Write(PCD8544_COMMAND, PCD8544_FUNCTIONSET);
 8002aa0:	2120      	movs	r1, #32
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	f000 f812 	bl	8002acc <PCD8544_Write>

	// Set display to Normal
	PCD8544_Write(PCD8544_COMMAND, PCD8544_DISPLAYCONTROL | PCD8544_DISPLAYNORMAL);
 8002aa8:	210c      	movs	r1, #12
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f000 f80e 	bl	8002acc <PCD8544_Write>

	//Set cursor to home position
	PCD8544_Home();
 8002ab0:	f000 f8b0 	bl	8002c14 <PCD8544_Home>

	//Normal display
	PCD8544_Write(PCD8544_COMMAND, PCD8544_DISPLAYCONTROL | PCD8544_DISPLAYNORMAL);
 8002ab4:	210c      	movs	r1, #12
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f000 f808 	bl	8002acc <PCD8544_Write>

	//Clear display
	PCD8544_Clear();
 8002abc:	f000 f884 	bl	8002bc8 <PCD8544_Clear>
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40020000 	.word	0x40020000

08002acc <PCD8544_Write>:

void PCD8544_Write(PCD8544_WriteType_t cd, unsigned char data) {
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	460a      	mov	r2, r1
 8002ad6:	71fb      	strb	r3, [r7, #7]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	71bb      	strb	r3, [r7, #6]
	switch (cd) {
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d006      	beq.n	8002af0 <PCD8544_Write+0x24>
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d109      	bne.n	8002afa <PCD8544_Write+0x2e>
		//Send data to lcd's ram
		case PCD8544_DATA:
			//Set DC pin HIGH
			PCD8544_Pin(PCD8544_Pin_DC, PCD8544_State_High);
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	2001      	movs	r0, #1
 8002aea:	f7ff ff6d 	bl	80029c8 <PCD8544_Pin>
			break;
 8002aee:	e005      	b.n	8002afc <PCD8544_Write+0x30>
		//Send command to lcd
		case PCD8544_COMMAND:
			//Set DC pin LOW
			PCD8544_Pin(PCD8544_Pin_DC, PCD8544_State_Low);
 8002af0:	2100      	movs	r1, #0
 8002af2:	2001      	movs	r0, #1
 8002af4:	f7ff ff68 	bl	80029c8 <PCD8544_Pin>
			break;
 8002af8:	e000      	b.n	8002afc <PCD8544_Write+0x30>
		default: break;
 8002afa:	bf00      	nop
	}
	//Send data
	PCD8544_send(data);
 8002afc:	79bb      	ldrb	r3, [r7, #6]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff ff42 	bl	8002988 <PCD8544_send>
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <PCD8544_DrawPixel>:

	// normal mode
	PCD8544_Write(PCD8544_COMMAND, PCD8544_FUNCTIONSET);
}

void PCD8544_DrawPixel(unsigned char x, unsigned char y, PCD8544_Pixel_t pixel) {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	71fb      	strb	r3, [r7, #7]
 8002b16:	460b      	mov	r3, r1
 8002b18:	71bb      	strb	r3, [r7, #6]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	717b      	strb	r3, [r7, #5]
	if (x >= PCD8544_WIDTH) {
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	2b53      	cmp	r3, #83	; 0x53
 8002b22:	d849      	bhi.n	8002bb8 <PCD8544_DrawPixel+0xac>
		return;
	}
	if (y >= PCD8544_HEIGHT) {
 8002b24:	79bb      	ldrb	r3, [r7, #6]
 8002b26:	2b2f      	cmp	r3, #47	; 0x2f
 8002b28:	d848      	bhi.n	8002bbc <PCD8544_DrawPixel+0xb0>
		return;
	}

	if (pixel != PCD8544_Pixel_Clear) {
 8002b2a:	797b      	ldrb	r3, [r7, #5]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d01d      	beq.n	8002b6c <PCD8544_DrawPixel+0x60>
		PCD8544_Buffer[x + (y / 8) * PCD8544_WIDTH] |= 1 << (y % 8);
 8002b30:	79fa      	ldrb	r2, [r7, #7]
 8002b32:	79bb      	ldrb	r3, [r7, #6]
 8002b34:	08db      	lsrs	r3, r3, #3
 8002b36:	b2d8      	uxtb	r0, r3
 8002b38:	4601      	mov	r1, r0
 8002b3a:	2354      	movs	r3, #84	; 0x54
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	4a20      	ldr	r2, [pc, #128]	; (8002bc4 <PCD8544_DrawPixel+0xb8>)
 8002b44:	5cd3      	ldrb	r3, [r2, r3]
 8002b46:	b25a      	sxtb	r2, r3
 8002b48:	79bb      	ldrb	r3, [r7, #6]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	2101      	movs	r1, #1
 8002b50:	fa01 f303 	lsl.w	r3, r1, r3
 8002b54:	b25b      	sxtb	r3, r3
 8002b56:	4313      	orrs	r3, r2
 8002b58:	b259      	sxtb	r1, r3
 8002b5a:	79fa      	ldrb	r2, [r7, #7]
 8002b5c:	2354      	movs	r3, #84	; 0x54
 8002b5e:	fb00 f303 	mul.w	r3, r0, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	b2c9      	uxtb	r1, r1
 8002b66:	4a17      	ldr	r2, [pc, #92]	; (8002bc4 <PCD8544_DrawPixel+0xb8>)
 8002b68:	54d1      	strb	r1, [r2, r3]
 8002b6a:	e01e      	b.n	8002baa <PCD8544_DrawPixel+0x9e>
	} else {
		PCD8544_Buffer[x + (y / 8) * PCD8544_WIDTH] &= ~(1 << (y % 8));
 8002b6c:	79fa      	ldrb	r2, [r7, #7]
 8002b6e:	79bb      	ldrb	r3, [r7, #6]
 8002b70:	08db      	lsrs	r3, r3, #3
 8002b72:	b2d8      	uxtb	r0, r3
 8002b74:	4601      	mov	r1, r0
 8002b76:	2354      	movs	r3, #84	; 0x54
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	4a11      	ldr	r2, [pc, #68]	; (8002bc4 <PCD8544_DrawPixel+0xb8>)
 8002b80:	5cd3      	ldrb	r3, [r2, r3]
 8002b82:	b25a      	sxtb	r2, r3
 8002b84:	79bb      	ldrb	r3, [r7, #6]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b90:	b25b      	sxtb	r3, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	b25b      	sxtb	r3, r3
 8002b96:	4013      	ands	r3, r2
 8002b98:	b259      	sxtb	r1, r3
 8002b9a:	79fa      	ldrb	r2, [r7, #7]
 8002b9c:	2354      	movs	r3, #84	; 0x54
 8002b9e:	fb00 f303 	mul.w	r3, r0, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	b2c9      	uxtb	r1, r1
 8002ba6:	4a07      	ldr	r2, [pc, #28]	; (8002bc4 <PCD8544_DrawPixel+0xb8>)
 8002ba8:	54d1      	strb	r1, [r2, r3]
	}
	PCD8544_UpdateArea(x, y, x, y);
 8002baa:	79bb      	ldrb	r3, [r7, #6]
 8002bac:	79fa      	ldrb	r2, [r7, #7]
 8002bae:	79b9      	ldrb	r1, [r7, #6]
 8002bb0:	79f8      	ldrb	r0, [r7, #7]
 8002bb2:	f000 f89d 	bl	8002cf0 <PCD8544_UpdateArea>
 8002bb6:	e002      	b.n	8002bbe <PCD8544_DrawPixel+0xb2>
		return;
 8002bb8:	bf00      	nop
 8002bba:	e000      	b.n	8002bbe <PCD8544_DrawPixel+0xb2>
		return;
 8002bbc:	bf00      	nop
}
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20001c38 	.word	0x20001c38

08002bc8 <PCD8544_Clear>:
	} else {
		PCD8544_Write(PCD8544_COMMAND, PCD8544_DISPLAYCONTROL | PCD8544_DISPLAYNORMAL);
	}
}

void PCD8544_Clear(void) {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
	unsigned int i;
	PCD8544_Home();
 8002bce:	f000 f821 	bl	8002c14 <PCD8544_Home>
	for (i = 0; i < PCD8544_BUFFER_SIZE; i++) {
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	607b      	str	r3, [r7, #4]
 8002bd6:	e007      	b.n	8002be8 <PCD8544_Clear+0x20>
		PCD8544_Buffer[i] = 0x00;
 8002bd8:	4a0d      	ldr	r2, [pc, #52]	; (8002c10 <PCD8544_Clear+0x48>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4413      	add	r3, r2
 8002bde:	2200      	movs	r2, #0
 8002be0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < PCD8544_BUFFER_SIZE; i++) {
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3301      	adds	r3, #1
 8002be6:	607b      	str	r3, [r7, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8002bee:	d3f3      	bcc.n	8002bd8 <PCD8544_Clear+0x10>
		//PCD8544_Write(PCD8544_DATA, 0x00);
	}
	PCD8544_GotoXY(0, 0);
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f000 f8b8 	bl	8002d68 <PCD8544_GotoXY>
	PCD8544_UpdateArea(0, 0, PCD8544_WIDTH - 1, PCD8544_HEIGHT - 1);
 8002bf8:	232f      	movs	r3, #47	; 0x2f
 8002bfa:	2253      	movs	r2, #83	; 0x53
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	2000      	movs	r0, #0
 8002c00:	f000 f876 	bl	8002cf0 <PCD8544_UpdateArea>
	PCD8544_Refresh();
 8002c04:	f000 f812 	bl	8002c2c <PCD8544_Refresh>
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20001c38 	.word	0x20001c38

08002c14 <PCD8544_Home>:

void PCD8544_Home(void) {
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
	PCD8544_Write(PCD8544_COMMAND, PCD8544_SETXADDR | 0);
 8002c18:	2180      	movs	r1, #128	; 0x80
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	f7ff ff56 	bl	8002acc <PCD8544_Write>
	PCD8544_Write(PCD8544_COMMAND, PCD8544_SETYADDR | 0);
 8002c20:	2140      	movs	r1, #64	; 0x40
 8002c22:	2000      	movs	r0, #0
 8002c24:	f7ff ff52 	bl	8002acc <PCD8544_Write>
}
 8002c28:	bf00      	nop
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <PCD8544_Refresh>:

void PCD8544_Refresh(void) {
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
	unsigned char i, j;
	for (i = 0; i < 6; i++) {
 8002c32:	2300      	movs	r3, #0
 8002c34:	71fb      	strb	r3, [r7, #7]
 8002c36:	e03b      	b.n	8002cb0 <PCD8544_Refresh+0x84>
		//Not in range yet
		if (PCD8544_UpdateYmin > ((i + 1) * 8)) {
 8002c38:	4b28      	ldr	r3, [pc, #160]	; (8002cdc <PCD8544_Refresh+0xb0>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	3301      	adds	r3, #1
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	429a      	cmp	r2, r3
 8002c46:	dc2f      	bgt.n	8002ca8 <PCD8544_Refresh+0x7c>
			continue;
		}
		//Over range, stop
		if ((i * 8) > PCD8544_UpdateYmax) {
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4a24      	ldr	r2, [pc, #144]	; (8002ce0 <PCD8544_Refresh+0xb4>)
 8002c4e:	7812      	ldrb	r2, [r2, #0]
 8002c50:	4293      	cmp	r3, r2
 8002c52:	dc31      	bgt.n	8002cb8 <PCD8544_Refresh+0x8c>
			break;
		}

		PCD8544_Write(PCD8544_COMMAND, PCD8544_SETYADDR | i);
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	2000      	movs	r0, #0
 8002c60:	f7ff ff34 	bl	8002acc <PCD8544_Write>
		PCD8544_Write(PCD8544_COMMAND, PCD8544_SETXADDR | PCD8544_UpdateXmin);
 8002c64:	4b1f      	ldr	r3, [pc, #124]	; (8002ce4 <PCD8544_Refresh+0xb8>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	4619      	mov	r1, r3
 8002c70:	2000      	movs	r0, #0
 8002c72:	f7ff ff2b 	bl	8002acc <PCD8544_Write>

		for (j = PCD8544_UpdateXmin; j <= PCD8544_UpdateXmax; j++) {
 8002c76:	4b1b      	ldr	r3, [pc, #108]	; (8002ce4 <PCD8544_Refresh+0xb8>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	71bb      	strb	r3, [r7, #6]
 8002c7c:	e00e      	b.n	8002c9c <PCD8544_Refresh+0x70>
			PCD8544_Write(PCD8544_DATA, PCD8544_Buffer[(i * PCD8544_WIDTH) + j]);
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	2254      	movs	r2, #84	; 0x54
 8002c82:	fb03 f202 	mul.w	r2, r3, r2
 8002c86:	79bb      	ldrb	r3, [r7, #6]
 8002c88:	4413      	add	r3, r2
 8002c8a:	4a17      	ldr	r2, [pc, #92]	; (8002ce8 <PCD8544_Refresh+0xbc>)
 8002c8c:	5cd3      	ldrb	r3, [r2, r3]
 8002c8e:	4619      	mov	r1, r3
 8002c90:	2001      	movs	r0, #1
 8002c92:	f7ff ff1b 	bl	8002acc <PCD8544_Write>
		for (j = PCD8544_UpdateXmin; j <= PCD8544_UpdateXmax; j++) {
 8002c96:	79bb      	ldrb	r3, [r7, #6]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	71bb      	strb	r3, [r7, #6]
 8002c9c:	4b13      	ldr	r3, [pc, #76]	; (8002cec <PCD8544_Refresh+0xc0>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	79ba      	ldrb	r2, [r7, #6]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d9eb      	bls.n	8002c7e <PCD8544_Refresh+0x52>
 8002ca6:	e000      	b.n	8002caa <PCD8544_Refresh+0x7e>
			continue;
 8002ca8:	bf00      	nop
	for (i = 0; i < 6; i++) {
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	3301      	adds	r3, #1
 8002cae:	71fb      	strb	r3, [r7, #7]
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	2b05      	cmp	r3, #5
 8002cb4:	d9c0      	bls.n	8002c38 <PCD8544_Refresh+0xc>
 8002cb6:	e000      	b.n	8002cba <PCD8544_Refresh+0x8e>
			break;
 8002cb8:	bf00      	nop
		}
	}

	PCD8544_UpdateXmin = PCD8544_WIDTH - 1;
 8002cba:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <PCD8544_Refresh+0xb8>)
 8002cbc:	2253      	movs	r2, #83	; 0x53
 8002cbe:	701a      	strb	r2, [r3, #0]
	PCD8544_UpdateXmax = 0;
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <PCD8544_Refresh+0xc0>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
	PCD8544_UpdateYmin = PCD8544_HEIGHT - 1;
 8002cc6:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <PCD8544_Refresh+0xb0>)
 8002cc8:	222f      	movs	r2, #47	; 0x2f
 8002cca:	701a      	strb	r2, [r3, #0]
	PCD8544_UpdateYmax = 0;
 8002ccc:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <PCD8544_Refresh+0xb4>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20001e32 	.word	0x20001e32
 8002ce0:	20001e33 	.word	0x20001e33
 8002ce4:	20001e30 	.word	0x20001e30
 8002ce8:	20001c38 	.word	0x20001c38
 8002cec:	20001e31 	.word	0x20001e31

08002cf0 <PCD8544_UpdateArea>:

void PCD8544_UpdateArea(unsigned char xMin, unsigned char yMin, unsigned char xMax, unsigned char yMax) {
 8002cf0:	b490      	push	{r4, r7}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4604      	mov	r4, r0
 8002cf8:	4608      	mov	r0, r1
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4623      	mov	r3, r4
 8002d00:	71fb      	strb	r3, [r7, #7]
 8002d02:	4603      	mov	r3, r0
 8002d04:	71bb      	strb	r3, [r7, #6]
 8002d06:	460b      	mov	r3, r1
 8002d08:	717b      	strb	r3, [r7, #5]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	713b      	strb	r3, [r7, #4]
	if (xMin < PCD8544_UpdateXmin) {
 8002d0e:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <PCD8544_UpdateArea+0x68>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	79fa      	ldrb	r2, [r7, #7]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d202      	bcs.n	8002d1e <PCD8544_UpdateArea+0x2e>
		PCD8544_UpdateXmin = xMin;
 8002d18:	4a0f      	ldr	r2, [pc, #60]	; (8002d58 <PCD8544_UpdateArea+0x68>)
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	7013      	strb	r3, [r2, #0]
	}
	if (xMax > PCD8544_UpdateXmax) {
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <PCD8544_UpdateArea+0x6c>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	797a      	ldrb	r2, [r7, #5]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d902      	bls.n	8002d2e <PCD8544_UpdateArea+0x3e>
		PCD8544_UpdateXmax = xMax;
 8002d28:	4a0c      	ldr	r2, [pc, #48]	; (8002d5c <PCD8544_UpdateArea+0x6c>)
 8002d2a:	797b      	ldrb	r3, [r7, #5]
 8002d2c:	7013      	strb	r3, [r2, #0]
	}
	if (yMin < PCD8544_UpdateYmin) {
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <PCD8544_UpdateArea+0x70>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	79ba      	ldrb	r2, [r7, #6]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d202      	bcs.n	8002d3e <PCD8544_UpdateArea+0x4e>
		PCD8544_UpdateYmin = yMin;
 8002d38:	4a09      	ldr	r2, [pc, #36]	; (8002d60 <PCD8544_UpdateArea+0x70>)
 8002d3a:	79bb      	ldrb	r3, [r7, #6]
 8002d3c:	7013      	strb	r3, [r2, #0]
	}
	if (yMax > PCD8544_UpdateYmax) {
 8002d3e:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <PCD8544_UpdateArea+0x74>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	793a      	ldrb	r2, [r7, #4]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d902      	bls.n	8002d4e <PCD8544_UpdateArea+0x5e>
		PCD8544_UpdateYmax = yMax;
 8002d48:	4a06      	ldr	r2, [pc, #24]	; (8002d64 <PCD8544_UpdateArea+0x74>)
 8002d4a:	793b      	ldrb	r3, [r7, #4]
 8002d4c:	7013      	strb	r3, [r2, #0]
	}
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc90      	pop	{r4, r7}
 8002d56:	4770      	bx	lr
 8002d58:	20001e30 	.word	0x20001e30
 8002d5c:	20001e31 	.word	0x20001e31
 8002d60:	20001e32 	.word	0x20001e32
 8002d64:	20001e33 	.word	0x20001e33

08002d68 <PCD8544_GotoXY>:

void PCD8544_GotoXY(unsigned char x, unsigned char y) {
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	460a      	mov	r2, r1
 8002d72:	71fb      	strb	r3, [r7, #7]
 8002d74:	4613      	mov	r3, r2
 8002d76:	71bb      	strb	r3, [r7, #6]
	PCD8544_x = x;
 8002d78:	4a05      	ldr	r2, [pc, #20]	; (8002d90 <PCD8544_GotoXY+0x28>)
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	7013      	strb	r3, [r2, #0]
	PCD8544_y = y;
 8002d7e:	4a05      	ldr	r2, [pc, #20]	; (8002d94 <PCD8544_GotoXY+0x2c>)
 8002d80:	79bb      	ldrb	r3, [r7, #6]
 8002d82:	7013      	strb	r3, [r2, #0]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	20001e34 	.word	0x20001e34
 8002d94:	20001e35 	.word	0x20001e35

08002d98 <PCD8544_Putc>:

void PCD8544_Putc(char c, PCD8544_Pixel_t color, PCD8544_FontSize_t size) {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	71fb      	strb	r3, [r7, #7]
 8002da2:	460b      	mov	r3, r1
 8002da4:	71bb      	strb	r3, [r7, #6]
 8002da6:	4613      	mov	r3, r2
 8002da8:	717b      	strb	r3, [r7, #5]
	unsigned char c_height, c_width, i, b, j;
	if (size == PCD8544_FontSize_3x5) {
 8002daa:	797b      	ldrb	r3, [r7, #5]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d104      	bne.n	8002dba <PCD8544_Putc+0x22>
		c_width = PCD8544_CHAR3x5_WIDTH;
 8002db0:	2304      	movs	r3, #4
 8002db2:	73bb      	strb	r3, [r7, #14]
		c_height = PCD8544_CHAR3x5_HEIGHT;
 8002db4:	2306      	movs	r3, #6
 8002db6:	73fb      	strb	r3, [r7, #15]
 8002db8:	e003      	b.n	8002dc2 <PCD8544_Putc+0x2a>
	} else {
		c_width = PCD8544_CHAR5x7_WIDTH;
 8002dba:	2306      	movs	r3, #6
 8002dbc:	73bb      	strb	r3, [r7, #14]
		c_height = PCD8544_CHAR5x7_HEIGHT;
 8002dbe:	2308      	movs	r3, #8
 8002dc0:	73fb      	strb	r3, [r7, #15]
	}
	if ((PCD8544_x + c_width) > PCD8544_WIDTH) {
 8002dc2:	4b46      	ldr	r3, [pc, #280]	; (8002edc <PCD8544_Putc+0x144>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	7bbb      	ldrb	r3, [r7, #14]
 8002dca:	4413      	add	r3, r2
 8002dcc:	2b54      	cmp	r3, #84	; 0x54
 8002dce:	dd09      	ble.n	8002de4 <PCD8544_Putc+0x4c>
		//If at the end of a line of display, go to new line and set x to 0 position
		PCD8544_y += c_height;
 8002dd0:	4b43      	ldr	r3, [pc, #268]	; (8002ee0 <PCD8544_Putc+0x148>)
 8002dd2:	781a      	ldrb	r2, [r3, #0]
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	4b41      	ldr	r3, [pc, #260]	; (8002ee0 <PCD8544_Putc+0x148>)
 8002ddc:	701a      	strb	r2, [r3, #0]
		PCD8544_x = 0;
 8002dde:	4b3f      	ldr	r3, [pc, #252]	; (8002edc <PCD8544_Putc+0x144>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < c_width - 1; i++) {
 8002de4:	2300      	movs	r3, #0
 8002de6:	737b      	strb	r3, [r7, #13]
 8002de8:	e068      	b.n	8002ebc <PCD8544_Putc+0x124>
		if (c < 32) {
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	2b1f      	cmp	r3, #31
 8002dee:	d91c      	bls.n	8002e2a <PCD8544_Putc+0x92>
			//b = _custom_chars[_font_size][(uint8_t)chr][i];
		} else if (size == PCD8544_FontSize_3x5) {
 8002df0:	797b      	ldrb	r3, [r7, #5]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d10c      	bne.n	8002e10 <PCD8544_Putc+0x78>
			b = PCD8544_Font3x5[c - 32][i];
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	f1a3 0220 	sub.w	r2, r3, #32
 8002dfc:	7b79      	ldrb	r1, [r7, #13]
 8002dfe:	4839      	ldr	r0, [pc, #228]	; (8002ee4 <PCD8544_Putc+0x14c>)
 8002e00:	4613      	mov	r3, r2
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	4413      	add	r3, r2
 8002e06:	4403      	add	r3, r0
 8002e08:	440b      	add	r3, r1
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	733b      	strb	r3, [r7, #12]
 8002e0e:	e00c      	b.n	8002e2a <PCD8544_Putc+0x92>
		} else {
			b = PCD8544_Font5x7[c - 32][i];
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	f1a3 0220 	sub.w	r2, r3, #32
 8002e16:	7b79      	ldrb	r1, [r7, #13]
 8002e18:	4833      	ldr	r0, [pc, #204]	; (8002ee8 <PCD8544_Putc+0x150>)
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	4413      	add	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4403      	add	r3, r0
 8002e24:	440b      	add	r3, r1
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	733b      	strb	r3, [r7, #12]
		}
		if (b == 0x00 && (c != 0 && c != 32)) {
 8002e2a:	7b3b      	ldrb	r3, [r7, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d105      	bne.n	8002e3c <PCD8544_Putc+0xa4>
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <PCD8544_Putc+0xa4>
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d13b      	bne.n	8002eb4 <PCD8544_Putc+0x11c>
			continue;
		}
		for (j = 0; j < c_height; j++) {
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	72fb      	strb	r3, [r7, #11]
 8002e40:	e02d      	b.n	8002e9e <PCD8544_Putc+0x106>
			if (color == PCD8544_Pixel_Set) {
 8002e42:	79bb      	ldrb	r3, [r7, #6]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d112      	bne.n	8002e6e <PCD8544_Putc+0xd6>
				PCD8544_DrawPixel(PCD8544_x, (PCD8544_y + j), ((b >> j) & 1) ? PCD8544_Pixel_Set : PCD8544_Pixel_Clear);
 8002e48:	4b24      	ldr	r3, [pc, #144]	; (8002edc <PCD8544_Putc+0x144>)
 8002e4a:	7818      	ldrb	r0, [r3, #0]
 8002e4c:	4b24      	ldr	r3, [pc, #144]	; (8002ee0 <PCD8544_Putc+0x148>)
 8002e4e:	781a      	ldrb	r2, [r3, #0]
 8002e50:	7afb      	ldrb	r3, [r7, #11]
 8002e52:	4413      	add	r3, r2
 8002e54:	b2d9      	uxtb	r1, r3
 8002e56:	7b3a      	ldrb	r2, [r7, #12]
 8002e58:	7afb      	ldrb	r3, [r7, #11]
 8002e5a:	fa42 f303 	asr.w	r3, r2, r3
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	f7ff fe50 	bl	8002b0c <PCD8544_DrawPixel>
 8002e6c:	e014      	b.n	8002e98 <PCD8544_Putc+0x100>
			} else {
				PCD8544_DrawPixel(PCD8544_x, (PCD8544_y + j), ((b >> j) & 1) ? PCD8544_Pixel_Clear : PCD8544_Pixel_Set);
 8002e6e:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <PCD8544_Putc+0x144>)
 8002e70:	7818      	ldrb	r0, [r3, #0]
 8002e72:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <PCD8544_Putc+0x148>)
 8002e74:	781a      	ldrb	r2, [r3, #0]
 8002e76:	7afb      	ldrb	r3, [r7, #11]
 8002e78:	4413      	add	r3, r2
 8002e7a:	b2d9      	uxtb	r1, r3
 8002e7c:	7b3a      	ldrb	r2, [r7, #12]
 8002e7e:	7afb      	ldrb	r3, [r7, #11]
 8002e80:	fa42 f303 	asr.w	r3, r2, r3
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	461a      	mov	r2, r3
 8002e94:	f7ff fe3a 	bl	8002b0c <PCD8544_DrawPixel>
		for (j = 0; j < c_height; j++) {
 8002e98:	7afb      	ldrb	r3, [r7, #11]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	72fb      	strb	r3, [r7, #11]
 8002e9e:	7afa      	ldrb	r2, [r7, #11]
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d3cd      	bcc.n	8002e42 <PCD8544_Putc+0xaa>
			}
		}
		PCD8544_x++;
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	; (8002edc <PCD8544_Putc+0x144>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <PCD8544_Putc+0x144>)
 8002eb0:	701a      	strb	r2, [r3, #0]
 8002eb2:	e000      	b.n	8002eb6 <PCD8544_Putc+0x11e>
			continue;
 8002eb4:	bf00      	nop
	for (i = 0; i < c_width - 1; i++) {
 8002eb6:	7b7b      	ldrb	r3, [r7, #13]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	737b      	strb	r3, [r7, #13]
 8002ebc:	7b7a      	ldrb	r2, [r7, #13]
 8002ebe:	7bbb      	ldrb	r3, [r7, #14]
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	db91      	blt.n	8002dea <PCD8544_Putc+0x52>
	}
	PCD8544_x++;
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <PCD8544_Putc+0x144>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	4b03      	ldr	r3, [pc, #12]	; (8002edc <PCD8544_Putc+0x144>)
 8002ed0:	701a      	strb	r2, [r3, #0]
}
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20001e34 	.word	0x20001e34
 8002ee0:	20001e35 	.word	0x20001e35
 8002ee4:	0800b2f4 	.word	0x0800b2f4
 8002ee8:	0800b0ac 	.word	0x0800b0ac

08002eec <PCD8544_Puts>:

void PCD8544_Puts(char *c, PCD8544_Pixel_t color, PCD8544_FontSize_t size) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	70fb      	strb	r3, [r7, #3]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	70bb      	strb	r3, [r7, #2]
	while (*c) {
 8002efc:	e008      	b.n	8002f10 <PCD8544_Puts+0x24>
		PCD8544_Putc(*c++, color, size);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	78ba      	ldrb	r2, [r7, #2]
 8002f08:	78f9      	ldrb	r1, [r7, #3]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff ff44 	bl	8002d98 <PCD8544_Putc>
	while (*c) {
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1f2      	bne.n	8002efe <PCD8544_Puts+0x12>
	}
}
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <PCD8544_DrawLine>:

void PCD8544_DrawLine(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1, PCD8544_Pixel_t color) {
 8002f22:	b590      	push	{r4, r7, lr}
 8002f24:	b085      	sub	sp, #20
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	4604      	mov	r4, r0
 8002f2a:	4608      	mov	r0, r1
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	461a      	mov	r2, r3
 8002f30:	4623      	mov	r3, r4
 8002f32:	71fb      	strb	r3, [r7, #7]
 8002f34:	4603      	mov	r3, r0
 8002f36:	71bb      	strb	r3, [r7, #6]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	717b      	strb	r3, [r7, #5]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	713b      	strb	r3, [r7, #4]
	short dx, dy;
	short temp;

	if (x0 > x1) {
 8002f40:	79fa      	ldrb	r2, [r7, #7]
 8002f42:	797b      	ldrb	r3, [r7, #5]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d905      	bls.n	8002f54 <PCD8544_DrawLine+0x32>
		temp = x1;
 8002f48:	797b      	ldrb	r3, [r7, #5]
 8002f4a:	81fb      	strh	r3, [r7, #14]
		x1 = x0;
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	717b      	strb	r3, [r7, #5]
		x0 = temp;
 8002f50:	89fb      	ldrh	r3, [r7, #14]
 8002f52:	71fb      	strb	r3, [r7, #7]
	}
	if (y0 > y1) {
 8002f54:	79ba      	ldrb	r2, [r7, #6]
 8002f56:	793b      	ldrb	r3, [r7, #4]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d905      	bls.n	8002f68 <PCD8544_DrawLine+0x46>
		temp = y1;
 8002f5c:	793b      	ldrb	r3, [r7, #4]
 8002f5e:	81fb      	strh	r3, [r7, #14]
		y1 = y0;
 8002f60:	79bb      	ldrb	r3, [r7, #6]
 8002f62:	713b      	strb	r3, [r7, #4]
		y0 = temp;
 8002f64:	89fb      	ldrh	r3, [r7, #14]
 8002f66:	71bb      	strb	r3, [r7, #6]
	}

	dx = x1 - x0;
 8002f68:	797b      	ldrb	r3, [r7, #5]
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	81bb      	strh	r3, [r7, #12]
	dy = y1 - y0;
 8002f76:	793b      	ldrb	r3, [r7, #4]
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	79bb      	ldrb	r3, [r7, #6]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	817b      	strh	r3, [r7, #10]

	if (dx == 0) {
 8002f84:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10e      	bne.n	8002faa <PCD8544_DrawLine+0x88>
		do {
			PCD8544_DrawPixel(x0, y0, color);
 8002f8c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002f90:	79b9      	ldrb	r1, [r7, #6]
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff fdb9 	bl	8002b0c <PCD8544_DrawPixel>
			y0++;
 8002f9a:	79bb      	ldrb	r3, [r7, #6]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	71bb      	strb	r3, [r7, #6]
		} while (y1 >= y0);
 8002fa0:	793a      	ldrb	r2, [r7, #4]
 8002fa2:	79bb      	ldrb	r3, [r7, #6]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d2f1      	bcs.n	8002f8c <PCD8544_DrawLine+0x6a>
		return;
 8002fa8:	e089      	b.n	80030be <PCD8544_DrawLine+0x19c>
	}
	if (dy == 0) {
 8002faa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10e      	bne.n	8002fd0 <PCD8544_DrawLine+0xae>
		do {
			PCD8544_DrawPixel(x0, y0, color);
 8002fb2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002fb6:	79b9      	ldrb	r1, [r7, #6]
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff fda6 	bl	8002b0c <PCD8544_DrawPixel>
			x0++;
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	71fb      	strb	r3, [r7, #7]
		} while (x1 >= x0);
 8002fc6:	797a      	ldrb	r2, [r7, #5]
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d2f1      	bcs.n	8002fb2 <PCD8544_DrawLine+0x90>
		return;
 8002fce:	e076      	b.n	80030be <PCD8544_DrawLine+0x19c>
	}

	/* Based on Bresenham's line algorithm  */
	if (dx > dy) {
 8002fd0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002fd4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	dd38      	ble.n	800304e <PCD8544_DrawLine+0x12c>
		temp = 2 * dy - dx;
 8002fdc:	897b      	ldrh	r3, [r7, #10]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	89bb      	ldrh	r3, [r7, #12]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	81fb      	strh	r3, [r7, #14]
		while (x0 != x1) {
 8002fea:	e024      	b.n	8003036 <PCD8544_DrawLine+0x114>
			PCD8544_DrawPixel(x0, y0, color);
 8002fec:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002ff0:	79b9      	ldrb	r1, [r7, #6]
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fd89 	bl	8002b0c <PCD8544_DrawPixel>
			x0++;
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	71fb      	strb	r3, [r7, #7]
			if (temp > 0) {
 8003000:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003004:	2b00      	cmp	r3, #0
 8003006:	dd0f      	ble.n	8003028 <PCD8544_DrawLine+0x106>
				y0++;
 8003008:	79bb      	ldrb	r3, [r7, #6]
 800300a:	3301      	adds	r3, #1
 800300c:	71bb      	strb	r3, [r7, #6]
				temp += 2 * dy - 2 * dx;
 800300e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003012:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	b29b      	uxth	r3, r3
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	b29a      	uxth	r2, r3
 800301e:	89fb      	ldrh	r3, [r7, #14]
 8003020:	4413      	add	r3, r2
 8003022:	b29b      	uxth	r3, r3
 8003024:	81fb      	strh	r3, [r7, #14]
 8003026:	e006      	b.n	8003036 <PCD8544_DrawLine+0x114>
			} else {
				temp += 2 * dy;
 8003028:	897b      	ldrh	r3, [r7, #10]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	89fb      	ldrh	r3, [r7, #14]
 8003030:	4413      	add	r3, r2
 8003032:	b29b      	uxth	r3, r3
 8003034:	81fb      	strh	r3, [r7, #14]
		while (x0 != x1) {
 8003036:	79fa      	ldrb	r2, [r7, #7]
 8003038:	797b      	ldrb	r3, [r7, #5]
 800303a:	429a      	cmp	r2, r3
 800303c:	d1d6      	bne.n	8002fec <PCD8544_DrawLine+0xca>
			}
		}
		PCD8544_DrawPixel(x0, y0, color);
 800303e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003042:	79b9      	ldrb	r1, [r7, #6]
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff fd60 	bl	8002b0c <PCD8544_DrawPixel>
 800304c:	e037      	b.n	80030be <PCD8544_DrawLine+0x19c>
	} else {
		temp = 2 * dx - dy;
 800304e:	89bb      	ldrh	r3, [r7, #12]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	897b      	ldrh	r3, [r7, #10]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	b29b      	uxth	r3, r3
 800305a:	81fb      	strh	r3, [r7, #14]
		while (y0 != y1) {
 800305c:	e024      	b.n	80030a8 <PCD8544_DrawLine+0x186>
			PCD8544_DrawPixel(x0, y0, color);
 800305e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003062:	79b9      	ldrb	r1, [r7, #6]
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff fd50 	bl	8002b0c <PCD8544_DrawPixel>
			y0++;
 800306c:	79bb      	ldrb	r3, [r7, #6]
 800306e:	3301      	adds	r3, #1
 8003070:	71bb      	strb	r3, [r7, #6]
			if (temp > 0) {
 8003072:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003076:	2b00      	cmp	r3, #0
 8003078:	dd0f      	ble.n	800309a <PCD8544_DrawLine+0x178>
				x0++;
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	3301      	adds	r3, #1
 800307e:	71fb      	strb	r3, [r7, #7]
				temp += 2 * dy - 2 * dx;
 8003080:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003084:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	b29b      	uxth	r3, r3
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	89fb      	ldrh	r3, [r7, #14]
 8003092:	4413      	add	r3, r2
 8003094:	b29b      	uxth	r3, r3
 8003096:	81fb      	strh	r3, [r7, #14]
 8003098:	e006      	b.n	80030a8 <PCD8544_DrawLine+0x186>
			} else {
				temp += 2 * dy;
 800309a:	897b      	ldrh	r3, [r7, #10]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	89fb      	ldrh	r3, [r7, #14]
 80030a2:	4413      	add	r3, r2
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	81fb      	strh	r3, [r7, #14]
		while (y0 != y1) {
 80030a8:	79ba      	ldrb	r2, [r7, #6]
 80030aa:	793b      	ldrb	r3, [r7, #4]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d1d6      	bne.n	800305e <PCD8544_DrawLine+0x13c>
			}
		}
		PCD8544_DrawPixel(x0, y0, color);
 80030b0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80030b4:	79b9      	ldrb	r1, [r7, #6]
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff fd27 	bl	8002b0c <PCD8544_DrawPixel>
	}
}
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd90      	pop	{r4, r7, pc}

080030c4 <PCD8544_DrawFilledRectangle>:
	PCD8544_DrawLine(x0, y0, x0, y1, color);	//Left
	PCD8544_DrawLine(x1, y0, x1, y1, color);	//Right
	PCD8544_DrawLine(x0, y1, x1, y1, color);	//Bottom
}

void PCD8544_DrawFilledRectangle(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1, PCD8544_Pixel_t color) {
 80030c4:	b590      	push	{r4, r7, lr}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af02      	add	r7, sp, #8
 80030ca:	4604      	mov	r4, r0
 80030cc:	4608      	mov	r0, r1
 80030ce:	4611      	mov	r1, r2
 80030d0:	461a      	mov	r2, r3
 80030d2:	4623      	mov	r3, r4
 80030d4:	71fb      	strb	r3, [r7, #7]
 80030d6:	4603      	mov	r3, r0
 80030d8:	71bb      	strb	r3, [r7, #6]
 80030da:	460b      	mov	r3, r1
 80030dc:	717b      	strb	r3, [r7, #5]
 80030de:	4613      	mov	r3, r2
 80030e0:	713b      	strb	r3, [r7, #4]
	for (; y0 < y1; y0++) {
 80030e2:	e00b      	b.n	80030fc <PCD8544_DrawFilledRectangle+0x38>
		PCD8544_DrawLine(x0, y0, x1, y0, color);
 80030e4:	79bc      	ldrb	r4, [r7, #6]
 80030e6:	797a      	ldrb	r2, [r7, #5]
 80030e8:	79b9      	ldrb	r1, [r7, #6]
 80030ea:	79f8      	ldrb	r0, [r7, #7]
 80030ec:	7e3b      	ldrb	r3, [r7, #24]
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	4623      	mov	r3, r4
 80030f2:	f7ff ff16 	bl	8002f22 <PCD8544_DrawLine>
	for (; y0 < y1; y0++) {
 80030f6:	79bb      	ldrb	r3, [r7, #6]
 80030f8:	3301      	adds	r3, #1
 80030fa:	71bb      	strb	r3, [r7, #6]
 80030fc:	79ba      	ldrb	r2, [r7, #6]
 80030fe:	793b      	ldrb	r3, [r7, #4]
 8003100:	429a      	cmp	r2, r3
 8003102:	d3ef      	bcc.n	80030e4 <PCD8544_DrawFilledRectangle+0x20>
	}
}
 8003104:	bf00      	nop
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	bd90      	pop	{r4, r7, pc}

0800310e <scale8>:
// Peripheral usage
#include "stm32f4xx_hal.h"

#include "ws2812b.h"

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	4603      	mov	r3, r0
 8003116:	460a      	mov	r2, r1
 8003118:	71fb      	strb	r3, [r7, #7]
 800311a:	4613      	mov	r3, r2
 800311c:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	79ba      	ldrb	r2, [r7, #6]
 8003122:	fb02 f303 	mul.w	r3, r2, r3
 8003126:	121b      	asrs	r3, r3, #8
 8003128:	b2db      	uxtb	r3, r3
}
 800312a:	4618      	mov	r0, r3
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(Layers *layer, uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8003136:	b590      	push	{r4, r7, lr}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	4608      	mov	r0, r1
 8003140:	4611      	mov	r1, r2
 8003142:	461a      	mov	r2, r3
 8003144:	4603      	mov	r3, r0
 8003146:	70fb      	strb	r3, [r7, #3]
 8003148:	460b      	mov	r3, r1
 800314a:	70bb      	strb	r3, [r7, #2]
 800314c:	4613      	mov	r3, r2
 800314e:	707b      	strb	r3, [r7, #1]
	layer->rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	4613      	mov	r3, r2
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	189c      	adds	r4, r3, r2
 8003158:	787b      	ldrb	r3, [r7, #1]
 800315a:	21b0      	movs	r1, #176	; 0xb0
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff ffd6 	bl	800310e <scale8>
 8003162:	4603      	mov	r3, r0
 8003164:	461a      	mov	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4423      	add	r3, r4
 800316a:	725a      	strb	r2, [r3, #9]
	layer->rgb_arr[3 * index + 1] = r;
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	4613      	mov	r3, r2
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	4413      	add	r3, r2
 8003174:	3301      	adds	r3, #1
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	4413      	add	r3, r2
 800317a:	78ba      	ldrb	r2, [r7, #2]
 800317c:	725a      	strb	r2, [r3, #9]
	layer->rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	4613      	mov	r3, r2
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	4413      	add	r3, r2
 8003186:	1c9c      	adds	r4, r3, #2
 8003188:	7e3b      	ldrb	r3, [r7, #24]
 800318a:	21f0      	movs	r1, #240	; 0xf0
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff ffbe 	bl	800310e <scale8>
 8003192:	4603      	mov	r3, r0
 8003194:	461a      	mov	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4423      	add	r3, r4
 800319a:	725a      	strb	r2, [r3, #9]
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd90      	pop	{r4, r7, pc}

080031a4 <led_set_all_RGB>:

// Set all colors to RGB
void led_set_all_RGB(Layers *layer, uint8_t r, uint8_t g, uint8_t b) {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	4608      	mov	r0, r1
 80031ae:	4611      	mov	r1, r2
 80031b0:	461a      	mov	r2, r3
 80031b2:	4603      	mov	r3, r0
 80031b4:	70fb      	strb	r3, [r7, #3]
 80031b6:	460b      	mov	r3, r1
 80031b8:	70bb      	strb	r3, [r7, #2]
 80031ba:	4613      	mov	r3, r2
 80031bc:	707b      	strb	r3, [r7, #1]
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGB(layer, i, r, g, b);
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	e00c      	b.n	80031de <led_set_all_RGB+0x3a>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	b2d9      	uxtb	r1, r3
 80031c8:	78b8      	ldrb	r0, [r7, #2]
 80031ca:	78fa      	ldrb	r2, [r7, #3]
 80031cc:	787b      	ldrb	r3, [r7, #1]
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	4603      	mov	r3, r0
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff ffaf 	bl	8003136 <led_set_RGB>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	3301      	adds	r3, #1
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2bff      	cmp	r3, #255	; 0xff
 80031e2:	d9ef      	bls.n	80031c4 <led_set_all_RGB+0x20>
}
 80031e4:	bf00      	nop
 80031e6:	bf00      	nop
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <led_render>:

// Shuttle the data to the LEDs!
void led_render(Layers *layer) {
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  if(layer->wr_buf_p != 0 || layer->dma->State != HAL_DMA_STATE_READY) {
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d106      	bne.n	800320e <led_render+0x20>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b01      	cmp	r3, #1
 800320c:	d01d      	beq.n	800324a <led_render+0x5c>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) layer->wr_buf[i] = 0;
 800320e:	2300      	movs	r3, #0
 8003210:	73fb      	strb	r3, [r7, #15]
 8003212:	e00a      	b.n	800322a <led_render+0x3c>
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4413      	add	r3, r2
 8003220:	2200      	movs	r2, #0
 8003222:	805a      	strh	r2, [r3, #2]
 8003224:	7bfb      	ldrb	r3, [r7, #15]
 8003226:	3301      	adds	r3, #1
 8003228:	73fb      	strb	r3, [r7, #15]
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	2b2f      	cmp	r3, #47	; 0x2f
 800322e:	d9f1      	bls.n	8003214 <led_render+0x26>
    layer->wr_buf_p = 0;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
    HAL_TIM_PWM_Stop_DMA(layer->timer, layer->channel);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	7a1b      	ldrb	r3, [r3, #8]
 8003240:	4619      	mov	r1, r3
 8003242:	4610      	mov	r0, r2
 8003244:	f002 fadc 	bl	8005800 <HAL_TIM_PWM_Stop_DMA>
    return;
 8003248:	e09b      	b.n	8003382 <led_render+0x194>
  }
  // Ooh boi the first data buffer half (and the second!)
  for(uint_fast8_t i = 0; i < 8; ++i) {
 800324a:	2300      	movs	r3, #0
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	e085      	b.n	800335c <led_render+0x16e>
	  layer->wr_buf[i     ] = PWM_LO << (((layer->rgb_arr[0] << i) & 0x80) > 0);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	7a5b      	ldrb	r3, [r3, #9]
 8003254:	461a      	mov	r2, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003260:	2b00      	cmp	r3, #0
 8003262:	dd01      	ble.n	8003268 <led_render+0x7a>
 8003264:	2142      	movs	r1, #66	; 0x42
 8003266:	e000      	b.n	800326a <led_render+0x7c>
 8003268:	2121      	movs	r1, #33	; 0x21
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	4413      	add	r3, r2
 8003276:	460a      	mov	r2, r1
 8003278:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i +  8] = PWM_LO << (((layer->rgb_arr[1] << i) & 0x80) > 0);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	7a9b      	ldrb	r3, [r3, #10]
 800327e:	461a      	mov	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328a:	2b00      	cmp	r3, #0
 800328c:	dd01      	ble.n	8003292 <led_render+0xa4>
 800328e:	2142      	movs	r1, #66	; 0x42
 8003290:	e000      	b.n	8003294 <led_render+0xa6>
 8003292:	2121      	movs	r1, #33	; 0x21
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	3308      	adds	r3, #8
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	4413      	add	r3, r2
 80032a2:	460a      	mov	r2, r1
 80032a4:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i + 16] = PWM_LO << (((layer->rgb_arr[2] << i) & 0x80) > 0);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	7adb      	ldrb	r3, [r3, #11]
 80032aa:	461a      	mov	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	dd01      	ble.n	80032be <led_render+0xd0>
 80032ba:	2142      	movs	r1, #66	; 0x42
 80032bc:	e000      	b.n	80032c0 <led_render+0xd2>
 80032be:	2121      	movs	r1, #33	; 0x21
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	3310      	adds	r3, #16
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	4413      	add	r3, r2
 80032ce:	460a      	mov	r2, r1
 80032d0:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i + 24] = PWM_LO << (((layer->rgb_arr[3] << i) & 0x80) > 0);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	7b1b      	ldrb	r3, [r3, #12]
 80032d6:	461a      	mov	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	dd01      	ble.n	80032ea <led_render+0xfc>
 80032e6:	2142      	movs	r1, #66	; 0x42
 80032e8:	e000      	b.n	80032ec <led_render+0xfe>
 80032ea:	2121      	movs	r1, #33	; 0x21
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	3318      	adds	r3, #24
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	4413      	add	r3, r2
 80032fa:	460a      	mov	r2, r1
 80032fc:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i + 32] = PWM_LO << (((layer->rgb_arr[4] << i) & 0x80) > 0);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	7b5b      	ldrb	r3, [r3, #13]
 8003302:	461a      	mov	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330e:	2b00      	cmp	r3, #0
 8003310:	dd01      	ble.n	8003316 <led_render+0x128>
 8003312:	2142      	movs	r1, #66	; 0x42
 8003314:	e000      	b.n	8003318 <led_render+0x12a>
 8003316:	2121      	movs	r1, #33	; 0x21
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	3320      	adds	r3, #32
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	4413      	add	r3, r2
 8003326:	460a      	mov	r2, r1
 8003328:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i + 40] = PWM_LO << (((layer->rgb_arr[5] << i) & 0x80) > 0);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	7b9b      	ldrb	r3, [r3, #14]
 800332e:	461a      	mov	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333a:	2b00      	cmp	r3, #0
 800333c:	dd01      	ble.n	8003342 <led_render+0x154>
 800333e:	2142      	movs	r1, #66	; 0x42
 8003340:	e000      	b.n	8003344 <led_render+0x156>
 8003342:	2121      	movs	r1, #33	; 0x21
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	3328      	adds	r3, #40	; 0x28
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4413      	add	r3, r2
 8003352:	460a      	mov	r2, r1
 8003354:	805a      	strh	r2, [r3, #2]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	3301      	adds	r3, #1
 800335a:	60bb      	str	r3, [r7, #8]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b07      	cmp	r3, #7
 8003360:	f67f af76 	bls.w	8003250 <led_render+0x62>
  }
  HAL_TIM_PWM_Start_DMA(layer->timer, layer->channel, (uint32_t *)layer->wr_buf, WR_BUF_LEN);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6818      	ldr	r0, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	7a1b      	ldrb	r3, [r3, #8]
 800336c:	4619      	mov	r1, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f203 320a 	addw	r2, r3, #778	; 0x30a
 8003374:	2330      	movs	r3, #48	; 0x30
 8003376:	f002 f893 	bl	80054a0 <HAL_TIM_PWM_Start_DMA>
  layer->wr_buf_p = 2; // Since we're ready for the next buffer
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2202      	movs	r2, #2
 800337e:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
}
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800338c:	480d      	ldr	r0, [pc, #52]	; (80033c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800338e:	490e      	ldr	r1, [pc, #56]	; (80033c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003390:	4a0e      	ldr	r2, [pc, #56]	; (80033cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003394:	e002      	b.n	800339c <LoopCopyDataInit>

08003396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800339a:	3304      	adds	r3, #4

0800339c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800339c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800339e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033a0:	d3f9      	bcc.n	8003396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033a2:	4a0b      	ldr	r2, [pc, #44]	; (80033d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033a4:	4c0b      	ldr	r4, [pc, #44]	; (80033d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80033a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033a8:	e001      	b.n	80033ae <LoopFillZerobss>

080033aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033ac:	3204      	adds	r2, #4

080033ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033b0:	d3fb      	bcc.n	80033aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033b2:	f7ff fad7 	bl	8002964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033b6:	f006 ffcd 	bl	800a354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033ba:	f7fd f8eb 	bl	8000594 <main>
  bx  lr    
 80033be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80033c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80033c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033c8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80033cc:	0800b600 	.word	0x0800b600
  ldr r2, =_sbss
 80033d0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80033d4:	20001e94 	.word	0x20001e94

080033d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033d8:	e7fe      	b.n	80033d8 <ADC_IRQHandler>
	...

080033dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033e0:	4b0e      	ldr	r3, [pc, #56]	; (800341c <HAL_Init+0x40>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a0d      	ldr	r2, [pc, #52]	; (800341c <HAL_Init+0x40>)
 80033e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <HAL_Init+0x40>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a0a      	ldr	r2, [pc, #40]	; (800341c <HAL_Init+0x40>)
 80033f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033f8:	4b08      	ldr	r3, [pc, #32]	; (800341c <HAL_Init+0x40>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a07      	ldr	r2, [pc, #28]	; (800341c <HAL_Init+0x40>)
 80033fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003402:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003404:	2003      	movs	r0, #3
 8003406:	f000 f94f 	bl	80036a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800340a:	2000      	movs	r0, #0
 800340c:	f000 f808 	bl	8003420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003410:	f7fe feb6 	bl	8002180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40023c00 	.word	0x40023c00

08003420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003428:	4b12      	ldr	r3, [pc, #72]	; (8003474 <HAL_InitTick+0x54>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4b12      	ldr	r3, [pc, #72]	; (8003478 <HAL_InitTick+0x58>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	4619      	mov	r1, r3
 8003432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003436:	fbb3 f3f1 	udiv	r3, r3, r1
 800343a:	fbb2 f3f3 	udiv	r3, r2, r3
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f967 	bl	8003712 <HAL_SYSTICK_Config>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e00e      	b.n	800346c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b0f      	cmp	r3, #15
 8003452:	d80a      	bhi.n	800346a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003454:	2200      	movs	r2, #0
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	f04f 30ff 	mov.w	r0, #4294967295
 800345c:	f000 f92f 	bl	80036be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003460:	4a06      	ldr	r2, [pc, #24]	; (800347c <HAL_InitTick+0x5c>)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	e000      	b.n	800346c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000000 	.word	0x20000000
 8003478:	20000008 	.word	0x20000008
 800347c:	20000004 	.word	0x20000004

08003480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_IncTick+0x20>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_IncTick+0x24>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4413      	add	r3, r2
 8003490:	4a04      	ldr	r2, [pc, #16]	; (80034a4 <HAL_IncTick+0x24>)
 8003492:	6013      	str	r3, [r2, #0]
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	20000008 	.word	0x20000008
 80034a4:	20001e38 	.word	0x20001e38

080034a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return uwTick;
 80034ac:	4b03      	ldr	r3, [pc, #12]	; (80034bc <HAL_GetTick+0x14>)
 80034ae:	681b      	ldr	r3, [r3, #0]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	20001e38 	.word	0x20001e38

080034c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034c8:	f7ff ffee 	bl	80034a8 <HAL_GetTick>
 80034cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d8:	d005      	beq.n	80034e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034da:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <HAL_Delay+0x44>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4413      	add	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034e6:	bf00      	nop
 80034e8:	f7ff ffde 	bl	80034a8 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d8f7      	bhi.n	80034e8 <HAL_Delay+0x28>
  {
  }
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000008 	.word	0x20000008

08003508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <__NVIC_SetPriorityGrouping+0x44>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003524:	4013      	ands	r3, r2
 8003526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800353a:	4a04      	ldr	r2, [pc, #16]	; (800354c <__NVIC_SetPriorityGrouping+0x44>)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	60d3      	str	r3, [r2, #12]
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003554:	4b04      	ldr	r3, [pc, #16]	; (8003568 <__NVIC_GetPriorityGrouping+0x18>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	0a1b      	lsrs	r3, r3, #8
 800355a:	f003 0307 	and.w	r3, r3, #7
}
 800355e:	4618      	mov	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	e000ed00 	.word	0xe000ed00

0800356c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357a:	2b00      	cmp	r3, #0
 800357c:	db0b      	blt.n	8003596 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	f003 021f 	and.w	r2, r3, #31
 8003584:	4907      	ldr	r1, [pc, #28]	; (80035a4 <__NVIC_EnableIRQ+0x38>)
 8003586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	2001      	movs	r0, #1
 800358e:	fa00 f202 	lsl.w	r2, r0, r2
 8003592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	e000e100 	.word	0xe000e100

080035a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	6039      	str	r1, [r7, #0]
 80035b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	db0a      	blt.n	80035d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	490c      	ldr	r1, [pc, #48]	; (80035f4 <__NVIC_SetPriority+0x4c>)
 80035c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c6:	0112      	lsls	r2, r2, #4
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	440b      	add	r3, r1
 80035cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035d0:	e00a      	b.n	80035e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	4908      	ldr	r1, [pc, #32]	; (80035f8 <__NVIC_SetPriority+0x50>)
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	3b04      	subs	r3, #4
 80035e0:	0112      	lsls	r2, r2, #4
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	440b      	add	r3, r1
 80035e6:	761a      	strb	r2, [r3, #24]
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	e000e100 	.word	0xe000e100
 80035f8:	e000ed00 	.word	0xe000ed00

080035fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b089      	sub	sp, #36	; 0x24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f1c3 0307 	rsb	r3, r3, #7
 8003616:	2b04      	cmp	r3, #4
 8003618:	bf28      	it	cs
 800361a:	2304      	movcs	r3, #4
 800361c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	3304      	adds	r3, #4
 8003622:	2b06      	cmp	r3, #6
 8003624:	d902      	bls.n	800362c <NVIC_EncodePriority+0x30>
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	3b03      	subs	r3, #3
 800362a:	e000      	b.n	800362e <NVIC_EncodePriority+0x32>
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003630:	f04f 32ff 	mov.w	r2, #4294967295
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	43da      	mvns	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	401a      	ands	r2, r3
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003644:	f04f 31ff 	mov.w	r1, #4294967295
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	fa01 f303 	lsl.w	r3, r1, r3
 800364e:	43d9      	mvns	r1, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003654:	4313      	orrs	r3, r2
         );
}
 8003656:	4618      	mov	r0, r3
 8003658:	3724      	adds	r7, #36	; 0x24
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
	...

08003664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3b01      	subs	r3, #1
 8003670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003674:	d301      	bcc.n	800367a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003676:	2301      	movs	r3, #1
 8003678:	e00f      	b.n	800369a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800367a:	4a0a      	ldr	r2, [pc, #40]	; (80036a4 <SysTick_Config+0x40>)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3b01      	subs	r3, #1
 8003680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003682:	210f      	movs	r1, #15
 8003684:	f04f 30ff 	mov.w	r0, #4294967295
 8003688:	f7ff ff8e 	bl	80035a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800368c:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <SysTick_Config+0x40>)
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003692:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <SysTick_Config+0x40>)
 8003694:	2207      	movs	r2, #7
 8003696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	e000e010 	.word	0xe000e010

080036a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ff29 	bl	8003508 <__NVIC_SetPriorityGrouping>
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036be:	b580      	push	{r7, lr}
 80036c0:	b086      	sub	sp, #24
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	4603      	mov	r3, r0
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	607a      	str	r2, [r7, #4]
 80036ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036d0:	f7ff ff3e 	bl	8003550 <__NVIC_GetPriorityGrouping>
 80036d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	6978      	ldr	r0, [r7, #20]
 80036dc:	f7ff ff8e 	bl	80035fc <NVIC_EncodePriority>
 80036e0:	4602      	mov	r2, r0
 80036e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff ff5d 	bl	80035a8 <__NVIC_SetPriority>
}
 80036ee:	bf00      	nop
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	4603      	mov	r3, r0
 80036fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff ff31 	bl	800356c <__NVIC_EnableIRQ>
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff ffa2 	bl	8003664 <SysTick_Config>
 8003720:	4603      	mov	r3, r0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003738:	f7ff feb6 	bl	80034a8 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e099      	b.n	800387c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0201 	bic.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003768:	e00f      	b.n	800378a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800376a:	f7ff fe9d 	bl	80034a8 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b05      	cmp	r3, #5
 8003776:	d908      	bls.n	800378a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2203      	movs	r2, #3
 8003782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e078      	b.n	800387c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1e8      	bne.n	800376a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	4b38      	ldr	r3, [pc, #224]	; (8003884 <HAL_DMA_Init+0x158>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d107      	bne.n	80037f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	4313      	orrs	r3, r2
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f023 0307 	bic.w	r3, r3, #7
 800380a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	2b04      	cmp	r3, #4
 800381c:	d117      	bne.n	800384e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00e      	beq.n	800384e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 fa91 	bl	8003d58 <DMA_CheckFifoParam>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d008      	beq.n	800384e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2240      	movs	r2, #64	; 0x40
 8003840:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800384a:	2301      	movs	r3, #1
 800384c:	e016      	b.n	800387c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fa48 	bl	8003cec <DMA_CalcBaseAndBitshift>
 800385c:	4603      	mov	r3, r0
 800385e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003864:	223f      	movs	r2, #63	; 0x3f
 8003866:	409a      	lsls	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	f010803f 	.word	0xf010803f

08003888 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_DMA_Start_IT+0x26>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e040      	b.n	8003930 <HAL_DMA_Start_IT+0xa8>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d12f      	bne.n	8003922 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2202      	movs	r2, #2
 80038c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	68b9      	ldr	r1, [r7, #8]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 f9da 	bl	8003c90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e0:	223f      	movs	r2, #63	; 0x3f
 80038e2:	409a      	lsls	r2, r3
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0216 	orr.w	r2, r2, #22
 80038f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d007      	beq.n	8003910 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0208 	orr.w	r2, r2, #8
 800390e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	e005      	b.n	800392e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800392a:	2302      	movs	r3, #2
 800392c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800392e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d004      	beq.n	8003956 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2280      	movs	r2, #128	; 0x80
 8003950:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e00c      	b.n	8003970 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2205      	movs	r2, #5
 800395a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0201 	bic.w	r2, r2, #1
 800396c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003988:	4b8e      	ldr	r3, [pc, #568]	; (8003bc4 <HAL_DMA_IRQHandler+0x248>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a8e      	ldr	r2, [pc, #568]	; (8003bc8 <HAL_DMA_IRQHandler+0x24c>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	0a9b      	lsrs	r3, r3, #10
 8003994:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a6:	2208      	movs	r2, #8
 80039a8:	409a      	lsls	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4013      	ands	r3, r2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d01a      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d013      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0204 	bic.w	r2, r2, #4
 80039ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d4:	2208      	movs	r2, #8
 80039d6:	409a      	lsls	r2, r3
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e0:	f043 0201 	orr.w	r2, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ec:	2201      	movs	r2, #1
 80039ee:	409a      	lsls	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4013      	ands	r3, r2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d012      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00b      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	409a      	lsls	r2, r3
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a16:	f043 0202 	orr.w	r2, r3, #2
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a22:	2204      	movs	r2, #4
 8003a24:	409a      	lsls	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d012      	beq.n	8003a54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00b      	beq.n	8003a54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a40:	2204      	movs	r2, #4
 8003a42:	409a      	lsls	r2, r3
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4c:	f043 0204 	orr.w	r2, r3, #4
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a58:	2210      	movs	r2, #16
 8003a5a:	409a      	lsls	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d043      	beq.n	8003aec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d03c      	beq.n	8003aec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a76:	2210      	movs	r2, #16
 8003a78:	409a      	lsls	r2, r3
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d018      	beq.n	8003abe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d108      	bne.n	8003aac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d024      	beq.n	8003aec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	4798      	blx	r3
 8003aaa:	e01f      	b.n	8003aec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d01b      	beq.n	8003aec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	4798      	blx	r3
 8003abc:	e016      	b.n	8003aec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d107      	bne.n	8003adc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0208 	bic.w	r2, r2, #8
 8003ada:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af0:	2220      	movs	r2, #32
 8003af2:	409a      	lsls	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 808f 	beq.w	8003c1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 8087 	beq.w	8003c1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b12:	2220      	movs	r2, #32
 8003b14:	409a      	lsls	r2, r3
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b05      	cmp	r3, #5
 8003b24:	d136      	bne.n	8003b94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0216 	bic.w	r2, r2, #22
 8003b34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695a      	ldr	r2, [r3, #20]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d103      	bne.n	8003b56 <HAL_DMA_IRQHandler+0x1da>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d007      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0208 	bic.w	r2, r2, #8
 8003b64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6a:	223f      	movs	r2, #63	; 0x3f
 8003b6c:	409a      	lsls	r2, r3
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d07e      	beq.n	8003c88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	4798      	blx	r3
        }
        return;
 8003b92:	e079      	b.n	8003c88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d01d      	beq.n	8003bde <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10d      	bne.n	8003bcc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d031      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	4798      	blx	r3
 8003bc0:	e02c      	b.n	8003c1c <HAL_DMA_IRQHandler+0x2a0>
 8003bc2:	bf00      	nop
 8003bc4:	20000000 	.word	0x20000000
 8003bc8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d023      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	4798      	blx	r3
 8003bdc:	e01e      	b.n	8003c1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10f      	bne.n	8003c0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0210 	bic.w	r2, r2, #16
 8003bfa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d032      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d022      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2205      	movs	r2, #5
 8003c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0201 	bic.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d307      	bcc.n	8003c64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f2      	bne.n	8003c48 <HAL_DMA_IRQHandler+0x2cc>
 8003c62:	e000      	b.n	8003c66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d005      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	4798      	blx	r3
 8003c86:	e000      	b.n	8003c8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c88:	bf00      	nop
    }
  }
}
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b40      	cmp	r3, #64	; 0x40
 8003cbc:	d108      	bne.n	8003cd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cce:	e007      	b.n	8003ce0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	60da      	str	r2, [r3, #12]
}
 8003ce0:	bf00      	nop
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	3b10      	subs	r3, #16
 8003cfc:	4a14      	ldr	r2, [pc, #80]	; (8003d50 <DMA_CalcBaseAndBitshift+0x64>)
 8003cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003d02:	091b      	lsrs	r3, r3, #4
 8003d04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d06:	4a13      	ldr	r2, [pc, #76]	; (8003d54 <DMA_CalcBaseAndBitshift+0x68>)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d909      	bls.n	8003d2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d22:	f023 0303 	bic.w	r3, r3, #3
 8003d26:	1d1a      	adds	r2, r3, #4
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	659a      	str	r2, [r3, #88]	; 0x58
 8003d2c:	e007      	b.n	8003d3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d36:	f023 0303 	bic.w	r3, r3, #3
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	aaaaaaab 	.word	0xaaaaaaab
 8003d54:	0800b434 	.word	0x0800b434

08003d58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d11f      	bne.n	8003db2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d856      	bhi.n	8003e26 <DMA_CheckFifoParam+0xce>
 8003d78:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <DMA_CheckFifoParam+0x28>)
 8003d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7e:	bf00      	nop
 8003d80:	08003d91 	.word	0x08003d91
 8003d84:	08003da3 	.word	0x08003da3
 8003d88:	08003d91 	.word	0x08003d91
 8003d8c:	08003e27 	.word	0x08003e27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d046      	beq.n	8003e2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da0:	e043      	b.n	8003e2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003daa:	d140      	bne.n	8003e2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db0:	e03d      	b.n	8003e2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dba:	d121      	bne.n	8003e00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	d837      	bhi.n	8003e32 <DMA_CheckFifoParam+0xda>
 8003dc2:	a201      	add	r2, pc, #4	; (adr r2, 8003dc8 <DMA_CheckFifoParam+0x70>)
 8003dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc8:	08003dd9 	.word	0x08003dd9
 8003dcc:	08003ddf 	.word	0x08003ddf
 8003dd0:	08003dd9 	.word	0x08003dd9
 8003dd4:	08003df1 	.word	0x08003df1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	73fb      	strb	r3, [r7, #15]
      break;
 8003ddc:	e030      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d025      	beq.n	8003e36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dee:	e022      	b.n	8003e36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003df8:	d11f      	bne.n	8003e3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dfe:	e01c      	b.n	8003e3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d903      	bls.n	8003e0e <DMA_CheckFifoParam+0xb6>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d003      	beq.n	8003e14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e0c:	e018      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
      break;
 8003e12:	e015      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00e      	beq.n	8003e3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	73fb      	strb	r3, [r7, #15]
      break;
 8003e24:	e00b      	b.n	8003e3e <DMA_CheckFifoParam+0xe6>
      break;
 8003e26:	bf00      	nop
 8003e28:	e00a      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
      break;
 8003e2a:	bf00      	nop
 8003e2c:	e008      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
      break;
 8003e2e:	bf00      	nop
 8003e30:	e006      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
      break;
 8003e32:	bf00      	nop
 8003e34:	e004      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
      break;
 8003e36:	bf00      	nop
 8003e38:	e002      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e3a:	bf00      	nop
 8003e3c:	e000      	b.n	8003e40 <DMA_CheckFifoParam+0xe8>
      break;
 8003e3e:	bf00      	nop
    }
  } 
  
  return status; 
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop

08003e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b089      	sub	sp, #36	; 0x24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
 8003e6a:	e159      	b.n	8004120 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	f040 8148 	bne.w	800411a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d005      	beq.n	8003ea2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d130      	bne.n	8003f04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	2203      	movs	r2, #3
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ed8:	2201      	movs	r2, #1
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	091b      	lsrs	r3, r3, #4
 8003eee:	f003 0201 	and.w	r2, r3, #1
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 0303 	and.w	r3, r3, #3
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d017      	beq.n	8003f40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	2203      	movs	r2, #3
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	43db      	mvns	r3, r3
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	4013      	ands	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d123      	bne.n	8003f94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	08da      	lsrs	r2, r3, #3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3208      	adds	r2, #8
 8003f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	220f      	movs	r2, #15
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	691a      	ldr	r2, [r3, #16]
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	08da      	lsrs	r2, r3, #3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	3208      	adds	r2, #8
 8003f8e:	69b9      	ldr	r1, [r7, #24]
 8003f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	2203      	movs	r2, #3
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f003 0203 	and.w	r2, r3, #3
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 80a2 	beq.w	800411a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	4b57      	ldr	r3, [pc, #348]	; (8004138 <HAL_GPIO_Init+0x2e8>)
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fde:	4a56      	ldr	r2, [pc, #344]	; (8004138 <HAL_GPIO_Init+0x2e8>)
 8003fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8003fe6:	4b54      	ldr	r3, [pc, #336]	; (8004138 <HAL_GPIO_Init+0x2e8>)
 8003fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ff2:	4a52      	ldr	r2, [pc, #328]	; (800413c <HAL_GPIO_Init+0x2ec>)
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	089b      	lsrs	r3, r3, #2
 8003ff8:	3302      	adds	r3, #2
 8003ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	220f      	movs	r2, #15
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	43db      	mvns	r3, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4013      	ands	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a49      	ldr	r2, [pc, #292]	; (8004140 <HAL_GPIO_Init+0x2f0>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d019      	beq.n	8004052 <HAL_GPIO_Init+0x202>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a48      	ldr	r2, [pc, #288]	; (8004144 <HAL_GPIO_Init+0x2f4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d013      	beq.n	800404e <HAL_GPIO_Init+0x1fe>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a47      	ldr	r2, [pc, #284]	; (8004148 <HAL_GPIO_Init+0x2f8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00d      	beq.n	800404a <HAL_GPIO_Init+0x1fa>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a46      	ldr	r2, [pc, #280]	; (800414c <HAL_GPIO_Init+0x2fc>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d007      	beq.n	8004046 <HAL_GPIO_Init+0x1f6>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a45      	ldr	r2, [pc, #276]	; (8004150 <HAL_GPIO_Init+0x300>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d101      	bne.n	8004042 <HAL_GPIO_Init+0x1f2>
 800403e:	2304      	movs	r3, #4
 8004040:	e008      	b.n	8004054 <HAL_GPIO_Init+0x204>
 8004042:	2307      	movs	r3, #7
 8004044:	e006      	b.n	8004054 <HAL_GPIO_Init+0x204>
 8004046:	2303      	movs	r3, #3
 8004048:	e004      	b.n	8004054 <HAL_GPIO_Init+0x204>
 800404a:	2302      	movs	r3, #2
 800404c:	e002      	b.n	8004054 <HAL_GPIO_Init+0x204>
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <HAL_GPIO_Init+0x204>
 8004052:	2300      	movs	r3, #0
 8004054:	69fa      	ldr	r2, [r7, #28]
 8004056:	f002 0203 	and.w	r2, r2, #3
 800405a:	0092      	lsls	r2, r2, #2
 800405c:	4093      	lsls	r3, r2
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	4313      	orrs	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004064:	4935      	ldr	r1, [pc, #212]	; (800413c <HAL_GPIO_Init+0x2ec>)
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	089b      	lsrs	r3, r3, #2
 800406a:	3302      	adds	r3, #2
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004072:	4b38      	ldr	r3, [pc, #224]	; (8004154 <HAL_GPIO_Init+0x304>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	43db      	mvns	r3, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4013      	ands	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	4313      	orrs	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004096:	4a2f      	ldr	r2, [pc, #188]	; (8004154 <HAL_GPIO_Init+0x304>)
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800409c:	4b2d      	ldr	r3, [pc, #180]	; (8004154 <HAL_GPIO_Init+0x304>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	43db      	mvns	r3, r3
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4013      	ands	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040c0:	4a24      	ldr	r2, [pc, #144]	; (8004154 <HAL_GPIO_Init+0x304>)
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040c6:	4b23      	ldr	r3, [pc, #140]	; (8004154 <HAL_GPIO_Init+0x304>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	43db      	mvns	r3, r3
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	4013      	ands	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040ea:	4a1a      	ldr	r2, [pc, #104]	; (8004154 <HAL_GPIO_Init+0x304>)
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040f0:	4b18      	ldr	r3, [pc, #96]	; (8004154 <HAL_GPIO_Init+0x304>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004114:	4a0f      	ldr	r2, [pc, #60]	; (8004154 <HAL_GPIO_Init+0x304>)
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	3301      	adds	r3, #1
 800411e:	61fb      	str	r3, [r7, #28]
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	2b0f      	cmp	r3, #15
 8004124:	f67f aea2 	bls.w	8003e6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004128:	bf00      	nop
 800412a:	bf00      	nop
 800412c:	3724      	adds	r7, #36	; 0x24
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40023800 	.word	0x40023800
 800413c:	40013800 	.word	0x40013800
 8004140:	40020000 	.word	0x40020000
 8004144:	40020400 	.word	0x40020400
 8004148:	40020800 	.word	0x40020800
 800414c:	40020c00 	.word	0x40020c00
 8004150:	40021000 	.word	0x40021000
 8004154:	40013c00 	.word	0x40013c00

08004158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	807b      	strh	r3, [r7, #2]
 8004164:	4613      	mov	r3, r2
 8004166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004168:	787b      	ldrb	r3, [r7, #1]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800416e:	887a      	ldrh	r2, [r7, #2]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004174:	e003      	b.n	800417e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004176:	887b      	ldrh	r3, [r7, #2]
 8004178:	041a      	lsls	r2, r3, #16
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	619a      	str	r2, [r3, #24]
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
	...

0800418c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004196:	4b08      	ldr	r3, [pc, #32]	; (80041b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004198:	695a      	ldr	r2, [r3, #20]
 800419a:	88fb      	ldrh	r3, [r7, #6]
 800419c:	4013      	ands	r3, r2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d006      	beq.n	80041b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041a2:	4a05      	ldr	r2, [pc, #20]	; (80041b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041a4:	88fb      	ldrh	r3, [r7, #6]
 80041a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fd f934 	bl	8001418 <HAL_GPIO_EXTI_Callback>
  }
}
 80041b0:	bf00      	nop
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40013c00 	.word	0x40013c00

080041bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e267      	b.n	800469e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d075      	beq.n	80042c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041da:	4b88      	ldr	r3, [pc, #544]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 030c 	and.w	r3, r3, #12
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d00c      	beq.n	8004200 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041e6:	4b85      	ldr	r3, [pc, #532]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d112      	bne.n	8004218 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041f2:	4b82      	ldr	r3, [pc, #520]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041fe:	d10b      	bne.n	8004218 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004200:	4b7e      	ldr	r3, [pc, #504]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d05b      	beq.n	80042c4 <HAL_RCC_OscConfig+0x108>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d157      	bne.n	80042c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e242      	b.n	800469e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004220:	d106      	bne.n	8004230 <HAL_RCC_OscConfig+0x74>
 8004222:	4b76      	ldr	r3, [pc, #472]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a75      	ldr	r2, [pc, #468]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 8004228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	e01d      	b.n	800426c <HAL_RCC_OscConfig+0xb0>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004238:	d10c      	bne.n	8004254 <HAL_RCC_OscConfig+0x98>
 800423a:	4b70      	ldr	r3, [pc, #448]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a6f      	ldr	r2, [pc, #444]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 8004240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	4b6d      	ldr	r3, [pc, #436]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a6c      	ldr	r2, [pc, #432]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 800424c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	e00b      	b.n	800426c <HAL_RCC_OscConfig+0xb0>
 8004254:	4b69      	ldr	r3, [pc, #420]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a68      	ldr	r2, [pc, #416]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 800425a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	4b66      	ldr	r3, [pc, #408]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a65      	ldr	r2, [pc, #404]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 8004266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800426a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d013      	beq.n	800429c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004274:	f7ff f918 	bl	80034a8 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800427c:	f7ff f914 	bl	80034a8 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b64      	cmp	r3, #100	; 0x64
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e207      	b.n	800469e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428e:	4b5b      	ldr	r3, [pc, #364]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0f0      	beq.n	800427c <HAL_RCC_OscConfig+0xc0>
 800429a:	e014      	b.n	80042c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429c:	f7ff f904 	bl	80034a8 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042a4:	f7ff f900 	bl	80034a8 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b64      	cmp	r3, #100	; 0x64
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e1f3      	b.n	800469e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042b6:	4b51      	ldr	r3, [pc, #324]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f0      	bne.n	80042a4 <HAL_RCC_OscConfig+0xe8>
 80042c2:	e000      	b.n	80042c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d063      	beq.n	800439a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042d2:	4b4a      	ldr	r3, [pc, #296]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 030c 	and.w	r3, r3, #12
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00b      	beq.n	80042f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042de:	4b47      	ldr	r3, [pc, #284]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d11c      	bne.n	8004324 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ea:	4b44      	ldr	r3, [pc, #272]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d116      	bne.n	8004324 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042f6:	4b41      	ldr	r3, [pc, #260]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d005      	beq.n	800430e <HAL_RCC_OscConfig+0x152>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d001      	beq.n	800430e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e1c7      	b.n	800469e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800430e:	4b3b      	ldr	r3, [pc, #236]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	4937      	ldr	r1, [pc, #220]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 800431e:	4313      	orrs	r3, r2
 8004320:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004322:	e03a      	b.n	800439a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d020      	beq.n	800436e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800432c:	4b34      	ldr	r3, [pc, #208]	; (8004400 <HAL_RCC_OscConfig+0x244>)
 800432e:	2201      	movs	r2, #1
 8004330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004332:	f7ff f8b9 	bl	80034a8 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800433a:	f7ff f8b5 	bl	80034a8 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e1a8      	b.n	800469e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800434c:	4b2b      	ldr	r3, [pc, #172]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0f0      	beq.n	800433a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004358:	4b28      	ldr	r3, [pc, #160]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	4925      	ldr	r1, [pc, #148]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 8004368:	4313      	orrs	r3, r2
 800436a:	600b      	str	r3, [r1, #0]
 800436c:	e015      	b.n	800439a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800436e:	4b24      	ldr	r3, [pc, #144]	; (8004400 <HAL_RCC_OscConfig+0x244>)
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004374:	f7ff f898 	bl	80034a8 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800437c:	f7ff f894 	bl	80034a8 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e187      	b.n	800469e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438e:	4b1b      	ldr	r3, [pc, #108]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d036      	beq.n	8004414 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d016      	beq.n	80043dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ae:	4b15      	ldr	r3, [pc, #84]	; (8004404 <HAL_RCC_OscConfig+0x248>)
 80043b0:	2201      	movs	r2, #1
 80043b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b4:	f7ff f878 	bl	80034a8 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043bc:	f7ff f874 	bl	80034a8 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e167      	b.n	800469e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ce:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <HAL_RCC_OscConfig+0x240>)
 80043d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0f0      	beq.n	80043bc <HAL_RCC_OscConfig+0x200>
 80043da:	e01b      	b.n	8004414 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043dc:	4b09      	ldr	r3, [pc, #36]	; (8004404 <HAL_RCC_OscConfig+0x248>)
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e2:	f7ff f861 	bl	80034a8 <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e8:	e00e      	b.n	8004408 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ea:	f7ff f85d 	bl	80034a8 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d907      	bls.n	8004408 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e150      	b.n	800469e <HAL_RCC_OscConfig+0x4e2>
 80043fc:	40023800 	.word	0x40023800
 8004400:	42470000 	.word	0x42470000
 8004404:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004408:	4b88      	ldr	r3, [pc, #544]	; (800462c <HAL_RCC_OscConfig+0x470>)
 800440a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1ea      	bne.n	80043ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 8097 	beq.w	8004550 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004422:	2300      	movs	r3, #0
 8004424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004426:	4b81      	ldr	r3, [pc, #516]	; (800462c <HAL_RCC_OscConfig+0x470>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10f      	bne.n	8004452 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004432:	2300      	movs	r3, #0
 8004434:	60bb      	str	r3, [r7, #8]
 8004436:	4b7d      	ldr	r3, [pc, #500]	; (800462c <HAL_RCC_OscConfig+0x470>)
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	4a7c      	ldr	r2, [pc, #496]	; (800462c <HAL_RCC_OscConfig+0x470>)
 800443c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004440:	6413      	str	r3, [r2, #64]	; 0x40
 8004442:	4b7a      	ldr	r3, [pc, #488]	; (800462c <HAL_RCC_OscConfig+0x470>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444a:	60bb      	str	r3, [r7, #8]
 800444c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800444e:	2301      	movs	r3, #1
 8004450:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004452:	4b77      	ldr	r3, [pc, #476]	; (8004630 <HAL_RCC_OscConfig+0x474>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445a:	2b00      	cmp	r3, #0
 800445c:	d118      	bne.n	8004490 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800445e:	4b74      	ldr	r3, [pc, #464]	; (8004630 <HAL_RCC_OscConfig+0x474>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a73      	ldr	r2, [pc, #460]	; (8004630 <HAL_RCC_OscConfig+0x474>)
 8004464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800446a:	f7ff f81d 	bl	80034a8 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004472:	f7ff f819 	bl	80034a8 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e10c      	b.n	800469e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004484:	4b6a      	ldr	r3, [pc, #424]	; (8004630 <HAL_RCC_OscConfig+0x474>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f0      	beq.n	8004472 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d106      	bne.n	80044a6 <HAL_RCC_OscConfig+0x2ea>
 8004498:	4b64      	ldr	r3, [pc, #400]	; (800462c <HAL_RCC_OscConfig+0x470>)
 800449a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449c:	4a63      	ldr	r2, [pc, #396]	; (800462c <HAL_RCC_OscConfig+0x470>)
 800449e:	f043 0301 	orr.w	r3, r3, #1
 80044a2:	6713      	str	r3, [r2, #112]	; 0x70
 80044a4:	e01c      	b.n	80044e0 <HAL_RCC_OscConfig+0x324>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2b05      	cmp	r3, #5
 80044ac:	d10c      	bne.n	80044c8 <HAL_RCC_OscConfig+0x30c>
 80044ae:	4b5f      	ldr	r3, [pc, #380]	; (800462c <HAL_RCC_OscConfig+0x470>)
 80044b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b2:	4a5e      	ldr	r2, [pc, #376]	; (800462c <HAL_RCC_OscConfig+0x470>)
 80044b4:	f043 0304 	orr.w	r3, r3, #4
 80044b8:	6713      	str	r3, [r2, #112]	; 0x70
 80044ba:	4b5c      	ldr	r3, [pc, #368]	; (800462c <HAL_RCC_OscConfig+0x470>)
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	4a5b      	ldr	r2, [pc, #364]	; (800462c <HAL_RCC_OscConfig+0x470>)
 80044c0:	f043 0301 	orr.w	r3, r3, #1
 80044c4:	6713      	str	r3, [r2, #112]	; 0x70
 80044c6:	e00b      	b.n	80044e0 <HAL_RCC_OscConfig+0x324>
 80044c8:	4b58      	ldr	r3, [pc, #352]	; (800462c <HAL_RCC_OscConfig+0x470>)
 80044ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044cc:	4a57      	ldr	r2, [pc, #348]	; (800462c <HAL_RCC_OscConfig+0x470>)
 80044ce:	f023 0301 	bic.w	r3, r3, #1
 80044d2:	6713      	str	r3, [r2, #112]	; 0x70
 80044d4:	4b55      	ldr	r3, [pc, #340]	; (800462c <HAL_RCC_OscConfig+0x470>)
 80044d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d8:	4a54      	ldr	r2, [pc, #336]	; (800462c <HAL_RCC_OscConfig+0x470>)
 80044da:	f023 0304 	bic.w	r3, r3, #4
 80044de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d015      	beq.n	8004514 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e8:	f7fe ffde 	bl	80034a8 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ee:	e00a      	b.n	8004506 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f0:	f7fe ffda 	bl	80034a8 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fe:	4293      	cmp	r3, r2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e0cb      	b.n	800469e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004506:	4b49      	ldr	r3, [pc, #292]	; (800462c <HAL_RCC_OscConfig+0x470>)
 8004508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0ee      	beq.n	80044f0 <HAL_RCC_OscConfig+0x334>
 8004512:	e014      	b.n	800453e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004514:	f7fe ffc8 	bl	80034a8 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800451a:	e00a      	b.n	8004532 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800451c:	f7fe ffc4 	bl	80034a8 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	f241 3288 	movw	r2, #5000	; 0x1388
 800452a:	4293      	cmp	r3, r2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e0b5      	b.n	800469e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004532:	4b3e      	ldr	r3, [pc, #248]	; (800462c <HAL_RCC_OscConfig+0x470>)
 8004534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1ee      	bne.n	800451c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800453e:	7dfb      	ldrb	r3, [r7, #23]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d105      	bne.n	8004550 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004544:	4b39      	ldr	r3, [pc, #228]	; (800462c <HAL_RCC_OscConfig+0x470>)
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	4a38      	ldr	r2, [pc, #224]	; (800462c <HAL_RCC_OscConfig+0x470>)
 800454a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800454e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 80a1 	beq.w	800469c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800455a:	4b34      	ldr	r3, [pc, #208]	; (800462c <HAL_RCC_OscConfig+0x470>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 030c 	and.w	r3, r3, #12
 8004562:	2b08      	cmp	r3, #8
 8004564:	d05c      	beq.n	8004620 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	2b02      	cmp	r3, #2
 800456c:	d141      	bne.n	80045f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800456e:	4b31      	ldr	r3, [pc, #196]	; (8004634 <HAL_RCC_OscConfig+0x478>)
 8004570:	2200      	movs	r2, #0
 8004572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004574:	f7fe ff98 	bl	80034a8 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800457c:	f7fe ff94 	bl	80034a8 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e087      	b.n	800469e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458e:	4b27      	ldr	r3, [pc, #156]	; (800462c <HAL_RCC_OscConfig+0x470>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1f0      	bne.n	800457c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69da      	ldr	r2, [r3, #28]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	019b      	lsls	r3, r3, #6
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b0:	085b      	lsrs	r3, r3, #1
 80045b2:	3b01      	subs	r3, #1
 80045b4:	041b      	lsls	r3, r3, #16
 80045b6:	431a      	orrs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	061b      	lsls	r3, r3, #24
 80045be:	491b      	ldr	r1, [pc, #108]	; (800462c <HAL_RCC_OscConfig+0x470>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045c4:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <HAL_RCC_OscConfig+0x478>)
 80045c6:	2201      	movs	r2, #1
 80045c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ca:	f7fe ff6d 	bl	80034a8 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045d2:	f7fe ff69 	bl	80034a8 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e05c      	b.n	800469e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e4:	4b11      	ldr	r3, [pc, #68]	; (800462c <HAL_RCC_OscConfig+0x470>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0f0      	beq.n	80045d2 <HAL_RCC_OscConfig+0x416>
 80045f0:	e054      	b.n	800469c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f2:	4b10      	ldr	r3, [pc, #64]	; (8004634 <HAL_RCC_OscConfig+0x478>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f8:	f7fe ff56 	bl	80034a8 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004600:	f7fe ff52 	bl	80034a8 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e045      	b.n	800469e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004612:	4b06      	ldr	r3, [pc, #24]	; (800462c <HAL_RCC_OscConfig+0x470>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1f0      	bne.n	8004600 <HAL_RCC_OscConfig+0x444>
 800461e:	e03d      	b.n	800469c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d107      	bne.n	8004638 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e038      	b.n	800469e <HAL_RCC_OscConfig+0x4e2>
 800462c:	40023800 	.word	0x40023800
 8004630:	40007000 	.word	0x40007000
 8004634:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004638:	4b1b      	ldr	r3, [pc, #108]	; (80046a8 <HAL_RCC_OscConfig+0x4ec>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d028      	beq.n	8004698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004650:	429a      	cmp	r2, r3
 8004652:	d121      	bne.n	8004698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465e:	429a      	cmp	r2, r3
 8004660:	d11a      	bne.n	8004698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004668:	4013      	ands	r3, r2
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800466e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004670:	4293      	cmp	r3, r2
 8004672:	d111      	bne.n	8004698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467e:	085b      	lsrs	r3, r3, #1
 8004680:	3b01      	subs	r3, #1
 8004682:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004684:	429a      	cmp	r2, r3
 8004686:	d107      	bne.n	8004698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004694:	429a      	cmp	r2, r3
 8004696:	d001      	beq.n	800469c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e000      	b.n	800469e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40023800 	.word	0x40023800

080046ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e0cc      	b.n	800485a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046c0:	4b68      	ldr	r3, [pc, #416]	; (8004864 <HAL_RCC_ClockConfig+0x1b8>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d90c      	bls.n	80046e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ce:	4b65      	ldr	r3, [pc, #404]	; (8004864 <HAL_RCC_ClockConfig+0x1b8>)
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d6:	4b63      	ldr	r3, [pc, #396]	; (8004864 <HAL_RCC_ClockConfig+0x1b8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d001      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0b8      	b.n	800485a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d020      	beq.n	8004736 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d005      	beq.n	800470c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004700:	4b59      	ldr	r3, [pc, #356]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	4a58      	ldr	r2, [pc, #352]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 8004706:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800470a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0308 	and.w	r3, r3, #8
 8004714:	2b00      	cmp	r3, #0
 8004716:	d005      	beq.n	8004724 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004718:	4b53      	ldr	r3, [pc, #332]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	4a52      	ldr	r2, [pc, #328]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004722:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004724:	4b50      	ldr	r3, [pc, #320]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	494d      	ldr	r1, [pc, #308]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 8004732:	4313      	orrs	r3, r2
 8004734:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d044      	beq.n	80047cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d107      	bne.n	800475a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474a:	4b47      	ldr	r3, [pc, #284]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d119      	bne.n	800478a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e07f      	b.n	800485a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b02      	cmp	r3, #2
 8004760:	d003      	beq.n	800476a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004766:	2b03      	cmp	r3, #3
 8004768:	d107      	bne.n	800477a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476a:	4b3f      	ldr	r3, [pc, #252]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d109      	bne.n	800478a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e06f      	b.n	800485a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800477a:	4b3b      	ldr	r3, [pc, #236]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e067      	b.n	800485a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800478a:	4b37      	ldr	r3, [pc, #220]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f023 0203 	bic.w	r2, r3, #3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	4934      	ldr	r1, [pc, #208]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	4313      	orrs	r3, r2
 800479a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800479c:	f7fe fe84 	bl	80034a8 <HAL_GetTick>
 80047a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a2:	e00a      	b.n	80047ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a4:	f7fe fe80 	bl	80034a8 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e04f      	b.n	800485a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ba:	4b2b      	ldr	r3, [pc, #172]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 020c 	and.w	r2, r3, #12
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d1eb      	bne.n	80047a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047cc:	4b25      	ldr	r3, [pc, #148]	; (8004864 <HAL_RCC_ClockConfig+0x1b8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d20c      	bcs.n	80047f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047da:	4b22      	ldr	r3, [pc, #136]	; (8004864 <HAL_RCC_ClockConfig+0x1b8>)
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047e2:	4b20      	ldr	r3, [pc, #128]	; (8004864 <HAL_RCC_ClockConfig+0x1b8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d001      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e032      	b.n	800485a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d008      	beq.n	8004812 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004800:	4b19      	ldr	r3, [pc, #100]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	4916      	ldr	r1, [pc, #88]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	4313      	orrs	r3, r2
 8004810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d009      	beq.n	8004832 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800481e:	4b12      	ldr	r3, [pc, #72]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	490e      	ldr	r1, [pc, #56]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 800482e:	4313      	orrs	r3, r2
 8004830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004832:	f000 f821 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 8004836:	4602      	mov	r2, r0
 8004838:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	091b      	lsrs	r3, r3, #4
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	490a      	ldr	r1, [pc, #40]	; (800486c <HAL_RCC_ClockConfig+0x1c0>)
 8004844:	5ccb      	ldrb	r3, [r1, r3]
 8004846:	fa22 f303 	lsr.w	r3, r2, r3
 800484a:	4a09      	ldr	r2, [pc, #36]	; (8004870 <HAL_RCC_ClockConfig+0x1c4>)
 800484c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800484e:	4b09      	ldr	r3, [pc, #36]	; (8004874 <HAL_RCC_ClockConfig+0x1c8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f7fe fde4 	bl	8003420 <HAL_InitTick>

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	40023c00 	.word	0x40023c00
 8004868:	40023800 	.word	0x40023800
 800486c:	0800b094 	.word	0x0800b094
 8004870:	20000000 	.word	0x20000000
 8004874:	20000004 	.word	0x20000004

08004878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800487c:	b094      	sub	sp, #80	; 0x50
 800487e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	647b      	str	r3, [r7, #68]	; 0x44
 8004884:	2300      	movs	r3, #0
 8004886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004888:	2300      	movs	r3, #0
 800488a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004890:	4b79      	ldr	r3, [pc, #484]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 030c 	and.w	r3, r3, #12
 8004898:	2b08      	cmp	r3, #8
 800489a:	d00d      	beq.n	80048b8 <HAL_RCC_GetSysClockFreq+0x40>
 800489c:	2b08      	cmp	r3, #8
 800489e:	f200 80e1 	bhi.w	8004a64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <HAL_RCC_GetSysClockFreq+0x34>
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d003      	beq.n	80048b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80048aa:	e0db      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048ac:	4b73      	ldr	r3, [pc, #460]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x204>)
 80048ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80048b0:	e0db      	b.n	8004a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048b2:	4b73      	ldr	r3, [pc, #460]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x208>)
 80048b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048b6:	e0d8      	b.n	8004a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048b8:	4b6f      	ldr	r3, [pc, #444]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048c2:	4b6d      	ldr	r3, [pc, #436]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d063      	beq.n	8004996 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ce:	4b6a      	ldr	r3, [pc, #424]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	099b      	lsrs	r3, r3, #6
 80048d4:	2200      	movs	r2, #0
 80048d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80048d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e0:	633b      	str	r3, [r7, #48]	; 0x30
 80048e2:	2300      	movs	r3, #0
 80048e4:	637b      	str	r3, [r7, #52]	; 0x34
 80048e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048ea:	4622      	mov	r2, r4
 80048ec:	462b      	mov	r3, r5
 80048ee:	f04f 0000 	mov.w	r0, #0
 80048f2:	f04f 0100 	mov.w	r1, #0
 80048f6:	0159      	lsls	r1, r3, #5
 80048f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048fc:	0150      	lsls	r0, r2, #5
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4621      	mov	r1, r4
 8004904:	1a51      	subs	r1, r2, r1
 8004906:	6139      	str	r1, [r7, #16]
 8004908:	4629      	mov	r1, r5
 800490a:	eb63 0301 	sbc.w	r3, r3, r1
 800490e:	617b      	str	r3, [r7, #20]
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800491c:	4659      	mov	r1, fp
 800491e:	018b      	lsls	r3, r1, #6
 8004920:	4651      	mov	r1, sl
 8004922:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004926:	4651      	mov	r1, sl
 8004928:	018a      	lsls	r2, r1, #6
 800492a:	4651      	mov	r1, sl
 800492c:	ebb2 0801 	subs.w	r8, r2, r1
 8004930:	4659      	mov	r1, fp
 8004932:	eb63 0901 	sbc.w	r9, r3, r1
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004942:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004946:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800494a:	4690      	mov	r8, r2
 800494c:	4699      	mov	r9, r3
 800494e:	4623      	mov	r3, r4
 8004950:	eb18 0303 	adds.w	r3, r8, r3
 8004954:	60bb      	str	r3, [r7, #8]
 8004956:	462b      	mov	r3, r5
 8004958:	eb49 0303 	adc.w	r3, r9, r3
 800495c:	60fb      	str	r3, [r7, #12]
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800496a:	4629      	mov	r1, r5
 800496c:	024b      	lsls	r3, r1, #9
 800496e:	4621      	mov	r1, r4
 8004970:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004974:	4621      	mov	r1, r4
 8004976:	024a      	lsls	r2, r1, #9
 8004978:	4610      	mov	r0, r2
 800497a:	4619      	mov	r1, r3
 800497c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800497e:	2200      	movs	r2, #0
 8004980:	62bb      	str	r3, [r7, #40]	; 0x28
 8004982:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004984:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004988:	f7fb fc82 	bl	8000290 <__aeabi_uldivmod>
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	4613      	mov	r3, r2
 8004992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004994:	e058      	b.n	8004a48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004996:	4b38      	ldr	r3, [pc, #224]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	099b      	lsrs	r3, r3, #6
 800499c:	2200      	movs	r2, #0
 800499e:	4618      	mov	r0, r3
 80049a0:	4611      	mov	r1, r2
 80049a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049a6:	623b      	str	r3, [r7, #32]
 80049a8:	2300      	movs	r3, #0
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24
 80049ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049b0:	4642      	mov	r2, r8
 80049b2:	464b      	mov	r3, r9
 80049b4:	f04f 0000 	mov.w	r0, #0
 80049b8:	f04f 0100 	mov.w	r1, #0
 80049bc:	0159      	lsls	r1, r3, #5
 80049be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049c2:	0150      	lsls	r0, r2, #5
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4641      	mov	r1, r8
 80049ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80049ce:	4649      	mov	r1, r9
 80049d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	f04f 0300 	mov.w	r3, #0
 80049dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049e8:	ebb2 040a 	subs.w	r4, r2, sl
 80049ec:	eb63 050b 	sbc.w	r5, r3, fp
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	00eb      	lsls	r3, r5, #3
 80049fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049fe:	00e2      	lsls	r2, r4, #3
 8004a00:	4614      	mov	r4, r2
 8004a02:	461d      	mov	r5, r3
 8004a04:	4643      	mov	r3, r8
 8004a06:	18e3      	adds	r3, r4, r3
 8004a08:	603b      	str	r3, [r7, #0]
 8004a0a:	464b      	mov	r3, r9
 8004a0c:	eb45 0303 	adc.w	r3, r5, r3
 8004a10:	607b      	str	r3, [r7, #4]
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a1e:	4629      	mov	r1, r5
 8004a20:	028b      	lsls	r3, r1, #10
 8004a22:	4621      	mov	r1, r4
 8004a24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a28:	4621      	mov	r1, r4
 8004a2a:	028a      	lsls	r2, r1, #10
 8004a2c:	4610      	mov	r0, r2
 8004a2e:	4619      	mov	r1, r3
 8004a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a32:	2200      	movs	r2, #0
 8004a34:	61bb      	str	r3, [r7, #24]
 8004a36:	61fa      	str	r2, [r7, #28]
 8004a38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a3c:	f7fb fc28 	bl	8000290 <__aeabi_uldivmod>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4613      	mov	r3, r2
 8004a46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a48:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	0c1b      	lsrs	r3, r3, #16
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	3301      	adds	r3, #1
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a62:	e002      	b.n	8004a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3750      	adds	r7, #80	; 0x50
 8004a70:	46bd      	mov	sp, r7
 8004a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a76:	bf00      	nop
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	00f42400 	.word	0x00f42400
 8004a80:	007a1200 	.word	0x007a1200

08004a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a88:	4b03      	ldr	r3, [pc, #12]	; (8004a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	20000000 	.word	0x20000000

08004a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004aa0:	f7ff fff0 	bl	8004a84 <HAL_RCC_GetHCLKFreq>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	4b05      	ldr	r3, [pc, #20]	; (8004abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	0a9b      	lsrs	r3, r3, #10
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	4903      	ldr	r1, [pc, #12]	; (8004ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ab2:	5ccb      	ldrb	r3, [r1, r3]
 8004ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	0800b0a4 	.word	0x0800b0a4

08004ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ac8:	f7ff ffdc 	bl	8004a84 <HAL_RCC_GetHCLKFreq>
 8004acc:	4602      	mov	r2, r0
 8004ace:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	0b5b      	lsrs	r3, r3, #13
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	4903      	ldr	r1, [pc, #12]	; (8004ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ada:	5ccb      	ldrb	r3, [r1, r3]
 8004adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	0800b0a4 	.word	0x0800b0a4

08004aec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e07b      	b.n	8004bf6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d108      	bne.n	8004b18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b0e:	d009      	beq.n	8004b24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	61da      	str	r2, [r3, #28]
 8004b16:	e005      	b.n	8004b24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fd fb46 	bl	80021d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	431a      	orrs	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba8:	ea42 0103 	orr.w	r1, r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	0c1b      	lsrs	r3, r3, #16
 8004bc2:	f003 0104 	and.w	r1, r3, #4
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	f003 0210 	and.w	r2, r3, #16
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69da      	ldr	r2, [r3, #28]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004be4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b088      	sub	sp, #32
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	60f8      	str	r0, [r7, #12]
 8004c06:	60b9      	str	r1, [r7, #8]
 8004c08:	603b      	str	r3, [r7, #0]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_SPI_Transmit+0x22>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e126      	b.n	8004e6e <HAL_SPI_Transmit+0x270>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c28:	f7fe fc3e 	bl	80034a8 <HAL_GetTick>
 8004c2c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c2e:	88fb      	ldrh	r3, [r7, #6]
 8004c30:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d002      	beq.n	8004c44 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c3e:	2302      	movs	r3, #2
 8004c40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c42:	e10b      	b.n	8004e5c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <HAL_SPI_Transmit+0x52>
 8004c4a:	88fb      	ldrh	r3, [r7, #6]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d102      	bne.n	8004c56 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c54:	e102      	b.n	8004e5c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2203      	movs	r2, #3
 8004c5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	88fa      	ldrh	r2, [r7, #6]
 8004c6e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	88fa      	ldrh	r2, [r7, #6]
 8004c74:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c9c:	d10f      	bne.n	8004cbe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cbc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc8:	2b40      	cmp	r3, #64	; 0x40
 8004cca:	d007      	beq.n	8004cdc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ce4:	d14b      	bne.n	8004d7e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <HAL_SPI_Transmit+0xf6>
 8004cee:	8afb      	ldrh	r3, [r7, #22]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d13e      	bne.n	8004d72 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf8:	881a      	ldrh	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d04:	1c9a      	adds	r2, r3, #2
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d18:	e02b      	b.n	8004d72 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d112      	bne.n	8004d4e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2c:	881a      	ldrh	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d38:	1c9a      	adds	r2, r3, #2
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d4c:	e011      	b.n	8004d72 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d4e:	f7fe fbab 	bl	80034a8 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d803      	bhi.n	8004d66 <HAL_SPI_Transmit+0x168>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d64:	d102      	bne.n	8004d6c <HAL_SPI_Transmit+0x16e>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d102      	bne.n	8004d72 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d70:	e074      	b.n	8004e5c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1ce      	bne.n	8004d1a <HAL_SPI_Transmit+0x11c>
 8004d7c:	e04c      	b.n	8004e18 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <HAL_SPI_Transmit+0x18e>
 8004d86:	8afb      	ldrh	r3, [r7, #22]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d140      	bne.n	8004e0e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	330c      	adds	r3, #12
 8004d96:	7812      	ldrb	r2, [r2, #0]
 8004d98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	3b01      	subs	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004db2:	e02c      	b.n	8004e0e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d113      	bne.n	8004dea <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	330c      	adds	r3, #12
 8004dcc:	7812      	ldrb	r2, [r2, #0]
 8004dce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	86da      	strh	r2, [r3, #54]	; 0x36
 8004de8:	e011      	b.n	8004e0e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dea:	f7fe fb5d 	bl	80034a8 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d803      	bhi.n	8004e02 <HAL_SPI_Transmit+0x204>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e00:	d102      	bne.n	8004e08 <HAL_SPI_Transmit+0x20a>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d102      	bne.n	8004e0e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e0c:	e026      	b.n	8004e5c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1cd      	bne.n	8004db4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	6839      	ldr	r1, [r7, #0]
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 fa55 	bl	80052cc <SPI_EndRxTxTransaction>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10a      	bne.n	8004e4c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e36:	2300      	movs	r3, #0
 8004e38:	613b      	str	r3, [r7, #16]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	613b      	str	r3, [r7, #16]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	613b      	str	r3, [r7, #16]
 8004e4a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	77fb      	strb	r3, [r7, #31]
 8004e58:	e000      	b.n	8004e5c <HAL_SPI_Transmit+0x25e>
  }

error:
 8004e5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3720      	adds	r7, #32
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b08c      	sub	sp, #48	; 0x30
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	60f8      	str	r0, [r7, #12]
 8004e7e:	60b9      	str	r1, [r7, #8]
 8004e80:	607a      	str	r2, [r7, #4]
 8004e82:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e84:	2301      	movs	r3, #1
 8004e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d101      	bne.n	8004e9c <HAL_SPI_TransmitReceive+0x26>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	e18a      	b.n	80051b2 <HAL_SPI_TransmitReceive+0x33c>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ea4:	f7fe fb00 	bl	80034a8 <HAL_GetTick>
 8004ea8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004eba:	887b      	ldrh	r3, [r7, #2]
 8004ebc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ebe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d00f      	beq.n	8004ee6 <HAL_SPI_TransmitReceive+0x70>
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ecc:	d107      	bne.n	8004ede <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d103      	bne.n	8004ede <HAL_SPI_TransmitReceive+0x68>
 8004ed6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d003      	beq.n	8004ee6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ede:	2302      	movs	r3, #2
 8004ee0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ee4:	e15b      	b.n	800519e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d005      	beq.n	8004ef8 <HAL_SPI_TransmitReceive+0x82>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_SPI_TransmitReceive+0x82>
 8004ef2:	887b      	ldrh	r3, [r7, #2]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d103      	bne.n	8004f00 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004efe:	e14e      	b.n	800519e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d003      	beq.n	8004f14 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2205      	movs	r2, #5
 8004f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	887a      	ldrh	r2, [r7, #2]
 8004f24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	887a      	ldrh	r2, [r7, #2]
 8004f2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	887a      	ldrh	r2, [r7, #2]
 8004f36:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	887a      	ldrh	r2, [r7, #2]
 8004f3c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f54:	2b40      	cmp	r3, #64	; 0x40
 8004f56:	d007      	beq.n	8004f68 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f70:	d178      	bne.n	8005064 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <HAL_SPI_TransmitReceive+0x10a>
 8004f7a:	8b7b      	ldrh	r3, [r7, #26]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d166      	bne.n	800504e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f84:	881a      	ldrh	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f90:	1c9a      	adds	r2, r3, #2
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fa4:	e053      	b.n	800504e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d11b      	bne.n	8004fec <HAL_SPI_TransmitReceive+0x176>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d016      	beq.n	8004fec <HAL_SPI_TransmitReceive+0x176>
 8004fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d113      	bne.n	8004fec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc8:	881a      	ldrh	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	1c9a      	adds	r2, r3, #2
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d119      	bne.n	800502e <HAL_SPI_TransmitReceive+0x1b8>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d014      	beq.n	800502e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	b292      	uxth	r2, r2
 8005010:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005016:	1c9a      	adds	r2, r3, #2
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005020:	b29b      	uxth	r3, r3
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800502a:	2301      	movs	r3, #1
 800502c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800502e:	f7fe fa3b 	bl	80034a8 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800503a:	429a      	cmp	r2, r3
 800503c:	d807      	bhi.n	800504e <HAL_SPI_TransmitReceive+0x1d8>
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005044:	d003      	beq.n	800504e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800504c:	e0a7      	b.n	800519e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1a6      	bne.n	8004fa6 <HAL_SPI_TransmitReceive+0x130>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1a1      	bne.n	8004fa6 <HAL_SPI_TransmitReceive+0x130>
 8005062:	e07c      	b.n	800515e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <HAL_SPI_TransmitReceive+0x1fc>
 800506c:	8b7b      	ldrh	r3, [r7, #26]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d16b      	bne.n	800514a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	330c      	adds	r3, #12
 800507c:	7812      	ldrb	r2, [r2, #0]
 800507e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005098:	e057      	b.n	800514a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d11c      	bne.n	80050e2 <HAL_SPI_TransmitReceive+0x26c>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d017      	beq.n	80050e2 <HAL_SPI_TransmitReceive+0x26c>
 80050b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d114      	bne.n	80050e2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	330c      	adds	r3, #12
 80050c2:	7812      	ldrb	r2, [r2, #0]
 80050c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d119      	bne.n	8005124 <HAL_SPI_TransmitReceive+0x2ae>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d014      	beq.n	8005124 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005116:	b29b      	uxth	r3, r3
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005120:	2301      	movs	r3, #1
 8005122:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005124:	f7fe f9c0 	bl	80034a8 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005130:	429a      	cmp	r2, r3
 8005132:	d803      	bhi.n	800513c <HAL_SPI_TransmitReceive+0x2c6>
 8005134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513a:	d102      	bne.n	8005142 <HAL_SPI_TransmitReceive+0x2cc>
 800513c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513e:	2b00      	cmp	r3, #0
 8005140:	d103      	bne.n	800514a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005148:	e029      	b.n	800519e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800514e:	b29b      	uxth	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1a2      	bne.n	800509a <HAL_SPI_TransmitReceive+0x224>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005158:	b29b      	uxth	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d19d      	bne.n	800509a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800515e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005160:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 f8b2 	bl	80052cc <SPI_EndRxTxTransaction>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d006      	beq.n	800517c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2220      	movs	r2, #32
 8005178:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800517a:	e010      	b.n	800519e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10b      	bne.n	800519c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005184:	2300      	movs	r3, #0
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	e000      	b.n	800519e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800519c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3730      	adds	r7, #48	; 0x30
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	603b      	str	r3, [r7, #0]
 80051c8:	4613      	mov	r3, r2
 80051ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051cc:	f7fe f96c 	bl	80034a8 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d4:	1a9b      	subs	r3, r3, r2
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	4413      	add	r3, r2
 80051da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051dc:	f7fe f964 	bl	80034a8 <HAL_GetTick>
 80051e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051e2:	4b39      	ldr	r3, [pc, #228]	; (80052c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	015b      	lsls	r3, r3, #5
 80051e8:	0d1b      	lsrs	r3, r3, #20
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	fb02 f303 	mul.w	r3, r2, r3
 80051f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051f2:	e054      	b.n	800529e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fa:	d050      	beq.n	800529e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051fc:	f7fe f954 	bl	80034a8 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	69fa      	ldr	r2, [r7, #28]
 8005208:	429a      	cmp	r2, r3
 800520a:	d902      	bls.n	8005212 <SPI_WaitFlagStateUntilTimeout+0x56>
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d13d      	bne.n	800528e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005220:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800522a:	d111      	bne.n	8005250 <SPI_WaitFlagStateUntilTimeout+0x94>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005234:	d004      	beq.n	8005240 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800523e:	d107      	bne.n	8005250 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800524e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005258:	d10f      	bne.n	800527a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005278:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e017      	b.n	80052be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	3b01      	subs	r3, #1
 800529c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	4013      	ands	r3, r2
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	bf0c      	ite	eq
 80052ae:	2301      	moveq	r3, #1
 80052b0:	2300      	movne	r3, #0
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	461a      	mov	r2, r3
 80052b6:	79fb      	ldrb	r3, [r7, #7]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d19b      	bne.n	80051f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3720      	adds	r7, #32
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	20000000 	.word	0x20000000

080052cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052d8:	4b1b      	ldr	r3, [pc, #108]	; (8005348 <SPI_EndRxTxTransaction+0x7c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a1b      	ldr	r2, [pc, #108]	; (800534c <SPI_EndRxTxTransaction+0x80>)
 80052de:	fba2 2303 	umull	r2, r3, r2, r3
 80052e2:	0d5b      	lsrs	r3, r3, #21
 80052e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052e8:	fb02 f303 	mul.w	r3, r2, r3
 80052ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052f6:	d112      	bne.n	800531e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2200      	movs	r2, #0
 8005300:	2180      	movs	r1, #128	; 0x80
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f7ff ff5a 	bl	80051bc <SPI_WaitFlagStateUntilTimeout>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d016      	beq.n	800533c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005312:	f043 0220 	orr.w	r2, r3, #32
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e00f      	b.n	800533e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00a      	beq.n	800533a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	3b01      	subs	r3, #1
 8005328:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005334:	2b80      	cmp	r3, #128	; 0x80
 8005336:	d0f2      	beq.n	800531e <SPI_EndRxTxTransaction+0x52>
 8005338:	e000      	b.n	800533c <SPI_EndRxTxTransaction+0x70>
        break;
 800533a:	bf00      	nop
  }

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	20000000 	.word	0x20000000
 800534c:	165e9f81 	.word	0x165e9f81

08005350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e041      	b.n	80053e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d106      	bne.n	800537c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fc ffa8 	bl	80022cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3304      	adds	r3, #4
 800538c:	4619      	mov	r1, r3
 800538e:	4610      	mov	r0, r2
 8005390:	f000 fd60 	bl	8005e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b082      	sub	sp, #8
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e041      	b.n	8005484 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d106      	bne.n	800541a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f839 	bl	800548c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2202      	movs	r2, #2
 800541e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3304      	adds	r3, #4
 800542a:	4619      	mov	r1, r3
 800542c:	4610      	mov	r0, r2
 800542e:	f000 fd11 	bl	8005e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80054ae:	2300      	movs	r3, #0
 80054b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d109      	bne.n	80054cc <HAL_TIM_PWM_Start_DMA+0x2c>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	bf0c      	ite	eq
 80054c4:	2301      	moveq	r3, #1
 80054c6:	2300      	movne	r3, #0
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	e022      	b.n	8005512 <HAL_TIM_PWM_Start_DMA+0x72>
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d109      	bne.n	80054e6 <HAL_TIM_PWM_Start_DMA+0x46>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	bf0c      	ite	eq
 80054de:	2301      	moveq	r3, #1
 80054e0:	2300      	movne	r3, #0
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	e015      	b.n	8005512 <HAL_TIM_PWM_Start_DMA+0x72>
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d109      	bne.n	8005500 <HAL_TIM_PWM_Start_DMA+0x60>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	bf0c      	ite	eq
 80054f8:	2301      	moveq	r3, #1
 80054fa:	2300      	movne	r3, #0
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	e008      	b.n	8005512 <HAL_TIM_PWM_Start_DMA+0x72>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	bf0c      	ite	eq
 800550c:	2301      	moveq	r3, #1
 800550e:	2300      	movne	r3, #0
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005516:	2302      	movs	r3, #2
 8005518:	e15d      	b.n	80057d6 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d109      	bne.n	8005534 <HAL_TIM_PWM_Start_DMA+0x94>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b01      	cmp	r3, #1
 800552a:	bf0c      	ite	eq
 800552c:	2301      	moveq	r3, #1
 800552e:	2300      	movne	r3, #0
 8005530:	b2db      	uxtb	r3, r3
 8005532:	e022      	b.n	800557a <HAL_TIM_PWM_Start_DMA+0xda>
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2b04      	cmp	r3, #4
 8005538:	d109      	bne.n	800554e <HAL_TIM_PWM_Start_DMA+0xae>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b01      	cmp	r3, #1
 8005544:	bf0c      	ite	eq
 8005546:	2301      	moveq	r3, #1
 8005548:	2300      	movne	r3, #0
 800554a:	b2db      	uxtb	r3, r3
 800554c:	e015      	b.n	800557a <HAL_TIM_PWM_Start_DMA+0xda>
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	2b08      	cmp	r3, #8
 8005552:	d109      	bne.n	8005568 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b01      	cmp	r3, #1
 800555e:	bf0c      	ite	eq
 8005560:	2301      	moveq	r3, #1
 8005562:	2300      	movne	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	e008      	b.n	800557a <HAL_TIM_PWM_Start_DMA+0xda>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b01      	cmp	r3, #1
 8005572:	bf0c      	ite	eq
 8005574:	2301      	moveq	r3, #1
 8005576:	2300      	movne	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d024      	beq.n	80055c8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d104      	bne.n	800558e <HAL_TIM_PWM_Start_DMA+0xee>
 8005584:	887b      	ldrh	r3, [r7, #2]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e123      	b.n	80057d6 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d104      	bne.n	800559e <HAL_TIM_PWM_Start_DMA+0xfe>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800559c:	e016      	b.n	80055cc <HAL_TIM_PWM_Start_DMA+0x12c>
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d104      	bne.n	80055ae <HAL_TIM_PWM_Start_DMA+0x10e>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055ac:	e00e      	b.n	80055cc <HAL_TIM_PWM_Start_DMA+0x12c>
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d104      	bne.n	80055be <HAL_TIM_PWM_Start_DMA+0x11e>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055bc:	e006      	b.n	80055cc <HAL_TIM_PWM_Start_DMA+0x12c>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2202      	movs	r2, #2
 80055c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055c6:	e001      	b.n	80055cc <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e104      	b.n	80057d6 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	2b0c      	cmp	r3, #12
 80055d0:	f200 80ae 	bhi.w	8005730 <HAL_TIM_PWM_Start_DMA+0x290>
 80055d4:	a201      	add	r2, pc, #4	; (adr r2, 80055dc <HAL_TIM_PWM_Start_DMA+0x13c>)
 80055d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055da:	bf00      	nop
 80055dc:	08005611 	.word	0x08005611
 80055e0:	08005731 	.word	0x08005731
 80055e4:	08005731 	.word	0x08005731
 80055e8:	08005731 	.word	0x08005731
 80055ec:	08005659 	.word	0x08005659
 80055f0:	08005731 	.word	0x08005731
 80055f4:	08005731 	.word	0x08005731
 80055f8:	08005731 	.word	0x08005731
 80055fc:	080056a1 	.word	0x080056a1
 8005600:	08005731 	.word	0x08005731
 8005604:	08005731 	.word	0x08005731
 8005608:	08005731 	.word	0x08005731
 800560c:	080056e9 	.word	0x080056e9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	4a72      	ldr	r2, [pc, #456]	; (80057e0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8005616:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	4a71      	ldr	r2, [pc, #452]	; (80057e4 <HAL_TIM_PWM_Start_DMA+0x344>)
 800561e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	4a70      	ldr	r2, [pc, #448]	; (80057e8 <HAL_TIM_PWM_Start_DMA+0x348>)
 8005626:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800562c:	6879      	ldr	r1, [r7, #4]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3334      	adds	r3, #52	; 0x34
 8005634:	461a      	mov	r2, r3
 8005636:	887b      	ldrh	r3, [r7, #2]
 8005638:	f7fe f926 	bl	8003888 <HAL_DMA_Start_IT>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e0c7      	b.n	80057d6 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68da      	ldr	r2, [r3, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005654:	60da      	str	r2, [r3, #12]
      break;
 8005656:	e06e      	b.n	8005736 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565c:	4a60      	ldr	r2, [pc, #384]	; (80057e0 <HAL_TIM_PWM_Start_DMA+0x340>)
 800565e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005664:	4a5f      	ldr	r2, [pc, #380]	; (80057e4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8005666:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566c:	4a5e      	ldr	r2, [pc, #376]	; (80057e8 <HAL_TIM_PWM_Start_DMA+0x348>)
 800566e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3338      	adds	r3, #56	; 0x38
 800567c:	461a      	mov	r2, r3
 800567e:	887b      	ldrh	r3, [r7, #2]
 8005680:	f7fe f902 	bl	8003888 <HAL_DMA_Start_IT>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e0a3      	b.n	80057d6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800569c:	60da      	str	r2, [r3, #12]
      break;
 800569e:	e04a      	b.n	8005736 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a4:	4a4e      	ldr	r2, [pc, #312]	; (80057e0 <HAL_TIM_PWM_Start_DMA+0x340>)
 80056a6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ac:	4a4d      	ldr	r2, [pc, #308]	; (80057e4 <HAL_TIM_PWM_Start_DMA+0x344>)
 80056ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	4a4c      	ldr	r2, [pc, #304]	; (80057e8 <HAL_TIM_PWM_Start_DMA+0x348>)
 80056b6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	333c      	adds	r3, #60	; 0x3c
 80056c4:	461a      	mov	r2, r3
 80056c6:	887b      	ldrh	r3, [r7, #2]
 80056c8:	f7fe f8de 	bl	8003888 <HAL_DMA_Start_IT>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e07f      	b.n	80057d6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68da      	ldr	r2, [r3, #12]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056e4:	60da      	str	r2, [r3, #12]
      break;
 80056e6:	e026      	b.n	8005736 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ec:	4a3c      	ldr	r2, [pc, #240]	; (80057e0 <HAL_TIM_PWM_Start_DMA+0x340>)
 80056ee:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f4:	4a3b      	ldr	r2, [pc, #236]	; (80057e4 <HAL_TIM_PWM_Start_DMA+0x344>)
 80056f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	4a3a      	ldr	r2, [pc, #232]	; (80057e8 <HAL_TIM_PWM_Start_DMA+0x348>)
 80056fe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005704:	6879      	ldr	r1, [r7, #4]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3340      	adds	r3, #64	; 0x40
 800570c:	461a      	mov	r2, r3
 800570e:	887b      	ldrh	r3, [r7, #2]
 8005710:	f7fe f8ba 	bl	8003888 <HAL_DMA_Start_IT>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e05b      	b.n	80057d6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800572c:	60da      	str	r2, [r3, #12]
      break;
 800572e:	e002      	b.n	8005736 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	75fb      	strb	r3, [r7, #23]
      break;
 8005734:	bf00      	nop
  }

  if (status == HAL_OK)
 8005736:	7dfb      	ldrb	r3, [r7, #23]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d14b      	bne.n	80057d4 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2201      	movs	r2, #1
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	4618      	mov	r0, r3
 8005746:	f000 fe2b 	bl	80063a0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a27      	ldr	r2, [pc, #156]	; (80057ec <HAL_TIM_PWM_Start_DMA+0x34c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d107      	bne.n	8005764 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005762:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a20      	ldr	r2, [pc, #128]	; (80057ec <HAL_TIM_PWM_Start_DMA+0x34c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d018      	beq.n	80057a0 <HAL_TIM_PWM_Start_DMA+0x300>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005776:	d013      	beq.n	80057a0 <HAL_TIM_PWM_Start_DMA+0x300>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a1c      	ldr	r2, [pc, #112]	; (80057f0 <HAL_TIM_PWM_Start_DMA+0x350>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d00e      	beq.n	80057a0 <HAL_TIM_PWM_Start_DMA+0x300>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a1b      	ldr	r2, [pc, #108]	; (80057f4 <HAL_TIM_PWM_Start_DMA+0x354>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d009      	beq.n	80057a0 <HAL_TIM_PWM_Start_DMA+0x300>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a19      	ldr	r2, [pc, #100]	; (80057f8 <HAL_TIM_PWM_Start_DMA+0x358>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d004      	beq.n	80057a0 <HAL_TIM_PWM_Start_DMA+0x300>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a18      	ldr	r2, [pc, #96]	; (80057fc <HAL_TIM_PWM_Start_DMA+0x35c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d111      	bne.n	80057c4 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 0307 	and.w	r3, r3, #7
 80057aa:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	2b06      	cmp	r3, #6
 80057b0:	d010      	beq.n	80057d4 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f042 0201 	orr.w	r2, r2, #1
 80057c0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c2:	e007      	b.n	80057d4 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0201 	orr.w	r2, r2, #1
 80057d2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80057d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	08005d45 	.word	0x08005d45
 80057e4:	08005ded 	.word	0x08005ded
 80057e8:	08005cb3 	.word	0x08005cb3
 80057ec:	40010000 	.word	0x40010000
 80057f0:	40000400 	.word	0x40000400
 80057f4:	40000800 	.word	0x40000800
 80057f8:	40000c00 	.word	0x40000c00
 80057fc:	40014000 	.word	0x40014000

08005800 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2b0c      	cmp	r3, #12
 8005812:	d855      	bhi.n	80058c0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005814:	a201      	add	r2, pc, #4	; (adr r2, 800581c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581a:	bf00      	nop
 800581c:	08005851 	.word	0x08005851
 8005820:	080058c1 	.word	0x080058c1
 8005824:	080058c1 	.word	0x080058c1
 8005828:	080058c1 	.word	0x080058c1
 800582c:	0800586d 	.word	0x0800586d
 8005830:	080058c1 	.word	0x080058c1
 8005834:	080058c1 	.word	0x080058c1
 8005838:	080058c1 	.word	0x080058c1
 800583c:	08005889 	.word	0x08005889
 8005840:	080058c1 	.word	0x080058c1
 8005844:	080058c1 	.word	0x080058c1
 8005848:	080058c1 	.word	0x080058c1
 800584c:	080058a5 	.word	0x080058a5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800585e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	4618      	mov	r0, r3
 8005866:	f7fe f867 	bl	8003938 <HAL_DMA_Abort_IT>
      break;
 800586a:	e02c      	b.n	80058c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800587a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005880:	4618      	mov	r0, r3
 8005882:	f7fe f859 	bl	8003938 <HAL_DMA_Abort_IT>
      break;
 8005886:	e01e      	b.n	80058c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68da      	ldr	r2, [r3, #12]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005896:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	4618      	mov	r0, r3
 800589e:	f7fe f84b 	bl	8003938 <HAL_DMA_Abort_IT>
      break;
 80058a2:	e010      	b.n	80058c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68da      	ldr	r2, [r3, #12]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7fe f83d 	bl	8003938 <HAL_DMA_Abort_IT>
      break;
 80058be:	e002      	b.n	80058c6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	73fb      	strb	r3, [r7, #15]
      break;
 80058c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d157      	bne.n	800597c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2200      	movs	r2, #0
 80058d2:	6839      	ldr	r1, [r7, #0]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 fd63 	bl	80063a0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a2a      	ldr	r2, [pc, #168]	; (8005988 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d117      	bne.n	8005914 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6a1a      	ldr	r2, [r3, #32]
 80058ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80058ee:	4013      	ands	r3, r2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10f      	bne.n	8005914 <HAL_TIM_PWM_Stop_DMA+0x114>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6a1a      	ldr	r2, [r3, #32]
 80058fa:	f240 4344 	movw	r3, #1092	; 0x444
 80058fe:	4013      	ands	r3, r2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d107      	bne.n	8005914 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005912:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6a1a      	ldr	r2, [r3, #32]
 800591a:	f241 1311 	movw	r3, #4369	; 0x1111
 800591e:	4013      	ands	r3, r2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10f      	bne.n	8005944 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6a1a      	ldr	r2, [r3, #32]
 800592a:	f240 4344 	movw	r3, #1092	; 0x444
 800592e:	4013      	ands	r3, r2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d107      	bne.n	8005944 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0201 	bic.w	r2, r2, #1
 8005942:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d104      	bne.n	8005954 <HAL_TIM_PWM_Stop_DMA+0x154>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005952:	e013      	b.n	800597c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2b04      	cmp	r3, #4
 8005958:	d104      	bne.n	8005964 <HAL_TIM_PWM_Stop_DMA+0x164>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005962:	e00b      	b.n	800597c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	2b08      	cmp	r3, #8
 8005968:	d104      	bne.n	8005974 <HAL_TIM_PWM_Stop_DMA+0x174>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005972:	e003      	b.n	800597c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800597c:	7bfb      	ldrb	r3, [r7, #15]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	40010000 	.word	0x40010000

0800598c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005998:	2300      	movs	r3, #0
 800599a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059a6:	2302      	movs	r3, #2
 80059a8:	e0ae      	b.n	8005b08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b0c      	cmp	r3, #12
 80059b6:	f200 809f 	bhi.w	8005af8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80059ba:	a201      	add	r2, pc, #4	; (adr r2, 80059c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c0:	080059f5 	.word	0x080059f5
 80059c4:	08005af9 	.word	0x08005af9
 80059c8:	08005af9 	.word	0x08005af9
 80059cc:	08005af9 	.word	0x08005af9
 80059d0:	08005a35 	.word	0x08005a35
 80059d4:	08005af9 	.word	0x08005af9
 80059d8:	08005af9 	.word	0x08005af9
 80059dc:	08005af9 	.word	0x08005af9
 80059e0:	08005a77 	.word	0x08005a77
 80059e4:	08005af9 	.word	0x08005af9
 80059e8:	08005af9 	.word	0x08005af9
 80059ec:	08005af9 	.word	0x08005af9
 80059f0:	08005ab7 	.word	0x08005ab7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68b9      	ldr	r1, [r7, #8]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 faaa 	bl	8005f54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	699a      	ldr	r2, [r3, #24]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0208 	orr.w	r2, r2, #8
 8005a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699a      	ldr	r2, [r3, #24]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0204 	bic.w	r2, r2, #4
 8005a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6999      	ldr	r1, [r3, #24]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	619a      	str	r2, [r3, #24]
      break;
 8005a32:	e064      	b.n	8005afe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68b9      	ldr	r1, [r7, #8]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 faf0 	bl	8006020 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699a      	ldr	r2, [r3, #24]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699a      	ldr	r2, [r3, #24]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6999      	ldr	r1, [r3, #24]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	021a      	lsls	r2, r3, #8
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	619a      	str	r2, [r3, #24]
      break;
 8005a74:	e043      	b.n	8005afe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68b9      	ldr	r1, [r7, #8]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 fb3b 	bl	80060f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69da      	ldr	r2, [r3, #28]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f042 0208 	orr.w	r2, r2, #8
 8005a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	69da      	ldr	r2, [r3, #28]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0204 	bic.w	r2, r2, #4
 8005aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	69d9      	ldr	r1, [r3, #28]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	691a      	ldr	r2, [r3, #16]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	61da      	str	r2, [r3, #28]
      break;
 8005ab4:	e023      	b.n	8005afe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68b9      	ldr	r1, [r7, #8]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 fb85 	bl	80061cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69da      	ldr	r2, [r3, #28]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	69da      	ldr	r2, [r3, #28]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	69d9      	ldr	r1, [r3, #28]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	021a      	lsls	r2, r3, #8
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	61da      	str	r2, [r3, #28]
      break;
 8005af6:	e002      	b.n	8005afe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	75fb      	strb	r3, [r7, #23]
      break;
 8005afc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3718      	adds	r7, #24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <HAL_TIM_ConfigClockSource+0x1c>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	e0b4      	b.n	8005c96 <HAL_TIM_ConfigClockSource+0x186>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b64:	d03e      	beq.n	8005be4 <HAL_TIM_ConfigClockSource+0xd4>
 8005b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b6a:	f200 8087 	bhi.w	8005c7c <HAL_TIM_ConfigClockSource+0x16c>
 8005b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b72:	f000 8086 	beq.w	8005c82 <HAL_TIM_ConfigClockSource+0x172>
 8005b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b7a:	d87f      	bhi.n	8005c7c <HAL_TIM_ConfigClockSource+0x16c>
 8005b7c:	2b70      	cmp	r3, #112	; 0x70
 8005b7e:	d01a      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0xa6>
 8005b80:	2b70      	cmp	r3, #112	; 0x70
 8005b82:	d87b      	bhi.n	8005c7c <HAL_TIM_ConfigClockSource+0x16c>
 8005b84:	2b60      	cmp	r3, #96	; 0x60
 8005b86:	d050      	beq.n	8005c2a <HAL_TIM_ConfigClockSource+0x11a>
 8005b88:	2b60      	cmp	r3, #96	; 0x60
 8005b8a:	d877      	bhi.n	8005c7c <HAL_TIM_ConfigClockSource+0x16c>
 8005b8c:	2b50      	cmp	r3, #80	; 0x50
 8005b8e:	d03c      	beq.n	8005c0a <HAL_TIM_ConfigClockSource+0xfa>
 8005b90:	2b50      	cmp	r3, #80	; 0x50
 8005b92:	d873      	bhi.n	8005c7c <HAL_TIM_ConfigClockSource+0x16c>
 8005b94:	2b40      	cmp	r3, #64	; 0x40
 8005b96:	d058      	beq.n	8005c4a <HAL_TIM_ConfigClockSource+0x13a>
 8005b98:	2b40      	cmp	r3, #64	; 0x40
 8005b9a:	d86f      	bhi.n	8005c7c <HAL_TIM_ConfigClockSource+0x16c>
 8005b9c:	2b30      	cmp	r3, #48	; 0x30
 8005b9e:	d064      	beq.n	8005c6a <HAL_TIM_ConfigClockSource+0x15a>
 8005ba0:	2b30      	cmp	r3, #48	; 0x30
 8005ba2:	d86b      	bhi.n	8005c7c <HAL_TIM_ConfigClockSource+0x16c>
 8005ba4:	2b20      	cmp	r3, #32
 8005ba6:	d060      	beq.n	8005c6a <HAL_TIM_ConfigClockSource+0x15a>
 8005ba8:	2b20      	cmp	r3, #32
 8005baa:	d867      	bhi.n	8005c7c <HAL_TIM_ConfigClockSource+0x16c>
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d05c      	beq.n	8005c6a <HAL_TIM_ConfigClockSource+0x15a>
 8005bb0:	2b10      	cmp	r3, #16
 8005bb2:	d05a      	beq.n	8005c6a <HAL_TIM_ConfigClockSource+0x15a>
 8005bb4:	e062      	b.n	8005c7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6818      	ldr	r0, [r3, #0]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	6899      	ldr	r1, [r3, #8]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f000 fbcb 	bl	8006360 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005bd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	609a      	str	r2, [r3, #8]
      break;
 8005be2:	e04f      	b.n	8005c84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6818      	ldr	r0, [r3, #0]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	6899      	ldr	r1, [r3, #8]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	f000 fbb4 	bl	8006360 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689a      	ldr	r2, [r3, #8]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c06:	609a      	str	r2, [r3, #8]
      break;
 8005c08:	e03c      	b.n	8005c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6818      	ldr	r0, [r3, #0]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	6859      	ldr	r1, [r3, #4]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	461a      	mov	r2, r3
 8005c18:	f000 fb28 	bl	800626c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2150      	movs	r1, #80	; 0x50
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 fb81 	bl	800632a <TIM_ITRx_SetConfig>
      break;
 8005c28:	e02c      	b.n	8005c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6818      	ldr	r0, [r3, #0]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	6859      	ldr	r1, [r3, #4]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	461a      	mov	r2, r3
 8005c38:	f000 fb47 	bl	80062ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2160      	movs	r1, #96	; 0x60
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 fb71 	bl	800632a <TIM_ITRx_SetConfig>
      break;
 8005c48:	e01c      	b.n	8005c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6818      	ldr	r0, [r3, #0]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	6859      	ldr	r1, [r3, #4]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	461a      	mov	r2, r3
 8005c58:	f000 fb08 	bl	800626c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2140      	movs	r1, #64	; 0x40
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 fb61 	bl	800632a <TIM_ITRx_SetConfig>
      break;
 8005c68:	e00c      	b.n	8005c84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4619      	mov	r1, r3
 8005c74:	4610      	mov	r0, r2
 8005c76:	f000 fb58 	bl	800632a <TIM_ITRx_SetConfig>
      break;
 8005c7a:	e003      	b.n	8005c84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c80:	e000      	b.n	8005c84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005ca6:	bf00      	nop
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b084      	sub	sp, #16
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d107      	bne.n	8005cda <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cd8:	e02a      	b.n	8005d30 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d107      	bne.n	8005cf4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cf2:	e01d      	b.n	8005d30 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d107      	bne.n	8005d0e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2204      	movs	r2, #4
 8005d02:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d0c:	e010      	b.n	8005d30 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d107      	bne.n	8005d28 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2208      	movs	r2, #8
 8005d1c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d26:	e003      	b.n	8005d30 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f7ff ffb4 	bl	8005c9e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	771a      	strb	r2, [r3, #28]
}
 8005d3c:	bf00      	nop
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d50:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d10b      	bne.n	8005d74 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d136      	bne.n	8005dd8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d72:	e031      	b.n	8005dd8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d10b      	bne.n	8005d96 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2202      	movs	r2, #2
 8005d82:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	69db      	ldr	r3, [r3, #28]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d125      	bne.n	8005dd8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d94:	e020      	b.n	8005dd8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d10b      	bne.n	8005db8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2204      	movs	r2, #4
 8005da4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d114      	bne.n	8005dd8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db6:	e00f      	b.n	8005dd8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d10a      	bne.n	8005dd8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2208      	movs	r2, #8
 8005dc6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	69db      	ldr	r3, [r3, #28]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d103      	bne.n	8005dd8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f7fb fcab 	bl	8001734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	771a      	strb	r2, [r3, #28]
}
 8005de4:	bf00      	nop
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d103      	bne.n	8005e0c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2201      	movs	r2, #1
 8005e08:	771a      	strb	r2, [r3, #28]
 8005e0a:	e019      	b.n	8005e40 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d103      	bne.n	8005e1e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2202      	movs	r2, #2
 8005e1a:	771a      	strb	r2, [r3, #28]
 8005e1c:	e010      	b.n	8005e40 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d103      	bne.n	8005e30 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2204      	movs	r2, #4
 8005e2c:	771a      	strb	r2, [r3, #28]
 8005e2e:	e007      	b.n	8005e40 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d102      	bne.n	8005e40 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2208      	movs	r2, #8
 8005e3e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f7fb fba9 	bl	8001598 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	771a      	strb	r2, [r3, #28]
}
 8005e4c:	bf00      	nop
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a34      	ldr	r2, [pc, #208]	; (8005f38 <TIM_Base_SetConfig+0xe4>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d00f      	beq.n	8005e8c <TIM_Base_SetConfig+0x38>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e72:	d00b      	beq.n	8005e8c <TIM_Base_SetConfig+0x38>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a31      	ldr	r2, [pc, #196]	; (8005f3c <TIM_Base_SetConfig+0xe8>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d007      	beq.n	8005e8c <TIM_Base_SetConfig+0x38>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a30      	ldr	r2, [pc, #192]	; (8005f40 <TIM_Base_SetConfig+0xec>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d003      	beq.n	8005e8c <TIM_Base_SetConfig+0x38>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a2f      	ldr	r2, [pc, #188]	; (8005f44 <TIM_Base_SetConfig+0xf0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d108      	bne.n	8005e9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a25      	ldr	r2, [pc, #148]	; (8005f38 <TIM_Base_SetConfig+0xe4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d01b      	beq.n	8005ede <TIM_Base_SetConfig+0x8a>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eac:	d017      	beq.n	8005ede <TIM_Base_SetConfig+0x8a>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a22      	ldr	r2, [pc, #136]	; (8005f3c <TIM_Base_SetConfig+0xe8>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d013      	beq.n	8005ede <TIM_Base_SetConfig+0x8a>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a21      	ldr	r2, [pc, #132]	; (8005f40 <TIM_Base_SetConfig+0xec>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00f      	beq.n	8005ede <TIM_Base_SetConfig+0x8a>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a20      	ldr	r2, [pc, #128]	; (8005f44 <TIM_Base_SetConfig+0xf0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d00b      	beq.n	8005ede <TIM_Base_SetConfig+0x8a>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a1f      	ldr	r2, [pc, #124]	; (8005f48 <TIM_Base_SetConfig+0xf4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d007      	beq.n	8005ede <TIM_Base_SetConfig+0x8a>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a1e      	ldr	r2, [pc, #120]	; (8005f4c <TIM_Base_SetConfig+0xf8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d003      	beq.n	8005ede <TIM_Base_SetConfig+0x8a>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a1d      	ldr	r2, [pc, #116]	; (8005f50 <TIM_Base_SetConfig+0xfc>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d108      	bne.n	8005ef0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a08      	ldr	r2, [pc, #32]	; (8005f38 <TIM_Base_SetConfig+0xe4>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d103      	bne.n	8005f24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	691a      	ldr	r2, [r3, #16]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	615a      	str	r2, [r3, #20]
}
 8005f2a:	bf00      	nop
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	40010000 	.word	0x40010000
 8005f3c:	40000400 	.word	0x40000400
 8005f40:	40000800 	.word	0x40000800
 8005f44:	40000c00 	.word	0x40000c00
 8005f48:	40014000 	.word	0x40014000
 8005f4c:	40014400 	.word	0x40014400
 8005f50:	40014800 	.word	0x40014800

08005f54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f023 0201 	bic.w	r2, r3, #1
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0303 	bic.w	r3, r3, #3
 8005f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f023 0302 	bic.w	r3, r3, #2
 8005f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a1c      	ldr	r2, [pc, #112]	; (800601c <TIM_OC1_SetConfig+0xc8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d10c      	bne.n	8005fca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f023 0308 	bic.w	r3, r3, #8
 8005fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f023 0304 	bic.w	r3, r3, #4
 8005fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a13      	ldr	r2, [pc, #76]	; (800601c <TIM_OC1_SetConfig+0xc8>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d111      	bne.n	8005ff6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	621a      	str	r2, [r3, #32]
}
 8006010:	bf00      	nop
 8006012:	371c      	adds	r7, #28
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	40010000 	.word	0x40010000

08006020 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	f023 0210 	bic.w	r2, r3, #16
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800604e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	021b      	lsls	r3, r3, #8
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	4313      	orrs	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f023 0320 	bic.w	r3, r3, #32
 800606a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	011b      	lsls	r3, r3, #4
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	4313      	orrs	r3, r2
 8006076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a1e      	ldr	r2, [pc, #120]	; (80060f4 <TIM_OC2_SetConfig+0xd4>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d10d      	bne.n	800609c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	011b      	lsls	r3, r3, #4
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	4313      	orrs	r3, r2
 8006092:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800609a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a15      	ldr	r2, [pc, #84]	; (80060f4 <TIM_OC2_SetConfig+0xd4>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d113      	bne.n	80060cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	4313      	orrs	r3, r2
 80060be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	621a      	str	r2, [r3, #32]
}
 80060e6:	bf00      	nop
 80060e8:	371c      	adds	r7, #28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	40010000 	.word	0x40010000

080060f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 0303 	bic.w	r3, r3, #3
 800612e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	021b      	lsls	r3, r3, #8
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	4313      	orrs	r3, r2
 800614c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a1d      	ldr	r2, [pc, #116]	; (80061c8 <TIM_OC3_SetConfig+0xd0>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d10d      	bne.n	8006172 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800615c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	021b      	lsls	r3, r3, #8
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	4313      	orrs	r3, r2
 8006168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a14      	ldr	r2, [pc, #80]	; (80061c8 <TIM_OC3_SetConfig+0xd0>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d113      	bne.n	80061a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	011b      	lsls	r3, r3, #4
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	4313      	orrs	r3, r2
 8006194:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	011b      	lsls	r3, r3, #4
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	4313      	orrs	r3, r2
 80061a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	621a      	str	r2, [r3, #32]
}
 80061bc:	bf00      	nop
 80061be:	371c      	adds	r7, #28
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	40010000 	.word	0x40010000

080061cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	021b      	lsls	r3, r3, #8
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4313      	orrs	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	031b      	lsls	r3, r3, #12
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	4313      	orrs	r3, r2
 8006222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a10      	ldr	r2, [pc, #64]	; (8006268 <TIM_OC4_SetConfig+0x9c>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d109      	bne.n	8006240 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006232:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	019b      	lsls	r3, r3, #6
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	4313      	orrs	r3, r2
 800623e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	621a      	str	r2, [r3, #32]
}
 800625a:	bf00      	nop
 800625c:	371c      	adds	r7, #28
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	40010000 	.word	0x40010000

0800626c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	f023 0201 	bic.w	r2, r3, #1
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	011b      	lsls	r3, r3, #4
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	4313      	orrs	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f023 030a 	bic.w	r3, r3, #10
 80062a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	621a      	str	r2, [r3, #32]
}
 80062be:	bf00      	nop
 80062c0:	371c      	adds	r7, #28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b087      	sub	sp, #28
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	60f8      	str	r0, [r7, #12]
 80062d2:	60b9      	str	r1, [r7, #8]
 80062d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	f023 0210 	bic.w	r2, r3, #16
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6a1b      	ldr	r3, [r3, #32]
 80062ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	031b      	lsls	r3, r3, #12
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006306:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	011b      	lsls	r3, r3, #4
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	4313      	orrs	r3, r2
 8006310:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	621a      	str	r2, [r3, #32]
}
 800631e:	bf00      	nop
 8006320:	371c      	adds	r7, #28
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800632a:	b480      	push	{r7}
 800632c:	b085      	sub	sp, #20
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006340:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4313      	orrs	r3, r2
 8006348:	f043 0307 	orr.w	r3, r3, #7
 800634c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	609a      	str	r2, [r3, #8]
}
 8006354:	bf00      	nop
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800637a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	021a      	lsls	r2, r3, #8
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	431a      	orrs	r2, r3
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	4313      	orrs	r3, r2
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	4313      	orrs	r3, r2
 800638c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	609a      	str	r2, [r3, #8]
}
 8006394:	bf00      	nop
 8006396:	371c      	adds	r7, #28
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f003 031f 	and.w	r3, r3, #31
 80063b2:	2201      	movs	r2, #1
 80063b4:	fa02 f303 	lsl.w	r3, r2, r3
 80063b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6a1a      	ldr	r2, [r3, #32]
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	43db      	mvns	r3, r3
 80063c2:	401a      	ands	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a1a      	ldr	r2, [r3, #32]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	f003 031f 	and.w	r3, r3, #31
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	fa01 f303 	lsl.w	r3, r1, r3
 80063d8:	431a      	orrs	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	621a      	str	r2, [r3, #32]
}
 80063de:	bf00      	nop
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
	...

080063ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d101      	bne.n	8006404 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006400:	2302      	movs	r3, #2
 8006402:	e050      	b.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	4313      	orrs	r3, r2
 8006434:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a1c      	ldr	r2, [pc, #112]	; (80064b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d018      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006450:	d013      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a18      	ldr	r2, [pc, #96]	; (80064b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d00e      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a16      	ldr	r2, [pc, #88]	; (80064bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d009      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a15      	ldr	r2, [pc, #84]	; (80064c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d004      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a13      	ldr	r2, [pc, #76]	; (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d10c      	bne.n	8006494 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006480:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	4313      	orrs	r3, r2
 800648a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	40010000 	.word	0x40010000
 80064b8:	40000400 	.word	0x40000400
 80064bc:	40000800 	.word	0x40000800
 80064c0:	40000c00 	.word	0x40000c00
 80064c4:	40014000 	.word	0x40014000

080064c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80064d2:	2300      	movs	r3, #0
 80064d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e03d      	b.n	8006560 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	4313      	orrs	r3, r2
 8006506:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	4313      	orrs	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4313      	orrs	r3, r2
 8006522:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	4313      	orrs	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	4313      	orrs	r3, r2
 800653e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e03f      	b.n	80065fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d106      	bne.n	8006598 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7fc f8f6 	bl	8002784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2224      	movs	r2, #36	; 0x24
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f929 	bl	8006808 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	691a      	ldr	r2, [r3, #16]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	695a      	ldr	r2, [r3, #20]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68da      	ldr	r2, [r3, #12]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2220      	movs	r2, #32
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2220      	movs	r2, #32
 80065f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b08a      	sub	sp, #40	; 0x28
 800660a:	af02      	add	r7, sp, #8
 800660c:	60f8      	str	r0, [r7, #12]
 800660e:	60b9      	str	r1, [r7, #8]
 8006610:	603b      	str	r3, [r7, #0]
 8006612:	4613      	mov	r3, r2
 8006614:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006616:	2300      	movs	r3, #0
 8006618:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b20      	cmp	r3, #32
 8006624:	d17c      	bne.n	8006720 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d002      	beq.n	8006632 <HAL_UART_Transmit+0x2c>
 800662c:	88fb      	ldrh	r3, [r7, #6]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e075      	b.n	8006722 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800663c:	2b01      	cmp	r3, #1
 800663e:	d101      	bne.n	8006644 <HAL_UART_Transmit+0x3e>
 8006640:	2302      	movs	r3, #2
 8006642:	e06e      	b.n	8006722 <HAL_UART_Transmit+0x11c>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2221      	movs	r2, #33	; 0x21
 8006656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800665a:	f7fc ff25 	bl	80034a8 <HAL_GetTick>
 800665e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	88fa      	ldrh	r2, [r7, #6]
 8006664:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	88fa      	ldrh	r2, [r7, #6]
 800666a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006674:	d108      	bne.n	8006688 <HAL_UART_Transmit+0x82>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d104      	bne.n	8006688 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800667e:	2300      	movs	r3, #0
 8006680:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	61bb      	str	r3, [r7, #24]
 8006686:	e003      	b.n	8006690 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800668c:	2300      	movs	r3, #0
 800668e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006698:	e02a      	b.n	80066f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	2200      	movs	r2, #0
 80066a2:	2180      	movs	r1, #128	; 0x80
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 f840 	bl	800672a <UART_WaitOnFlagUntilTimeout>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e036      	b.n	8006722 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10b      	bne.n	80066d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	881b      	ldrh	r3, [r3, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	3302      	adds	r3, #2
 80066ce:	61bb      	str	r3, [r7, #24]
 80066d0:	e007      	b.n	80066e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	781a      	ldrb	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	3301      	adds	r3, #1
 80066e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	3b01      	subs	r3, #1
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1cf      	bne.n	800669a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2200      	movs	r2, #0
 8006702:	2140      	movs	r1, #64	; 0x40
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 f810 	bl	800672a <UART_WaitOnFlagUntilTimeout>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e006      	b.n	8006722 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2220      	movs	r2, #32
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	e000      	b.n	8006722 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006720:	2302      	movs	r3, #2
  }
}
 8006722:	4618      	mov	r0, r3
 8006724:	3720      	adds	r7, #32
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b090      	sub	sp, #64	; 0x40
 800672e:	af00      	add	r7, sp, #0
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	603b      	str	r3, [r7, #0]
 8006736:	4613      	mov	r3, r2
 8006738:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800673a:	e050      	b.n	80067de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800673c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800673e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006742:	d04c      	beq.n	80067de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006746:	2b00      	cmp	r3, #0
 8006748:	d007      	beq.n	800675a <UART_WaitOnFlagUntilTimeout+0x30>
 800674a:	f7fc fead 	bl	80034a8 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006756:	429a      	cmp	r2, r3
 8006758:	d241      	bcs.n	80067de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	330c      	adds	r3, #12
 8006760:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006770:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	330c      	adds	r3, #12
 8006778:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800677a:	637a      	str	r2, [r7, #52]	; 0x34
 800677c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e5      	bne.n	800675a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3314      	adds	r3, #20
 8006794:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	e853 3f00 	ldrex	r3, [r3]
 800679c:	613b      	str	r3, [r7, #16]
   return(result);
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	f023 0301 	bic.w	r3, r3, #1
 80067a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3314      	adds	r3, #20
 80067ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067ae:	623a      	str	r2, [r7, #32]
 80067b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	69f9      	ldr	r1, [r7, #28]
 80067b4:	6a3a      	ldr	r2, [r7, #32]
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1e5      	bne.n	800678e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e00f      	b.n	80067fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	4013      	ands	r3, r2
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	bf0c      	ite	eq
 80067ee:	2301      	moveq	r3, #1
 80067f0:	2300      	movne	r3, #0
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	461a      	mov	r2, r3
 80067f6:	79fb      	ldrb	r3, [r7, #7]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d09f      	beq.n	800673c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3740      	adds	r7, #64	; 0x40
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
	...

08006808 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800680c:	b0c0      	sub	sp, #256	; 0x100
 800680e:	af00      	add	r7, sp, #0
 8006810:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006824:	68d9      	ldr	r1, [r3, #12]
 8006826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	ea40 0301 	orr.w	r3, r0, r1
 8006830:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006836:	689a      	ldr	r2, [r3, #8]
 8006838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	431a      	orrs	r2, r3
 8006840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	431a      	orrs	r2, r3
 8006848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	4313      	orrs	r3, r2
 8006850:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006860:	f021 010c 	bic.w	r1, r1, #12
 8006864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800686e:	430b      	orrs	r3, r1
 8006870:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800687e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006882:	6999      	ldr	r1, [r3, #24]
 8006884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	ea40 0301 	orr.w	r3, r0, r1
 800688e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	4b8f      	ldr	r3, [pc, #572]	; (8006ad4 <UART_SetConfig+0x2cc>)
 8006898:	429a      	cmp	r2, r3
 800689a:	d005      	beq.n	80068a8 <UART_SetConfig+0xa0>
 800689c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	4b8d      	ldr	r3, [pc, #564]	; (8006ad8 <UART_SetConfig+0x2d0>)
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d104      	bne.n	80068b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068a8:	f7fe f90c 	bl	8004ac4 <HAL_RCC_GetPCLK2Freq>
 80068ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80068b0:	e003      	b.n	80068ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068b2:	f7fe f8f3 	bl	8004a9c <HAL_RCC_GetPCLK1Freq>
 80068b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068be:	69db      	ldr	r3, [r3, #28]
 80068c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068c4:	f040 810c 	bne.w	8006ae0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068cc:	2200      	movs	r2, #0
 80068ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80068d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80068da:	4622      	mov	r2, r4
 80068dc:	462b      	mov	r3, r5
 80068de:	1891      	adds	r1, r2, r2
 80068e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80068e2:	415b      	adcs	r3, r3
 80068e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80068ea:	4621      	mov	r1, r4
 80068ec:	eb12 0801 	adds.w	r8, r2, r1
 80068f0:	4629      	mov	r1, r5
 80068f2:	eb43 0901 	adc.w	r9, r3, r1
 80068f6:	f04f 0200 	mov.w	r2, #0
 80068fa:	f04f 0300 	mov.w	r3, #0
 80068fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006902:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006906:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800690a:	4690      	mov	r8, r2
 800690c:	4699      	mov	r9, r3
 800690e:	4623      	mov	r3, r4
 8006910:	eb18 0303 	adds.w	r3, r8, r3
 8006914:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006918:	462b      	mov	r3, r5
 800691a:	eb49 0303 	adc.w	r3, r9, r3
 800691e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800692e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006932:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006936:	460b      	mov	r3, r1
 8006938:	18db      	adds	r3, r3, r3
 800693a:	653b      	str	r3, [r7, #80]	; 0x50
 800693c:	4613      	mov	r3, r2
 800693e:	eb42 0303 	adc.w	r3, r2, r3
 8006942:	657b      	str	r3, [r7, #84]	; 0x54
 8006944:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006948:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800694c:	f7f9 fca0 	bl	8000290 <__aeabi_uldivmod>
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	4b61      	ldr	r3, [pc, #388]	; (8006adc <UART_SetConfig+0x2d4>)
 8006956:	fba3 2302 	umull	r2, r3, r3, r2
 800695a:	095b      	lsrs	r3, r3, #5
 800695c:	011c      	lsls	r4, r3, #4
 800695e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006962:	2200      	movs	r2, #0
 8006964:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006968:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800696c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006970:	4642      	mov	r2, r8
 8006972:	464b      	mov	r3, r9
 8006974:	1891      	adds	r1, r2, r2
 8006976:	64b9      	str	r1, [r7, #72]	; 0x48
 8006978:	415b      	adcs	r3, r3
 800697a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800697c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006980:	4641      	mov	r1, r8
 8006982:	eb12 0a01 	adds.w	sl, r2, r1
 8006986:	4649      	mov	r1, r9
 8006988:	eb43 0b01 	adc.w	fp, r3, r1
 800698c:	f04f 0200 	mov.w	r2, #0
 8006990:	f04f 0300 	mov.w	r3, #0
 8006994:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006998:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800699c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069a0:	4692      	mov	sl, r2
 80069a2:	469b      	mov	fp, r3
 80069a4:	4643      	mov	r3, r8
 80069a6:	eb1a 0303 	adds.w	r3, sl, r3
 80069aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069ae:	464b      	mov	r3, r9
 80069b0:	eb4b 0303 	adc.w	r3, fp, r3
 80069b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80069b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80069c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80069cc:	460b      	mov	r3, r1
 80069ce:	18db      	adds	r3, r3, r3
 80069d0:	643b      	str	r3, [r7, #64]	; 0x40
 80069d2:	4613      	mov	r3, r2
 80069d4:	eb42 0303 	adc.w	r3, r2, r3
 80069d8:	647b      	str	r3, [r7, #68]	; 0x44
 80069da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80069de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80069e2:	f7f9 fc55 	bl	8000290 <__aeabi_uldivmod>
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	4611      	mov	r1, r2
 80069ec:	4b3b      	ldr	r3, [pc, #236]	; (8006adc <UART_SetConfig+0x2d4>)
 80069ee:	fba3 2301 	umull	r2, r3, r3, r1
 80069f2:	095b      	lsrs	r3, r3, #5
 80069f4:	2264      	movs	r2, #100	; 0x64
 80069f6:	fb02 f303 	mul.w	r3, r2, r3
 80069fa:	1acb      	subs	r3, r1, r3
 80069fc:	00db      	lsls	r3, r3, #3
 80069fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006a02:	4b36      	ldr	r3, [pc, #216]	; (8006adc <UART_SetConfig+0x2d4>)
 8006a04:	fba3 2302 	umull	r2, r3, r3, r2
 8006a08:	095b      	lsrs	r3, r3, #5
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a10:	441c      	add	r4, r3
 8006a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a16:	2200      	movs	r2, #0
 8006a18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006a20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006a24:	4642      	mov	r2, r8
 8006a26:	464b      	mov	r3, r9
 8006a28:	1891      	adds	r1, r2, r2
 8006a2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a2c:	415b      	adcs	r3, r3
 8006a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a34:	4641      	mov	r1, r8
 8006a36:	1851      	adds	r1, r2, r1
 8006a38:	6339      	str	r1, [r7, #48]	; 0x30
 8006a3a:	4649      	mov	r1, r9
 8006a3c:	414b      	adcs	r3, r1
 8006a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a40:	f04f 0200 	mov.w	r2, #0
 8006a44:	f04f 0300 	mov.w	r3, #0
 8006a48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a4c:	4659      	mov	r1, fp
 8006a4e:	00cb      	lsls	r3, r1, #3
 8006a50:	4651      	mov	r1, sl
 8006a52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a56:	4651      	mov	r1, sl
 8006a58:	00ca      	lsls	r2, r1, #3
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	4603      	mov	r3, r0
 8006a60:	4642      	mov	r2, r8
 8006a62:	189b      	adds	r3, r3, r2
 8006a64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a68:	464b      	mov	r3, r9
 8006a6a:	460a      	mov	r2, r1
 8006a6c:	eb42 0303 	adc.w	r3, r2, r3
 8006a70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a88:	460b      	mov	r3, r1
 8006a8a:	18db      	adds	r3, r3, r3
 8006a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a8e:	4613      	mov	r3, r2
 8006a90:	eb42 0303 	adc.w	r3, r2, r3
 8006a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a9e:	f7f9 fbf7 	bl	8000290 <__aeabi_uldivmod>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4b0d      	ldr	r3, [pc, #52]	; (8006adc <UART_SetConfig+0x2d4>)
 8006aa8:	fba3 1302 	umull	r1, r3, r3, r2
 8006aac:	095b      	lsrs	r3, r3, #5
 8006aae:	2164      	movs	r1, #100	; 0x64
 8006ab0:	fb01 f303 	mul.w	r3, r1, r3
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	00db      	lsls	r3, r3, #3
 8006ab8:	3332      	adds	r3, #50	; 0x32
 8006aba:	4a08      	ldr	r2, [pc, #32]	; (8006adc <UART_SetConfig+0x2d4>)
 8006abc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac0:	095b      	lsrs	r3, r3, #5
 8006ac2:	f003 0207 	and.w	r2, r3, #7
 8006ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4422      	add	r2, r4
 8006ace:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ad0:	e105      	b.n	8006cde <UART_SetConfig+0x4d6>
 8006ad2:	bf00      	nop
 8006ad4:	40011000 	.word	0x40011000
 8006ad8:	40011400 	.word	0x40011400
 8006adc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ae0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006aea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006aee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006af2:	4642      	mov	r2, r8
 8006af4:	464b      	mov	r3, r9
 8006af6:	1891      	adds	r1, r2, r2
 8006af8:	6239      	str	r1, [r7, #32]
 8006afa:	415b      	adcs	r3, r3
 8006afc:	627b      	str	r3, [r7, #36]	; 0x24
 8006afe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b02:	4641      	mov	r1, r8
 8006b04:	1854      	adds	r4, r2, r1
 8006b06:	4649      	mov	r1, r9
 8006b08:	eb43 0501 	adc.w	r5, r3, r1
 8006b0c:	f04f 0200 	mov.w	r2, #0
 8006b10:	f04f 0300 	mov.w	r3, #0
 8006b14:	00eb      	lsls	r3, r5, #3
 8006b16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b1a:	00e2      	lsls	r2, r4, #3
 8006b1c:	4614      	mov	r4, r2
 8006b1e:	461d      	mov	r5, r3
 8006b20:	4643      	mov	r3, r8
 8006b22:	18e3      	adds	r3, r4, r3
 8006b24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b28:	464b      	mov	r3, r9
 8006b2a:	eb45 0303 	adc.w	r3, r5, r3
 8006b2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b42:	f04f 0200 	mov.w	r2, #0
 8006b46:	f04f 0300 	mov.w	r3, #0
 8006b4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b4e:	4629      	mov	r1, r5
 8006b50:	008b      	lsls	r3, r1, #2
 8006b52:	4621      	mov	r1, r4
 8006b54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b58:	4621      	mov	r1, r4
 8006b5a:	008a      	lsls	r2, r1, #2
 8006b5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b60:	f7f9 fb96 	bl	8000290 <__aeabi_uldivmod>
 8006b64:	4602      	mov	r2, r0
 8006b66:	460b      	mov	r3, r1
 8006b68:	4b60      	ldr	r3, [pc, #384]	; (8006cec <UART_SetConfig+0x4e4>)
 8006b6a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b6e:	095b      	lsrs	r3, r3, #5
 8006b70:	011c      	lsls	r4, r3, #4
 8006b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b76:	2200      	movs	r2, #0
 8006b78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b84:	4642      	mov	r2, r8
 8006b86:	464b      	mov	r3, r9
 8006b88:	1891      	adds	r1, r2, r2
 8006b8a:	61b9      	str	r1, [r7, #24]
 8006b8c:	415b      	adcs	r3, r3
 8006b8e:	61fb      	str	r3, [r7, #28]
 8006b90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b94:	4641      	mov	r1, r8
 8006b96:	1851      	adds	r1, r2, r1
 8006b98:	6139      	str	r1, [r7, #16]
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	414b      	adcs	r3, r1
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	f04f 0200 	mov.w	r2, #0
 8006ba4:	f04f 0300 	mov.w	r3, #0
 8006ba8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006bac:	4659      	mov	r1, fp
 8006bae:	00cb      	lsls	r3, r1, #3
 8006bb0:	4651      	mov	r1, sl
 8006bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bb6:	4651      	mov	r1, sl
 8006bb8:	00ca      	lsls	r2, r1, #3
 8006bba:	4610      	mov	r0, r2
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	4642      	mov	r2, r8
 8006bc2:	189b      	adds	r3, r3, r2
 8006bc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bc8:	464b      	mov	r3, r9
 8006bca:	460a      	mov	r2, r1
 8006bcc:	eb42 0303 	adc.w	r3, r2, r3
 8006bd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bde:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006be0:	f04f 0200 	mov.w	r2, #0
 8006be4:	f04f 0300 	mov.w	r3, #0
 8006be8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006bec:	4649      	mov	r1, r9
 8006bee:	008b      	lsls	r3, r1, #2
 8006bf0:	4641      	mov	r1, r8
 8006bf2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bf6:	4641      	mov	r1, r8
 8006bf8:	008a      	lsls	r2, r1, #2
 8006bfa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006bfe:	f7f9 fb47 	bl	8000290 <__aeabi_uldivmod>
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
 8006c06:	4b39      	ldr	r3, [pc, #228]	; (8006cec <UART_SetConfig+0x4e4>)
 8006c08:	fba3 1302 	umull	r1, r3, r3, r2
 8006c0c:	095b      	lsrs	r3, r3, #5
 8006c0e:	2164      	movs	r1, #100	; 0x64
 8006c10:	fb01 f303 	mul.w	r3, r1, r3
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	011b      	lsls	r3, r3, #4
 8006c18:	3332      	adds	r3, #50	; 0x32
 8006c1a:	4a34      	ldr	r2, [pc, #208]	; (8006cec <UART_SetConfig+0x4e4>)
 8006c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c20:	095b      	lsrs	r3, r3, #5
 8006c22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c26:	441c      	add	r4, r3
 8006c28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	673b      	str	r3, [r7, #112]	; 0x70
 8006c30:	677a      	str	r2, [r7, #116]	; 0x74
 8006c32:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006c36:	4642      	mov	r2, r8
 8006c38:	464b      	mov	r3, r9
 8006c3a:	1891      	adds	r1, r2, r2
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	415b      	adcs	r3, r3
 8006c40:	60fb      	str	r3, [r7, #12]
 8006c42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c46:	4641      	mov	r1, r8
 8006c48:	1851      	adds	r1, r2, r1
 8006c4a:	6039      	str	r1, [r7, #0]
 8006c4c:	4649      	mov	r1, r9
 8006c4e:	414b      	adcs	r3, r1
 8006c50:	607b      	str	r3, [r7, #4]
 8006c52:	f04f 0200 	mov.w	r2, #0
 8006c56:	f04f 0300 	mov.w	r3, #0
 8006c5a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c5e:	4659      	mov	r1, fp
 8006c60:	00cb      	lsls	r3, r1, #3
 8006c62:	4651      	mov	r1, sl
 8006c64:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c68:	4651      	mov	r1, sl
 8006c6a:	00ca      	lsls	r2, r1, #3
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	4619      	mov	r1, r3
 8006c70:	4603      	mov	r3, r0
 8006c72:	4642      	mov	r2, r8
 8006c74:	189b      	adds	r3, r3, r2
 8006c76:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c78:	464b      	mov	r3, r9
 8006c7a:	460a      	mov	r2, r1
 8006c7c:	eb42 0303 	adc.w	r3, r2, r3
 8006c80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	663b      	str	r3, [r7, #96]	; 0x60
 8006c8c:	667a      	str	r2, [r7, #100]	; 0x64
 8006c8e:	f04f 0200 	mov.w	r2, #0
 8006c92:	f04f 0300 	mov.w	r3, #0
 8006c96:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c9a:	4649      	mov	r1, r9
 8006c9c:	008b      	lsls	r3, r1, #2
 8006c9e:	4641      	mov	r1, r8
 8006ca0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ca4:	4641      	mov	r1, r8
 8006ca6:	008a      	lsls	r2, r1, #2
 8006ca8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006cac:	f7f9 faf0 	bl	8000290 <__aeabi_uldivmod>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4b0d      	ldr	r3, [pc, #52]	; (8006cec <UART_SetConfig+0x4e4>)
 8006cb6:	fba3 1302 	umull	r1, r3, r3, r2
 8006cba:	095b      	lsrs	r3, r3, #5
 8006cbc:	2164      	movs	r1, #100	; 0x64
 8006cbe:	fb01 f303 	mul.w	r3, r1, r3
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	011b      	lsls	r3, r3, #4
 8006cc6:	3332      	adds	r3, #50	; 0x32
 8006cc8:	4a08      	ldr	r2, [pc, #32]	; (8006cec <UART_SetConfig+0x4e4>)
 8006cca:	fba2 2303 	umull	r2, r3, r2, r3
 8006cce:	095b      	lsrs	r3, r3, #5
 8006cd0:	f003 020f 	and.w	r2, r3, #15
 8006cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4422      	add	r2, r4
 8006cdc:	609a      	str	r2, [r3, #8]
}
 8006cde:	bf00      	nop
 8006ce0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cea:	bf00      	nop
 8006cec:	51eb851f 	.word	0x51eb851f

08006cf0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006cf4:	4904      	ldr	r1, [pc, #16]	; (8006d08 <MX_FATFS_Init+0x18>)
 8006cf6:	4805      	ldr	r0, [pc, #20]	; (8006d0c <MX_FATFS_Init+0x1c>)
 8006cf8:	f003 fb12 	bl	800a320 <FATFS_LinkDriver>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	461a      	mov	r2, r3
 8006d00:	4b03      	ldr	r3, [pc, #12]	; (8006d10 <MX_FATFS_Init+0x20>)
 8006d02:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006d04:	bf00      	nop
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	20001e40 	.word	0x20001e40
 8006d0c:	2000000c 	.word	0x2000000c
 8006d10:	20001e3c 	.word	0x20001e3c

08006d14 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006d14:	b480      	push	{r7}
 8006d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006d18:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8006d2e:	79fb      	ldrb	r3, [r7, #7]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 f9dd 	bl	80070f0 <USER_SPI_initialize>
 8006d36:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	4603      	mov	r3, r0
 8006d48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8006d4a:	79fb      	ldrb	r3, [r7, #7]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 fab9 	bl	80072c4 <USER_SPI_status>
 8006d52:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	607a      	str	r2, [r7, #4]
 8006d66:	603b      	str	r3, [r7, #0]
 8006d68:	4603      	mov	r3, r0
 8006d6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8006d6c:	7bf8      	ldrb	r0, [r7, #15]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	68b9      	ldr	r1, [r7, #8]
 8006d74:	f000 fabc 	bl	80072f0 <USER_SPI_read>
 8006d78:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b084      	sub	sp, #16
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
 8006d8c:	603b      	str	r3, [r7, #0]
 8006d8e:	4603      	mov	r3, r0
 8006d90:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8006d92:	7bf8      	ldrb	r0, [r7, #15]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	68b9      	ldr	r1, [r7, #8]
 8006d9a:	f000 fb0f 	bl	80073bc <USER_SPI_write>
 8006d9e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	4603      	mov	r3, r0
 8006db0:	603a      	str	r2, [r7, #0]
 8006db2:	71fb      	strb	r3, [r7, #7]
 8006db4:	460b      	mov	r3, r1
 8006db6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8006db8:	79b9      	ldrb	r1, [r7, #6]
 8006dba:	79fb      	ldrb	r3, [r7, #7]
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fb78 	bl	80074b4 <USER_SPI_ioctl>
 8006dc4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
	...

08006dd0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006dd8:	f7fc fb66 	bl	80034a8 <HAL_GetTick>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	4a04      	ldr	r2, [pc, #16]	; (8006df0 <SPI_Timer_On+0x20>)
 8006de0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8006de2:	4a04      	ldr	r2, [pc, #16]	; (8006df4 <SPI_Timer_On+0x24>)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6013      	str	r3, [r2, #0]
}
 8006de8:	bf00      	nop
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	20001e48 	.word	0x20001e48
 8006df4:	20001e4c 	.word	0x20001e4c

08006df8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006dfc:	f7fc fb54 	bl	80034a8 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	4b06      	ldr	r3, [pc, #24]	; (8006e1c <SPI_Timer_Status+0x24>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	1ad2      	subs	r2, r2, r3
 8006e08:	4b05      	ldr	r3, [pc, #20]	; (8006e20 <SPI_Timer_Status+0x28>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	bf34      	ite	cc
 8006e10:	2301      	movcc	r3, #1
 8006e12:	2300      	movcs	r3, #0
 8006e14:	b2db      	uxtb	r3, r3
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	20001e48 	.word	0x20001e48
 8006e20:	20001e4c 	.word	0x20001e4c

08006e24 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af02      	add	r7, sp, #8
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006e2e:	f107 020f 	add.w	r2, r7, #15
 8006e32:	1df9      	adds	r1, r7, #7
 8006e34:	2332      	movs	r3, #50	; 0x32
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	2301      	movs	r3, #1
 8006e3a:	4804      	ldr	r0, [pc, #16]	; (8006e4c <xchg_spi+0x28>)
 8006e3c:	f7fe f81b 	bl	8004e76 <HAL_SPI_TransmitReceive>
    return rxDat;
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	200000a4 	.word	0x200000a4

08006e50 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006e50:	b590      	push	{r4, r7, lr}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60fb      	str	r3, [r7, #12]
 8006e5e:	e00a      	b.n	8006e76 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	18d4      	adds	r4, r2, r3
 8006e66:	20ff      	movs	r0, #255	; 0xff
 8006e68:	f7ff ffdc 	bl	8006e24 <xchg_spi>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	3301      	adds	r3, #1
 8006e74:	60fb      	str	r3, [r7, #12]
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d3f0      	bcc.n	8006e60 <rcvr_spi_multi+0x10>
	}
}
 8006e7e:	bf00      	nop
 8006e80:	bf00      	nop
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd90      	pop	{r4, r7, pc}

08006e88 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8006e92:	2300      	movs	r3, #0
 8006e94:	60fb      	str	r3, [r7, #12]
 8006e96:	e009      	b.n	8006eac <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7ff ffbf 	bl	8006e24 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	60fb      	str	r3, [r7, #12]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d3f1      	bcc.n	8006e98 <xmit_spi_multi+0x10>
	}
}
 8006eb4:	bf00      	nop
 8006eb6:	bf00      	nop
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b086      	sub	sp, #24
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006ec6:	f7fc faef 	bl	80034a8 <HAL_GetTick>
 8006eca:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006ed0:	20ff      	movs	r0, #255	; 0xff
 8006ed2:	f7ff ffa7 	bl	8006e24 <xchg_spi>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
 8006edc:	2bff      	cmp	r3, #255	; 0xff
 8006ede:	d007      	beq.n	8006ef0 <wait_ready+0x32>
 8006ee0:	f7fc fae2 	bl	80034a8 <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d8ef      	bhi.n	8006ed0 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	2bff      	cmp	r3, #255	; 0xff
 8006ef4:	bf0c      	ite	eq
 8006ef6:	2301      	moveq	r3, #1
 8006ef8:	2300      	movne	r3, #0
 8006efa:	b2db      	uxtb	r3, r3
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3718      	adds	r7, #24
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f0e:	4804      	ldr	r0, [pc, #16]	; (8006f20 <despiselect+0x1c>)
 8006f10:	f7fd f922 	bl	8004158 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006f14:	20ff      	movs	r0, #255	; 0xff
 8006f16:	f7ff ff85 	bl	8006e24 <xchg_spi>

}
 8006f1a:	bf00      	nop
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	40020000 	.word	0x40020000

08006f24 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f2e:	480a      	ldr	r0, [pc, #40]	; (8006f58 <spiselect+0x34>)
 8006f30:	f7fd f912 	bl	8004158 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006f34:	20ff      	movs	r0, #255	; 0xff
 8006f36:	f7ff ff75 	bl	8006e24 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006f3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006f3e:	f7ff ffbe 	bl	8006ebe <wait_ready>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <spiselect+0x28>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e002      	b.n	8006f52 <spiselect+0x2e>

	despiselect();
 8006f4c:	f7ff ffda 	bl	8006f04 <despiselect>
	return 0;	/* Timeout */
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	40020000 	.word	0x40020000

08006f5c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8006f66:	20c8      	movs	r0, #200	; 0xc8
 8006f68:	f7ff ff32 	bl	8006dd0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006f6c:	20ff      	movs	r0, #255	; 0xff
 8006f6e:	f7ff ff59 	bl	8006e24 <xchg_spi>
 8006f72:	4603      	mov	r3, r0
 8006f74:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
 8006f78:	2bff      	cmp	r3, #255	; 0xff
 8006f7a:	d104      	bne.n	8006f86 <rcvr_datablock+0x2a>
 8006f7c:	f7ff ff3c 	bl	8006df8 <SPI_Timer_Status>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1f2      	bne.n	8006f6c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
 8006f88:	2bfe      	cmp	r3, #254	; 0xfe
 8006f8a:	d001      	beq.n	8006f90 <rcvr_datablock+0x34>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	e00a      	b.n	8006fa6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006f90:	6839      	ldr	r1, [r7, #0]
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7ff ff5c 	bl	8006e50 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006f98:	20ff      	movs	r0, #255	; 0xff
 8006f9a:	f7ff ff43 	bl	8006e24 <xchg_spi>
 8006f9e:	20ff      	movs	r0, #255	; 0xff
 8006fa0:	f7ff ff40 	bl	8006e24 <xchg_spi>

	return 1;						/* Function succeeded */
 8006fa4:	2301      	movs	r3, #1
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b084      	sub	sp, #16
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006fba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006fbe:	f7ff ff7e 	bl	8006ebe <wait_ready>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <xmit_datablock+0x1e>
 8006fc8:	2300      	movs	r3, #0
 8006fca:	e01e      	b.n	800700a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006fcc:	78fb      	ldrb	r3, [r7, #3]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7ff ff28 	bl	8006e24 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006fd4:	78fb      	ldrb	r3, [r7, #3]
 8006fd6:	2bfd      	cmp	r3, #253	; 0xfd
 8006fd8:	d016      	beq.n	8007008 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006fda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7ff ff52 	bl	8006e88 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006fe4:	20ff      	movs	r0, #255	; 0xff
 8006fe6:	f7ff ff1d 	bl	8006e24 <xchg_spi>
 8006fea:	20ff      	movs	r0, #255	; 0xff
 8006fec:	f7ff ff1a 	bl	8006e24 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006ff0:	20ff      	movs	r0, #255	; 0xff
 8006ff2:	f7ff ff17 	bl	8006e24 <xchg_spi>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
 8006ffc:	f003 031f 	and.w	r3, r3, #31
 8007000:	2b05      	cmp	r3, #5
 8007002:	d001      	beq.n	8007008 <xmit_datablock+0x5a>
 8007004:	2300      	movs	r3, #0
 8007006:	e000      	b.n	800700a <xmit_datablock+0x5c>
	}
	return 1;
 8007008:	2301      	movs	r3, #1
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b084      	sub	sp, #16
 8007016:	af00      	add	r7, sp, #0
 8007018:	4603      	mov	r3, r0
 800701a:	6039      	str	r1, [r7, #0]
 800701c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800701e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007022:	2b00      	cmp	r3, #0
 8007024:	da0e      	bge.n	8007044 <send_cmd+0x32>
		cmd &= 0x7F;
 8007026:	79fb      	ldrb	r3, [r7, #7]
 8007028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800702c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800702e:	2100      	movs	r1, #0
 8007030:	2037      	movs	r0, #55	; 0x37
 8007032:	f7ff ffee 	bl	8007012 <send_cmd>
 8007036:	4603      	mov	r3, r0
 8007038:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800703a:	7bbb      	ldrb	r3, [r7, #14]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d901      	bls.n	8007044 <send_cmd+0x32>
 8007040:	7bbb      	ldrb	r3, [r7, #14]
 8007042:	e051      	b.n	80070e8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8007044:	79fb      	ldrb	r3, [r7, #7]
 8007046:	2b0c      	cmp	r3, #12
 8007048:	d008      	beq.n	800705c <send_cmd+0x4a>
		despiselect();
 800704a:	f7ff ff5b 	bl	8006f04 <despiselect>
		if (!spiselect()) return 0xFF;
 800704e:	f7ff ff69 	bl	8006f24 <spiselect>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <send_cmd+0x4a>
 8007058:	23ff      	movs	r3, #255	; 0xff
 800705a:	e045      	b.n	80070e8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800705c:	79fb      	ldrb	r3, [r7, #7]
 800705e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007062:	b2db      	uxtb	r3, r3
 8007064:	4618      	mov	r0, r3
 8007066:	f7ff fedd 	bl	8006e24 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	0e1b      	lsrs	r3, r3, #24
 800706e:	b2db      	uxtb	r3, r3
 8007070:	4618      	mov	r0, r3
 8007072:	f7ff fed7 	bl	8006e24 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	0c1b      	lsrs	r3, r3, #16
 800707a:	b2db      	uxtb	r3, r3
 800707c:	4618      	mov	r0, r3
 800707e:	f7ff fed1 	bl	8006e24 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	0a1b      	lsrs	r3, r3, #8
 8007086:	b2db      	uxtb	r3, r3
 8007088:	4618      	mov	r0, r3
 800708a:	f7ff fecb 	bl	8006e24 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	b2db      	uxtb	r3, r3
 8007092:	4618      	mov	r0, r3
 8007094:	f7ff fec6 	bl	8006e24 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007098:	2301      	movs	r3, #1
 800709a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800709c:	79fb      	ldrb	r3, [r7, #7]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <send_cmd+0x94>
 80070a2:	2395      	movs	r3, #149	; 0x95
 80070a4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80070a6:	79fb      	ldrb	r3, [r7, #7]
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d101      	bne.n	80070b0 <send_cmd+0x9e>
 80070ac:	2387      	movs	r3, #135	; 0x87
 80070ae:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7ff feb6 	bl	8006e24 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80070b8:	79fb      	ldrb	r3, [r7, #7]
 80070ba:	2b0c      	cmp	r3, #12
 80070bc:	d102      	bne.n	80070c4 <send_cmd+0xb2>
 80070be:	20ff      	movs	r0, #255	; 0xff
 80070c0:	f7ff feb0 	bl	8006e24 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80070c4:	230a      	movs	r3, #10
 80070c6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80070c8:	20ff      	movs	r0, #255	; 0xff
 80070ca:	f7ff feab 	bl	8006e24 <xchg_spi>
 80070ce:	4603      	mov	r3, r0
 80070d0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80070d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	da05      	bge.n	80070e6 <send_cmd+0xd4>
 80070da:	7bfb      	ldrb	r3, [r7, #15]
 80070dc:	3b01      	subs	r3, #1
 80070de:	73fb      	strb	r3, [r7, #15]
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1f0      	bne.n	80070c8 <send_cmd+0xb6>

	return res;							/* Return received response */
 80070e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80070f0:	b590      	push	{r4, r7, lr}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	4603      	mov	r3, r0
 80070f8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80070fa:	79fb      	ldrb	r3, [r7, #7]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d001      	beq.n	8007104 <USER_SPI_initialize+0x14>
 8007100:	2301      	movs	r3, #1
 8007102:	e0d4      	b.n	80072ae <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007104:	4b6c      	ldr	r3, [pc, #432]	; (80072b8 <USER_SPI_initialize+0x1c8>)
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	b2db      	uxtb	r3, r3
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <USER_SPI_initialize+0x2a>
 8007112:	4b69      	ldr	r3, [pc, #420]	; (80072b8 <USER_SPI_initialize+0x1c8>)
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	b2db      	uxtb	r3, r3
 8007118:	e0c9      	b.n	80072ae <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800711a:	4b68      	ldr	r3, [pc, #416]	; (80072bc <USER_SPI_initialize+0x1cc>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	4b66      	ldr	r3, [pc, #408]	; (80072bc <USER_SPI_initialize+0x1cc>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8007128:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800712a:	230a      	movs	r3, #10
 800712c:	73fb      	strb	r3, [r7, #15]
 800712e:	e005      	b.n	800713c <USER_SPI_initialize+0x4c>
 8007130:	20ff      	movs	r0, #255	; 0xff
 8007132:	f7ff fe77 	bl	8006e24 <xchg_spi>
 8007136:	7bfb      	ldrb	r3, [r7, #15]
 8007138:	3b01      	subs	r3, #1
 800713a:	73fb      	strb	r3, [r7, #15]
 800713c:	7bfb      	ldrb	r3, [r7, #15]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1f6      	bne.n	8007130 <USER_SPI_initialize+0x40>

	ty = 0;
 8007142:	2300      	movs	r3, #0
 8007144:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8007146:	2100      	movs	r1, #0
 8007148:	2000      	movs	r0, #0
 800714a:	f7ff ff62 	bl	8007012 <send_cmd>
 800714e:	4603      	mov	r3, r0
 8007150:	2b01      	cmp	r3, #1
 8007152:	f040 808b 	bne.w	800726c <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8007156:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800715a:	f7ff fe39 	bl	8006dd0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800715e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007162:	2008      	movs	r0, #8
 8007164:	f7ff ff55 	bl	8007012 <send_cmd>
 8007168:	4603      	mov	r3, r0
 800716a:	2b01      	cmp	r3, #1
 800716c:	d151      	bne.n	8007212 <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800716e:	2300      	movs	r3, #0
 8007170:	73fb      	strb	r3, [r7, #15]
 8007172:	e00d      	b.n	8007190 <USER_SPI_initialize+0xa0>
 8007174:	7bfc      	ldrb	r4, [r7, #15]
 8007176:	20ff      	movs	r0, #255	; 0xff
 8007178:	f7ff fe54 	bl	8006e24 <xchg_spi>
 800717c:	4603      	mov	r3, r0
 800717e:	461a      	mov	r2, r3
 8007180:	f104 0310 	add.w	r3, r4, #16
 8007184:	443b      	add	r3, r7
 8007186:	f803 2c08 	strb.w	r2, [r3, #-8]
 800718a:	7bfb      	ldrb	r3, [r7, #15]
 800718c:	3301      	adds	r3, #1
 800718e:	73fb      	strb	r3, [r7, #15]
 8007190:	7bfb      	ldrb	r3, [r7, #15]
 8007192:	2b03      	cmp	r3, #3
 8007194:	d9ee      	bls.n	8007174 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8007196:	7abb      	ldrb	r3, [r7, #10]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d167      	bne.n	800726c <USER_SPI_initialize+0x17c>
 800719c:	7afb      	ldrb	r3, [r7, #11]
 800719e:	2baa      	cmp	r3, #170	; 0xaa
 80071a0:	d164      	bne.n	800726c <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80071a2:	bf00      	nop
 80071a4:	f7ff fe28 	bl	8006df8 <SPI_Timer_Status>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d007      	beq.n	80071be <USER_SPI_initialize+0xce>
 80071ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80071b2:	20a9      	movs	r0, #169	; 0xa9
 80071b4:	f7ff ff2d 	bl	8007012 <send_cmd>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1f2      	bne.n	80071a4 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80071be:	f7ff fe1b 	bl	8006df8 <SPI_Timer_Status>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d051      	beq.n	800726c <USER_SPI_initialize+0x17c>
 80071c8:	2100      	movs	r1, #0
 80071ca:	203a      	movs	r0, #58	; 0x3a
 80071cc:	f7ff ff21 	bl	8007012 <send_cmd>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d14a      	bne.n	800726c <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80071d6:	2300      	movs	r3, #0
 80071d8:	73fb      	strb	r3, [r7, #15]
 80071da:	e00d      	b.n	80071f8 <USER_SPI_initialize+0x108>
 80071dc:	7bfc      	ldrb	r4, [r7, #15]
 80071de:	20ff      	movs	r0, #255	; 0xff
 80071e0:	f7ff fe20 	bl	8006e24 <xchg_spi>
 80071e4:	4603      	mov	r3, r0
 80071e6:	461a      	mov	r2, r3
 80071e8:	f104 0310 	add.w	r3, r4, #16
 80071ec:	443b      	add	r3, r7
 80071ee:	f803 2c08 	strb.w	r2, [r3, #-8]
 80071f2:	7bfb      	ldrb	r3, [r7, #15]
 80071f4:	3301      	adds	r3, #1
 80071f6:	73fb      	strb	r3, [r7, #15]
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d9ee      	bls.n	80071dc <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80071fe:	7a3b      	ldrb	r3, [r7, #8]
 8007200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007204:	2b00      	cmp	r3, #0
 8007206:	d001      	beq.n	800720c <USER_SPI_initialize+0x11c>
 8007208:	230c      	movs	r3, #12
 800720a:	e000      	b.n	800720e <USER_SPI_initialize+0x11e>
 800720c:	2304      	movs	r3, #4
 800720e:	737b      	strb	r3, [r7, #13]
 8007210:	e02c      	b.n	800726c <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8007212:	2100      	movs	r1, #0
 8007214:	20a9      	movs	r0, #169	; 0xa9
 8007216:	f7ff fefc 	bl	8007012 <send_cmd>
 800721a:	4603      	mov	r3, r0
 800721c:	2b01      	cmp	r3, #1
 800721e:	d804      	bhi.n	800722a <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007220:	2302      	movs	r3, #2
 8007222:	737b      	strb	r3, [r7, #13]
 8007224:	23a9      	movs	r3, #169	; 0xa9
 8007226:	73bb      	strb	r3, [r7, #14]
 8007228:	e003      	b.n	8007232 <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800722a:	2301      	movs	r3, #1
 800722c:	737b      	strb	r3, [r7, #13]
 800722e:	2301      	movs	r3, #1
 8007230:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8007232:	bf00      	nop
 8007234:	f7ff fde0 	bl	8006df8 <SPI_Timer_Status>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d007      	beq.n	800724e <USER_SPI_initialize+0x15e>
 800723e:	7bbb      	ldrb	r3, [r7, #14]
 8007240:	2100      	movs	r1, #0
 8007242:	4618      	mov	r0, r3
 8007244:	f7ff fee5 	bl	8007012 <send_cmd>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1f2      	bne.n	8007234 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800724e:	f7ff fdd3 	bl	8006df8 <SPI_Timer_Status>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d007      	beq.n	8007268 <USER_SPI_initialize+0x178>
 8007258:	f44f 7100 	mov.w	r1, #512	; 0x200
 800725c:	2010      	movs	r0, #16
 800725e:	f7ff fed8 	bl	8007012 <send_cmd>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <USER_SPI_initialize+0x17c>
				ty = 0;
 8007268:	2300      	movs	r3, #0
 800726a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800726c:	4a14      	ldr	r2, [pc, #80]	; (80072c0 <USER_SPI_initialize+0x1d0>)
 800726e:	7b7b      	ldrb	r3, [r7, #13]
 8007270:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007272:	f7ff fe47 	bl	8006f04 <despiselect>

	if (ty) {			/* OK */
 8007276:	7b7b      	ldrb	r3, [r7, #13]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d012      	beq.n	80072a2 <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800727c:	4b0f      	ldr	r3, [pc, #60]	; (80072bc <USER_SPI_initialize+0x1cc>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007286:	4b0d      	ldr	r3, [pc, #52]	; (80072bc <USER_SPI_initialize+0x1cc>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f042 0218 	orr.w	r2, r2, #24
 800728e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007290:	4b09      	ldr	r3, [pc, #36]	; (80072b8 <USER_SPI_initialize+0x1c8>)
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	b2db      	uxtb	r3, r3
 8007296:	f023 0301 	bic.w	r3, r3, #1
 800729a:	b2da      	uxtb	r2, r3
 800729c:	4b06      	ldr	r3, [pc, #24]	; (80072b8 <USER_SPI_initialize+0x1c8>)
 800729e:	701a      	strb	r2, [r3, #0]
 80072a0:	e002      	b.n	80072a8 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80072a2:	4b05      	ldr	r3, [pc, #20]	; (80072b8 <USER_SPI_initialize+0x1c8>)
 80072a4:	2201      	movs	r2, #1
 80072a6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80072a8:	4b03      	ldr	r3, [pc, #12]	; (80072b8 <USER_SPI_initialize+0x1c8>)
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	b2db      	uxtb	r3, r3
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd90      	pop	{r4, r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20000020 	.word	0x20000020
 80072bc:	200000a4 	.word	0x200000a4
 80072c0:	20001e44 	.word	0x20001e44

080072c4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	4603      	mov	r3, r0
 80072cc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80072ce:	79fb      	ldrb	r3, [r7, #7]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d001      	beq.n	80072d8 <USER_SPI_status+0x14>
 80072d4:	2301      	movs	r3, #1
 80072d6:	e002      	b.n	80072de <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80072d8:	4b04      	ldr	r3, [pc, #16]	; (80072ec <USER_SPI_status+0x28>)
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	b2db      	uxtb	r3, r3
}
 80072de:	4618      	mov	r0, r3
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	20000020 	.word	0x20000020

080072f0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60b9      	str	r1, [r7, #8]
 80072f8:	607a      	str	r2, [r7, #4]
 80072fa:	603b      	str	r3, [r7, #0]
 80072fc:	4603      	mov	r3, r0
 80072fe:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007300:	7bfb      	ldrb	r3, [r7, #15]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d102      	bne.n	800730c <USER_SPI_read+0x1c>
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <USER_SPI_read+0x20>
 800730c:	2304      	movs	r3, #4
 800730e:	e04d      	b.n	80073ac <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007310:	4b28      	ldr	r3, [pc, #160]	; (80073b4 <USER_SPI_read+0xc4>)
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	b2db      	uxtb	r3, r3
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <USER_SPI_read+0x32>
 800731e:	2303      	movs	r3, #3
 8007320:	e044      	b.n	80073ac <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007322:	4b25      	ldr	r3, [pc, #148]	; (80073b8 <USER_SPI_read+0xc8>)
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	f003 0308 	and.w	r3, r3, #8
 800732a:	2b00      	cmp	r3, #0
 800732c:	d102      	bne.n	8007334 <USER_SPI_read+0x44>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	025b      	lsls	r3, r3, #9
 8007332:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d111      	bne.n	800735e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800733a:	6879      	ldr	r1, [r7, #4]
 800733c:	2011      	movs	r0, #17
 800733e:	f7ff fe68 	bl	8007012 <send_cmd>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d129      	bne.n	800739c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800734c:	68b8      	ldr	r0, [r7, #8]
 800734e:	f7ff fe05 	bl	8006f5c <rcvr_datablock>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d021      	beq.n	800739c <USER_SPI_read+0xac>
			count = 0;
 8007358:	2300      	movs	r3, #0
 800735a:	603b      	str	r3, [r7, #0]
 800735c:	e01e      	b.n	800739c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800735e:	6879      	ldr	r1, [r7, #4]
 8007360:	2012      	movs	r0, #18
 8007362:	f7ff fe56 	bl	8007012 <send_cmd>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d117      	bne.n	800739c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800736c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007370:	68b8      	ldr	r0, [r7, #8]
 8007372:	f7ff fdf3 	bl	8006f5c <rcvr_datablock>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00a      	beq.n	8007392 <USER_SPI_read+0xa2>
				buff += 512;
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007382:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	3b01      	subs	r3, #1
 8007388:	603b      	str	r3, [r7, #0]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1ed      	bne.n	800736c <USER_SPI_read+0x7c>
 8007390:	e000      	b.n	8007394 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007392:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007394:	2100      	movs	r1, #0
 8007396:	200c      	movs	r0, #12
 8007398:	f7ff fe3b 	bl	8007012 <send_cmd>
		}
	}
	despiselect();
 800739c:	f7ff fdb2 	bl	8006f04 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	bf14      	ite	ne
 80073a6:	2301      	movne	r3, #1
 80073a8:	2300      	moveq	r3, #0
 80073aa:	b2db      	uxtb	r3, r3
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	20000020 	.word	0x20000020
 80073b8:	20001e44 	.word	0x20001e44

080073bc <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60b9      	str	r1, [r7, #8]
 80073c4:	607a      	str	r2, [r7, #4]
 80073c6:	603b      	str	r3, [r7, #0]
 80073c8:	4603      	mov	r3, r0
 80073ca:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80073cc:	7bfb      	ldrb	r3, [r7, #15]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d102      	bne.n	80073d8 <USER_SPI_write+0x1c>
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d101      	bne.n	80073dc <USER_SPI_write+0x20>
 80073d8:	2304      	movs	r3, #4
 80073da:	e063      	b.n	80074a4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80073dc:	4b33      	ldr	r3, [pc, #204]	; (80074ac <USER_SPI_write+0xf0>)
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <USER_SPI_write+0x32>
 80073ea:	2303      	movs	r3, #3
 80073ec:	e05a      	b.n	80074a4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80073ee:	4b2f      	ldr	r3, [pc, #188]	; (80074ac <USER_SPI_write+0xf0>)
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d001      	beq.n	8007400 <USER_SPI_write+0x44>
 80073fc:	2302      	movs	r3, #2
 80073fe:	e051      	b.n	80074a4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007400:	4b2b      	ldr	r3, [pc, #172]	; (80074b0 <USER_SPI_write+0xf4>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	f003 0308 	and.w	r3, r3, #8
 8007408:	2b00      	cmp	r3, #0
 800740a:	d102      	bne.n	8007412 <USER_SPI_write+0x56>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	025b      	lsls	r3, r3, #9
 8007410:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d110      	bne.n	800743a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007418:	6879      	ldr	r1, [r7, #4]
 800741a:	2018      	movs	r0, #24
 800741c:	f7ff fdf9 	bl	8007012 <send_cmd>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d136      	bne.n	8007494 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8007426:	21fe      	movs	r1, #254	; 0xfe
 8007428:	68b8      	ldr	r0, [r7, #8]
 800742a:	f7ff fdc0 	bl	8006fae <xmit_datablock>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d02f      	beq.n	8007494 <USER_SPI_write+0xd8>
			count = 0;
 8007434:	2300      	movs	r3, #0
 8007436:	603b      	str	r3, [r7, #0]
 8007438:	e02c      	b.n	8007494 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800743a:	4b1d      	ldr	r3, [pc, #116]	; (80074b0 <USER_SPI_write+0xf4>)
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	f003 0306 	and.w	r3, r3, #6
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <USER_SPI_write+0x92>
 8007446:	6839      	ldr	r1, [r7, #0]
 8007448:	2097      	movs	r0, #151	; 0x97
 800744a:	f7ff fde2 	bl	8007012 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800744e:	6879      	ldr	r1, [r7, #4]
 8007450:	2019      	movs	r0, #25
 8007452:	f7ff fdde 	bl	8007012 <send_cmd>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d11b      	bne.n	8007494 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800745c:	21fc      	movs	r1, #252	; 0xfc
 800745e:	68b8      	ldr	r0, [r7, #8]
 8007460:	f7ff fda5 	bl	8006fae <xmit_datablock>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <USER_SPI_write+0xc4>
				buff += 512;
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007470:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	3b01      	subs	r3, #1
 8007476:	603b      	str	r3, [r7, #0]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1ee      	bne.n	800745c <USER_SPI_write+0xa0>
 800747e:	e000      	b.n	8007482 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007480:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007482:	21fd      	movs	r1, #253	; 0xfd
 8007484:	2000      	movs	r0, #0
 8007486:	f7ff fd92 	bl	8006fae <xmit_datablock>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <USER_SPI_write+0xd8>
 8007490:	2301      	movs	r3, #1
 8007492:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007494:	f7ff fd36 	bl	8006f04 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	bf14      	ite	ne
 800749e:	2301      	movne	r3, #1
 80074a0:	2300      	moveq	r3, #0
 80074a2:	b2db      	uxtb	r3, r3
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	20000020 	.word	0x20000020
 80074b0:	20001e44 	.word	0x20001e44

080074b4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08c      	sub	sp, #48	; 0x30
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	4603      	mov	r3, r0
 80074bc:	603a      	str	r2, [r7, #0]
 80074be:	71fb      	strb	r3, [r7, #7]
 80074c0:	460b      	mov	r3, r1
 80074c2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80074c4:	79fb      	ldrb	r3, [r7, #7]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <USER_SPI_ioctl+0x1a>
 80074ca:	2304      	movs	r3, #4
 80074cc:	e15a      	b.n	8007784 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80074ce:	4baf      	ldr	r3, [pc, #700]	; (800778c <USER_SPI_ioctl+0x2d8>)
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	f003 0301 	and.w	r3, r3, #1
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <USER_SPI_ioctl+0x2c>
 80074dc:	2303      	movs	r3, #3
 80074de:	e151      	b.n	8007784 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80074e6:	79bb      	ldrb	r3, [r7, #6]
 80074e8:	2b04      	cmp	r3, #4
 80074ea:	f200 8136 	bhi.w	800775a <USER_SPI_ioctl+0x2a6>
 80074ee:	a201      	add	r2, pc, #4	; (adr r2, 80074f4 <USER_SPI_ioctl+0x40>)
 80074f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f4:	08007509 	.word	0x08007509
 80074f8:	0800751d 	.word	0x0800751d
 80074fc:	0800775b 	.word	0x0800775b
 8007500:	080075c9 	.word	0x080075c9
 8007504:	080076bf 	.word	0x080076bf
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8007508:	f7ff fd0c 	bl	8006f24 <spiselect>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 8127 	beq.w	8007762 <USER_SPI_ioctl+0x2ae>
 8007514:	2300      	movs	r3, #0
 8007516:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800751a:	e122      	b.n	8007762 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800751c:	2100      	movs	r1, #0
 800751e:	2009      	movs	r0, #9
 8007520:	f7ff fd77 	bl	8007012 <send_cmd>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	f040 811d 	bne.w	8007766 <USER_SPI_ioctl+0x2b2>
 800752c:	f107 030c 	add.w	r3, r7, #12
 8007530:	2110      	movs	r1, #16
 8007532:	4618      	mov	r0, r3
 8007534:	f7ff fd12 	bl	8006f5c <rcvr_datablock>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	f000 8113 	beq.w	8007766 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007540:	7b3b      	ldrb	r3, [r7, #12]
 8007542:	099b      	lsrs	r3, r3, #6
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b01      	cmp	r3, #1
 8007548:	d111      	bne.n	800756e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800754a:	7d7b      	ldrb	r3, [r7, #21]
 800754c:	461a      	mov	r2, r3
 800754e:	7d3b      	ldrb	r3, [r7, #20]
 8007550:	021b      	lsls	r3, r3, #8
 8007552:	4413      	add	r3, r2
 8007554:	461a      	mov	r2, r3
 8007556:	7cfb      	ldrb	r3, [r7, #19]
 8007558:	041b      	lsls	r3, r3, #16
 800755a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800755e:	4413      	add	r3, r2
 8007560:	3301      	adds	r3, #1
 8007562:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	029a      	lsls	r2, r3, #10
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	e028      	b.n	80075c0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800756e:	7c7b      	ldrb	r3, [r7, #17]
 8007570:	f003 030f 	and.w	r3, r3, #15
 8007574:	b2da      	uxtb	r2, r3
 8007576:	7dbb      	ldrb	r3, [r7, #22]
 8007578:	09db      	lsrs	r3, r3, #7
 800757a:	b2db      	uxtb	r3, r3
 800757c:	4413      	add	r3, r2
 800757e:	b2da      	uxtb	r2, r3
 8007580:	7d7b      	ldrb	r3, [r7, #21]
 8007582:	005b      	lsls	r3, r3, #1
 8007584:	b2db      	uxtb	r3, r3
 8007586:	f003 0306 	and.w	r3, r3, #6
 800758a:	b2db      	uxtb	r3, r3
 800758c:	4413      	add	r3, r2
 800758e:	b2db      	uxtb	r3, r3
 8007590:	3302      	adds	r3, #2
 8007592:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007596:	7d3b      	ldrb	r3, [r7, #20]
 8007598:	099b      	lsrs	r3, r3, #6
 800759a:	b2db      	uxtb	r3, r3
 800759c:	461a      	mov	r2, r3
 800759e:	7cfb      	ldrb	r3, [r7, #19]
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	441a      	add	r2, r3
 80075a4:	7cbb      	ldrb	r3, [r7, #18]
 80075a6:	029b      	lsls	r3, r3, #10
 80075a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80075ac:	4413      	add	r3, r2
 80075ae:	3301      	adds	r3, #1
 80075b0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80075b2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80075b6:	3b09      	subs	r3, #9
 80075b8:	69fa      	ldr	r2, [r7, #28]
 80075ba:	409a      	lsls	r2, r3
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80075c0:	2300      	movs	r3, #0
 80075c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80075c6:	e0ce      	b.n	8007766 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80075c8:	4b71      	ldr	r3, [pc, #452]	; (8007790 <USER_SPI_ioctl+0x2dc>)
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	f003 0304 	and.w	r3, r3, #4
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d031      	beq.n	8007638 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80075d4:	2100      	movs	r1, #0
 80075d6:	208d      	movs	r0, #141	; 0x8d
 80075d8:	f7ff fd1b 	bl	8007012 <send_cmd>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f040 80c3 	bne.w	800776a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80075e4:	20ff      	movs	r0, #255	; 0xff
 80075e6:	f7ff fc1d 	bl	8006e24 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80075ea:	f107 030c 	add.w	r3, r7, #12
 80075ee:	2110      	movs	r1, #16
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7ff fcb3 	bl	8006f5c <rcvr_datablock>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 80b6 	beq.w	800776a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80075fe:	2330      	movs	r3, #48	; 0x30
 8007600:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007604:	e007      	b.n	8007616 <USER_SPI_ioctl+0x162>
 8007606:	20ff      	movs	r0, #255	; 0xff
 8007608:	f7ff fc0c 	bl	8006e24 <xchg_spi>
 800760c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007610:	3b01      	subs	r3, #1
 8007612:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007616:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1f3      	bne.n	8007606 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800761e:	7dbb      	ldrb	r3, [r7, #22]
 8007620:	091b      	lsrs	r3, r3, #4
 8007622:	b2db      	uxtb	r3, r3
 8007624:	461a      	mov	r2, r3
 8007626:	2310      	movs	r3, #16
 8007628:	fa03 f202 	lsl.w	r2, r3, r2
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8007636:	e098      	b.n	800776a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007638:	2100      	movs	r1, #0
 800763a:	2009      	movs	r0, #9
 800763c:	f7ff fce9 	bl	8007012 <send_cmd>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	f040 8091 	bne.w	800776a <USER_SPI_ioctl+0x2b6>
 8007648:	f107 030c 	add.w	r3, r7, #12
 800764c:	2110      	movs	r1, #16
 800764e:	4618      	mov	r0, r3
 8007650:	f7ff fc84 	bl	8006f5c <rcvr_datablock>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 8087 	beq.w	800776a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800765c:	4b4c      	ldr	r3, [pc, #304]	; (8007790 <USER_SPI_ioctl+0x2dc>)
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	f003 0302 	and.w	r3, r3, #2
 8007664:	2b00      	cmp	r3, #0
 8007666:	d012      	beq.n	800768e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007668:	7dbb      	ldrb	r3, [r7, #22]
 800766a:	005b      	lsls	r3, r3, #1
 800766c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007670:	7dfa      	ldrb	r2, [r7, #23]
 8007672:	09d2      	lsrs	r2, r2, #7
 8007674:	b2d2      	uxtb	r2, r2
 8007676:	4413      	add	r3, r2
 8007678:	1c5a      	adds	r2, r3, #1
 800767a:	7e7b      	ldrb	r3, [r7, #25]
 800767c:	099b      	lsrs	r3, r3, #6
 800767e:	b2db      	uxtb	r3, r3
 8007680:	3b01      	subs	r3, #1
 8007682:	fa02 f303 	lsl.w	r3, r2, r3
 8007686:	461a      	mov	r2, r3
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	601a      	str	r2, [r3, #0]
 800768c:	e013      	b.n	80076b6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800768e:	7dbb      	ldrb	r3, [r7, #22]
 8007690:	109b      	asrs	r3, r3, #2
 8007692:	b29b      	uxth	r3, r3
 8007694:	f003 031f 	and.w	r3, r3, #31
 8007698:	3301      	adds	r3, #1
 800769a:	7dfa      	ldrb	r2, [r7, #23]
 800769c:	00d2      	lsls	r2, r2, #3
 800769e:	f002 0218 	and.w	r2, r2, #24
 80076a2:	7df9      	ldrb	r1, [r7, #23]
 80076a4:	0949      	lsrs	r1, r1, #5
 80076a6:	b2c9      	uxtb	r1, r1
 80076a8:	440a      	add	r2, r1
 80076aa:	3201      	adds	r2, #1
 80076ac:	fb02 f303 	mul.w	r3, r2, r3
 80076b0:	461a      	mov	r2, r3
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80076bc:	e055      	b.n	800776a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80076be:	4b34      	ldr	r3, [pc, #208]	; (8007790 <USER_SPI_ioctl+0x2dc>)
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	f003 0306 	and.w	r3, r3, #6
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d051      	beq.n	800776e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80076ca:	f107 020c 	add.w	r2, r7, #12
 80076ce:	79fb      	ldrb	r3, [r7, #7]
 80076d0:	210b      	movs	r1, #11
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7ff feee 	bl	80074b4 <USER_SPI_ioctl>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d149      	bne.n	8007772 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80076de:	7b3b      	ldrb	r3, [r7, #12]
 80076e0:	099b      	lsrs	r3, r3, #6
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d104      	bne.n	80076f2 <USER_SPI_ioctl+0x23e>
 80076e8:	7dbb      	ldrb	r3, [r7, #22]
 80076ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d041      	beq.n	8007776 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	623b      	str	r3, [r7, #32]
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8007702:	4b23      	ldr	r3, [pc, #140]	; (8007790 <USER_SPI_ioctl+0x2dc>)
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	f003 0308 	and.w	r3, r3, #8
 800770a:	2b00      	cmp	r3, #0
 800770c:	d105      	bne.n	800771a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800770e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007710:	025b      	lsls	r3, r3, #9
 8007712:	62bb      	str	r3, [r7, #40]	; 0x28
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	025b      	lsls	r3, r3, #9
 8007718:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800771a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800771c:	2020      	movs	r0, #32
 800771e:	f7ff fc78 	bl	8007012 <send_cmd>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d128      	bne.n	800777a <USER_SPI_ioctl+0x2c6>
 8007728:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800772a:	2021      	movs	r0, #33	; 0x21
 800772c:	f7ff fc71 	bl	8007012 <send_cmd>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d121      	bne.n	800777a <USER_SPI_ioctl+0x2c6>
 8007736:	2100      	movs	r1, #0
 8007738:	2026      	movs	r0, #38	; 0x26
 800773a:	f7ff fc6a 	bl	8007012 <send_cmd>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d11a      	bne.n	800777a <USER_SPI_ioctl+0x2c6>
 8007744:	f247 5030 	movw	r0, #30000	; 0x7530
 8007748:	f7ff fbb9 	bl	8006ebe <wait_ready>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d013      	beq.n	800777a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007752:	2300      	movs	r3, #0
 8007754:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007758:	e00f      	b.n	800777a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800775a:	2304      	movs	r3, #4
 800775c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007760:	e00c      	b.n	800777c <USER_SPI_ioctl+0x2c8>
		break;
 8007762:	bf00      	nop
 8007764:	e00a      	b.n	800777c <USER_SPI_ioctl+0x2c8>
		break;
 8007766:	bf00      	nop
 8007768:	e008      	b.n	800777c <USER_SPI_ioctl+0x2c8>
		break;
 800776a:	bf00      	nop
 800776c:	e006      	b.n	800777c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800776e:	bf00      	nop
 8007770:	e004      	b.n	800777c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007772:	bf00      	nop
 8007774:	e002      	b.n	800777c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007776:	bf00      	nop
 8007778:	e000      	b.n	800777c <USER_SPI_ioctl+0x2c8>
		break;
 800777a:	bf00      	nop
	}

	despiselect();
 800777c:	f7ff fbc2 	bl	8006f04 <despiselect>

	return res;
 8007780:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007784:	4618      	mov	r0, r3
 8007786:	3730      	adds	r7, #48	; 0x30
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	20000020 	.word	0x20000020
 8007790:	20001e44 	.word	0x20001e44

08007794 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	4603      	mov	r3, r0
 800779c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800779e:	79fb      	ldrb	r3, [r7, #7]
 80077a0:	4a08      	ldr	r2, [pc, #32]	; (80077c4 <disk_status+0x30>)
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4413      	add	r3, r2
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	79fa      	ldrb	r2, [r7, #7]
 80077ac:	4905      	ldr	r1, [pc, #20]	; (80077c4 <disk_status+0x30>)
 80077ae:	440a      	add	r2, r1
 80077b0:	7a12      	ldrb	r2, [r2, #8]
 80077b2:	4610      	mov	r0, r2
 80077b4:	4798      	blx	r3
 80077b6:	4603      	mov	r3, r0
 80077b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80077ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	20001e78 	.word	0x20001e78

080077c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	4603      	mov	r3, r0
 80077d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80077d6:	79fb      	ldrb	r3, [r7, #7]
 80077d8:	4a0d      	ldr	r2, [pc, #52]	; (8007810 <disk_initialize+0x48>)
 80077da:	5cd3      	ldrb	r3, [r2, r3]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d111      	bne.n	8007804 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80077e0:	79fb      	ldrb	r3, [r7, #7]
 80077e2:	4a0b      	ldr	r2, [pc, #44]	; (8007810 <disk_initialize+0x48>)
 80077e4:	2101      	movs	r1, #1
 80077e6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80077e8:	79fb      	ldrb	r3, [r7, #7]
 80077ea:	4a09      	ldr	r2, [pc, #36]	; (8007810 <disk_initialize+0x48>)
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	79fa      	ldrb	r2, [r7, #7]
 80077f6:	4906      	ldr	r1, [pc, #24]	; (8007810 <disk_initialize+0x48>)
 80077f8:	440a      	add	r2, r1
 80077fa:	7a12      	ldrb	r2, [r2, #8]
 80077fc:	4610      	mov	r0, r2
 80077fe:	4798      	blx	r3
 8007800:	4603      	mov	r3, r0
 8007802:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007804:	7bfb      	ldrb	r3, [r7, #15]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	20001e78 	.word	0x20001e78

08007814 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007814:	b590      	push	{r4, r7, lr}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	60b9      	str	r1, [r7, #8]
 800781c:	607a      	str	r2, [r7, #4]
 800781e:	603b      	str	r3, [r7, #0]
 8007820:	4603      	mov	r3, r0
 8007822:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007824:	7bfb      	ldrb	r3, [r7, #15]
 8007826:	4a0a      	ldr	r2, [pc, #40]	; (8007850 <disk_read+0x3c>)
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	689c      	ldr	r4, [r3, #8]
 8007830:	7bfb      	ldrb	r3, [r7, #15]
 8007832:	4a07      	ldr	r2, [pc, #28]	; (8007850 <disk_read+0x3c>)
 8007834:	4413      	add	r3, r2
 8007836:	7a18      	ldrb	r0, [r3, #8]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	68b9      	ldr	r1, [r7, #8]
 800783e:	47a0      	blx	r4
 8007840:	4603      	mov	r3, r0
 8007842:	75fb      	strb	r3, [r7, #23]
  return res;
 8007844:	7dfb      	ldrb	r3, [r7, #23]
}
 8007846:	4618      	mov	r0, r3
 8007848:	371c      	adds	r7, #28
 800784a:	46bd      	mov	sp, r7
 800784c:	bd90      	pop	{r4, r7, pc}
 800784e:	bf00      	nop
 8007850:	20001e78 	.word	0x20001e78

08007854 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007854:	b590      	push	{r4, r7, lr}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	60b9      	str	r1, [r7, #8]
 800785c:	607a      	str	r2, [r7, #4]
 800785e:	603b      	str	r3, [r7, #0]
 8007860:	4603      	mov	r3, r0
 8007862:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007864:	7bfb      	ldrb	r3, [r7, #15]
 8007866:	4a0a      	ldr	r2, [pc, #40]	; (8007890 <disk_write+0x3c>)
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	4413      	add	r3, r2
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	68dc      	ldr	r4, [r3, #12]
 8007870:	7bfb      	ldrb	r3, [r7, #15]
 8007872:	4a07      	ldr	r2, [pc, #28]	; (8007890 <disk_write+0x3c>)
 8007874:	4413      	add	r3, r2
 8007876:	7a18      	ldrb	r0, [r3, #8]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	68b9      	ldr	r1, [r7, #8]
 800787e:	47a0      	blx	r4
 8007880:	4603      	mov	r3, r0
 8007882:	75fb      	strb	r3, [r7, #23]
  return res;
 8007884:	7dfb      	ldrb	r3, [r7, #23]
}
 8007886:	4618      	mov	r0, r3
 8007888:	371c      	adds	r7, #28
 800788a:	46bd      	mov	sp, r7
 800788c:	bd90      	pop	{r4, r7, pc}
 800788e:	bf00      	nop
 8007890:	20001e78 	.word	0x20001e78

08007894 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	4603      	mov	r3, r0
 800789c:	603a      	str	r2, [r7, #0]
 800789e:	71fb      	strb	r3, [r7, #7]
 80078a0:	460b      	mov	r3, r1
 80078a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80078a4:	79fb      	ldrb	r3, [r7, #7]
 80078a6:	4a09      	ldr	r2, [pc, #36]	; (80078cc <disk_ioctl+0x38>)
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4413      	add	r3, r2
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	79fa      	ldrb	r2, [r7, #7]
 80078b2:	4906      	ldr	r1, [pc, #24]	; (80078cc <disk_ioctl+0x38>)
 80078b4:	440a      	add	r2, r1
 80078b6:	7a10      	ldrb	r0, [r2, #8]
 80078b8:	79b9      	ldrb	r1, [r7, #6]
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	4798      	blx	r3
 80078be:	4603      	mov	r3, r0
 80078c0:	73fb      	strb	r3, [r7, #15]
  return res;
 80078c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	20001e78 	.word	0x20001e78

080078d0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	3301      	adds	r3, #1
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80078e0:	89fb      	ldrh	r3, [r7, #14]
 80078e2:	021b      	lsls	r3, r3, #8
 80078e4:	b21a      	sxth	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	b21b      	sxth	r3, r3
 80078ec:	4313      	orrs	r3, r2
 80078ee:	b21b      	sxth	r3, r3
 80078f0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80078f2:	89fb      	ldrh	r3, [r7, #14]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	3303      	adds	r3, #3
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	021b      	lsls	r3, r3, #8
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	3202      	adds	r2, #2
 8007918:	7812      	ldrb	r2, [r2, #0]
 800791a:	4313      	orrs	r3, r2
 800791c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	021b      	lsls	r3, r3, #8
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	3201      	adds	r2, #1
 8007926:	7812      	ldrb	r2, [r2, #0]
 8007928:	4313      	orrs	r3, r2
 800792a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	021b      	lsls	r3, r3, #8
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	7812      	ldrb	r2, [r2, #0]
 8007934:	4313      	orrs	r3, r2
 8007936:	60fb      	str	r3, [r7, #12]
	return rv;
 8007938:	68fb      	ldr	r3, [r7, #12]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007946:	b480      	push	{r7}
 8007948:	b083      	sub	sp, #12
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	460b      	mov	r3, r1
 8007950:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	1c5a      	adds	r2, r3, #1
 8007956:	607a      	str	r2, [r7, #4]
 8007958:	887a      	ldrh	r2, [r7, #2]
 800795a:	b2d2      	uxtb	r2, r2
 800795c:	701a      	strb	r2, [r3, #0]
 800795e:	887b      	ldrh	r3, [r7, #2]
 8007960:	0a1b      	lsrs	r3, r3, #8
 8007962:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	1c5a      	adds	r2, r3, #1
 8007968:	607a      	str	r2, [r7, #4]
 800796a:	887a      	ldrh	r2, [r7, #2]
 800796c:	b2d2      	uxtb	r2, r2
 800796e:	701a      	strb	r2, [r3, #0]
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	b2d2      	uxtb	r2, r2
 8007990:	701a      	strb	r2, [r3, #0]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	0a1b      	lsrs	r3, r3, #8
 8007996:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	1c5a      	adds	r2, r3, #1
 800799c:	607a      	str	r2, [r7, #4]
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	b2d2      	uxtb	r2, r2
 80079a2:	701a      	strb	r2, [r3, #0]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	0a1b      	lsrs	r3, r3, #8
 80079a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	1c5a      	adds	r2, r3, #1
 80079ae:	607a      	str	r2, [r7, #4]
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	b2d2      	uxtb	r2, r2
 80079b4:	701a      	strb	r2, [r3, #0]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	0a1b      	lsrs	r3, r3, #8
 80079ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	607a      	str	r2, [r7, #4]
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	b2d2      	uxtb	r2, r2
 80079c6:	701a      	strb	r2, [r3, #0]
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80079d4:	b480      	push	{r7}
 80079d6:	b087      	sub	sp, #28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00d      	beq.n	8007a0a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	1c53      	adds	r3, r2, #1
 80079f2:	613b      	str	r3, [r7, #16]
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	1c59      	adds	r1, r3, #1
 80079f8:	6179      	str	r1, [r7, #20]
 80079fa:	7812      	ldrb	r2, [r2, #0]
 80079fc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	3b01      	subs	r3, #1
 8007a02:	607b      	str	r3, [r7, #4]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1f1      	bne.n	80079ee <mem_cpy+0x1a>
	}
}
 8007a0a:	bf00      	nop
 8007a0c:	371c      	adds	r7, #28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007a16:	b480      	push	{r7}
 8007a18:	b087      	sub	sp, #28
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	60f8      	str	r0, [r7, #12]
 8007a1e:	60b9      	str	r1, [r7, #8]
 8007a20:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	1c5a      	adds	r2, r3, #1
 8007a2a:	617a      	str	r2, [r7, #20]
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	b2d2      	uxtb	r2, r2
 8007a30:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	3b01      	subs	r3, #1
 8007a36:	607b      	str	r3, [r7, #4]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1f3      	bne.n	8007a26 <mem_set+0x10>
}
 8007a3e:	bf00      	nop
 8007a40:	bf00      	nop
 8007a42:	371c      	adds	r7, #28
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007a4c:	b480      	push	{r7}
 8007a4e:	b089      	sub	sp, #36	; 0x24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	61fb      	str	r3, [r7, #28]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007a60:	2300      	movs	r3, #0
 8007a62:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	1c5a      	adds	r2, r3, #1
 8007a68:	61fa      	str	r2, [r7, #28]
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	1c5a      	adds	r2, r3, #1
 8007a72:	61ba      	str	r2, [r7, #24]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	1acb      	subs	r3, r1, r3
 8007a78:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	607b      	str	r3, [r7, #4]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d002      	beq.n	8007a8c <mem_cmp+0x40>
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d0eb      	beq.n	8007a64 <mem_cmp+0x18>

	return r;
 8007a8c:	697b      	ldr	r3, [r7, #20]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3724      	adds	r7, #36	; 0x24
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007a9a:	b480      	push	{r7}
 8007a9c:	b083      	sub	sp, #12
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007aa4:	e002      	b.n	8007aac <chk_chr+0x12>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	607b      	str	r3, [r7, #4]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d005      	beq.n	8007ac0 <chk_chr+0x26>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d1f2      	bne.n	8007aa6 <chk_chr+0xc>
	return *str;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007ada:	2300      	movs	r3, #0
 8007adc:	60bb      	str	r3, [r7, #8]
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	60fb      	str	r3, [r7, #12]
 8007ae2:	e029      	b.n	8007b38 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007ae4:	4a27      	ldr	r2, [pc, #156]	; (8007b84 <chk_lock+0xb4>)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	011b      	lsls	r3, r3, #4
 8007aea:	4413      	add	r3, r2
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d01d      	beq.n	8007b2e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007af2:	4a24      	ldr	r2, [pc, #144]	; (8007b84 <chk_lock+0xb4>)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	011b      	lsls	r3, r3, #4
 8007af8:	4413      	add	r3, r2
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d116      	bne.n	8007b32 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007b04:	4a1f      	ldr	r2, [pc, #124]	; (8007b84 <chk_lock+0xb4>)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	011b      	lsls	r3, r3, #4
 8007b0a:	4413      	add	r3, r2
 8007b0c:	3304      	adds	r3, #4
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d10c      	bne.n	8007b32 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007b18:	4a1a      	ldr	r2, [pc, #104]	; (8007b84 <chk_lock+0xb4>)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	011b      	lsls	r3, r3, #4
 8007b1e:	4413      	add	r3, r2
 8007b20:	3308      	adds	r3, #8
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d102      	bne.n	8007b32 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007b2c:	e007      	b.n	8007b3e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	3301      	adds	r3, #1
 8007b36:	60fb      	str	r3, [r7, #12]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d9d2      	bls.n	8007ae4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d109      	bne.n	8007b58 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d102      	bne.n	8007b50 <chk_lock+0x80>
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d101      	bne.n	8007b54 <chk_lock+0x84>
 8007b50:	2300      	movs	r3, #0
 8007b52:	e010      	b.n	8007b76 <chk_lock+0xa6>
 8007b54:	2312      	movs	r3, #18
 8007b56:	e00e      	b.n	8007b76 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d108      	bne.n	8007b70 <chk_lock+0xa0>
 8007b5e:	4a09      	ldr	r2, [pc, #36]	; (8007b84 <chk_lock+0xb4>)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	011b      	lsls	r3, r3, #4
 8007b64:	4413      	add	r3, r2
 8007b66:	330c      	adds	r3, #12
 8007b68:	881b      	ldrh	r3, [r3, #0]
 8007b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b6e:	d101      	bne.n	8007b74 <chk_lock+0xa4>
 8007b70:	2310      	movs	r3, #16
 8007b72:	e000      	b.n	8007b76 <chk_lock+0xa6>
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	20001e58 	.word	0x20001e58

08007b88 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	607b      	str	r3, [r7, #4]
 8007b92:	e002      	b.n	8007b9a <enq_lock+0x12>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	3301      	adds	r3, #1
 8007b98:	607b      	str	r3, [r7, #4]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d806      	bhi.n	8007bae <enq_lock+0x26>
 8007ba0:	4a09      	ldr	r2, [pc, #36]	; (8007bc8 <enq_lock+0x40>)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	011b      	lsls	r3, r3, #4
 8007ba6:	4413      	add	r3, r2
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1f2      	bne.n	8007b94 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	bf14      	ite	ne
 8007bb4:	2301      	movne	r3, #1
 8007bb6:	2300      	moveq	r3, #0
 8007bb8:	b2db      	uxtb	r3, r3
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	20001e58 	.word	0x20001e58

08007bcc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	60fb      	str	r3, [r7, #12]
 8007bda:	e01f      	b.n	8007c1c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007bdc:	4a41      	ldr	r2, [pc, #260]	; (8007ce4 <inc_lock+0x118>)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	011b      	lsls	r3, r3, #4
 8007be2:	4413      	add	r3, r2
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d113      	bne.n	8007c16 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007bee:	4a3d      	ldr	r2, [pc, #244]	; (8007ce4 <inc_lock+0x118>)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	011b      	lsls	r3, r3, #4
 8007bf4:	4413      	add	r3, r2
 8007bf6:	3304      	adds	r3, #4
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d109      	bne.n	8007c16 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007c02:	4a38      	ldr	r2, [pc, #224]	; (8007ce4 <inc_lock+0x118>)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	011b      	lsls	r3, r3, #4
 8007c08:	4413      	add	r3, r2
 8007c0a:	3308      	adds	r3, #8
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d006      	beq.n	8007c24 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d9dc      	bls.n	8007bdc <inc_lock+0x10>
 8007c22:	e000      	b.n	8007c26 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007c24:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d132      	bne.n	8007c92 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	60fb      	str	r3, [r7, #12]
 8007c30:	e002      	b.n	8007c38 <inc_lock+0x6c>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	3301      	adds	r3, #1
 8007c36:	60fb      	str	r3, [r7, #12]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d806      	bhi.n	8007c4c <inc_lock+0x80>
 8007c3e:	4a29      	ldr	r2, [pc, #164]	; (8007ce4 <inc_lock+0x118>)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	011b      	lsls	r3, r3, #4
 8007c44:	4413      	add	r3, r2
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1f2      	bne.n	8007c32 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d101      	bne.n	8007c56 <inc_lock+0x8a>
 8007c52:	2300      	movs	r3, #0
 8007c54:	e040      	b.n	8007cd8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	4922      	ldr	r1, [pc, #136]	; (8007ce4 <inc_lock+0x118>)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	011b      	lsls	r3, r3, #4
 8007c60:	440b      	add	r3, r1
 8007c62:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	689a      	ldr	r2, [r3, #8]
 8007c68:	491e      	ldr	r1, [pc, #120]	; (8007ce4 <inc_lock+0x118>)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	011b      	lsls	r3, r3, #4
 8007c6e:	440b      	add	r3, r1
 8007c70:	3304      	adds	r3, #4
 8007c72:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	695a      	ldr	r2, [r3, #20]
 8007c78:	491a      	ldr	r1, [pc, #104]	; (8007ce4 <inc_lock+0x118>)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	011b      	lsls	r3, r3, #4
 8007c7e:	440b      	add	r3, r1
 8007c80:	3308      	adds	r3, #8
 8007c82:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007c84:	4a17      	ldr	r2, [pc, #92]	; (8007ce4 <inc_lock+0x118>)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	011b      	lsls	r3, r3, #4
 8007c8a:	4413      	add	r3, r2
 8007c8c:	330c      	adds	r3, #12
 8007c8e:	2200      	movs	r2, #0
 8007c90:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d009      	beq.n	8007cac <inc_lock+0xe0>
 8007c98:	4a12      	ldr	r2, [pc, #72]	; (8007ce4 <inc_lock+0x118>)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	011b      	lsls	r3, r3, #4
 8007c9e:	4413      	add	r3, r2
 8007ca0:	330c      	adds	r3, #12
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d001      	beq.n	8007cac <inc_lock+0xe0>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	e015      	b.n	8007cd8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d108      	bne.n	8007cc4 <inc_lock+0xf8>
 8007cb2:	4a0c      	ldr	r2, [pc, #48]	; (8007ce4 <inc_lock+0x118>)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	011b      	lsls	r3, r3, #4
 8007cb8:	4413      	add	r3, r2
 8007cba:	330c      	adds	r3, #12
 8007cbc:	881b      	ldrh	r3, [r3, #0]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	e001      	b.n	8007cc8 <inc_lock+0xfc>
 8007cc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cc8:	4906      	ldr	r1, [pc, #24]	; (8007ce4 <inc_lock+0x118>)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	011b      	lsls	r3, r3, #4
 8007cce:	440b      	add	r3, r1
 8007cd0:	330c      	adds	r3, #12
 8007cd2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	3301      	adds	r3, #1
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	20001e58 	.word	0x20001e58

08007ce8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	607b      	str	r3, [r7, #4]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d825      	bhi.n	8007d48 <dec_lock+0x60>
		n = Files[i].ctr;
 8007cfc:	4a17      	ldr	r2, [pc, #92]	; (8007d5c <dec_lock+0x74>)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	011b      	lsls	r3, r3, #4
 8007d02:	4413      	add	r3, r2
 8007d04:	330c      	adds	r3, #12
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007d0a:	89fb      	ldrh	r3, [r7, #14]
 8007d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d10:	d101      	bne.n	8007d16 <dec_lock+0x2e>
 8007d12:	2300      	movs	r3, #0
 8007d14:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007d16:	89fb      	ldrh	r3, [r7, #14]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d002      	beq.n	8007d22 <dec_lock+0x3a>
 8007d1c:	89fb      	ldrh	r3, [r7, #14]
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007d22:	4a0e      	ldr	r2, [pc, #56]	; (8007d5c <dec_lock+0x74>)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	011b      	lsls	r3, r3, #4
 8007d28:	4413      	add	r3, r2
 8007d2a:	330c      	adds	r3, #12
 8007d2c:	89fa      	ldrh	r2, [r7, #14]
 8007d2e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007d30:	89fb      	ldrh	r3, [r7, #14]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d105      	bne.n	8007d42 <dec_lock+0x5a>
 8007d36:	4a09      	ldr	r2, [pc, #36]	; (8007d5c <dec_lock+0x74>)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	011b      	lsls	r3, r3, #4
 8007d3c:	4413      	add	r3, r2
 8007d3e:	2200      	movs	r2, #0
 8007d40:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007d42:	2300      	movs	r3, #0
 8007d44:	737b      	strb	r3, [r7, #13]
 8007d46:	e001      	b.n	8007d4c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007d48:	2302      	movs	r3, #2
 8007d4a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007d4c:	7b7b      	ldrb	r3, [r7, #13]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3714      	adds	r7, #20
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	20001e58 	.word	0x20001e58

08007d60 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007d68:	2300      	movs	r3, #0
 8007d6a:	60fb      	str	r3, [r7, #12]
 8007d6c:	e010      	b.n	8007d90 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007d6e:	4a0d      	ldr	r2, [pc, #52]	; (8007da4 <clear_lock+0x44>)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	011b      	lsls	r3, r3, #4
 8007d74:	4413      	add	r3, r2
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d105      	bne.n	8007d8a <clear_lock+0x2a>
 8007d7e:	4a09      	ldr	r2, [pc, #36]	; (8007da4 <clear_lock+0x44>)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	011b      	lsls	r3, r3, #4
 8007d84:	4413      	add	r3, r2
 8007d86:	2200      	movs	r2, #0
 8007d88:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	60fb      	str	r3, [r7, #12]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d9eb      	bls.n	8007d6e <clear_lock+0xe>
	}
}
 8007d96:	bf00      	nop
 8007d98:	bf00      	nop
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	20001e58 	.word	0x20001e58

08007da8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	78db      	ldrb	r3, [r3, #3]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d034      	beq.n	8007e26 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	7858      	ldrb	r0, [r3, #1]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007dcc:	2301      	movs	r3, #1
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	f7ff fd40 	bl	8007854 <disk_write>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d002      	beq.n	8007de0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	73fb      	strb	r3, [r7, #15]
 8007dde:	e022      	b.n	8007e26 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	1ad2      	subs	r2, r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d217      	bcs.n	8007e26 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	789b      	ldrb	r3, [r3, #2]
 8007dfa:	613b      	str	r3, [r7, #16]
 8007dfc:	e010      	b.n	8007e20 <sync_window+0x78>
					wsect += fs->fsize;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	4413      	add	r3, r2
 8007e06:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	7858      	ldrb	r0, [r3, #1]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e12:	2301      	movs	r3, #1
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	f7ff fd1d 	bl	8007854 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	613b      	str	r3, [r7, #16]
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d8eb      	bhi.n	8007dfe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3718      	adds	r7, #24
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e42:	683a      	ldr	r2, [r7, #0]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d01b      	beq.n	8007e80 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7ff ffad 	bl	8007da8 <sync_window>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d113      	bne.n	8007e80 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	7858      	ldrb	r0, [r3, #1]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e62:	2301      	movs	r3, #1
 8007e64:	683a      	ldr	r2, [r7, #0]
 8007e66:	f7ff fcd5 	bl	8007814 <disk_read>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d004      	beq.n	8007e7a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007e70:	f04f 33ff 	mov.w	r3, #4294967295
 8007e74:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	683a      	ldr	r2, [r7, #0]
 8007e7e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
	...

08007e8c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f7ff ff87 	bl	8007da8 <sync_window>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d158      	bne.n	8007f56 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	2b03      	cmp	r3, #3
 8007eaa:	d148      	bne.n	8007f3e <sync_fs+0xb2>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	791b      	ldrb	r3, [r3, #4]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d144      	bne.n	8007f3e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	3330      	adds	r3, #48	; 0x30
 8007eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7ff fda9 	bl	8007a16 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	3330      	adds	r3, #48	; 0x30
 8007ec8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007ecc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7ff fd38 	bl	8007946 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	3330      	adds	r3, #48	; 0x30
 8007eda:	4921      	ldr	r1, [pc, #132]	; (8007f60 <sync_fs+0xd4>)
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7ff fd4d 	bl	800797c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	3330      	adds	r3, #48	; 0x30
 8007ee6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007eea:	491e      	ldr	r1, [pc, #120]	; (8007f64 <sync_fs+0xd8>)
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7ff fd45 	bl	800797c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3330      	adds	r3, #48	; 0x30
 8007ef6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	4619      	mov	r1, r3
 8007f00:	4610      	mov	r0, r2
 8007f02:	f7ff fd3b 	bl	800797c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	3330      	adds	r3, #48	; 0x30
 8007f0a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	4619      	mov	r1, r3
 8007f14:	4610      	mov	r0, r2
 8007f16:	f7ff fd31 	bl	800797c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	69db      	ldr	r3, [r3, #28]
 8007f1e:	1c5a      	adds	r2, r3, #1
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	7858      	ldrb	r0, [r3, #1]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f32:	2301      	movs	r3, #1
 8007f34:	f7ff fc8e 	bl	8007854 <disk_write>
			fs->fsi_flag = 0;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	785b      	ldrb	r3, [r3, #1]
 8007f42:	2200      	movs	r2, #0
 8007f44:	2100      	movs	r1, #0
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7ff fca4 	bl	8007894 <disk_ioctl>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <sync_fs+0xca>
 8007f52:	2301      	movs	r3, #1
 8007f54:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	41615252 	.word	0x41615252
 8007f64:	61417272 	.word	0x61417272

08007f68 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	3b02      	subs	r3, #2
 8007f76:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	695b      	ldr	r3, [r3, #20]
 8007f7c:	3b02      	subs	r3, #2
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d301      	bcc.n	8007f88 <clust2sect+0x20>
 8007f84:	2300      	movs	r3, #0
 8007f86:	e008      	b.n	8007f9a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	895b      	ldrh	r3, [r3, #10]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	fb03 f202 	mul.w	r2, r3, r2
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f98:	4413      	add	r3, r2
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	370c      	adds	r7, #12
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b086      	sub	sp, #24
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
 8007fae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d904      	bls.n	8007fc6 <get_fat+0x20>
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	695b      	ldr	r3, [r3, #20]
 8007fc0:	683a      	ldr	r2, [r7, #0]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d302      	bcc.n	8007fcc <get_fat+0x26>
		val = 1;	/* Internal error */
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	617b      	str	r3, [r7, #20]
 8007fca:	e08f      	b.n	80080ec <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	2b03      	cmp	r3, #3
 8007fd8:	d062      	beq.n	80080a0 <get_fat+0xfa>
 8007fda:	2b03      	cmp	r3, #3
 8007fdc:	dc7c      	bgt.n	80080d8 <get_fat+0x132>
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d002      	beq.n	8007fe8 <get_fat+0x42>
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d042      	beq.n	800806c <get_fat+0xc6>
 8007fe6:	e077      	b.n	80080d8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	085b      	lsrs	r3, r3, #1
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	6a1a      	ldr	r2, [r3, #32]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	0a5b      	lsrs	r3, r3, #9
 8007ffe:	4413      	add	r3, r2
 8008000:	4619      	mov	r1, r3
 8008002:	6938      	ldr	r0, [r7, #16]
 8008004:	f7ff ff14 	bl	8007e30 <move_window>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d167      	bne.n	80080de <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	1c5a      	adds	r2, r3, #1
 8008012:	60fa      	str	r2, [r7, #12]
 8008014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	4413      	add	r3, r2
 800801c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008020:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	6a1a      	ldr	r2, [r3, #32]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	0a5b      	lsrs	r3, r3, #9
 800802a:	4413      	add	r3, r2
 800802c:	4619      	mov	r1, r3
 800802e:	6938      	ldr	r0, [r7, #16]
 8008030:	f7ff fefe 	bl	8007e30 <move_window>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d153      	bne.n	80080e2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008040:	693a      	ldr	r2, [r7, #16]
 8008042:	4413      	add	r3, r2
 8008044:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008048:	021b      	lsls	r3, r3, #8
 800804a:	461a      	mov	r2, r3
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	4313      	orrs	r3, r2
 8008050:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	f003 0301 	and.w	r3, r3, #1
 8008058:	2b00      	cmp	r3, #0
 800805a:	d002      	beq.n	8008062 <get_fat+0xbc>
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	091b      	lsrs	r3, r3, #4
 8008060:	e002      	b.n	8008068 <get_fat+0xc2>
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008068:	617b      	str	r3, [r7, #20]
			break;
 800806a:	e03f      	b.n	80080ec <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	6a1a      	ldr	r2, [r3, #32]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	0a1b      	lsrs	r3, r3, #8
 8008074:	4413      	add	r3, r2
 8008076:	4619      	mov	r1, r3
 8008078:	6938      	ldr	r0, [r7, #16]
 800807a:	f7ff fed9 	bl	8007e30 <move_window>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d130      	bne.n	80080e6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	005b      	lsls	r3, r3, #1
 800808e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008092:	4413      	add	r3, r2
 8008094:	4618      	mov	r0, r3
 8008096:	f7ff fc1b 	bl	80078d0 <ld_word>
 800809a:	4603      	mov	r3, r0
 800809c:	617b      	str	r3, [r7, #20]
			break;
 800809e:	e025      	b.n	80080ec <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	6a1a      	ldr	r2, [r3, #32]
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	09db      	lsrs	r3, r3, #7
 80080a8:	4413      	add	r3, r2
 80080aa:	4619      	mov	r1, r3
 80080ac:	6938      	ldr	r0, [r7, #16]
 80080ae:	f7ff febf 	bl	8007e30 <move_window>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d118      	bne.n	80080ea <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80080c6:	4413      	add	r3, r2
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7ff fc19 	bl	8007900 <ld_dword>
 80080ce:	4603      	mov	r3, r0
 80080d0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80080d4:	617b      	str	r3, [r7, #20]
			break;
 80080d6:	e009      	b.n	80080ec <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80080d8:	2301      	movs	r3, #1
 80080da:	617b      	str	r3, [r7, #20]
 80080dc:	e006      	b.n	80080ec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80080de:	bf00      	nop
 80080e0:	e004      	b.n	80080ec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80080e2:	bf00      	nop
 80080e4:	e002      	b.n	80080ec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80080e6:	bf00      	nop
 80080e8:	e000      	b.n	80080ec <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80080ea:	bf00      	nop
		}
	}

	return val;
 80080ec:	697b      	ldr	r3, [r7, #20]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3718      	adds	r7, #24
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80080f6:	b590      	push	{r4, r7, lr}
 80080f8:	b089      	sub	sp, #36	; 0x24
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	60f8      	str	r0, [r7, #12]
 80080fe:	60b9      	str	r1, [r7, #8]
 8008100:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008102:	2302      	movs	r3, #2
 8008104:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	2b01      	cmp	r3, #1
 800810a:	f240 80d2 	bls.w	80082b2 <put_fat+0x1bc>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	68ba      	ldr	r2, [r7, #8]
 8008114:	429a      	cmp	r2, r3
 8008116:	f080 80cc 	bcs.w	80082b2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	2b03      	cmp	r3, #3
 8008120:	f000 8096 	beq.w	8008250 <put_fat+0x15a>
 8008124:	2b03      	cmp	r3, #3
 8008126:	f300 80cd 	bgt.w	80082c4 <put_fat+0x1ce>
 800812a:	2b01      	cmp	r3, #1
 800812c:	d002      	beq.n	8008134 <put_fat+0x3e>
 800812e:	2b02      	cmp	r3, #2
 8008130:	d06e      	beq.n	8008210 <put_fat+0x11a>
 8008132:	e0c7      	b.n	80082c4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	61bb      	str	r3, [r7, #24]
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	085b      	lsrs	r3, r3, #1
 800813c:	69ba      	ldr	r2, [r7, #24]
 800813e:	4413      	add	r3, r2
 8008140:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6a1a      	ldr	r2, [r3, #32]
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	0a5b      	lsrs	r3, r3, #9
 800814a:	4413      	add	r3, r2
 800814c:	4619      	mov	r1, r3
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f7ff fe6e 	bl	8007e30 <move_window>
 8008154:	4603      	mov	r3, r0
 8008156:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008158:	7ffb      	ldrb	r3, [r7, #31]
 800815a:	2b00      	cmp	r3, #0
 800815c:	f040 80ab 	bne.w	80082b6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	1c59      	adds	r1, r3, #1
 800816a:	61b9      	str	r1, [r7, #24]
 800816c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008170:	4413      	add	r3, r2
 8008172:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00d      	beq.n	800819a <put_fat+0xa4>
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	b25b      	sxtb	r3, r3
 8008184:	f003 030f 	and.w	r3, r3, #15
 8008188:	b25a      	sxtb	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	b2db      	uxtb	r3, r3
 800818e:	011b      	lsls	r3, r3, #4
 8008190:	b25b      	sxtb	r3, r3
 8008192:	4313      	orrs	r3, r2
 8008194:	b25b      	sxtb	r3, r3
 8008196:	b2db      	uxtb	r3, r3
 8008198:	e001      	b.n	800819e <put_fat+0xa8>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	b2db      	uxtb	r3, r3
 800819e:	697a      	ldr	r2, [r7, #20]
 80081a0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2201      	movs	r2, #1
 80081a6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6a1a      	ldr	r2, [r3, #32]
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	0a5b      	lsrs	r3, r3, #9
 80081b0:	4413      	add	r3, r2
 80081b2:	4619      	mov	r1, r3
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f7ff fe3b 	bl	8007e30 <move_window>
 80081ba:	4603      	mov	r3, r0
 80081bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80081be:	7ffb      	ldrb	r3, [r7, #31]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d17a      	bne.n	80082ba <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081d0:	4413      	add	r3, r2
 80081d2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f003 0301 	and.w	r3, r3, #1
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d003      	beq.n	80081e6 <put_fat+0xf0>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	091b      	lsrs	r3, r3, #4
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	e00e      	b.n	8008204 <put_fat+0x10e>
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	b25b      	sxtb	r3, r3
 80081ec:	f023 030f 	bic.w	r3, r3, #15
 80081f0:	b25a      	sxtb	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	0a1b      	lsrs	r3, r3, #8
 80081f6:	b25b      	sxtb	r3, r3
 80081f8:	f003 030f 	and.w	r3, r3, #15
 80081fc:	b25b      	sxtb	r3, r3
 80081fe:	4313      	orrs	r3, r2
 8008200:	b25b      	sxtb	r3, r3
 8008202:	b2db      	uxtb	r3, r3
 8008204:	697a      	ldr	r2, [r7, #20]
 8008206:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2201      	movs	r2, #1
 800820c:	70da      	strb	r2, [r3, #3]
			break;
 800820e:	e059      	b.n	80082c4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6a1a      	ldr	r2, [r3, #32]
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	0a1b      	lsrs	r3, r3, #8
 8008218:	4413      	add	r3, r2
 800821a:	4619      	mov	r1, r3
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f7ff fe07 	bl	8007e30 <move_window>
 8008222:	4603      	mov	r3, r0
 8008224:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008226:	7ffb      	ldrb	r3, [r7, #31]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d148      	bne.n	80082be <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	005b      	lsls	r3, r3, #1
 8008236:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800823a:	4413      	add	r3, r2
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	b292      	uxth	r2, r2
 8008240:	4611      	mov	r1, r2
 8008242:	4618      	mov	r0, r3
 8008244:	f7ff fb7f 	bl	8007946 <st_word>
			fs->wflag = 1;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2201      	movs	r2, #1
 800824c:	70da      	strb	r2, [r3, #3]
			break;
 800824e:	e039      	b.n	80082c4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6a1a      	ldr	r2, [r3, #32]
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	09db      	lsrs	r3, r3, #7
 8008258:	4413      	add	r3, r2
 800825a:	4619      	mov	r1, r3
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f7ff fde7 	bl	8007e30 <move_window>
 8008262:	4603      	mov	r3, r0
 8008264:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008266:	7ffb      	ldrb	r3, [r7, #31]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d12a      	bne.n	80082c2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008280:	4413      	add	r3, r2
 8008282:	4618      	mov	r0, r3
 8008284:	f7ff fb3c 	bl	8007900 <ld_dword>
 8008288:	4603      	mov	r3, r0
 800828a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800828e:	4323      	orrs	r3, r4
 8008290:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80082a0:	4413      	add	r3, r2
 80082a2:	6879      	ldr	r1, [r7, #4]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7ff fb69 	bl	800797c <st_dword>
			fs->wflag = 1;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2201      	movs	r2, #1
 80082ae:	70da      	strb	r2, [r3, #3]
			break;
 80082b0:	e008      	b.n	80082c4 <put_fat+0x1ce>
		}
	}
 80082b2:	bf00      	nop
 80082b4:	e006      	b.n	80082c4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80082b6:	bf00      	nop
 80082b8:	e004      	b.n	80082c4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80082ba:	bf00      	nop
 80082bc:	e002      	b.n	80082c4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80082be:	bf00      	nop
 80082c0:	e000      	b.n	80082c4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80082c2:	bf00      	nop
	return res;
 80082c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3724      	adds	r7, #36	; 0x24
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd90      	pop	{r4, r7, pc}

080082ce <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b088      	sub	sp, #32
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	60f8      	str	r0, [r7, #12]
 80082d6:	60b9      	str	r1, [r7, #8]
 80082d8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d904      	bls.n	80082f4 <remove_chain+0x26>
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d301      	bcc.n	80082f8 <remove_chain+0x2a>
 80082f4:	2302      	movs	r3, #2
 80082f6:	e04b      	b.n	8008390 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00c      	beq.n	8008318 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80082fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008302:	6879      	ldr	r1, [r7, #4]
 8008304:	69b8      	ldr	r0, [r7, #24]
 8008306:	f7ff fef6 	bl	80080f6 <put_fat>
 800830a:	4603      	mov	r3, r0
 800830c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800830e:	7ffb      	ldrb	r3, [r7, #31]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d001      	beq.n	8008318 <remove_chain+0x4a>
 8008314:	7ffb      	ldrb	r3, [r7, #31]
 8008316:	e03b      	b.n	8008390 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008318:	68b9      	ldr	r1, [r7, #8]
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f7ff fe43 	bl	8007fa6 <get_fat>
 8008320:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d031      	beq.n	800838c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d101      	bne.n	8008332 <remove_chain+0x64>
 800832e:	2302      	movs	r3, #2
 8008330:	e02e      	b.n	8008390 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008338:	d101      	bne.n	800833e <remove_chain+0x70>
 800833a:	2301      	movs	r3, #1
 800833c:	e028      	b.n	8008390 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800833e:	2200      	movs	r2, #0
 8008340:	68b9      	ldr	r1, [r7, #8]
 8008342:	69b8      	ldr	r0, [r7, #24]
 8008344:	f7ff fed7 	bl	80080f6 <put_fat>
 8008348:	4603      	mov	r3, r0
 800834a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800834c:	7ffb      	ldrb	r3, [r7, #31]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d001      	beq.n	8008356 <remove_chain+0x88>
 8008352:	7ffb      	ldrb	r3, [r7, #31]
 8008354:	e01c      	b.n	8008390 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	691a      	ldr	r2, [r3, #16]
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	3b02      	subs	r3, #2
 8008360:	429a      	cmp	r2, r3
 8008362:	d20b      	bcs.n	800837c <remove_chain+0xae>
			fs->free_clst++;
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	1c5a      	adds	r2, r3, #1
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	791b      	ldrb	r3, [r3, #4]
 8008372:	f043 0301 	orr.w	r3, r3, #1
 8008376:	b2da      	uxtb	r2, r3
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	695b      	ldr	r3, [r3, #20]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	429a      	cmp	r2, r3
 8008388:	d3c6      	bcc.n	8008318 <remove_chain+0x4a>
 800838a:	e000      	b.n	800838e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800838c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3720      	adds	r7, #32
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b088      	sub	sp, #32
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d10d      	bne.n	80083ca <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d004      	beq.n	80083c4 <create_chain+0x2c>
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	69ba      	ldr	r2, [r7, #24]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d31b      	bcc.n	80083fc <create_chain+0x64>
 80083c4:	2301      	movs	r3, #1
 80083c6:	61bb      	str	r3, [r7, #24]
 80083c8:	e018      	b.n	80083fc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f7ff fdea 	bl	8007fa6 <get_fat>
 80083d2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d801      	bhi.n	80083de <create_chain+0x46>
 80083da:	2301      	movs	r3, #1
 80083dc:	e070      	b.n	80084c0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e4:	d101      	bne.n	80083ea <create_chain+0x52>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	e06a      	b.n	80084c0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d201      	bcs.n	80083f8 <create_chain+0x60>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	e063      	b.n	80084c0 <create_chain+0x128>
		scl = clst;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	3301      	adds	r3, #1
 8008404:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	69fa      	ldr	r2, [r7, #28]
 800840c:	429a      	cmp	r2, r3
 800840e:	d307      	bcc.n	8008420 <create_chain+0x88>
				ncl = 2;
 8008410:	2302      	movs	r3, #2
 8008412:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008414:	69fa      	ldr	r2, [r7, #28]
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	429a      	cmp	r2, r3
 800841a:	d901      	bls.n	8008420 <create_chain+0x88>
 800841c:	2300      	movs	r3, #0
 800841e:	e04f      	b.n	80084c0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008420:	69f9      	ldr	r1, [r7, #28]
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7ff fdbf 	bl	8007fa6 <get_fat>
 8008428:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00e      	beq.n	800844e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d003      	beq.n	800843e <create_chain+0xa6>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843c:	d101      	bne.n	8008442 <create_chain+0xaa>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	e03e      	b.n	80084c0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008442:	69fa      	ldr	r2, [r7, #28]
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	429a      	cmp	r2, r3
 8008448:	d1da      	bne.n	8008400 <create_chain+0x68>
 800844a:	2300      	movs	r3, #0
 800844c:	e038      	b.n	80084c0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800844e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008450:	f04f 32ff 	mov.w	r2, #4294967295
 8008454:	69f9      	ldr	r1, [r7, #28]
 8008456:	6938      	ldr	r0, [r7, #16]
 8008458:	f7ff fe4d 	bl	80080f6 <put_fat>
 800845c:	4603      	mov	r3, r0
 800845e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008460:	7dfb      	ldrb	r3, [r7, #23]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d109      	bne.n	800847a <create_chain+0xe2>
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d006      	beq.n	800847a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800846c:	69fa      	ldr	r2, [r7, #28]
 800846e:	6839      	ldr	r1, [r7, #0]
 8008470:	6938      	ldr	r0, [r7, #16]
 8008472:	f7ff fe40 	bl	80080f6 <put_fat>
 8008476:	4603      	mov	r3, r0
 8008478:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800847a:	7dfb      	ldrb	r3, [r7, #23]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d116      	bne.n	80084ae <create_chain+0x116>
		fs->last_clst = ncl;
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	69fa      	ldr	r2, [r7, #28]
 8008484:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	691a      	ldr	r2, [r3, #16]
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	3b02      	subs	r3, #2
 8008490:	429a      	cmp	r2, r3
 8008492:	d804      	bhi.n	800849e <create_chain+0x106>
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	1e5a      	subs	r2, r3, #1
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	791b      	ldrb	r3, [r3, #4]
 80084a2:	f043 0301 	orr.w	r3, r3, #1
 80084a6:	b2da      	uxtb	r2, r3
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	711a      	strb	r2, [r3, #4]
 80084ac:	e007      	b.n	80084be <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80084ae:	7dfb      	ldrb	r3, [r7, #23]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d102      	bne.n	80084ba <create_chain+0x122>
 80084b4:	f04f 33ff 	mov.w	r3, #4294967295
 80084b8:	e000      	b.n	80084bc <create_chain+0x124>
 80084ba:	2301      	movs	r3, #1
 80084bc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80084be:	69fb      	ldr	r3, [r7, #28]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3720      	adds	r7, #32
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b087      	sub	sp, #28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084dc:	3304      	adds	r3, #4
 80084de:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	0a5b      	lsrs	r3, r3, #9
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	8952      	ldrh	r2, [r2, #10]
 80084e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80084ec:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	1d1a      	adds	r2, r3, #4
 80084f2:	613a      	str	r2, [r7, #16]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d101      	bne.n	8008502 <clmt_clust+0x3a>
 80084fe:	2300      	movs	r3, #0
 8008500:	e010      	b.n	8008524 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008502:	697a      	ldr	r2, [r7, #20]
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	429a      	cmp	r2, r3
 8008508:	d307      	bcc.n	800851a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800850a:	697a      	ldr	r2, [r7, #20]
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	617b      	str	r3, [r7, #20]
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	3304      	adds	r3, #4
 8008516:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008518:	e7e9      	b.n	80084ee <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800851a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	4413      	add	r3, r2
}
 8008524:	4618      	mov	r0, r3
 8008526:	371c      	adds	r7, #28
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008546:	d204      	bcs.n	8008552 <dir_sdi+0x22>
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	f003 031f 	and.w	r3, r3, #31
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008552:	2302      	movs	r3, #2
 8008554:	e063      	b.n	800861e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	683a      	ldr	r2, [r7, #0]
 800855a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d106      	bne.n	8008576 <dir_sdi+0x46>
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	2b02      	cmp	r3, #2
 800856e:	d902      	bls.n	8008576 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008574:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10c      	bne.n	8008596 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	095b      	lsrs	r3, r3, #5
 8008580:	693a      	ldr	r2, [r7, #16]
 8008582:	8912      	ldrh	r2, [r2, #8]
 8008584:	4293      	cmp	r3, r2
 8008586:	d301      	bcc.n	800858c <dir_sdi+0x5c>
 8008588:	2302      	movs	r3, #2
 800858a:	e048      	b.n	800861e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	61da      	str	r2, [r3, #28]
 8008594:	e029      	b.n	80085ea <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	895b      	ldrh	r3, [r3, #10]
 800859a:	025b      	lsls	r3, r3, #9
 800859c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800859e:	e019      	b.n	80085d4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6979      	ldr	r1, [r7, #20]
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7ff fcfe 	bl	8007fa6 <get_fat>
 80085aa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b2:	d101      	bne.n	80085b8 <dir_sdi+0x88>
 80085b4:	2301      	movs	r3, #1
 80085b6:	e032      	b.n	800861e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d904      	bls.n	80085c8 <dir_sdi+0x98>
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	695b      	ldr	r3, [r3, #20]
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d301      	bcc.n	80085cc <dir_sdi+0x9c>
 80085c8:	2302      	movs	r3, #2
 80085ca:	e028      	b.n	800861e <dir_sdi+0xee>
			ofs -= csz;
 80085cc:	683a      	ldr	r2, [r7, #0]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80085d4:	683a      	ldr	r2, [r7, #0]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d2e1      	bcs.n	80085a0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80085dc:	6979      	ldr	r1, [r7, #20]
 80085de:	6938      	ldr	r0, [r7, #16]
 80085e0:	f7ff fcc2 	bl	8007f68 <clust2sect>
 80085e4:	4602      	mov	r2, r0
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	697a      	ldr	r2, [r7, #20]
 80085ee:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	69db      	ldr	r3, [r3, #28]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d101      	bne.n	80085fc <dir_sdi+0xcc>
 80085f8:	2302      	movs	r3, #2
 80085fa:	e010      	b.n	800861e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	69da      	ldr	r2, [r3, #28]
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	0a5b      	lsrs	r3, r3, #9
 8008604:	441a      	add	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008616:	441a      	add	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b086      	sub	sp, #24
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	3320      	adds	r3, #32
 800863c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d003      	beq.n	800864e <dir_next+0x28>
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800864c:	d301      	bcc.n	8008652 <dir_next+0x2c>
 800864e:	2304      	movs	r3, #4
 8008650:	e0aa      	b.n	80087a8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008658:	2b00      	cmp	r3, #0
 800865a:	f040 8098 	bne.w	800878e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	69db      	ldr	r3, [r3, #28]
 8008662:	1c5a      	adds	r2, r3, #1
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d10b      	bne.n	8008688 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	095b      	lsrs	r3, r3, #5
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	8912      	ldrh	r2, [r2, #8]
 8008678:	4293      	cmp	r3, r2
 800867a:	f0c0 8088 	bcc.w	800878e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	61da      	str	r2, [r3, #28]
 8008684:	2304      	movs	r3, #4
 8008686:	e08f      	b.n	80087a8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	0a5b      	lsrs	r3, r3, #9
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	8952      	ldrh	r2, [r2, #10]
 8008690:	3a01      	subs	r2, #1
 8008692:	4013      	ands	r3, r2
 8008694:	2b00      	cmp	r3, #0
 8008696:	d17a      	bne.n	800878e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	4619      	mov	r1, r3
 80086a0:	4610      	mov	r0, r2
 80086a2:	f7ff fc80 	bl	8007fa6 <get_fat>
 80086a6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d801      	bhi.n	80086b2 <dir_next+0x8c>
 80086ae:	2302      	movs	r3, #2
 80086b0:	e07a      	b.n	80087a8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b8:	d101      	bne.n	80086be <dir_next+0x98>
 80086ba:	2301      	movs	r3, #1
 80086bc:	e074      	b.n	80087a8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	695b      	ldr	r3, [r3, #20]
 80086c2:	697a      	ldr	r2, [r7, #20]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d358      	bcc.n	800877a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d104      	bne.n	80086d8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	61da      	str	r2, [r3, #28]
 80086d4:	2304      	movs	r3, #4
 80086d6:	e067      	b.n	80087a8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	699b      	ldr	r3, [r3, #24]
 80086de:	4619      	mov	r1, r3
 80086e0:	4610      	mov	r0, r2
 80086e2:	f7ff fe59 	bl	8008398 <create_chain>
 80086e6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d101      	bne.n	80086f2 <dir_next+0xcc>
 80086ee:	2307      	movs	r3, #7
 80086f0:	e05a      	b.n	80087a8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d101      	bne.n	80086fc <dir_next+0xd6>
 80086f8:	2302      	movs	r3, #2
 80086fa:	e055      	b.n	80087a8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008702:	d101      	bne.n	8008708 <dir_next+0xe2>
 8008704:	2301      	movs	r3, #1
 8008706:	e04f      	b.n	80087a8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f7ff fb4d 	bl	8007da8 <sync_window>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d001      	beq.n	8008718 <dir_next+0xf2>
 8008714:	2301      	movs	r3, #1
 8008716:	e047      	b.n	80087a8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	3330      	adds	r3, #48	; 0x30
 800871c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008720:	2100      	movs	r1, #0
 8008722:	4618      	mov	r0, r3
 8008724:	f7ff f977 	bl	8007a16 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008728:	2300      	movs	r3, #0
 800872a:	613b      	str	r3, [r7, #16]
 800872c:	6979      	ldr	r1, [r7, #20]
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f7ff fc1a 	bl	8007f68 <clust2sect>
 8008734:	4602      	mov	r2, r0
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	62da      	str	r2, [r3, #44]	; 0x2c
 800873a:	e012      	b.n	8008762 <dir_next+0x13c>
						fs->wflag = 1;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2201      	movs	r2, #1
 8008740:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f7ff fb30 	bl	8007da8 <sync_window>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <dir_next+0x12c>
 800874e:	2301      	movs	r3, #1
 8008750:	e02a      	b.n	80087a8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	3301      	adds	r3, #1
 8008756:	613b      	str	r3, [r7, #16]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875c:	1c5a      	adds	r2, r3, #1
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	62da      	str	r2, [r3, #44]	; 0x2c
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	895b      	ldrh	r3, [r3, #10]
 8008766:	461a      	mov	r2, r3
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	4293      	cmp	r3, r2
 800876c:	d3e6      	bcc.n	800873c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	1ad2      	subs	r2, r2, r3
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	697a      	ldr	r2, [r7, #20]
 800877e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008780:	6979      	ldr	r1, [r7, #20]
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f7ff fbf0 	bl	8007f68 <clust2sect>
 8008788:	4602      	mov	r2, r0
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a0:	441a      	add	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80087c0:	2100      	movs	r1, #0
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7ff feb4 	bl	8008530 <dir_sdi>
 80087c8:	4603      	mov	r3, r0
 80087ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80087cc:	7dfb      	ldrb	r3, [r7, #23]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d12b      	bne.n	800882a <dir_alloc+0x7a>
		n = 0;
 80087d2:	2300      	movs	r3, #0
 80087d4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	69db      	ldr	r3, [r3, #28]
 80087da:	4619      	mov	r1, r3
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f7ff fb27 	bl	8007e30 <move_window>
 80087e2:	4603      	mov	r3, r0
 80087e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80087e6:	7dfb      	ldrb	r3, [r7, #23]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d11d      	bne.n	8008828 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a1b      	ldr	r3, [r3, #32]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	2be5      	cmp	r3, #229	; 0xe5
 80087f4:	d004      	beq.n	8008800 <dir_alloc+0x50>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a1b      	ldr	r3, [r3, #32]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d107      	bne.n	8008810 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	3301      	adds	r3, #1
 8008804:	613b      	str	r3, [r7, #16]
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	429a      	cmp	r2, r3
 800880c:	d102      	bne.n	8008814 <dir_alloc+0x64>
 800880e:	e00c      	b.n	800882a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008810:	2300      	movs	r3, #0
 8008812:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008814:	2101      	movs	r1, #1
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f7ff ff05 	bl	8008626 <dir_next>
 800881c:	4603      	mov	r3, r0
 800881e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008820:	7dfb      	ldrb	r3, [r7, #23]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d0d7      	beq.n	80087d6 <dir_alloc+0x26>
 8008826:	e000      	b.n	800882a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008828:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800882a:	7dfb      	ldrb	r3, [r7, #23]
 800882c:	2b04      	cmp	r3, #4
 800882e:	d101      	bne.n	8008834 <dir_alloc+0x84>
 8008830:	2307      	movs	r3, #7
 8008832:	75fb      	strb	r3, [r7, #23]
	return res;
 8008834:	7dfb      	ldrb	r3, [r7, #23]
}
 8008836:	4618      	mov	r0, r3
 8008838:	3718      	adds	r7, #24
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	331a      	adds	r3, #26
 800884c:	4618      	mov	r0, r3
 800884e:	f7ff f83f 	bl	80078d0 <ld_word>
 8008852:	4603      	mov	r3, r0
 8008854:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	2b03      	cmp	r3, #3
 800885c:	d109      	bne.n	8008872 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	3314      	adds	r3, #20
 8008862:	4618      	mov	r0, r3
 8008864:	f7ff f834 	bl	80078d0 <ld_word>
 8008868:	4603      	mov	r3, r0
 800886a:	041b      	lsls	r3, r3, #16
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	4313      	orrs	r3, r2
 8008870:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008872:	68fb      	ldr	r3, [r7, #12]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	331a      	adds	r3, #26
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	b292      	uxth	r2, r2
 8008890:	4611      	mov	r1, r2
 8008892:	4618      	mov	r0, r3
 8008894:	f7ff f857 	bl	8007946 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	2b03      	cmp	r3, #3
 800889e:	d109      	bne.n	80088b4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	f103 0214 	add.w	r2, r3, #20
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	0c1b      	lsrs	r3, r3, #16
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	4619      	mov	r1, r3
 80088ae:	4610      	mov	r0, r2
 80088b0:	f7ff f849 	bl	8007946 <st_word>
	}
}
 80088b4:	bf00      	nop
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80088c6:	2304      	movs	r3, #4
 80088c8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80088d0:	e03c      	b.n	800894c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	69db      	ldr	r3, [r3, #28]
 80088d6:	4619      	mov	r1, r3
 80088d8:	6938      	ldr	r0, [r7, #16]
 80088da:	f7ff faa9 	bl	8007e30 <move_window>
 80088de:	4603      	mov	r3, r0
 80088e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80088e2:	7dfb      	ldrb	r3, [r7, #23]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d136      	bne.n	8008956 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a1b      	ldr	r3, [r3, #32]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d102      	bne.n	80088fc <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80088f6:	2304      	movs	r3, #4
 80088f8:	75fb      	strb	r3, [r7, #23]
 80088fa:	e031      	b.n	8008960 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a1b      	ldr	r3, [r3, #32]
 8008900:	330b      	adds	r3, #11
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008908:	73bb      	strb	r3, [r7, #14]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	7bba      	ldrb	r2, [r7, #14]
 800890e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8008910:	7bfb      	ldrb	r3, [r7, #15]
 8008912:	2be5      	cmp	r3, #229	; 0xe5
 8008914:	d011      	beq.n	800893a <dir_read+0x7e>
 8008916:	7bfb      	ldrb	r3, [r7, #15]
 8008918:	2b2e      	cmp	r3, #46	; 0x2e
 800891a:	d00e      	beq.n	800893a <dir_read+0x7e>
 800891c:	7bbb      	ldrb	r3, [r7, #14]
 800891e:	2b0f      	cmp	r3, #15
 8008920:	d00b      	beq.n	800893a <dir_read+0x7e>
 8008922:	7bbb      	ldrb	r3, [r7, #14]
 8008924:	f023 0320 	bic.w	r3, r3, #32
 8008928:	2b08      	cmp	r3, #8
 800892a:	bf0c      	ite	eq
 800892c:	2301      	moveq	r3, #1
 800892e:	2300      	movne	r3, #0
 8008930:	b2db      	uxtb	r3, r3
 8008932:	461a      	mov	r2, r3
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	4293      	cmp	r3, r2
 8008938:	d00f      	beq.n	800895a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800893a:	2100      	movs	r1, #0
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f7ff fe72 	bl	8008626 <dir_next>
 8008942:	4603      	mov	r3, r0
 8008944:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008946:	7dfb      	ldrb	r3, [r7, #23]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d108      	bne.n	800895e <dir_read+0xa2>
	while (dp->sect) {
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	69db      	ldr	r3, [r3, #28]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1be      	bne.n	80088d2 <dir_read+0x16>
 8008954:	e004      	b.n	8008960 <dir_read+0xa4>
		if (res != FR_OK) break;
 8008956:	bf00      	nop
 8008958:	e002      	b.n	8008960 <dir_read+0xa4>
				break;
 800895a:	bf00      	nop
 800895c:	e000      	b.n	8008960 <dir_read+0xa4>
		if (res != FR_OK) break;
 800895e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8008960:	7dfb      	ldrb	r3, [r7, #23]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d002      	beq.n	800896c <dir_read+0xb0>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	61da      	str	r2, [r3, #28]
	return res;
 800896c:	7dfb      	ldrb	r3, [r7, #23]
}
 800896e:	4618      	mov	r0, r3
 8008970:	3718      	adds	r7, #24
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b086      	sub	sp, #24
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008984:	2100      	movs	r1, #0
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7ff fdd2 	bl	8008530 <dir_sdi>
 800898c:	4603      	mov	r3, r0
 800898e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008990:	7dfb      	ldrb	r3, [r7, #23]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d001      	beq.n	800899a <dir_find+0x24>
 8008996:	7dfb      	ldrb	r3, [r7, #23]
 8008998:	e03e      	b.n	8008a18 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	69db      	ldr	r3, [r3, #28]
 800899e:	4619      	mov	r1, r3
 80089a0:	6938      	ldr	r0, [r7, #16]
 80089a2:	f7ff fa45 	bl	8007e30 <move_window>
 80089a6:	4603      	mov	r3, r0
 80089a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80089aa:	7dfb      	ldrb	r3, [r7, #23]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d12f      	bne.n	8008a10 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6a1b      	ldr	r3, [r3, #32]
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d102      	bne.n	80089c4 <dir_find+0x4e>
 80089be:	2304      	movs	r3, #4
 80089c0:	75fb      	strb	r3, [r7, #23]
 80089c2:	e028      	b.n	8008a16 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6a1b      	ldr	r3, [r3, #32]
 80089c8:	330b      	adds	r3, #11
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089d0:	b2da      	uxtb	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a1b      	ldr	r3, [r3, #32]
 80089da:	330b      	adds	r3, #11
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	f003 0308 	and.w	r3, r3, #8
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10a      	bne.n	80089fc <dir_find+0x86>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a18      	ldr	r0, [r3, #32]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	3324      	adds	r3, #36	; 0x24
 80089ee:	220b      	movs	r2, #11
 80089f0:	4619      	mov	r1, r3
 80089f2:	f7ff f82b 	bl	8007a4c <mem_cmp>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00b      	beq.n	8008a14 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80089fc:	2100      	movs	r1, #0
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7ff fe11 	bl	8008626 <dir_next>
 8008a04:	4603      	mov	r3, r0
 8008a06:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008a08:	7dfb      	ldrb	r3, [r7, #23]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d0c5      	beq.n	800899a <dir_find+0x24>
 8008a0e:	e002      	b.n	8008a16 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008a10:	bf00      	nop
 8008a12:	e000      	b.n	8008a16 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008a14:	bf00      	nop

	return res;
 8008a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3718      	adds	r7, #24
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008a2e:	2101      	movs	r1, #1
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f7ff febd 	bl	80087b0 <dir_alloc>
 8008a36:	4603      	mov	r3, r0
 8008a38:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d11c      	bne.n	8008a7a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	69db      	ldr	r3, [r3, #28]
 8008a44:	4619      	mov	r1, r3
 8008a46:	68b8      	ldr	r0, [r7, #8]
 8008a48:	f7ff f9f2 	bl	8007e30 <move_window>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d111      	bne.n	8008a7a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a1b      	ldr	r3, [r3, #32]
 8008a5a:	2220      	movs	r2, #32
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fe ffd9 	bl	8007a16 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a18      	ldr	r0, [r3, #32]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	3324      	adds	r3, #36	; 0x24
 8008a6c:	220b      	movs	r2, #11
 8008a6e:	4619      	mov	r1, r3
 8008a70:	f7fe ffb0 	bl	80079d4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	2201      	movs	r2, #1
 8008a78:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	2200      	movs	r2, #0
 8008a92:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	69db      	ldr	r3, [r3, #28]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d04e      	beq.n	8008b3a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	613b      	str	r3, [r7, #16]
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8008aa4:	e021      	b.n	8008aea <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a1a      	ldr	r2, [r3, #32]
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	1c59      	adds	r1, r3, #1
 8008aae:	6179      	str	r1, [r7, #20]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
 8008ab8:	2b20      	cmp	r3, #32
 8008aba:	d100      	bne.n	8008abe <get_fileinfo+0x3a>
 8008abc:	e015      	b.n	8008aea <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
 8008ac0:	2b05      	cmp	r3, #5
 8008ac2:	d101      	bne.n	8008ac8 <get_fileinfo+0x44>
 8008ac4:	23e5      	movs	r3, #229	; 0xe5
 8008ac6:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	2b09      	cmp	r3, #9
 8008acc:	d106      	bne.n	8008adc <get_fileinfo+0x58>
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	1c5a      	adds	r2, r3, #1
 8008ad2:	613a      	str	r2, [r7, #16]
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	222e      	movs	r2, #46	; 0x2e
 8008ada:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	1c5a      	adds	r2, r3, #1
 8008ae0:	613a      	str	r2, [r7, #16]
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	7bfa      	ldrb	r2, [r7, #15]
 8008ae8:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	2b0a      	cmp	r3, #10
 8008aee:	d9da      	bls.n	8008aa6 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	4413      	add	r3, r2
 8008af6:	3309      	adds	r3, #9
 8008af8:	2200      	movs	r2, #0
 8008afa:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a1b      	ldr	r3, [r3, #32]
 8008b00:	7ada      	ldrb	r2, [r3, #11]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a1b      	ldr	r3, [r3, #32]
 8008b0a:	331c      	adds	r3, #28
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7fe fef7 	bl	8007900 <ld_dword>
 8008b12:	4602      	mov	r2, r0
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a1b      	ldr	r3, [r3, #32]
 8008b1c:	3316      	adds	r3, #22
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fe feee 	bl	8007900 <ld_dword>
 8008b24:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	80da      	strh	r2, [r3, #6]
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	0c1b      	lsrs	r3, r3, #16
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	809a      	strh	r2, [r3, #4]
 8008b38:	e000      	b.n	8008b3c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008b3a:	bf00      	nop
}
 8008b3c:	3718      	adds	r7, #24
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
	...

08008b44 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b088      	sub	sp, #32
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	60fb      	str	r3, [r7, #12]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	3324      	adds	r3, #36	; 0x24
 8008b58:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008b5a:	220b      	movs	r2, #11
 8008b5c:	2120      	movs	r1, #32
 8008b5e:	68b8      	ldr	r0, [r7, #8]
 8008b60:	f7fe ff59 	bl	8007a16 <mem_set>
	si = i = 0; ni = 8;
 8008b64:	2300      	movs	r3, #0
 8008b66:	613b      	str	r3, [r7, #16]
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	61fb      	str	r3, [r7, #28]
 8008b6c:	2308      	movs	r3, #8
 8008b6e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	1c5a      	adds	r2, r3, #1
 8008b74:	61fa      	str	r2, [r7, #28]
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	4413      	add	r3, r2
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008b7e:	7efb      	ldrb	r3, [r7, #27]
 8008b80:	2b20      	cmp	r3, #32
 8008b82:	d94e      	bls.n	8008c22 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008b84:	7efb      	ldrb	r3, [r7, #27]
 8008b86:	2b2f      	cmp	r3, #47	; 0x2f
 8008b88:	d006      	beq.n	8008b98 <create_name+0x54>
 8008b8a:	7efb      	ldrb	r3, [r7, #27]
 8008b8c:	2b5c      	cmp	r3, #92	; 0x5c
 8008b8e:	d110      	bne.n	8008bb2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008b90:	e002      	b.n	8008b98 <create_name+0x54>
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	3301      	adds	r3, #1
 8008b96:	61fb      	str	r3, [r7, #28]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	2b2f      	cmp	r3, #47	; 0x2f
 8008ba2:	d0f6      	beq.n	8008b92 <create_name+0x4e>
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	4413      	add	r3, r2
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	2b5c      	cmp	r3, #92	; 0x5c
 8008bae:	d0f0      	beq.n	8008b92 <create_name+0x4e>
			break;
 8008bb0:	e038      	b.n	8008c24 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008bb2:	7efb      	ldrb	r3, [r7, #27]
 8008bb4:	2b2e      	cmp	r3, #46	; 0x2e
 8008bb6:	d003      	beq.n	8008bc0 <create_name+0x7c>
 8008bb8:	693a      	ldr	r2, [r7, #16]
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d30c      	bcc.n	8008bda <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	2b0b      	cmp	r3, #11
 8008bc4:	d002      	beq.n	8008bcc <create_name+0x88>
 8008bc6:	7efb      	ldrb	r3, [r7, #27]
 8008bc8:	2b2e      	cmp	r3, #46	; 0x2e
 8008bca:	d001      	beq.n	8008bd0 <create_name+0x8c>
 8008bcc:	2306      	movs	r3, #6
 8008bce:	e044      	b.n	8008c5a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008bd0:	2308      	movs	r3, #8
 8008bd2:	613b      	str	r3, [r7, #16]
 8008bd4:	230b      	movs	r3, #11
 8008bd6:	617b      	str	r3, [r7, #20]
			continue;
 8008bd8:	e022      	b.n	8008c20 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008bda:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	da04      	bge.n	8008bec <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008be2:	7efb      	ldrb	r3, [r7, #27]
 8008be4:	3b80      	subs	r3, #128	; 0x80
 8008be6:	4a1f      	ldr	r2, [pc, #124]	; (8008c64 <create_name+0x120>)
 8008be8:	5cd3      	ldrb	r3, [r2, r3]
 8008bea:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008bec:	7efb      	ldrb	r3, [r7, #27]
 8008bee:	4619      	mov	r1, r3
 8008bf0:	481d      	ldr	r0, [pc, #116]	; (8008c68 <create_name+0x124>)
 8008bf2:	f7fe ff52 	bl	8007a9a <chk_chr>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d001      	beq.n	8008c00 <create_name+0xbc>
 8008bfc:	2306      	movs	r3, #6
 8008bfe:	e02c      	b.n	8008c5a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008c00:	7efb      	ldrb	r3, [r7, #27]
 8008c02:	2b60      	cmp	r3, #96	; 0x60
 8008c04:	d905      	bls.n	8008c12 <create_name+0xce>
 8008c06:	7efb      	ldrb	r3, [r7, #27]
 8008c08:	2b7a      	cmp	r3, #122	; 0x7a
 8008c0a:	d802      	bhi.n	8008c12 <create_name+0xce>
 8008c0c:	7efb      	ldrb	r3, [r7, #27]
 8008c0e:	3b20      	subs	r3, #32
 8008c10:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	1c5a      	adds	r2, r3, #1
 8008c16:	613a      	str	r2, [r7, #16]
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	7efa      	ldrb	r2, [r7, #27]
 8008c1e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008c20:	e7a6      	b.n	8008b70 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008c22:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	441a      	add	r2, r3
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d101      	bne.n	8008c38 <create_name+0xf4>
 8008c34:	2306      	movs	r3, #6
 8008c36:	e010      	b.n	8008c5a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	2be5      	cmp	r3, #229	; 0xe5
 8008c3e:	d102      	bne.n	8008c46 <create_name+0x102>
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	2205      	movs	r2, #5
 8008c44:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008c46:	7efb      	ldrb	r3, [r7, #27]
 8008c48:	2b20      	cmp	r3, #32
 8008c4a:	d801      	bhi.n	8008c50 <create_name+0x10c>
 8008c4c:	2204      	movs	r2, #4
 8008c4e:	e000      	b.n	8008c52 <create_name+0x10e>
 8008c50:	2200      	movs	r2, #0
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	330b      	adds	r3, #11
 8008c56:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008c58:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3720      	adds	r7, #32
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	0800b43c 	.word	0x0800b43c
 8008c68:	0800b050 	.word	0x0800b050

08008c6c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b086      	sub	sp, #24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008c80:	e002      	b.n	8008c88 <follow_path+0x1c>
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	3301      	adds	r3, #1
 8008c86:	603b      	str	r3, [r7, #0]
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	2b2f      	cmp	r3, #47	; 0x2f
 8008c8e:	d0f8      	beq.n	8008c82 <follow_path+0x16>
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	2b5c      	cmp	r3, #92	; 0x5c
 8008c96:	d0f4      	beq.n	8008c82 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	2b1f      	cmp	r3, #31
 8008ca4:	d80a      	bhi.n	8008cbc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2280      	movs	r2, #128	; 0x80
 8008caa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008cae:	2100      	movs	r1, #0
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7ff fc3d 	bl	8008530 <dir_sdi>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	75fb      	strb	r3, [r7, #23]
 8008cba:	e043      	b.n	8008d44 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008cbc:	463b      	mov	r3, r7
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f7ff ff3f 	bl	8008b44 <create_name>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008cca:	7dfb      	ldrb	r3, [r7, #23]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d134      	bne.n	8008d3a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f7ff fe50 	bl	8008976 <dir_find>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008ce0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008ce2:	7dfb      	ldrb	r3, [r7, #23]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00a      	beq.n	8008cfe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008ce8:	7dfb      	ldrb	r3, [r7, #23]
 8008cea:	2b04      	cmp	r3, #4
 8008cec:	d127      	bne.n	8008d3e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008cee:	7afb      	ldrb	r3, [r7, #11]
 8008cf0:	f003 0304 	and.w	r3, r3, #4
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d122      	bne.n	8008d3e <follow_path+0xd2>
 8008cf8:	2305      	movs	r3, #5
 8008cfa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008cfc:	e01f      	b.n	8008d3e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008cfe:	7afb      	ldrb	r3, [r7, #11]
 8008d00:	f003 0304 	and.w	r3, r3, #4
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d11c      	bne.n	8008d42 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	799b      	ldrb	r3, [r3, #6]
 8008d0c:	f003 0310 	and.w	r3, r3, #16
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d102      	bne.n	8008d1a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008d14:	2305      	movs	r3, #5
 8008d16:	75fb      	strb	r3, [r7, #23]
 8008d18:	e014      	b.n	8008d44 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	695b      	ldr	r3, [r3, #20]
 8008d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d28:	4413      	add	r3, r2
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f7ff fd86 	bl	800883e <ld_clust>
 8008d32:	4602      	mov	r2, r0
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008d38:	e7c0      	b.n	8008cbc <follow_path+0x50>
			if (res != FR_OK) break;
 8008d3a:	bf00      	nop
 8008d3c:	e002      	b.n	8008d44 <follow_path+0xd8>
				break;
 8008d3e:	bf00      	nop
 8008d40:	e000      	b.n	8008d44 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008d42:	bf00      	nop
			}
		}
	}

	return res;
 8008d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3718      	adds	r7, #24
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008d4e:	b480      	push	{r7}
 8008d50:	b087      	sub	sp, #28
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008d56:	f04f 33ff 	mov.w	r3, #4294967295
 8008d5a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d031      	beq.n	8008dc8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	617b      	str	r3, [r7, #20]
 8008d6a:	e002      	b.n	8008d72 <get_ldnumber+0x24>
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	617b      	str	r3, [r7, #20]
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	2b20      	cmp	r3, #32
 8008d78:	d903      	bls.n	8008d82 <get_ldnumber+0x34>
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	2b3a      	cmp	r3, #58	; 0x3a
 8008d80:	d1f4      	bne.n	8008d6c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	2b3a      	cmp	r3, #58	; 0x3a
 8008d88:	d11c      	bne.n	8008dc4 <get_ldnumber+0x76>
			tp = *path;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	1c5a      	adds	r2, r3, #1
 8008d94:	60fa      	str	r2, [r7, #12]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	3b30      	subs	r3, #48	; 0x30
 8008d9a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	2b09      	cmp	r3, #9
 8008da0:	d80e      	bhi.n	8008dc0 <get_ldnumber+0x72>
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d10a      	bne.n	8008dc0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d107      	bne.n	8008dc0 <get_ldnumber+0x72>
					vol = (int)i;
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	3301      	adds	r3, #1
 8008db8:	617b      	str	r3, [r7, #20]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	e002      	b.n	8008dca <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008dc8:	693b      	ldr	r3, [r7, #16]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	371c      	adds	r7, #28
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
	...

08008dd8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	70da      	strb	r2, [r3, #3]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f04f 32ff 	mov.w	r2, #4294967295
 8008dee:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008df0:	6839      	ldr	r1, [r7, #0]
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7ff f81c 	bl	8007e30 <move_window>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d001      	beq.n	8008e02 <check_fs+0x2a>
 8008dfe:	2304      	movs	r3, #4
 8008e00:	e038      	b.n	8008e74 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	3330      	adds	r3, #48	; 0x30
 8008e06:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fe fd60 	bl	80078d0 <ld_word>
 8008e10:	4603      	mov	r3, r0
 8008e12:	461a      	mov	r2, r3
 8008e14:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d001      	beq.n	8008e20 <check_fs+0x48>
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	e029      	b.n	8008e74 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e26:	2be9      	cmp	r3, #233	; 0xe9
 8008e28:	d009      	beq.n	8008e3e <check_fs+0x66>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e30:	2beb      	cmp	r3, #235	; 0xeb
 8008e32:	d11e      	bne.n	8008e72 <check_fs+0x9a>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008e3a:	2b90      	cmp	r3, #144	; 0x90
 8008e3c:	d119      	bne.n	8008e72 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	3330      	adds	r3, #48	; 0x30
 8008e42:	3336      	adds	r3, #54	; 0x36
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7fe fd5b 	bl	8007900 <ld_dword>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008e50:	4a0a      	ldr	r2, [pc, #40]	; (8008e7c <check_fs+0xa4>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d101      	bne.n	8008e5a <check_fs+0x82>
 8008e56:	2300      	movs	r3, #0
 8008e58:	e00c      	b.n	8008e74 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	3330      	adds	r3, #48	; 0x30
 8008e5e:	3352      	adds	r3, #82	; 0x52
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7fe fd4d 	bl	8007900 <ld_dword>
 8008e66:	4603      	mov	r3, r0
 8008e68:	4a05      	ldr	r2, [pc, #20]	; (8008e80 <check_fs+0xa8>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d101      	bne.n	8008e72 <check_fs+0x9a>
 8008e6e:	2300      	movs	r3, #0
 8008e70:	e000      	b.n	8008e74 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008e72:	2302      	movs	r3, #2
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	00544146 	.word	0x00544146
 8008e80:	33544146 	.word	0x33544146

08008e84 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b096      	sub	sp, #88	; 0x58
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	2200      	movs	r2, #0
 8008e96:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f7ff ff58 	bl	8008d4e <get_ldnumber>
 8008e9e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	da01      	bge.n	8008eaa <find_volume+0x26>
 8008ea6:	230b      	movs	r3, #11
 8008ea8:	e22d      	b.n	8009306 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008eaa:	4aa1      	ldr	r2, [pc, #644]	; (8009130 <find_volume+0x2ac>)
 8008eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eb2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d101      	bne.n	8008ebe <find_volume+0x3a>
 8008eba:	230c      	movs	r3, #12
 8008ebc:	e223      	b.n	8009306 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ec2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008ec4:	79fb      	ldrb	r3, [r7, #7]
 8008ec6:	f023 0301 	bic.w	r3, r3, #1
 8008eca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d01a      	beq.n	8008f0a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed6:	785b      	ldrb	r3, [r3, #1]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fe fc5b 	bl	8007794 <disk_status>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008ee4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ee8:	f003 0301 	and.w	r3, r3, #1
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10c      	bne.n	8008f0a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008ef0:	79fb      	ldrb	r3, [r7, #7]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d007      	beq.n	8008f06 <find_volume+0x82>
 8008ef6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008efa:	f003 0304 	and.w	r3, r3, #4
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d001      	beq.n	8008f06 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008f02:	230a      	movs	r3, #10
 8008f04:	e1ff      	b.n	8009306 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008f06:	2300      	movs	r3, #0
 8008f08:	e1fd      	b.n	8009306 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f12:	b2da      	uxtb	r2, r3
 8008f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f16:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1a:	785b      	ldrb	r3, [r3, #1]
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7fe fc53 	bl	80077c8 <disk_initialize>
 8008f22:	4603      	mov	r3, r0
 8008f24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008f28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008f2c:	f003 0301 	and.w	r3, r3, #1
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d001      	beq.n	8008f38 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008f34:	2303      	movs	r3, #3
 8008f36:	e1e6      	b.n	8009306 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008f38:	79fb      	ldrb	r3, [r7, #7]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d007      	beq.n	8008f4e <find_volume+0xca>
 8008f3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008f42:	f003 0304 	and.w	r3, r3, #4
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d001      	beq.n	8008f4e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008f4a:	230a      	movs	r3, #10
 8008f4c:	e1db      	b.n	8009306 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008f52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008f56:	f7ff ff3f 	bl	8008dd8 <check_fs>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008f60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d149      	bne.n	8008ffc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008f68:	2300      	movs	r3, #0
 8008f6a:	643b      	str	r3, [r7, #64]	; 0x40
 8008f6c:	e01e      	b.n	8008fac <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f70:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f76:	011b      	lsls	r3, r3, #4
 8008f78:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008f7c:	4413      	add	r3, r2
 8008f7e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f82:	3304      	adds	r3, #4
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d006      	beq.n	8008f98 <find_volume+0x114>
 8008f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8c:	3308      	adds	r3, #8
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fe fcb6 	bl	8007900 <ld_dword>
 8008f94:	4602      	mov	r2, r0
 8008f96:	e000      	b.n	8008f9a <find_volume+0x116>
 8008f98:	2200      	movs	r2, #0
 8008f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	3358      	adds	r3, #88	; 0x58
 8008fa0:	443b      	add	r3, r7
 8008fa2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fa8:	3301      	adds	r3, #1
 8008faa:	643b      	str	r3, [r7, #64]	; 0x40
 8008fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fae:	2b03      	cmp	r3, #3
 8008fb0:	d9dd      	bls.n	8008f6e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d002      	beq.n	8008fc2 <find_volume+0x13e>
 8008fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	3358      	adds	r3, #88	; 0x58
 8008fc8:	443b      	add	r3, r7
 8008fca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008fce:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008fd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d005      	beq.n	8008fe2 <find_volume+0x15e>
 8008fd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008fd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008fda:	f7ff fefd 	bl	8008dd8 <check_fs>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	e000      	b.n	8008fe4 <find_volume+0x160>
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008fe8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d905      	bls.n	8008ffc <find_volume+0x178>
 8008ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	643b      	str	r3, [r7, #64]	; 0x40
 8008ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ff8:	2b03      	cmp	r3, #3
 8008ffa:	d9e2      	bls.n	8008fc2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008ffc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009000:	2b04      	cmp	r3, #4
 8009002:	d101      	bne.n	8009008 <find_volume+0x184>
 8009004:	2301      	movs	r3, #1
 8009006:	e17e      	b.n	8009306 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009008:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800900c:	2b01      	cmp	r3, #1
 800900e:	d901      	bls.n	8009014 <find_volume+0x190>
 8009010:	230d      	movs	r3, #13
 8009012:	e178      	b.n	8009306 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009016:	3330      	adds	r3, #48	; 0x30
 8009018:	330b      	adds	r3, #11
 800901a:	4618      	mov	r0, r3
 800901c:	f7fe fc58 	bl	80078d0 <ld_word>
 8009020:	4603      	mov	r3, r0
 8009022:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009026:	d001      	beq.n	800902c <find_volume+0x1a8>
 8009028:	230d      	movs	r3, #13
 800902a:	e16c      	b.n	8009306 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800902c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902e:	3330      	adds	r3, #48	; 0x30
 8009030:	3316      	adds	r3, #22
 8009032:	4618      	mov	r0, r3
 8009034:	f7fe fc4c 	bl	80078d0 <ld_word>
 8009038:	4603      	mov	r3, r0
 800903a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800903c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800903e:	2b00      	cmp	r3, #0
 8009040:	d106      	bne.n	8009050 <find_volume+0x1cc>
 8009042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009044:	3330      	adds	r3, #48	; 0x30
 8009046:	3324      	adds	r3, #36	; 0x24
 8009048:	4618      	mov	r0, r3
 800904a:	f7fe fc59 	bl	8007900 <ld_dword>
 800904e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009052:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009054:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009058:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800905c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009062:	789b      	ldrb	r3, [r3, #2]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d005      	beq.n	8009074 <find_volume+0x1f0>
 8009068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906a:	789b      	ldrb	r3, [r3, #2]
 800906c:	2b02      	cmp	r3, #2
 800906e:	d001      	beq.n	8009074 <find_volume+0x1f0>
 8009070:	230d      	movs	r3, #13
 8009072:	e148      	b.n	8009306 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009076:	789b      	ldrb	r3, [r3, #2]
 8009078:	461a      	mov	r2, r3
 800907a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800907c:	fb02 f303 	mul.w	r3, r2, r3
 8009080:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009088:	b29a      	uxth	r2, r3
 800908a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800908e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009090:	895b      	ldrh	r3, [r3, #10]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d008      	beq.n	80090a8 <find_volume+0x224>
 8009096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009098:	895b      	ldrh	r3, [r3, #10]
 800909a:	461a      	mov	r2, r3
 800909c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909e:	895b      	ldrh	r3, [r3, #10]
 80090a0:	3b01      	subs	r3, #1
 80090a2:	4013      	ands	r3, r2
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <find_volume+0x228>
 80090a8:	230d      	movs	r3, #13
 80090aa:	e12c      	b.n	8009306 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80090ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ae:	3330      	adds	r3, #48	; 0x30
 80090b0:	3311      	adds	r3, #17
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fe fc0c 	bl	80078d0 <ld_word>
 80090b8:	4603      	mov	r3, r0
 80090ba:	461a      	mov	r2, r3
 80090bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090be:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80090c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c2:	891b      	ldrh	r3, [r3, #8]
 80090c4:	f003 030f 	and.w	r3, r3, #15
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d001      	beq.n	80090d2 <find_volume+0x24e>
 80090ce:	230d      	movs	r3, #13
 80090d0:	e119      	b.n	8009306 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80090d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d4:	3330      	adds	r3, #48	; 0x30
 80090d6:	3313      	adds	r3, #19
 80090d8:	4618      	mov	r0, r3
 80090da:	f7fe fbf9 	bl	80078d0 <ld_word>
 80090de:	4603      	mov	r3, r0
 80090e0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80090e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d106      	bne.n	80090f6 <find_volume+0x272>
 80090e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ea:	3330      	adds	r3, #48	; 0x30
 80090ec:	3320      	adds	r3, #32
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fe fc06 	bl	8007900 <ld_dword>
 80090f4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80090f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f8:	3330      	adds	r3, #48	; 0x30
 80090fa:	330e      	adds	r3, #14
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7fe fbe7 	bl	80078d0 <ld_word>
 8009102:	4603      	mov	r3, r0
 8009104:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009106:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009108:	2b00      	cmp	r3, #0
 800910a:	d101      	bne.n	8009110 <find_volume+0x28c>
 800910c:	230d      	movs	r3, #13
 800910e:	e0fa      	b.n	8009306 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009110:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009114:	4413      	add	r3, r2
 8009116:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009118:	8912      	ldrh	r2, [r2, #8]
 800911a:	0912      	lsrs	r2, r2, #4
 800911c:	b292      	uxth	r2, r2
 800911e:	4413      	add	r3, r2
 8009120:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009122:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009126:	429a      	cmp	r2, r3
 8009128:	d204      	bcs.n	8009134 <find_volume+0x2b0>
 800912a:	230d      	movs	r3, #13
 800912c:	e0eb      	b.n	8009306 <find_volume+0x482>
 800912e:	bf00      	nop
 8009130:	20001e50 	.word	0x20001e50
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009134:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800913c:	8952      	ldrh	r2, [r2, #10]
 800913e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009142:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009146:	2b00      	cmp	r3, #0
 8009148:	d101      	bne.n	800914e <find_volume+0x2ca>
 800914a:	230d      	movs	r3, #13
 800914c:	e0db      	b.n	8009306 <find_volume+0x482>
		fmt = FS_FAT32;
 800914e:	2303      	movs	r3, #3
 8009150:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800915a:	4293      	cmp	r3, r2
 800915c:	d802      	bhi.n	8009164 <find_volume+0x2e0>
 800915e:	2302      	movs	r3, #2
 8009160:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009166:	f640 72f5 	movw	r2, #4085	; 0xff5
 800916a:	4293      	cmp	r3, r2
 800916c:	d802      	bhi.n	8009174 <find_volume+0x2f0>
 800916e:	2301      	movs	r3, #1
 8009170:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009176:	1c9a      	adds	r2, r3, #2
 8009178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800917c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009180:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009182:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009186:	441a      	add	r2, r3
 8009188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800918c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800918e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009190:	441a      	add	r2, r3
 8009192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009194:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8009196:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800919a:	2b03      	cmp	r3, #3
 800919c:	d11e      	bne.n	80091dc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800919e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a0:	3330      	adds	r3, #48	; 0x30
 80091a2:	332a      	adds	r3, #42	; 0x2a
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7fe fb93 	bl	80078d0 <ld_word>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d001      	beq.n	80091b4 <find_volume+0x330>
 80091b0:	230d      	movs	r3, #13
 80091b2:	e0a8      	b.n	8009306 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80091b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b6:	891b      	ldrh	r3, [r3, #8]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d001      	beq.n	80091c0 <find_volume+0x33c>
 80091bc:	230d      	movs	r3, #13
 80091be:	e0a2      	b.n	8009306 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80091c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c2:	3330      	adds	r3, #48	; 0x30
 80091c4:	332c      	adds	r3, #44	; 0x2c
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7fe fb9a 	bl	8007900 <ld_dword>
 80091cc:	4602      	mov	r2, r0
 80091ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80091d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d4:	695b      	ldr	r3, [r3, #20]
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	647b      	str	r3, [r7, #68]	; 0x44
 80091da:	e01f      	b.n	800921c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80091dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091de:	891b      	ldrh	r3, [r3, #8]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d101      	bne.n	80091e8 <find_volume+0x364>
 80091e4:	230d      	movs	r3, #13
 80091e6:	e08e      	b.n	8009306 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80091e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ea:	6a1a      	ldr	r2, [r3, #32]
 80091ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ee:	441a      	add	r2, r3
 80091f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80091f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d103      	bne.n	8009204 <find_volume+0x380>
 80091fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fe:	695b      	ldr	r3, [r3, #20]
 8009200:	005b      	lsls	r3, r3, #1
 8009202:	e00a      	b.n	800921a <find_volume+0x396>
 8009204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009206:	695a      	ldr	r2, [r3, #20]
 8009208:	4613      	mov	r3, r2
 800920a:	005b      	lsls	r3, r3, #1
 800920c:	4413      	add	r3, r2
 800920e:	085a      	lsrs	r2, r3, #1
 8009210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009212:	695b      	ldr	r3, [r3, #20]
 8009214:	f003 0301 	and.w	r3, r3, #1
 8009218:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800921a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800921c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921e:	699a      	ldr	r2, [r3, #24]
 8009220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009222:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009226:	0a5b      	lsrs	r3, r3, #9
 8009228:	429a      	cmp	r2, r3
 800922a:	d201      	bcs.n	8009230 <find_volume+0x3ac>
 800922c:	230d      	movs	r3, #13
 800922e:	e06a      	b.n	8009306 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009232:	f04f 32ff 	mov.w	r2, #4294967295
 8009236:	611a      	str	r2, [r3, #16]
 8009238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923a:	691a      	ldr	r2, [r3, #16]
 800923c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009242:	2280      	movs	r2, #128	; 0x80
 8009244:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009246:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800924a:	2b03      	cmp	r3, #3
 800924c:	d149      	bne.n	80092e2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800924e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009250:	3330      	adds	r3, #48	; 0x30
 8009252:	3330      	adds	r3, #48	; 0x30
 8009254:	4618      	mov	r0, r3
 8009256:	f7fe fb3b 	bl	80078d0 <ld_word>
 800925a:	4603      	mov	r3, r0
 800925c:	2b01      	cmp	r3, #1
 800925e:	d140      	bne.n	80092e2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009262:	3301      	adds	r3, #1
 8009264:	4619      	mov	r1, r3
 8009266:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009268:	f7fe fde2 	bl	8007e30 <move_window>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d137      	bne.n	80092e2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8009272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009274:	2200      	movs	r2, #0
 8009276:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800927a:	3330      	adds	r3, #48	; 0x30
 800927c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009280:	4618      	mov	r0, r3
 8009282:	f7fe fb25 	bl	80078d0 <ld_word>
 8009286:	4603      	mov	r3, r0
 8009288:	461a      	mov	r2, r3
 800928a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800928e:	429a      	cmp	r2, r3
 8009290:	d127      	bne.n	80092e2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009294:	3330      	adds	r3, #48	; 0x30
 8009296:	4618      	mov	r0, r3
 8009298:	f7fe fb32 	bl	8007900 <ld_dword>
 800929c:	4603      	mov	r3, r0
 800929e:	4a1c      	ldr	r2, [pc, #112]	; (8009310 <find_volume+0x48c>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d11e      	bne.n	80092e2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80092a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a6:	3330      	adds	r3, #48	; 0x30
 80092a8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7fe fb27 	bl	8007900 <ld_dword>
 80092b2:	4603      	mov	r3, r0
 80092b4:	4a17      	ldr	r2, [pc, #92]	; (8009314 <find_volume+0x490>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d113      	bne.n	80092e2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80092ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092bc:	3330      	adds	r3, #48	; 0x30
 80092be:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7fe fb1c 	bl	8007900 <ld_dword>
 80092c8:	4602      	mov	r2, r0
 80092ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092cc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80092ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d0:	3330      	adds	r3, #48	; 0x30
 80092d2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7fe fb12 	bl	8007900 <ld_dword>
 80092dc:	4602      	mov	r2, r0
 80092de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80092e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80092e8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80092ea:	4b0b      	ldr	r3, [pc, #44]	; (8009318 <find_volume+0x494>)
 80092ec:	881b      	ldrh	r3, [r3, #0]
 80092ee:	3301      	adds	r3, #1
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	4b09      	ldr	r3, [pc, #36]	; (8009318 <find_volume+0x494>)
 80092f4:	801a      	strh	r2, [r3, #0]
 80092f6:	4b08      	ldr	r3, [pc, #32]	; (8009318 <find_volume+0x494>)
 80092f8:	881a      	ldrh	r2, [r3, #0]
 80092fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80092fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009300:	f7fe fd2e 	bl	8007d60 <clear_lock>
#endif
	return FR_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3758      	adds	r7, #88	; 0x58
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	41615252 	.word	0x41615252
 8009314:	61417272 	.word	0x61417272
 8009318:	20001e54 	.word	0x20001e54

0800931c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009326:	2309      	movs	r3, #9
 8009328:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d01c      	beq.n	800936a <validate+0x4e>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d018      	beq.n	800936a <validate+0x4e>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d013      	beq.n	800936a <validate+0x4e>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	889a      	ldrh	r2, [r3, #4]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	88db      	ldrh	r3, [r3, #6]
 800934c:	429a      	cmp	r2, r3
 800934e:	d10c      	bne.n	800936a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	785b      	ldrb	r3, [r3, #1]
 8009356:	4618      	mov	r0, r3
 8009358:	f7fe fa1c 	bl	8007794 <disk_status>
 800935c:	4603      	mov	r3, r0
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	2b00      	cmp	r3, #0
 8009364:	d101      	bne.n	800936a <validate+0x4e>
			res = FR_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800936a:	7bfb      	ldrb	r3, [r7, #15]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d102      	bne.n	8009376 <validate+0x5a>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	e000      	b.n	8009378 <validate+0x5c>
 8009376:	2300      	movs	r3, #0
 8009378:	683a      	ldr	r2, [r7, #0]
 800937a:	6013      	str	r3, [r2, #0]
	return res;
 800937c:	7bfb      	ldrb	r3, [r7, #15]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
	...

08009388 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b088      	sub	sp, #32
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	4613      	mov	r3, r2
 8009394:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800939a:	f107 0310 	add.w	r3, r7, #16
 800939e:	4618      	mov	r0, r3
 80093a0:	f7ff fcd5 	bl	8008d4e <get_ldnumber>
 80093a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	da01      	bge.n	80093b0 <f_mount+0x28>
 80093ac:	230b      	movs	r3, #11
 80093ae:	e02b      	b.n	8009408 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80093b0:	4a17      	ldr	r2, [pc, #92]	; (8009410 <f_mount+0x88>)
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d005      	beq.n	80093cc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80093c0:	69b8      	ldr	r0, [r7, #24]
 80093c2:	f7fe fccd 	bl	8007d60 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	2200      	movs	r2, #0
 80093ca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d002      	beq.n	80093d8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2200      	movs	r2, #0
 80093d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	490d      	ldr	r1, [pc, #52]	; (8009410 <f_mount+0x88>)
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d002      	beq.n	80093ee <f_mount+0x66>
 80093e8:	79fb      	ldrb	r3, [r7, #7]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d001      	beq.n	80093f2 <f_mount+0x6a>
 80093ee:	2300      	movs	r3, #0
 80093f0:	e00a      	b.n	8009408 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80093f2:	f107 010c 	add.w	r1, r7, #12
 80093f6:	f107 0308 	add.w	r3, r7, #8
 80093fa:	2200      	movs	r2, #0
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7ff fd41 	bl	8008e84 <find_volume>
 8009402:	4603      	mov	r3, r0
 8009404:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009406:	7dfb      	ldrb	r3, [r7, #23]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3720      	adds	r7, #32
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	20001e50 	.word	0x20001e50

08009414 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b098      	sub	sp, #96	; 0x60
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	4613      	mov	r3, r2
 8009420:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d101      	bne.n	800942c <f_open+0x18>
 8009428:	2309      	movs	r3, #9
 800942a:	e1ad      	b.n	8009788 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800942c:	79fb      	ldrb	r3, [r7, #7]
 800942e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009432:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009434:	79fa      	ldrb	r2, [r7, #7]
 8009436:	f107 0110 	add.w	r1, r7, #16
 800943a:	f107 0308 	add.w	r3, r7, #8
 800943e:	4618      	mov	r0, r3
 8009440:	f7ff fd20 	bl	8008e84 <find_volume>
 8009444:	4603      	mov	r3, r0
 8009446:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800944a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800944e:	2b00      	cmp	r3, #0
 8009450:	f040 8191 	bne.w	8009776 <f_open+0x362>
		dj.obj.fs = fs;
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009458:	68ba      	ldr	r2, [r7, #8]
 800945a:	f107 0314 	add.w	r3, r7, #20
 800945e:	4611      	mov	r1, r2
 8009460:	4618      	mov	r0, r3
 8009462:	f7ff fc03 	bl	8008c6c <follow_path>
 8009466:	4603      	mov	r3, r0
 8009468:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800946c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009470:	2b00      	cmp	r3, #0
 8009472:	d11a      	bne.n	80094aa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009474:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009478:	b25b      	sxtb	r3, r3
 800947a:	2b00      	cmp	r3, #0
 800947c:	da03      	bge.n	8009486 <f_open+0x72>
				res = FR_INVALID_NAME;
 800947e:	2306      	movs	r3, #6
 8009480:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009484:	e011      	b.n	80094aa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009486:	79fb      	ldrb	r3, [r7, #7]
 8009488:	f023 0301 	bic.w	r3, r3, #1
 800948c:	2b00      	cmp	r3, #0
 800948e:	bf14      	ite	ne
 8009490:	2301      	movne	r3, #1
 8009492:	2300      	moveq	r3, #0
 8009494:	b2db      	uxtb	r3, r3
 8009496:	461a      	mov	r2, r3
 8009498:	f107 0314 	add.w	r3, r7, #20
 800949c:	4611      	mov	r1, r2
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fe fb16 	bl	8007ad0 <chk_lock>
 80094a4:	4603      	mov	r3, r0
 80094a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80094aa:	79fb      	ldrb	r3, [r7, #7]
 80094ac:	f003 031c 	and.w	r3, r3, #28
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d07f      	beq.n	80095b4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80094b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d017      	beq.n	80094ec <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80094bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094c0:	2b04      	cmp	r3, #4
 80094c2:	d10e      	bne.n	80094e2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80094c4:	f7fe fb60 	bl	8007b88 <enq_lock>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d006      	beq.n	80094dc <f_open+0xc8>
 80094ce:	f107 0314 	add.w	r3, r7, #20
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7ff faa4 	bl	8008a20 <dir_register>
 80094d8:	4603      	mov	r3, r0
 80094da:	e000      	b.n	80094de <f_open+0xca>
 80094dc:	2312      	movs	r3, #18
 80094de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80094e2:	79fb      	ldrb	r3, [r7, #7]
 80094e4:	f043 0308 	orr.w	r3, r3, #8
 80094e8:	71fb      	strb	r3, [r7, #7]
 80094ea:	e010      	b.n	800950e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80094ec:	7ebb      	ldrb	r3, [r7, #26]
 80094ee:	f003 0311 	and.w	r3, r3, #17
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d003      	beq.n	80094fe <f_open+0xea>
					res = FR_DENIED;
 80094f6:	2307      	movs	r3, #7
 80094f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80094fc:	e007      	b.n	800950e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80094fe:	79fb      	ldrb	r3, [r7, #7]
 8009500:	f003 0304 	and.w	r3, r3, #4
 8009504:	2b00      	cmp	r3, #0
 8009506:	d002      	beq.n	800950e <f_open+0xfa>
 8009508:	2308      	movs	r3, #8
 800950a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800950e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009512:	2b00      	cmp	r3, #0
 8009514:	d168      	bne.n	80095e8 <f_open+0x1d4>
 8009516:	79fb      	ldrb	r3, [r7, #7]
 8009518:	f003 0308 	and.w	r3, r3, #8
 800951c:	2b00      	cmp	r3, #0
 800951e:	d063      	beq.n	80095e8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009520:	f7fd fbf8 	bl	8006d14 <get_fattime>
 8009524:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009528:	330e      	adds	r3, #14
 800952a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800952c:	4618      	mov	r0, r3
 800952e:	f7fe fa25 	bl	800797c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009534:	3316      	adds	r3, #22
 8009536:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009538:	4618      	mov	r0, r3
 800953a:	f7fe fa1f 	bl	800797c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800953e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009540:	330b      	adds	r3, #11
 8009542:	2220      	movs	r2, #32
 8009544:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800954a:	4611      	mov	r1, r2
 800954c:	4618      	mov	r0, r3
 800954e:	f7ff f976 	bl	800883e <ld_clust>
 8009552:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009558:	2200      	movs	r2, #0
 800955a:	4618      	mov	r0, r3
 800955c:	f7ff f98e 	bl	800887c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009562:	331c      	adds	r3, #28
 8009564:	2100      	movs	r1, #0
 8009566:	4618      	mov	r0, r3
 8009568:	f7fe fa08 	bl	800797c <st_dword>
					fs->wflag = 1;
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	2201      	movs	r2, #1
 8009570:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009574:	2b00      	cmp	r3, #0
 8009576:	d037      	beq.n	80095e8 <f_open+0x1d4>
						dw = fs->winsect;
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800957e:	f107 0314 	add.w	r3, r7, #20
 8009582:	2200      	movs	r2, #0
 8009584:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009586:	4618      	mov	r0, r3
 8009588:	f7fe fea1 	bl	80082ce <remove_chain>
 800958c:	4603      	mov	r3, r0
 800958e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009592:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009596:	2b00      	cmp	r3, #0
 8009598:	d126      	bne.n	80095e8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fe fc46 	bl	8007e30 <move_window>
 80095a4:	4603      	mov	r3, r0
 80095a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095ae:	3a01      	subs	r2, #1
 80095b0:	60da      	str	r2, [r3, #12]
 80095b2:	e019      	b.n	80095e8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80095b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d115      	bne.n	80095e8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80095bc:	7ebb      	ldrb	r3, [r7, #26]
 80095be:	f003 0310 	and.w	r3, r3, #16
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d003      	beq.n	80095ce <f_open+0x1ba>
					res = FR_NO_FILE;
 80095c6:	2304      	movs	r3, #4
 80095c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80095cc:	e00c      	b.n	80095e8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80095ce:	79fb      	ldrb	r3, [r7, #7]
 80095d0:	f003 0302 	and.w	r3, r3, #2
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d007      	beq.n	80095e8 <f_open+0x1d4>
 80095d8:	7ebb      	ldrb	r3, [r7, #26]
 80095da:	f003 0301 	and.w	r3, r3, #1
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d002      	beq.n	80095e8 <f_open+0x1d4>
						res = FR_DENIED;
 80095e2:	2307      	movs	r3, #7
 80095e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80095e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d128      	bne.n	8009642 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80095f0:	79fb      	ldrb	r3, [r7, #7]
 80095f2:	f003 0308 	and.w	r3, r3, #8
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d003      	beq.n	8009602 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80095fa:	79fb      	ldrb	r3, [r7, #7]
 80095fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009600:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800960a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009610:	79fb      	ldrb	r3, [r7, #7]
 8009612:	f023 0301 	bic.w	r3, r3, #1
 8009616:	2b00      	cmp	r3, #0
 8009618:	bf14      	ite	ne
 800961a:	2301      	movne	r3, #1
 800961c:	2300      	moveq	r3, #0
 800961e:	b2db      	uxtb	r3, r3
 8009620:	461a      	mov	r2, r3
 8009622:	f107 0314 	add.w	r3, r7, #20
 8009626:	4611      	mov	r1, r2
 8009628:	4618      	mov	r0, r3
 800962a:	f7fe facf 	bl	8007bcc <inc_lock>
 800962e:	4602      	mov	r2, r0
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d102      	bne.n	8009642 <f_open+0x22e>
 800963c:	2302      	movs	r3, #2
 800963e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009642:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009646:	2b00      	cmp	r3, #0
 8009648:	f040 8095 	bne.w	8009776 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009650:	4611      	mov	r1, r2
 8009652:	4618      	mov	r0, r3
 8009654:	f7ff f8f3 	bl	800883e <ld_clust>
 8009658:	4602      	mov	r2, r0
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800965e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009660:	331c      	adds	r3, #28
 8009662:	4618      	mov	r0, r3
 8009664:	f7fe f94c 	bl	8007900 <ld_dword>
 8009668:	4602      	mov	r2, r0
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009674:	693a      	ldr	r2, [r7, #16]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	88da      	ldrh	r2, [r3, #6]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	79fa      	ldrb	r2, [r7, #7]
 8009686:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2200      	movs	r2, #0
 8009698:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	3330      	adds	r3, #48	; 0x30
 800969e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096a2:	2100      	movs	r1, #0
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7fe f9b6 	bl	8007a16 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80096aa:	79fb      	ldrb	r3, [r7, #7]
 80096ac:	f003 0320 	and.w	r3, r3, #32
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d060      	beq.n	8009776 <f_open+0x362>
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d05c      	beq.n	8009776 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	68da      	ldr	r2, [r3, #12]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	895b      	ldrh	r3, [r3, #10]
 80096c8:	025b      	lsls	r3, r3, #9
 80096ca:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	657b      	str	r3, [r7, #84]	; 0x54
 80096d8:	e016      	b.n	8009708 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fe fc61 	bl	8007fa6 <get_fat>
 80096e4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80096e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d802      	bhi.n	80096f2 <f_open+0x2de>
 80096ec:	2302      	movs	r3, #2
 80096ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80096f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f8:	d102      	bne.n	8009700 <f_open+0x2ec>
 80096fa:	2301      	movs	r3, #1
 80096fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009700:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009704:	1ad3      	subs	r3, r2, r3
 8009706:	657b      	str	r3, [r7, #84]	; 0x54
 8009708:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800970c:	2b00      	cmp	r3, #0
 800970e:	d103      	bne.n	8009718 <f_open+0x304>
 8009710:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009714:	429a      	cmp	r2, r3
 8009716:	d8e0      	bhi.n	80096da <f_open+0x2c6>
				}
				fp->clust = clst;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800971c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800971e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009722:	2b00      	cmp	r3, #0
 8009724:	d127      	bne.n	8009776 <f_open+0x362>
 8009726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800972c:	2b00      	cmp	r3, #0
 800972e:	d022      	beq.n	8009776 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009734:	4618      	mov	r0, r3
 8009736:	f7fe fc17 	bl	8007f68 <clust2sect>
 800973a:	6478      	str	r0, [r7, #68]	; 0x44
 800973c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800973e:	2b00      	cmp	r3, #0
 8009740:	d103      	bne.n	800974a <f_open+0x336>
						res = FR_INT_ERR;
 8009742:	2302      	movs	r3, #2
 8009744:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009748:	e015      	b.n	8009776 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800974a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800974c:	0a5a      	lsrs	r2, r3, #9
 800974e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009750:	441a      	add	r2, r3
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	7858      	ldrb	r0, [r3, #1]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6a1a      	ldr	r2, [r3, #32]
 8009764:	2301      	movs	r3, #1
 8009766:	f7fe f855 	bl	8007814 <disk_read>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d002      	beq.n	8009776 <f_open+0x362>
 8009770:	2301      	movs	r3, #1
 8009772:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009776:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800977a:	2b00      	cmp	r3, #0
 800977c:	d002      	beq.n	8009784 <f_open+0x370>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2200      	movs	r2, #0
 8009782:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009784:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009788:	4618      	mov	r0, r3
 800978a:	3760      	adds	r7, #96	; 0x60
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b08e      	sub	sp, #56	; 0x38
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	607a      	str	r2, [r7, #4]
 800979c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	2200      	movs	r2, #0
 80097a6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f107 0214 	add.w	r2, r7, #20
 80097ae:	4611      	mov	r1, r2
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7ff fdb3 	bl	800931c <validate>
 80097b6:	4603      	mov	r3, r0
 80097b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80097bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d107      	bne.n	80097d4 <f_read+0x44>
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	7d5b      	ldrb	r3, [r3, #21]
 80097c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80097cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d002      	beq.n	80097da <f_read+0x4a>
 80097d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80097d8:	e115      	b.n	8009a06 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	7d1b      	ldrb	r3, [r3, #20]
 80097de:	f003 0301 	and.w	r3, r3, #1
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d101      	bne.n	80097ea <f_read+0x5a>
 80097e6:	2307      	movs	r3, #7
 80097e8:	e10d      	b.n	8009a06 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	68da      	ldr	r2, [r3, #12]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	6a3b      	ldr	r3, [r7, #32]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	f240 80fe 	bls.w	80099fc <f_read+0x26c>
 8009800:	6a3b      	ldr	r3, [r7, #32]
 8009802:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009804:	e0fa      	b.n	80099fc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800980e:	2b00      	cmp	r3, #0
 8009810:	f040 80c6 	bne.w	80099a0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	0a5b      	lsrs	r3, r3, #9
 800981a:	697a      	ldr	r2, [r7, #20]
 800981c:	8952      	ldrh	r2, [r2, #10]
 800981e:	3a01      	subs	r2, #1
 8009820:	4013      	ands	r3, r2
 8009822:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d12f      	bne.n	800988a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	699b      	ldr	r3, [r3, #24]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d103      	bne.n	800983a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	633b      	str	r3, [r7, #48]	; 0x30
 8009838:	e013      	b.n	8009862 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983e:	2b00      	cmp	r3, #0
 8009840:	d007      	beq.n	8009852 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	699b      	ldr	r3, [r3, #24]
 8009846:	4619      	mov	r1, r3
 8009848:	68f8      	ldr	r0, [r7, #12]
 800984a:	f7fe fe3d 	bl	80084c8 <clmt_clust>
 800984e:	6338      	str	r0, [r7, #48]	; 0x30
 8009850:	e007      	b.n	8009862 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009852:	68fa      	ldr	r2, [r7, #12]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	69db      	ldr	r3, [r3, #28]
 8009858:	4619      	mov	r1, r3
 800985a:	4610      	mov	r0, r2
 800985c:	f7fe fba3 	bl	8007fa6 <get_fat>
 8009860:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009864:	2b01      	cmp	r3, #1
 8009866:	d804      	bhi.n	8009872 <f_read+0xe2>
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2202      	movs	r2, #2
 800986c:	755a      	strb	r2, [r3, #21]
 800986e:	2302      	movs	r3, #2
 8009870:	e0c9      	b.n	8009a06 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009878:	d104      	bne.n	8009884 <f_read+0xf4>
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2201      	movs	r2, #1
 800987e:	755a      	strb	r2, [r3, #21]
 8009880:	2301      	movs	r3, #1
 8009882:	e0c0      	b.n	8009a06 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009888:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800988a:	697a      	ldr	r2, [r7, #20]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	69db      	ldr	r3, [r3, #28]
 8009890:	4619      	mov	r1, r3
 8009892:	4610      	mov	r0, r2
 8009894:	f7fe fb68 	bl	8007f68 <clust2sect>
 8009898:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d104      	bne.n	80098aa <f_read+0x11a>
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2202      	movs	r2, #2
 80098a4:	755a      	strb	r2, [r3, #21]
 80098a6:	2302      	movs	r3, #2
 80098a8:	e0ad      	b.n	8009a06 <f_read+0x276>
			sect += csect;
 80098aa:	69ba      	ldr	r2, [r7, #24]
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	4413      	add	r3, r2
 80098b0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	0a5b      	lsrs	r3, r3, #9
 80098b6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80098b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d039      	beq.n	8009932 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80098be:	69fa      	ldr	r2, [r7, #28]
 80098c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c2:	4413      	add	r3, r2
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	8952      	ldrh	r2, [r2, #10]
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d905      	bls.n	80098d8 <f_read+0x148>
					cc = fs->csize - csect;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	895b      	ldrh	r3, [r3, #10]
 80098d0:	461a      	mov	r2, r3
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	1ad3      	subs	r3, r2, r3
 80098d6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	7858      	ldrb	r0, [r3, #1]
 80098dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098de:	69ba      	ldr	r2, [r7, #24]
 80098e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098e2:	f7fd ff97 	bl	8007814 <disk_read>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d004      	beq.n	80098f6 <f_read+0x166>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2201      	movs	r2, #1
 80098f0:	755a      	strb	r2, [r3, #21]
 80098f2:	2301      	movs	r3, #1
 80098f4:	e087      	b.n	8009a06 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	7d1b      	ldrb	r3, [r3, #20]
 80098fa:	b25b      	sxtb	r3, r3
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	da14      	bge.n	800992a <f_read+0x19a>
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	6a1a      	ldr	r2, [r3, #32]
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	1ad3      	subs	r3, r2, r3
 8009908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800990a:	429a      	cmp	r2, r3
 800990c:	d90d      	bls.n	800992a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6a1a      	ldr	r2, [r3, #32]
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	1ad3      	subs	r3, r2, r3
 8009916:	025b      	lsls	r3, r3, #9
 8009918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800991a:	18d0      	adds	r0, r2, r3
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	3330      	adds	r3, #48	; 0x30
 8009920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009924:	4619      	mov	r1, r3
 8009926:	f7fe f855 	bl	80079d4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800992a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992c:	025b      	lsls	r3, r3, #9
 800992e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8009930:	e050      	b.n	80099d4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	6a1b      	ldr	r3, [r3, #32]
 8009936:	69ba      	ldr	r2, [r7, #24]
 8009938:	429a      	cmp	r2, r3
 800993a:	d02e      	beq.n	800999a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	7d1b      	ldrb	r3, [r3, #20]
 8009940:	b25b      	sxtb	r3, r3
 8009942:	2b00      	cmp	r3, #0
 8009944:	da18      	bge.n	8009978 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	7858      	ldrb	r0, [r3, #1]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	6a1a      	ldr	r2, [r3, #32]
 8009954:	2301      	movs	r3, #1
 8009956:	f7fd ff7d 	bl	8007854 <disk_write>
 800995a:	4603      	mov	r3, r0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d004      	beq.n	800996a <f_read+0x1da>
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2201      	movs	r2, #1
 8009964:	755a      	strb	r2, [r3, #21]
 8009966:	2301      	movs	r3, #1
 8009968:	e04d      	b.n	8009a06 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	7d1b      	ldrb	r3, [r3, #20]
 800996e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009972:	b2da      	uxtb	r2, r3
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	7858      	ldrb	r0, [r3, #1]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009982:	2301      	movs	r3, #1
 8009984:	69ba      	ldr	r2, [r7, #24]
 8009986:	f7fd ff45 	bl	8007814 <disk_read>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d004      	beq.n	800999a <f_read+0x20a>
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2201      	movs	r2, #1
 8009994:	755a      	strb	r2, [r3, #21]
 8009996:	2301      	movs	r3, #1
 8009998:	e035      	b.n	8009a06 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	69ba      	ldr	r2, [r7, #24]
 800999e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	699b      	ldr	r3, [r3, #24]
 80099a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099a8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80099ac:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80099ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d901      	bls.n	80099ba <f_read+0x22a>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	699b      	ldr	r3, [r3, #24]
 80099c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099c8:	4413      	add	r3, r2
 80099ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099cc:	4619      	mov	r1, r3
 80099ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099d0:	f7fe f800 	bl	80079d4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80099d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d8:	4413      	add	r3, r2
 80099da:	627b      	str	r3, [r7, #36]	; 0x24
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	699a      	ldr	r2, [r3, #24]
 80099e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e2:	441a      	add	r2, r3
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	619a      	str	r2, [r3, #24]
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ee:	441a      	add	r2, r3
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	601a      	str	r2, [r3, #0]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f47f af01 	bne.w	8009806 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3738      	adds	r7, #56	; 0x38
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b086      	sub	sp, #24
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f107 0208 	add.w	r2, r7, #8
 8009a1c:	4611      	mov	r1, r2
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7ff fc7c 	bl	800931c <validate>
 8009a24:	4603      	mov	r3, r0
 8009a26:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009a28:	7dfb      	ldrb	r3, [r7, #23]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d168      	bne.n	8009b00 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	7d1b      	ldrb	r3, [r3, #20]
 8009a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d062      	beq.n	8009b00 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	7d1b      	ldrb	r3, [r3, #20]
 8009a3e:	b25b      	sxtb	r3, r3
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	da15      	bge.n	8009a70 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	7858      	ldrb	r0, [r3, #1]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a1a      	ldr	r2, [r3, #32]
 8009a52:	2301      	movs	r3, #1
 8009a54:	f7fd fefe 	bl	8007854 <disk_write>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d001      	beq.n	8009a62 <f_sync+0x54>
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e04f      	b.n	8009b02 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	7d1b      	ldrb	r3, [r3, #20]
 8009a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009a70:	f7fd f950 	bl	8006d14 <get_fattime>
 8009a74:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009a76:	68ba      	ldr	r2, [r7, #8]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	4610      	mov	r0, r2
 8009a80:	f7fe f9d6 	bl	8007e30 <move_window>
 8009a84:	4603      	mov	r3, r0
 8009a86:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009a88:	7dfb      	ldrb	r3, [r7, #23]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d138      	bne.n	8009b00 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a92:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	330b      	adds	r3, #11
 8009a98:	781a      	ldrb	r2, [r3, #0]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	330b      	adds	r3, #11
 8009a9e:	f042 0220 	orr.w	r2, r2, #32
 8009aa2:	b2d2      	uxtb	r2, r2
 8009aa4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6818      	ldr	r0, [r3, #0]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	461a      	mov	r2, r3
 8009ab0:	68f9      	ldr	r1, [r7, #12]
 8009ab2:	f7fe fee3 	bl	800887c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f103 021c 	add.w	r2, r3, #28
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	4610      	mov	r0, r2
 8009ac4:	f7fd ff5a 	bl	800797c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	3316      	adds	r3, #22
 8009acc:	6939      	ldr	r1, [r7, #16]
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7fd ff54 	bl	800797c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	3312      	adds	r3, #18
 8009ad8:	2100      	movs	r1, #0
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fd ff33 	bl	8007946 <st_word>
					fs->wflag = 1;
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7fe f9cf 	bl	8007e8c <sync_fs>
 8009aee:	4603      	mov	r3, r0
 8009af0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	7d1b      	ldrb	r3, [r3, #20]
 8009af6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009afa:	b2da      	uxtb	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3718      	adds	r7, #24
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b084      	sub	sp, #16
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f7ff ff7b 	bl	8009a0e <f_sync>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d118      	bne.n	8009b54 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f107 0208 	add.w	r2, r7, #8
 8009b28:	4611      	mov	r1, r2
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7ff fbf6 	bl	800931c <validate>
 8009b30:	4603      	mov	r3, r0
 8009b32:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009b34:	7bfb      	ldrb	r3, [r7, #15]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d10c      	bne.n	8009b54 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7fe f8d2 	bl	8007ce8 <dec_lock>
 8009b44:	4603      	mov	r3, r0
 8009b46:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009b48:	7bfb      	ldrb	r3, [r7, #15]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d102      	bne.n	8009b54 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b090      	sub	sp, #64	; 0x40
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
 8009b66:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f107 0208 	add.w	r2, r7, #8
 8009b6e:	4611      	mov	r1, r2
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7ff fbd3 	bl	800931c <validate>
 8009b76:	4603      	mov	r3, r0
 8009b78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009b7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d103      	bne.n	8009b8c <f_lseek+0x2e>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	7d5b      	ldrb	r3, [r3, #21]
 8009b88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009b8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d002      	beq.n	8009b9a <f_lseek+0x3c>
 8009b94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b98:	e1e6      	b.n	8009f68 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f000 80d1 	beq.w	8009d46 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009baa:	d15a      	bne.n	8009c62 <f_lseek+0x104>
			tbl = fp->cltbl;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb4:	1d1a      	adds	r2, r3, #4
 8009bb6:	627a      	str	r2, [r7, #36]	; 0x24
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	617b      	str	r3, [r7, #20]
 8009bbc:	2302      	movs	r3, #2
 8009bbe:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d03a      	beq.n	8009c42 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bce:	613b      	str	r3, [r7, #16]
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd6:	3302      	adds	r3, #2
 8009bd8:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bdc:	60fb      	str	r3, [r7, #12]
 8009bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be0:	3301      	adds	r3, #1
 8009be2:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7fe f9dc 	bl	8007fa6 <get_fat>
 8009bee:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d804      	bhi.n	8009c00 <f_lseek+0xa2>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2202      	movs	r2, #2
 8009bfa:	755a      	strb	r2, [r3, #21]
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	e1b3      	b.n	8009f68 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c06:	d104      	bne.n	8009c12 <f_lseek+0xb4>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	755a      	strb	r2, [r3, #21]
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e1aa      	b.n	8009f68 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3301      	adds	r3, #1
 8009c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d0de      	beq.n	8009bda <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d809      	bhi.n	8009c38 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c26:	1d1a      	adds	r2, r3, #4
 8009c28:	627a      	str	r2, [r7, #36]	; 0x24
 8009c2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c2c:	601a      	str	r2, [r3, #0]
 8009c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c30:	1d1a      	adds	r2, r3, #4
 8009c32:	627a      	str	r2, [r7, #36]	; 0x24
 8009c34:	693a      	ldr	r2, [r7, #16]
 8009c36:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	695b      	ldr	r3, [r3, #20]
 8009c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d3c4      	bcc.n	8009bcc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c48:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d803      	bhi.n	8009c5a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8009c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c54:	2200      	movs	r2, #0
 8009c56:	601a      	str	r2, [r3, #0]
 8009c58:	e184      	b.n	8009f64 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009c5a:	2311      	movs	r3, #17
 8009c5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009c60:	e180      	b.n	8009f64 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	68db      	ldr	r3, [r3, #12]
 8009c66:	683a      	ldr	r2, [r7, #0]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d902      	bls.n	8009c72 <f_lseek+0x114>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	683a      	ldr	r2, [r7, #0]
 8009c76:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	f000 8172 	beq.w	8009f64 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	3b01      	subs	r3, #1
 8009c84:	4619      	mov	r1, r3
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f7fe fc1e 	bl	80084c8 <clmt_clust>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	69db      	ldr	r3, [r3, #28]
 8009c98:	4619      	mov	r1, r3
 8009c9a:	4610      	mov	r0, r2
 8009c9c:	f7fe f964 	bl	8007f68 <clust2sect>
 8009ca0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d104      	bne.n	8009cb2 <f_lseek+0x154>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2202      	movs	r2, #2
 8009cac:	755a      	strb	r2, [r3, #21]
 8009cae:	2302      	movs	r3, #2
 8009cb0:	e15a      	b.n	8009f68 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	3b01      	subs	r3, #1
 8009cb6:	0a5b      	lsrs	r3, r3, #9
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	8952      	ldrh	r2, [r2, #10]
 8009cbc:	3a01      	subs	r2, #1
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	69ba      	ldr	r2, [r7, #24]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	699b      	ldr	r3, [r3, #24]
 8009cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f000 8148 	beq.w	8009f64 <f_lseek+0x406>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6a1b      	ldr	r3, [r3, #32]
 8009cd8:	69ba      	ldr	r2, [r7, #24]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	f000 8142 	beq.w	8009f64 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	7d1b      	ldrb	r3, [r3, #20]
 8009ce4:	b25b      	sxtb	r3, r3
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	da18      	bge.n	8009d1c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	7858      	ldrb	r0, [r3, #1]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6a1a      	ldr	r2, [r3, #32]
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	f7fd fdab 	bl	8007854 <disk_write>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d004      	beq.n	8009d0e <f_lseek+0x1b0>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	755a      	strb	r2, [r3, #21]
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e12c      	b.n	8009f68 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	7d1b      	ldrb	r3, [r3, #20]
 8009d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d16:	b2da      	uxtb	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	7858      	ldrb	r0, [r3, #1]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d26:	2301      	movs	r3, #1
 8009d28:	69ba      	ldr	r2, [r7, #24]
 8009d2a:	f7fd fd73 	bl	8007814 <disk_read>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d004      	beq.n	8009d3e <f_lseek+0x1e0>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	755a      	strb	r2, [r3, #21]
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e114      	b.n	8009f68 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	69ba      	ldr	r2, [r7, #24]
 8009d42:	621a      	str	r2, [r3, #32]
 8009d44:	e10e      	b.n	8009f64 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	683a      	ldr	r2, [r7, #0]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d908      	bls.n	8009d62 <f_lseek+0x204>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	7d1b      	ldrb	r3, [r3, #20]
 8009d54:	f003 0302 	and.w	r3, r3, #2
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d102      	bne.n	8009d62 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	699b      	ldr	r3, [r3, #24]
 8009d66:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d70:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f000 80a7 	beq.w	8009ec8 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	895b      	ldrh	r3, [r3, #10]
 8009d7e:	025b      	lsls	r3, r3, #9
 8009d80:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009d82:	6a3b      	ldr	r3, [r7, #32]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d01b      	beq.n	8009dc0 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	1e5a      	subs	r2, r3, #1
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d92:	6a3b      	ldr	r3, [r7, #32]
 8009d94:	1e59      	subs	r1, r3, #1
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d30f      	bcc.n	8009dc0 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009da0:	6a3b      	ldr	r3, [r7, #32]
 8009da2:	1e5a      	subs	r2, r3, #1
 8009da4:	69fb      	ldr	r3, [r7, #28]
 8009da6:	425b      	negs	r3, r3
 8009da8:	401a      	ands	r2, r3
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	699b      	ldr	r3, [r3, #24]
 8009db2:	683a      	ldr	r2, [r7, #0]
 8009db4:	1ad3      	subs	r3, r2, r3
 8009db6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	69db      	ldr	r3, [r3, #28]
 8009dbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8009dbe:	e022      	b.n	8009e06 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d119      	bne.n	8009e00 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2100      	movs	r1, #0
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7fe fae1 	bl	8008398 <create_chain>
 8009dd6:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d104      	bne.n	8009de8 <f_lseek+0x28a>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2202      	movs	r2, #2
 8009de2:	755a      	strb	r2, [r3, #21]
 8009de4:	2302      	movs	r3, #2
 8009de6:	e0bf      	b.n	8009f68 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dee:	d104      	bne.n	8009dfa <f_lseek+0x29c>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2201      	movs	r2, #1
 8009df4:	755a      	strb	r2, [r3, #21]
 8009df6:	2301      	movs	r3, #1
 8009df8:	e0b6      	b.n	8009f68 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009dfe:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e04:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8009e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d05d      	beq.n	8009ec8 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8009e0c:	e03a      	b.n	8009e84 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8009e0e:	683a      	ldr	r2, [r7, #0]
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	1ad3      	subs	r3, r2, r3
 8009e14:	603b      	str	r3, [r7, #0]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	699a      	ldr	r2, [r3, #24]
 8009e1a:	69fb      	ldr	r3, [r7, #28]
 8009e1c:	441a      	add	r2, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	7d1b      	ldrb	r3, [r3, #20]
 8009e26:	f003 0302 	and.w	r3, r3, #2
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d00b      	beq.n	8009e46 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7fe fab0 	bl	8008398 <create_chain>
 8009e38:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8009e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d108      	bne.n	8009e52 <f_lseek+0x2f4>
							ofs = 0; break;
 8009e40:	2300      	movs	r3, #0
 8009e42:	603b      	str	r3, [r7, #0]
 8009e44:	e022      	b.n	8009e8c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7fe f8ab 	bl	8007fa6 <get_fat>
 8009e50:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e58:	d104      	bne.n	8009e64 <f_lseek+0x306>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	755a      	strb	r2, [r3, #21]
 8009e60:	2301      	movs	r3, #1
 8009e62:	e081      	b.n	8009f68 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8009e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d904      	bls.n	8009e74 <f_lseek+0x316>
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	695b      	ldr	r3, [r3, #20]
 8009e6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d304      	bcc.n	8009e7e <f_lseek+0x320>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2202      	movs	r2, #2
 8009e78:	755a      	strb	r2, [r3, #21]
 8009e7a:	2302      	movs	r3, #2
 8009e7c:	e074      	b.n	8009f68 <f_lseek+0x40a>
					fp->clust = clst;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e82:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8009e84:	683a      	ldr	r2, [r7, #0]
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d8c0      	bhi.n	8009e0e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	699a      	ldr	r2, [r3, #24]
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	441a      	add	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d012      	beq.n	8009ec8 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fe f85e 	bl	8007f68 <clust2sect>
 8009eac:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d104      	bne.n	8009ebe <f_lseek+0x360>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2202      	movs	r2, #2
 8009eb8:	755a      	strb	r2, [r3, #21]
 8009eba:	2302      	movs	r3, #2
 8009ebc:	e054      	b.n	8009f68 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	0a5b      	lsrs	r3, r3, #9
 8009ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ec4:	4413      	add	r3, r2
 8009ec6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	699a      	ldr	r2, [r3, #24]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d90a      	bls.n	8009eea <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	699a      	ldr	r2, [r3, #24]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	7d1b      	ldrb	r3, [r3, #20]
 8009ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ee4:	b2da      	uxtb	r2, r3
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	699b      	ldr	r3, [r3, #24]
 8009eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d036      	beq.n	8009f64 <f_lseek+0x406>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a1b      	ldr	r3, [r3, #32]
 8009efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d031      	beq.n	8009f64 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	7d1b      	ldrb	r3, [r3, #20]
 8009f04:	b25b      	sxtb	r3, r3
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	da18      	bge.n	8009f3c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	7858      	ldrb	r0, [r3, #1]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6a1a      	ldr	r2, [r3, #32]
 8009f18:	2301      	movs	r3, #1
 8009f1a:	f7fd fc9b 	bl	8007854 <disk_write>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d004      	beq.n	8009f2e <f_lseek+0x3d0>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	755a      	strb	r2, [r3, #21]
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e01c      	b.n	8009f68 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	7d1b      	ldrb	r3, [r3, #20]
 8009f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f36:	b2da      	uxtb	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	7858      	ldrb	r0, [r3, #1]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f46:	2301      	movs	r3, #1
 8009f48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f4a:	f7fd fc63 	bl	8007814 <disk_read>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d004      	beq.n	8009f5e <f_lseek+0x400>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2201      	movs	r2, #1
 8009f58:	755a      	strb	r2, [r3, #21]
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	e004      	b.n	8009f68 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f62:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009f64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3740      	adds	r7, #64	; 0x40
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b086      	sub	sp, #24
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d101      	bne.n	8009f84 <f_opendir+0x14>
 8009f80:	2309      	movs	r3, #9
 8009f82:	e064      	b.n	800a04e <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8009f88:	f107 010c 	add.w	r1, r7, #12
 8009f8c:	463b      	mov	r3, r7
 8009f8e:	2200      	movs	r2, #0
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7fe ff77 	bl	8008e84 <find_volume>
 8009f96:	4603      	mov	r3, r0
 8009f98:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009f9a:	7dfb      	ldrb	r3, [r7, #23]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d14f      	bne.n	800a040 <f_opendir+0xd0>
		obj->fs = fs;
 8009fa0:	68fa      	ldr	r2, [r7, #12]
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	4619      	mov	r1, r3
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f7fe fe5e 	bl	8008c6c <follow_path>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8009fb4:	7dfb      	ldrb	r3, [r7, #23]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d13d      	bne.n	800a036 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009fc0:	b25b      	sxtb	r3, r3
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	db12      	blt.n	8009fec <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	799b      	ldrb	r3, [r3, #6]
 8009fca:	f003 0310 	and.w	r3, r3, #16
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00a      	beq.n	8009fe8 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6a1b      	ldr	r3, [r3, #32]
 8009fd8:	4619      	mov	r1, r3
 8009fda:	4610      	mov	r0, r2
 8009fdc:	f7fe fc2f 	bl	800883e <ld_clust>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	609a      	str	r2, [r3, #8]
 8009fe6:	e001      	b.n	8009fec <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8009fe8:	2305      	movs	r3, #5
 8009fea:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8009fec:	7dfb      	ldrb	r3, [r7, #23]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d121      	bne.n	800a036 <f_opendir+0xc6>
				obj->id = fs->id;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	88da      	ldrh	r2, [r3, #6]
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f7fe fa97 	bl	8008530 <dir_sdi>
 800a002:	4603      	mov	r3, r0
 800a004:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800a006:	7dfb      	ldrb	r3, [r7, #23]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d114      	bne.n	800a036 <f_opendir+0xc6>
					if (obj->sclust) {
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d00d      	beq.n	800a030 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800a014:	2100      	movs	r1, #0
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f7fd fdd8 	bl	8007bcc <inc_lock>
 800a01c:	4602      	mov	r2, r0
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d105      	bne.n	800a036 <f_opendir+0xc6>
 800a02a:	2312      	movs	r3, #18
 800a02c:	75fb      	strb	r3, [r7, #23]
 800a02e:	e002      	b.n	800a036 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	2200      	movs	r2, #0
 800a034:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800a036:	7dfb      	ldrb	r3, [r7, #23]
 800a038:	2b04      	cmp	r3, #4
 800a03a:	d101      	bne.n	800a040 <f_opendir+0xd0>
 800a03c:	2305      	movs	r3, #5
 800a03e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800a040:	7dfb      	ldrb	r3, [r7, #23]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d002      	beq.n	800a04c <f_opendir+0xdc>
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	2200      	movs	r2, #0
 800a04a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a04c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3718      	adds	r7, #24
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b084      	sub	sp, #16
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f107 0208 	add.w	r2, r7, #8
 800a064:	4611      	mov	r1, r2
 800a066:	4618      	mov	r0, r3
 800a068:	f7ff f958 	bl	800931c <validate>
 800a06c:	4603      	mov	r3, r0
 800a06e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a070:	7bfb      	ldrb	r3, [r7, #15]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d110      	bne.n	800a098 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d006      	beq.n	800a08c <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	4618      	mov	r0, r3
 800a084:	f7fd fe30 	bl	8007ce8 <dec_lock>
 800a088:	4603      	mov	r3, r0
 800a08a:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800a08c:	7bfb      	ldrb	r3, [r7, #15]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d102      	bne.n	800a098 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800a098:	7bfb      	ldrb	r3, [r7, #15]
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3710      	adds	r7, #16
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b084      	sub	sp, #16
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
 800a0aa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f107 0208 	add.w	r2, r7, #8
 800a0b2:	4611      	mov	r1, r2
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7ff f931 	bl	800931c <validate>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a0be:	7bfb      	ldrb	r3, [r7, #15]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d126      	bne.n	800a112 <f_readdir+0x70>
		if (!fno) {
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d106      	bne.n	800a0d8 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f7fe fa2f 	bl	8008530 <dir_sdi>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	73fb      	strb	r3, [r7, #15]
 800a0d6:	e01c      	b.n	800a112 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800a0d8:	2100      	movs	r1, #0
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f7fe fbee 	bl	80088bc <dir_read>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800a0e4:	7bfb      	ldrb	r3, [r7, #15]
 800a0e6:	2b04      	cmp	r3, #4
 800a0e8:	d101      	bne.n	800a0ee <f_readdir+0x4c>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800a0ee:	7bfb      	ldrb	r3, [r7, #15]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d10e      	bne.n	800a112 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800a0f4:	6839      	ldr	r1, [r7, #0]
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f7fe fcc4 	bl	8008a84 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800a0fc:	2100      	movs	r1, #0
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f7fe fa91 	bl	8008626 <dir_next>
 800a104:	4603      	mov	r3, r0
 800a106:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800a108:	7bfb      	ldrb	r3, [r7, #15]
 800a10a:	2b04      	cmp	r3, #4
 800a10c:	d101      	bne.n	800a112 <f_readdir+0x70>
 800a10e:	2300      	movs	r3, #0
 800a110:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800a112:	7bfb      	ldrb	r3, [r7, #15]
}
 800a114:	4618      	mov	r0, r3
 800a116:	3710      	adds	r7, #16
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b092      	sub	sp, #72	; 0x48
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a128:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a12c:	f107 030c 	add.w	r3, r7, #12
 800a130:	2200      	movs	r2, #0
 800a132:	4618      	mov	r0, r3
 800a134:	f7fe fea6 	bl	8008e84 <find_volume>
 800a138:	4603      	mov	r3, r0
 800a13a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800a13e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a142:	2b00      	cmp	r3, #0
 800a144:	f040 8099 	bne.w	800a27a <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a150:	691a      	ldr	r2, [r3, #16]
 800a152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a154:	695b      	ldr	r3, [r3, #20]
 800a156:	3b02      	subs	r3, #2
 800a158:	429a      	cmp	r2, r3
 800a15a:	d804      	bhi.n	800a166 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800a15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15e:	691a      	ldr	r2, [r3, #16]
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	601a      	str	r2, [r3, #0]
 800a164:	e089      	b.n	800a27a <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800a166:	2300      	movs	r3, #0
 800a168:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d128      	bne.n	800a1c4 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800a172:	2302      	movs	r3, #2
 800a174:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a178:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800a17a:	f107 0314 	add.w	r3, r7, #20
 800a17e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a180:	4618      	mov	r0, r3
 800a182:	f7fd ff10 	bl	8007fa6 <get_fat>
 800a186:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a18e:	d103      	bne.n	800a198 <f_getfree+0x7c>
 800a190:	2301      	movs	r3, #1
 800a192:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a196:	e063      	b.n	800a260 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d103      	bne.n	800a1a6 <f_getfree+0x8a>
 800a19e:	2302      	movs	r3, #2
 800a1a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a1a4:	e05c      	b.n	800a260 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800a1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d102      	bne.n	800a1b2 <f_getfree+0x96>
 800a1ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800a1b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ba:	695b      	ldr	r3, [r3, #20]
 800a1bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d3db      	bcc.n	800a17a <f_getfree+0x5e>
 800a1c2:	e04d      	b.n	800a260 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800a1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c6:	695b      	ldr	r3, [r3, #20]
 800a1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	637b      	str	r3, [r7, #52]	; 0x34
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800a1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d113      	bne.n	800a206 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800a1de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e2:	1c5a      	adds	r2, r3, #1
 800a1e4:	63ba      	str	r2, [r7, #56]	; 0x38
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	f7fd fe22 	bl	8007e30 <move_window>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800a1f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d131      	bne.n	800a25e <f_getfree+0x142>
							p = fs->win;
 800a1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fc:	3330      	adds	r3, #48	; 0x30
 800a1fe:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800a200:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a204:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800a206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d10f      	bne.n	800a22e <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800a20e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a210:	f7fd fb5e 	bl	80078d0 <ld_word>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d102      	bne.n	800a220 <f_getfree+0x104>
 800a21a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a21c:	3301      	adds	r3, #1
 800a21e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800a220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a222:	3302      	adds	r3, #2
 800a224:	633b      	str	r3, [r7, #48]	; 0x30
 800a226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a228:	3b02      	subs	r3, #2
 800a22a:	637b      	str	r3, [r7, #52]	; 0x34
 800a22c:	e010      	b.n	800a250 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800a22e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a230:	f7fd fb66 	bl	8007900 <ld_dword>
 800a234:	4603      	mov	r3, r0
 800a236:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d102      	bne.n	800a244 <f_getfree+0x128>
 800a23e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a240:	3301      	adds	r3, #1
 800a242:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800a244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a246:	3304      	adds	r3, #4
 800a248:	633b      	str	r3, [r7, #48]	; 0x30
 800a24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a24c:	3b04      	subs	r3, #4
 800a24e:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800a250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a252:	3b01      	subs	r3, #1
 800a254:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d1bd      	bne.n	800a1d8 <f_getfree+0xbc>
 800a25c:	e000      	b.n	800a260 <f_getfree+0x144>
							if (res != FR_OK) break;
 800a25e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a264:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800a266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a268:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a26a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26e:	791a      	ldrb	r2, [r3, #4]
 800a270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a272:	f042 0201 	orr.w	r2, r2, #1
 800a276:	b2d2      	uxtb	r2, r2
 800a278:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800a27a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3748      	adds	r7, #72	; 0x48
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
	...

0800a288 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a288:	b480      	push	{r7}
 800a28a:	b087      	sub	sp, #28
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	4613      	mov	r3, r2
 800a294:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a296:	2301      	movs	r3, #1
 800a298:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a29a:	2300      	movs	r3, #0
 800a29c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a29e:	4b1f      	ldr	r3, [pc, #124]	; (800a31c <FATFS_LinkDriverEx+0x94>)
 800a2a0:	7a5b      	ldrb	r3, [r3, #9]
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d131      	bne.n	800a30c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a2a8:	4b1c      	ldr	r3, [pc, #112]	; (800a31c <FATFS_LinkDriverEx+0x94>)
 800a2aa:	7a5b      	ldrb	r3, [r3, #9]
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	4b1a      	ldr	r3, [pc, #104]	; (800a31c <FATFS_LinkDriverEx+0x94>)
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a2b6:	4b19      	ldr	r3, [pc, #100]	; (800a31c <FATFS_LinkDriverEx+0x94>)
 800a2b8:	7a5b      	ldrb	r3, [r3, #9]
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	4a17      	ldr	r2, [pc, #92]	; (800a31c <FATFS_LinkDriverEx+0x94>)
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	4413      	add	r3, r2
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a2c6:	4b15      	ldr	r3, [pc, #84]	; (800a31c <FATFS_LinkDriverEx+0x94>)
 800a2c8:	7a5b      	ldrb	r3, [r3, #9]
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	4b13      	ldr	r3, [pc, #76]	; (800a31c <FATFS_LinkDriverEx+0x94>)
 800a2d0:	4413      	add	r3, r2
 800a2d2:	79fa      	ldrb	r2, [r7, #7]
 800a2d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a2d6:	4b11      	ldr	r3, [pc, #68]	; (800a31c <FATFS_LinkDriverEx+0x94>)
 800a2d8:	7a5b      	ldrb	r3, [r3, #9]
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	1c5a      	adds	r2, r3, #1
 800a2de:	b2d1      	uxtb	r1, r2
 800a2e0:	4a0e      	ldr	r2, [pc, #56]	; (800a31c <FATFS_LinkDriverEx+0x94>)
 800a2e2:	7251      	strb	r1, [r2, #9]
 800a2e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a2e6:	7dbb      	ldrb	r3, [r7, #22]
 800a2e8:	3330      	adds	r3, #48	; 0x30
 800a2ea:	b2da      	uxtb	r2, r3
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	223a      	movs	r2, #58	; 0x3a
 800a2f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	3302      	adds	r3, #2
 800a2fc:	222f      	movs	r2, #47	; 0x2f
 800a2fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	3303      	adds	r3, #3
 800a304:	2200      	movs	r2, #0
 800a306:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a308:	2300      	movs	r3, #0
 800a30a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a30c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a30e:	4618      	mov	r0, r3
 800a310:	371c      	adds	r7, #28
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr
 800a31a:	bf00      	nop
 800a31c:	20001e78 	.word	0x20001e78

0800a320 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a32a:	2200      	movs	r2, #0
 800a32c:	6839      	ldr	r1, [r7, #0]
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f7ff ffaa 	bl	800a288 <FATFS_LinkDriverEx>
 800a334:	4603      	mov	r3, r0
}
 800a336:	4618      	mov	r0, r3
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <atoi>:
 800a33e:	220a      	movs	r2, #10
 800a340:	2100      	movs	r1, #0
 800a342:	f000 b8f7 	b.w	800a534 <strtol>
	...

0800a348 <__errno>:
 800a348:	4b01      	ldr	r3, [pc, #4]	; (800a350 <__errno+0x8>)
 800a34a:	6818      	ldr	r0, [r3, #0]
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	20000024 	.word	0x20000024

0800a354 <__libc_init_array>:
 800a354:	b570      	push	{r4, r5, r6, lr}
 800a356:	4d0d      	ldr	r5, [pc, #52]	; (800a38c <__libc_init_array+0x38>)
 800a358:	4c0d      	ldr	r4, [pc, #52]	; (800a390 <__libc_init_array+0x3c>)
 800a35a:	1b64      	subs	r4, r4, r5
 800a35c:	10a4      	asrs	r4, r4, #2
 800a35e:	2600      	movs	r6, #0
 800a360:	42a6      	cmp	r6, r4
 800a362:	d109      	bne.n	800a378 <__libc_init_array+0x24>
 800a364:	4d0b      	ldr	r5, [pc, #44]	; (800a394 <__libc_init_array+0x40>)
 800a366:	4c0c      	ldr	r4, [pc, #48]	; (800a398 <__libc_init_array+0x44>)
 800a368:	f000 fd68 	bl	800ae3c <_init>
 800a36c:	1b64      	subs	r4, r4, r5
 800a36e:	10a4      	asrs	r4, r4, #2
 800a370:	2600      	movs	r6, #0
 800a372:	42a6      	cmp	r6, r4
 800a374:	d105      	bne.n	800a382 <__libc_init_array+0x2e>
 800a376:	bd70      	pop	{r4, r5, r6, pc}
 800a378:	f855 3b04 	ldr.w	r3, [r5], #4
 800a37c:	4798      	blx	r3
 800a37e:	3601      	adds	r6, #1
 800a380:	e7ee      	b.n	800a360 <__libc_init_array+0xc>
 800a382:	f855 3b04 	ldr.w	r3, [r5], #4
 800a386:	4798      	blx	r3
 800a388:	3601      	adds	r6, #1
 800a38a:	e7f2      	b.n	800a372 <__libc_init_array+0x1e>
 800a38c:	0800b5f8 	.word	0x0800b5f8
 800a390:	0800b5f8 	.word	0x0800b5f8
 800a394:	0800b5f8 	.word	0x0800b5f8
 800a398:	0800b5fc 	.word	0x0800b5fc

0800a39c <memcpy>:
 800a39c:	440a      	add	r2, r1
 800a39e:	4291      	cmp	r1, r2
 800a3a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3a4:	d100      	bne.n	800a3a8 <memcpy+0xc>
 800a3a6:	4770      	bx	lr
 800a3a8:	b510      	push	{r4, lr}
 800a3aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3b2:	4291      	cmp	r1, r2
 800a3b4:	d1f9      	bne.n	800a3aa <memcpy+0xe>
 800a3b6:	bd10      	pop	{r4, pc}

0800a3b8 <memset>:
 800a3b8:	4402      	add	r2, r0
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d100      	bne.n	800a3c2 <memset+0xa>
 800a3c0:	4770      	bx	lr
 800a3c2:	f803 1b01 	strb.w	r1, [r3], #1
 800a3c6:	e7f9      	b.n	800a3bc <memset+0x4>

0800a3c8 <siprintf>:
 800a3c8:	b40e      	push	{r1, r2, r3}
 800a3ca:	b500      	push	{lr}
 800a3cc:	b09c      	sub	sp, #112	; 0x70
 800a3ce:	ab1d      	add	r3, sp, #116	; 0x74
 800a3d0:	9002      	str	r0, [sp, #8]
 800a3d2:	9006      	str	r0, [sp, #24]
 800a3d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a3d8:	4809      	ldr	r0, [pc, #36]	; (800a400 <siprintf+0x38>)
 800a3da:	9107      	str	r1, [sp, #28]
 800a3dc:	9104      	str	r1, [sp, #16]
 800a3de:	4909      	ldr	r1, [pc, #36]	; (800a404 <siprintf+0x3c>)
 800a3e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3e4:	9105      	str	r1, [sp, #20]
 800a3e6:	6800      	ldr	r0, [r0, #0]
 800a3e8:	9301      	str	r3, [sp, #4]
 800a3ea:	a902      	add	r1, sp, #8
 800a3ec:	f000 f942 	bl	800a674 <_svfiprintf_r>
 800a3f0:	9b02      	ldr	r3, [sp, #8]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	701a      	strb	r2, [r3, #0]
 800a3f6:	b01c      	add	sp, #112	; 0x70
 800a3f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3fc:	b003      	add	sp, #12
 800a3fe:	4770      	bx	lr
 800a400:	20000024 	.word	0x20000024
 800a404:	ffff0208 	.word	0xffff0208

0800a408 <strncpy>:
 800a408:	b510      	push	{r4, lr}
 800a40a:	3901      	subs	r1, #1
 800a40c:	4603      	mov	r3, r0
 800a40e:	b132      	cbz	r2, 800a41e <strncpy+0x16>
 800a410:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a414:	f803 4b01 	strb.w	r4, [r3], #1
 800a418:	3a01      	subs	r2, #1
 800a41a:	2c00      	cmp	r4, #0
 800a41c:	d1f7      	bne.n	800a40e <strncpy+0x6>
 800a41e:	441a      	add	r2, r3
 800a420:	2100      	movs	r1, #0
 800a422:	4293      	cmp	r3, r2
 800a424:	d100      	bne.n	800a428 <strncpy+0x20>
 800a426:	bd10      	pop	{r4, pc}
 800a428:	f803 1b01 	strb.w	r1, [r3], #1
 800a42c:	e7f9      	b.n	800a422 <strncpy+0x1a>
	...

0800a430 <_strtol_l.constprop.0>:
 800a430:	2b01      	cmp	r3, #1
 800a432:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a436:	d001      	beq.n	800a43c <_strtol_l.constprop.0+0xc>
 800a438:	2b24      	cmp	r3, #36	; 0x24
 800a43a:	d906      	bls.n	800a44a <_strtol_l.constprop.0+0x1a>
 800a43c:	f7ff ff84 	bl	800a348 <__errno>
 800a440:	2316      	movs	r3, #22
 800a442:	6003      	str	r3, [r0, #0]
 800a444:	2000      	movs	r0, #0
 800a446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a44a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a530 <_strtol_l.constprop.0+0x100>
 800a44e:	460d      	mov	r5, r1
 800a450:	462e      	mov	r6, r5
 800a452:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a456:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a45a:	f017 0708 	ands.w	r7, r7, #8
 800a45e:	d1f7      	bne.n	800a450 <_strtol_l.constprop.0+0x20>
 800a460:	2c2d      	cmp	r4, #45	; 0x2d
 800a462:	d132      	bne.n	800a4ca <_strtol_l.constprop.0+0x9a>
 800a464:	782c      	ldrb	r4, [r5, #0]
 800a466:	2701      	movs	r7, #1
 800a468:	1cb5      	adds	r5, r6, #2
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d05b      	beq.n	800a526 <_strtol_l.constprop.0+0xf6>
 800a46e:	2b10      	cmp	r3, #16
 800a470:	d109      	bne.n	800a486 <_strtol_l.constprop.0+0x56>
 800a472:	2c30      	cmp	r4, #48	; 0x30
 800a474:	d107      	bne.n	800a486 <_strtol_l.constprop.0+0x56>
 800a476:	782c      	ldrb	r4, [r5, #0]
 800a478:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a47c:	2c58      	cmp	r4, #88	; 0x58
 800a47e:	d14d      	bne.n	800a51c <_strtol_l.constprop.0+0xec>
 800a480:	786c      	ldrb	r4, [r5, #1]
 800a482:	2310      	movs	r3, #16
 800a484:	3502      	adds	r5, #2
 800a486:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a48a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a48e:	f04f 0c00 	mov.w	ip, #0
 800a492:	fbb8 f9f3 	udiv	r9, r8, r3
 800a496:	4666      	mov	r6, ip
 800a498:	fb03 8a19 	mls	sl, r3, r9, r8
 800a49c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a4a0:	f1be 0f09 	cmp.w	lr, #9
 800a4a4:	d816      	bhi.n	800a4d4 <_strtol_l.constprop.0+0xa4>
 800a4a6:	4674      	mov	r4, lr
 800a4a8:	42a3      	cmp	r3, r4
 800a4aa:	dd24      	ble.n	800a4f6 <_strtol_l.constprop.0+0xc6>
 800a4ac:	f1bc 0f00 	cmp.w	ip, #0
 800a4b0:	db1e      	blt.n	800a4f0 <_strtol_l.constprop.0+0xc0>
 800a4b2:	45b1      	cmp	r9, r6
 800a4b4:	d31c      	bcc.n	800a4f0 <_strtol_l.constprop.0+0xc0>
 800a4b6:	d101      	bne.n	800a4bc <_strtol_l.constprop.0+0x8c>
 800a4b8:	45a2      	cmp	sl, r4
 800a4ba:	db19      	blt.n	800a4f0 <_strtol_l.constprop.0+0xc0>
 800a4bc:	fb06 4603 	mla	r6, r6, r3, r4
 800a4c0:	f04f 0c01 	mov.w	ip, #1
 800a4c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4c8:	e7e8      	b.n	800a49c <_strtol_l.constprop.0+0x6c>
 800a4ca:	2c2b      	cmp	r4, #43	; 0x2b
 800a4cc:	bf04      	itt	eq
 800a4ce:	782c      	ldrbeq	r4, [r5, #0]
 800a4d0:	1cb5      	addeq	r5, r6, #2
 800a4d2:	e7ca      	b.n	800a46a <_strtol_l.constprop.0+0x3a>
 800a4d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a4d8:	f1be 0f19 	cmp.w	lr, #25
 800a4dc:	d801      	bhi.n	800a4e2 <_strtol_l.constprop.0+0xb2>
 800a4de:	3c37      	subs	r4, #55	; 0x37
 800a4e0:	e7e2      	b.n	800a4a8 <_strtol_l.constprop.0+0x78>
 800a4e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a4e6:	f1be 0f19 	cmp.w	lr, #25
 800a4ea:	d804      	bhi.n	800a4f6 <_strtol_l.constprop.0+0xc6>
 800a4ec:	3c57      	subs	r4, #87	; 0x57
 800a4ee:	e7db      	b.n	800a4a8 <_strtol_l.constprop.0+0x78>
 800a4f0:	f04f 3cff 	mov.w	ip, #4294967295
 800a4f4:	e7e6      	b.n	800a4c4 <_strtol_l.constprop.0+0x94>
 800a4f6:	f1bc 0f00 	cmp.w	ip, #0
 800a4fa:	da05      	bge.n	800a508 <_strtol_l.constprop.0+0xd8>
 800a4fc:	2322      	movs	r3, #34	; 0x22
 800a4fe:	6003      	str	r3, [r0, #0]
 800a500:	4646      	mov	r6, r8
 800a502:	b942      	cbnz	r2, 800a516 <_strtol_l.constprop.0+0xe6>
 800a504:	4630      	mov	r0, r6
 800a506:	e79e      	b.n	800a446 <_strtol_l.constprop.0+0x16>
 800a508:	b107      	cbz	r7, 800a50c <_strtol_l.constprop.0+0xdc>
 800a50a:	4276      	negs	r6, r6
 800a50c:	2a00      	cmp	r2, #0
 800a50e:	d0f9      	beq.n	800a504 <_strtol_l.constprop.0+0xd4>
 800a510:	f1bc 0f00 	cmp.w	ip, #0
 800a514:	d000      	beq.n	800a518 <_strtol_l.constprop.0+0xe8>
 800a516:	1e69      	subs	r1, r5, #1
 800a518:	6011      	str	r1, [r2, #0]
 800a51a:	e7f3      	b.n	800a504 <_strtol_l.constprop.0+0xd4>
 800a51c:	2430      	movs	r4, #48	; 0x30
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1b1      	bne.n	800a486 <_strtol_l.constprop.0+0x56>
 800a522:	2308      	movs	r3, #8
 800a524:	e7af      	b.n	800a486 <_strtol_l.constprop.0+0x56>
 800a526:	2c30      	cmp	r4, #48	; 0x30
 800a528:	d0a5      	beq.n	800a476 <_strtol_l.constprop.0+0x46>
 800a52a:	230a      	movs	r3, #10
 800a52c:	e7ab      	b.n	800a486 <_strtol_l.constprop.0+0x56>
 800a52e:	bf00      	nop
 800a530:	0800b4bd 	.word	0x0800b4bd

0800a534 <strtol>:
 800a534:	4613      	mov	r3, r2
 800a536:	460a      	mov	r2, r1
 800a538:	4601      	mov	r1, r0
 800a53a:	4802      	ldr	r0, [pc, #8]	; (800a544 <strtol+0x10>)
 800a53c:	6800      	ldr	r0, [r0, #0]
 800a53e:	f7ff bf77 	b.w	800a430 <_strtol_l.constprop.0>
 800a542:	bf00      	nop
 800a544:	20000024 	.word	0x20000024

0800a548 <_vsniprintf_r>:
 800a548:	b530      	push	{r4, r5, lr}
 800a54a:	4614      	mov	r4, r2
 800a54c:	2c00      	cmp	r4, #0
 800a54e:	b09b      	sub	sp, #108	; 0x6c
 800a550:	4605      	mov	r5, r0
 800a552:	461a      	mov	r2, r3
 800a554:	da05      	bge.n	800a562 <_vsniprintf_r+0x1a>
 800a556:	238b      	movs	r3, #139	; 0x8b
 800a558:	6003      	str	r3, [r0, #0]
 800a55a:	f04f 30ff 	mov.w	r0, #4294967295
 800a55e:	b01b      	add	sp, #108	; 0x6c
 800a560:	bd30      	pop	{r4, r5, pc}
 800a562:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a566:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a56a:	bf14      	ite	ne
 800a56c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a570:	4623      	moveq	r3, r4
 800a572:	9302      	str	r3, [sp, #8]
 800a574:	9305      	str	r3, [sp, #20]
 800a576:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a57a:	9100      	str	r1, [sp, #0]
 800a57c:	9104      	str	r1, [sp, #16]
 800a57e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a582:	4669      	mov	r1, sp
 800a584:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a586:	f000 f875 	bl	800a674 <_svfiprintf_r>
 800a58a:	1c43      	adds	r3, r0, #1
 800a58c:	bfbc      	itt	lt
 800a58e:	238b      	movlt	r3, #139	; 0x8b
 800a590:	602b      	strlt	r3, [r5, #0]
 800a592:	2c00      	cmp	r4, #0
 800a594:	d0e3      	beq.n	800a55e <_vsniprintf_r+0x16>
 800a596:	9b00      	ldr	r3, [sp, #0]
 800a598:	2200      	movs	r2, #0
 800a59a:	701a      	strb	r2, [r3, #0]
 800a59c:	e7df      	b.n	800a55e <_vsniprintf_r+0x16>
	...

0800a5a0 <vsniprintf>:
 800a5a0:	b507      	push	{r0, r1, r2, lr}
 800a5a2:	9300      	str	r3, [sp, #0]
 800a5a4:	4613      	mov	r3, r2
 800a5a6:	460a      	mov	r2, r1
 800a5a8:	4601      	mov	r1, r0
 800a5aa:	4803      	ldr	r0, [pc, #12]	; (800a5b8 <vsniprintf+0x18>)
 800a5ac:	6800      	ldr	r0, [r0, #0]
 800a5ae:	f7ff ffcb 	bl	800a548 <_vsniprintf_r>
 800a5b2:	b003      	add	sp, #12
 800a5b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800a5b8:	20000024 	.word	0x20000024

0800a5bc <__ssputs_r>:
 800a5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c0:	688e      	ldr	r6, [r1, #8]
 800a5c2:	429e      	cmp	r6, r3
 800a5c4:	4682      	mov	sl, r0
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	4690      	mov	r8, r2
 800a5ca:	461f      	mov	r7, r3
 800a5cc:	d838      	bhi.n	800a640 <__ssputs_r+0x84>
 800a5ce:	898a      	ldrh	r2, [r1, #12]
 800a5d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5d4:	d032      	beq.n	800a63c <__ssputs_r+0x80>
 800a5d6:	6825      	ldr	r5, [r4, #0]
 800a5d8:	6909      	ldr	r1, [r1, #16]
 800a5da:	eba5 0901 	sub.w	r9, r5, r1
 800a5de:	6965      	ldr	r5, [r4, #20]
 800a5e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	444b      	add	r3, r9
 800a5ec:	106d      	asrs	r5, r5, #1
 800a5ee:	429d      	cmp	r5, r3
 800a5f0:	bf38      	it	cc
 800a5f2:	461d      	movcc	r5, r3
 800a5f4:	0553      	lsls	r3, r2, #21
 800a5f6:	d531      	bpl.n	800a65c <__ssputs_r+0xa0>
 800a5f8:	4629      	mov	r1, r5
 800a5fa:	f000 fb55 	bl	800aca8 <_malloc_r>
 800a5fe:	4606      	mov	r6, r0
 800a600:	b950      	cbnz	r0, 800a618 <__ssputs_r+0x5c>
 800a602:	230c      	movs	r3, #12
 800a604:	f8ca 3000 	str.w	r3, [sl]
 800a608:	89a3      	ldrh	r3, [r4, #12]
 800a60a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a60e:	81a3      	strh	r3, [r4, #12]
 800a610:	f04f 30ff 	mov.w	r0, #4294967295
 800a614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a618:	6921      	ldr	r1, [r4, #16]
 800a61a:	464a      	mov	r2, r9
 800a61c:	f7ff febe 	bl	800a39c <memcpy>
 800a620:	89a3      	ldrh	r3, [r4, #12]
 800a622:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a62a:	81a3      	strh	r3, [r4, #12]
 800a62c:	6126      	str	r6, [r4, #16]
 800a62e:	6165      	str	r5, [r4, #20]
 800a630:	444e      	add	r6, r9
 800a632:	eba5 0509 	sub.w	r5, r5, r9
 800a636:	6026      	str	r6, [r4, #0]
 800a638:	60a5      	str	r5, [r4, #8]
 800a63a:	463e      	mov	r6, r7
 800a63c:	42be      	cmp	r6, r7
 800a63e:	d900      	bls.n	800a642 <__ssputs_r+0x86>
 800a640:	463e      	mov	r6, r7
 800a642:	6820      	ldr	r0, [r4, #0]
 800a644:	4632      	mov	r2, r6
 800a646:	4641      	mov	r1, r8
 800a648:	f000 faa8 	bl	800ab9c <memmove>
 800a64c:	68a3      	ldr	r3, [r4, #8]
 800a64e:	1b9b      	subs	r3, r3, r6
 800a650:	60a3      	str	r3, [r4, #8]
 800a652:	6823      	ldr	r3, [r4, #0]
 800a654:	4433      	add	r3, r6
 800a656:	6023      	str	r3, [r4, #0]
 800a658:	2000      	movs	r0, #0
 800a65a:	e7db      	b.n	800a614 <__ssputs_r+0x58>
 800a65c:	462a      	mov	r2, r5
 800a65e:	f000 fb97 	bl	800ad90 <_realloc_r>
 800a662:	4606      	mov	r6, r0
 800a664:	2800      	cmp	r0, #0
 800a666:	d1e1      	bne.n	800a62c <__ssputs_r+0x70>
 800a668:	6921      	ldr	r1, [r4, #16]
 800a66a:	4650      	mov	r0, sl
 800a66c:	f000 fab0 	bl	800abd0 <_free_r>
 800a670:	e7c7      	b.n	800a602 <__ssputs_r+0x46>
	...

0800a674 <_svfiprintf_r>:
 800a674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a678:	4698      	mov	r8, r3
 800a67a:	898b      	ldrh	r3, [r1, #12]
 800a67c:	061b      	lsls	r3, r3, #24
 800a67e:	b09d      	sub	sp, #116	; 0x74
 800a680:	4607      	mov	r7, r0
 800a682:	460d      	mov	r5, r1
 800a684:	4614      	mov	r4, r2
 800a686:	d50e      	bpl.n	800a6a6 <_svfiprintf_r+0x32>
 800a688:	690b      	ldr	r3, [r1, #16]
 800a68a:	b963      	cbnz	r3, 800a6a6 <_svfiprintf_r+0x32>
 800a68c:	2140      	movs	r1, #64	; 0x40
 800a68e:	f000 fb0b 	bl	800aca8 <_malloc_r>
 800a692:	6028      	str	r0, [r5, #0]
 800a694:	6128      	str	r0, [r5, #16]
 800a696:	b920      	cbnz	r0, 800a6a2 <_svfiprintf_r+0x2e>
 800a698:	230c      	movs	r3, #12
 800a69a:	603b      	str	r3, [r7, #0]
 800a69c:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a0:	e0d1      	b.n	800a846 <_svfiprintf_r+0x1d2>
 800a6a2:	2340      	movs	r3, #64	; 0x40
 800a6a4:	616b      	str	r3, [r5, #20]
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a6aa:	2320      	movs	r3, #32
 800a6ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6b4:	2330      	movs	r3, #48	; 0x30
 800a6b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a860 <_svfiprintf_r+0x1ec>
 800a6ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6be:	f04f 0901 	mov.w	r9, #1
 800a6c2:	4623      	mov	r3, r4
 800a6c4:	469a      	mov	sl, r3
 800a6c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6ca:	b10a      	cbz	r2, 800a6d0 <_svfiprintf_r+0x5c>
 800a6cc:	2a25      	cmp	r2, #37	; 0x25
 800a6ce:	d1f9      	bne.n	800a6c4 <_svfiprintf_r+0x50>
 800a6d0:	ebba 0b04 	subs.w	fp, sl, r4
 800a6d4:	d00b      	beq.n	800a6ee <_svfiprintf_r+0x7a>
 800a6d6:	465b      	mov	r3, fp
 800a6d8:	4622      	mov	r2, r4
 800a6da:	4629      	mov	r1, r5
 800a6dc:	4638      	mov	r0, r7
 800a6de:	f7ff ff6d 	bl	800a5bc <__ssputs_r>
 800a6e2:	3001      	adds	r0, #1
 800a6e4:	f000 80aa 	beq.w	800a83c <_svfiprintf_r+0x1c8>
 800a6e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6ea:	445a      	add	r2, fp
 800a6ec:	9209      	str	r2, [sp, #36]	; 0x24
 800a6ee:	f89a 3000 	ldrb.w	r3, [sl]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	f000 80a2 	beq.w	800a83c <_svfiprintf_r+0x1c8>
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a6fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a702:	f10a 0a01 	add.w	sl, sl, #1
 800a706:	9304      	str	r3, [sp, #16]
 800a708:	9307      	str	r3, [sp, #28]
 800a70a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a70e:	931a      	str	r3, [sp, #104]	; 0x68
 800a710:	4654      	mov	r4, sl
 800a712:	2205      	movs	r2, #5
 800a714:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a718:	4851      	ldr	r0, [pc, #324]	; (800a860 <_svfiprintf_r+0x1ec>)
 800a71a:	f7f5 fd69 	bl	80001f0 <memchr>
 800a71e:	9a04      	ldr	r2, [sp, #16]
 800a720:	b9d8      	cbnz	r0, 800a75a <_svfiprintf_r+0xe6>
 800a722:	06d0      	lsls	r0, r2, #27
 800a724:	bf44      	itt	mi
 800a726:	2320      	movmi	r3, #32
 800a728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a72c:	0711      	lsls	r1, r2, #28
 800a72e:	bf44      	itt	mi
 800a730:	232b      	movmi	r3, #43	; 0x2b
 800a732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a736:	f89a 3000 	ldrb.w	r3, [sl]
 800a73a:	2b2a      	cmp	r3, #42	; 0x2a
 800a73c:	d015      	beq.n	800a76a <_svfiprintf_r+0xf6>
 800a73e:	9a07      	ldr	r2, [sp, #28]
 800a740:	4654      	mov	r4, sl
 800a742:	2000      	movs	r0, #0
 800a744:	f04f 0c0a 	mov.w	ip, #10
 800a748:	4621      	mov	r1, r4
 800a74a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a74e:	3b30      	subs	r3, #48	; 0x30
 800a750:	2b09      	cmp	r3, #9
 800a752:	d94e      	bls.n	800a7f2 <_svfiprintf_r+0x17e>
 800a754:	b1b0      	cbz	r0, 800a784 <_svfiprintf_r+0x110>
 800a756:	9207      	str	r2, [sp, #28]
 800a758:	e014      	b.n	800a784 <_svfiprintf_r+0x110>
 800a75a:	eba0 0308 	sub.w	r3, r0, r8
 800a75e:	fa09 f303 	lsl.w	r3, r9, r3
 800a762:	4313      	orrs	r3, r2
 800a764:	9304      	str	r3, [sp, #16]
 800a766:	46a2      	mov	sl, r4
 800a768:	e7d2      	b.n	800a710 <_svfiprintf_r+0x9c>
 800a76a:	9b03      	ldr	r3, [sp, #12]
 800a76c:	1d19      	adds	r1, r3, #4
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	9103      	str	r1, [sp, #12]
 800a772:	2b00      	cmp	r3, #0
 800a774:	bfbb      	ittet	lt
 800a776:	425b      	neglt	r3, r3
 800a778:	f042 0202 	orrlt.w	r2, r2, #2
 800a77c:	9307      	strge	r3, [sp, #28]
 800a77e:	9307      	strlt	r3, [sp, #28]
 800a780:	bfb8      	it	lt
 800a782:	9204      	strlt	r2, [sp, #16]
 800a784:	7823      	ldrb	r3, [r4, #0]
 800a786:	2b2e      	cmp	r3, #46	; 0x2e
 800a788:	d10c      	bne.n	800a7a4 <_svfiprintf_r+0x130>
 800a78a:	7863      	ldrb	r3, [r4, #1]
 800a78c:	2b2a      	cmp	r3, #42	; 0x2a
 800a78e:	d135      	bne.n	800a7fc <_svfiprintf_r+0x188>
 800a790:	9b03      	ldr	r3, [sp, #12]
 800a792:	1d1a      	adds	r2, r3, #4
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	9203      	str	r2, [sp, #12]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	bfb8      	it	lt
 800a79c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7a0:	3402      	adds	r4, #2
 800a7a2:	9305      	str	r3, [sp, #20]
 800a7a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a870 <_svfiprintf_r+0x1fc>
 800a7a8:	7821      	ldrb	r1, [r4, #0]
 800a7aa:	2203      	movs	r2, #3
 800a7ac:	4650      	mov	r0, sl
 800a7ae:	f7f5 fd1f 	bl	80001f0 <memchr>
 800a7b2:	b140      	cbz	r0, 800a7c6 <_svfiprintf_r+0x152>
 800a7b4:	2340      	movs	r3, #64	; 0x40
 800a7b6:	eba0 000a 	sub.w	r0, r0, sl
 800a7ba:	fa03 f000 	lsl.w	r0, r3, r0
 800a7be:	9b04      	ldr	r3, [sp, #16]
 800a7c0:	4303      	orrs	r3, r0
 800a7c2:	3401      	adds	r4, #1
 800a7c4:	9304      	str	r3, [sp, #16]
 800a7c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ca:	4826      	ldr	r0, [pc, #152]	; (800a864 <_svfiprintf_r+0x1f0>)
 800a7cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7d0:	2206      	movs	r2, #6
 800a7d2:	f7f5 fd0d 	bl	80001f0 <memchr>
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	d038      	beq.n	800a84c <_svfiprintf_r+0x1d8>
 800a7da:	4b23      	ldr	r3, [pc, #140]	; (800a868 <_svfiprintf_r+0x1f4>)
 800a7dc:	bb1b      	cbnz	r3, 800a826 <_svfiprintf_r+0x1b2>
 800a7de:	9b03      	ldr	r3, [sp, #12]
 800a7e0:	3307      	adds	r3, #7
 800a7e2:	f023 0307 	bic.w	r3, r3, #7
 800a7e6:	3308      	adds	r3, #8
 800a7e8:	9303      	str	r3, [sp, #12]
 800a7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ec:	4433      	add	r3, r6
 800a7ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a7f0:	e767      	b.n	800a6c2 <_svfiprintf_r+0x4e>
 800a7f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7f6:	460c      	mov	r4, r1
 800a7f8:	2001      	movs	r0, #1
 800a7fa:	e7a5      	b.n	800a748 <_svfiprintf_r+0xd4>
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	3401      	adds	r4, #1
 800a800:	9305      	str	r3, [sp, #20]
 800a802:	4619      	mov	r1, r3
 800a804:	f04f 0c0a 	mov.w	ip, #10
 800a808:	4620      	mov	r0, r4
 800a80a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a80e:	3a30      	subs	r2, #48	; 0x30
 800a810:	2a09      	cmp	r2, #9
 800a812:	d903      	bls.n	800a81c <_svfiprintf_r+0x1a8>
 800a814:	2b00      	cmp	r3, #0
 800a816:	d0c5      	beq.n	800a7a4 <_svfiprintf_r+0x130>
 800a818:	9105      	str	r1, [sp, #20]
 800a81a:	e7c3      	b.n	800a7a4 <_svfiprintf_r+0x130>
 800a81c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a820:	4604      	mov	r4, r0
 800a822:	2301      	movs	r3, #1
 800a824:	e7f0      	b.n	800a808 <_svfiprintf_r+0x194>
 800a826:	ab03      	add	r3, sp, #12
 800a828:	9300      	str	r3, [sp, #0]
 800a82a:	462a      	mov	r2, r5
 800a82c:	4b0f      	ldr	r3, [pc, #60]	; (800a86c <_svfiprintf_r+0x1f8>)
 800a82e:	a904      	add	r1, sp, #16
 800a830:	4638      	mov	r0, r7
 800a832:	f3af 8000 	nop.w
 800a836:	1c42      	adds	r2, r0, #1
 800a838:	4606      	mov	r6, r0
 800a83a:	d1d6      	bne.n	800a7ea <_svfiprintf_r+0x176>
 800a83c:	89ab      	ldrh	r3, [r5, #12]
 800a83e:	065b      	lsls	r3, r3, #25
 800a840:	f53f af2c 	bmi.w	800a69c <_svfiprintf_r+0x28>
 800a844:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a846:	b01d      	add	sp, #116	; 0x74
 800a848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a84c:	ab03      	add	r3, sp, #12
 800a84e:	9300      	str	r3, [sp, #0]
 800a850:	462a      	mov	r2, r5
 800a852:	4b06      	ldr	r3, [pc, #24]	; (800a86c <_svfiprintf_r+0x1f8>)
 800a854:	a904      	add	r1, sp, #16
 800a856:	4638      	mov	r0, r7
 800a858:	f000 f87a 	bl	800a950 <_printf_i>
 800a85c:	e7eb      	b.n	800a836 <_svfiprintf_r+0x1c2>
 800a85e:	bf00      	nop
 800a860:	0800b5bd 	.word	0x0800b5bd
 800a864:	0800b5c7 	.word	0x0800b5c7
 800a868:	00000000 	.word	0x00000000
 800a86c:	0800a5bd 	.word	0x0800a5bd
 800a870:	0800b5c3 	.word	0x0800b5c3

0800a874 <_printf_common>:
 800a874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a878:	4616      	mov	r6, r2
 800a87a:	4699      	mov	r9, r3
 800a87c:	688a      	ldr	r2, [r1, #8]
 800a87e:	690b      	ldr	r3, [r1, #16]
 800a880:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a884:	4293      	cmp	r3, r2
 800a886:	bfb8      	it	lt
 800a888:	4613      	movlt	r3, r2
 800a88a:	6033      	str	r3, [r6, #0]
 800a88c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a890:	4607      	mov	r7, r0
 800a892:	460c      	mov	r4, r1
 800a894:	b10a      	cbz	r2, 800a89a <_printf_common+0x26>
 800a896:	3301      	adds	r3, #1
 800a898:	6033      	str	r3, [r6, #0]
 800a89a:	6823      	ldr	r3, [r4, #0]
 800a89c:	0699      	lsls	r1, r3, #26
 800a89e:	bf42      	ittt	mi
 800a8a0:	6833      	ldrmi	r3, [r6, #0]
 800a8a2:	3302      	addmi	r3, #2
 800a8a4:	6033      	strmi	r3, [r6, #0]
 800a8a6:	6825      	ldr	r5, [r4, #0]
 800a8a8:	f015 0506 	ands.w	r5, r5, #6
 800a8ac:	d106      	bne.n	800a8bc <_printf_common+0x48>
 800a8ae:	f104 0a19 	add.w	sl, r4, #25
 800a8b2:	68e3      	ldr	r3, [r4, #12]
 800a8b4:	6832      	ldr	r2, [r6, #0]
 800a8b6:	1a9b      	subs	r3, r3, r2
 800a8b8:	42ab      	cmp	r3, r5
 800a8ba:	dc26      	bgt.n	800a90a <_printf_common+0x96>
 800a8bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a8c0:	1e13      	subs	r3, r2, #0
 800a8c2:	6822      	ldr	r2, [r4, #0]
 800a8c4:	bf18      	it	ne
 800a8c6:	2301      	movne	r3, #1
 800a8c8:	0692      	lsls	r2, r2, #26
 800a8ca:	d42b      	bmi.n	800a924 <_printf_common+0xb0>
 800a8cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a8d0:	4649      	mov	r1, r9
 800a8d2:	4638      	mov	r0, r7
 800a8d4:	47c0      	blx	r8
 800a8d6:	3001      	adds	r0, #1
 800a8d8:	d01e      	beq.n	800a918 <_printf_common+0xa4>
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	68e5      	ldr	r5, [r4, #12]
 800a8de:	6832      	ldr	r2, [r6, #0]
 800a8e0:	f003 0306 	and.w	r3, r3, #6
 800a8e4:	2b04      	cmp	r3, #4
 800a8e6:	bf08      	it	eq
 800a8e8:	1aad      	subeq	r5, r5, r2
 800a8ea:	68a3      	ldr	r3, [r4, #8]
 800a8ec:	6922      	ldr	r2, [r4, #16]
 800a8ee:	bf0c      	ite	eq
 800a8f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8f4:	2500      	movne	r5, #0
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	bfc4      	itt	gt
 800a8fa:	1a9b      	subgt	r3, r3, r2
 800a8fc:	18ed      	addgt	r5, r5, r3
 800a8fe:	2600      	movs	r6, #0
 800a900:	341a      	adds	r4, #26
 800a902:	42b5      	cmp	r5, r6
 800a904:	d11a      	bne.n	800a93c <_printf_common+0xc8>
 800a906:	2000      	movs	r0, #0
 800a908:	e008      	b.n	800a91c <_printf_common+0xa8>
 800a90a:	2301      	movs	r3, #1
 800a90c:	4652      	mov	r2, sl
 800a90e:	4649      	mov	r1, r9
 800a910:	4638      	mov	r0, r7
 800a912:	47c0      	blx	r8
 800a914:	3001      	adds	r0, #1
 800a916:	d103      	bne.n	800a920 <_printf_common+0xac>
 800a918:	f04f 30ff 	mov.w	r0, #4294967295
 800a91c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a920:	3501      	adds	r5, #1
 800a922:	e7c6      	b.n	800a8b2 <_printf_common+0x3e>
 800a924:	18e1      	adds	r1, r4, r3
 800a926:	1c5a      	adds	r2, r3, #1
 800a928:	2030      	movs	r0, #48	; 0x30
 800a92a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a92e:	4422      	add	r2, r4
 800a930:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a934:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a938:	3302      	adds	r3, #2
 800a93a:	e7c7      	b.n	800a8cc <_printf_common+0x58>
 800a93c:	2301      	movs	r3, #1
 800a93e:	4622      	mov	r2, r4
 800a940:	4649      	mov	r1, r9
 800a942:	4638      	mov	r0, r7
 800a944:	47c0      	blx	r8
 800a946:	3001      	adds	r0, #1
 800a948:	d0e6      	beq.n	800a918 <_printf_common+0xa4>
 800a94a:	3601      	adds	r6, #1
 800a94c:	e7d9      	b.n	800a902 <_printf_common+0x8e>
	...

0800a950 <_printf_i>:
 800a950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a954:	7e0f      	ldrb	r7, [r1, #24]
 800a956:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a958:	2f78      	cmp	r7, #120	; 0x78
 800a95a:	4691      	mov	r9, r2
 800a95c:	4680      	mov	r8, r0
 800a95e:	460c      	mov	r4, r1
 800a960:	469a      	mov	sl, r3
 800a962:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a966:	d807      	bhi.n	800a978 <_printf_i+0x28>
 800a968:	2f62      	cmp	r7, #98	; 0x62
 800a96a:	d80a      	bhi.n	800a982 <_printf_i+0x32>
 800a96c:	2f00      	cmp	r7, #0
 800a96e:	f000 80d8 	beq.w	800ab22 <_printf_i+0x1d2>
 800a972:	2f58      	cmp	r7, #88	; 0x58
 800a974:	f000 80a3 	beq.w	800aabe <_printf_i+0x16e>
 800a978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a97c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a980:	e03a      	b.n	800a9f8 <_printf_i+0xa8>
 800a982:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a986:	2b15      	cmp	r3, #21
 800a988:	d8f6      	bhi.n	800a978 <_printf_i+0x28>
 800a98a:	a101      	add	r1, pc, #4	; (adr r1, 800a990 <_printf_i+0x40>)
 800a98c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a990:	0800a9e9 	.word	0x0800a9e9
 800a994:	0800a9fd 	.word	0x0800a9fd
 800a998:	0800a979 	.word	0x0800a979
 800a99c:	0800a979 	.word	0x0800a979
 800a9a0:	0800a979 	.word	0x0800a979
 800a9a4:	0800a979 	.word	0x0800a979
 800a9a8:	0800a9fd 	.word	0x0800a9fd
 800a9ac:	0800a979 	.word	0x0800a979
 800a9b0:	0800a979 	.word	0x0800a979
 800a9b4:	0800a979 	.word	0x0800a979
 800a9b8:	0800a979 	.word	0x0800a979
 800a9bc:	0800ab09 	.word	0x0800ab09
 800a9c0:	0800aa2d 	.word	0x0800aa2d
 800a9c4:	0800aaeb 	.word	0x0800aaeb
 800a9c8:	0800a979 	.word	0x0800a979
 800a9cc:	0800a979 	.word	0x0800a979
 800a9d0:	0800ab2b 	.word	0x0800ab2b
 800a9d4:	0800a979 	.word	0x0800a979
 800a9d8:	0800aa2d 	.word	0x0800aa2d
 800a9dc:	0800a979 	.word	0x0800a979
 800a9e0:	0800a979 	.word	0x0800a979
 800a9e4:	0800aaf3 	.word	0x0800aaf3
 800a9e8:	682b      	ldr	r3, [r5, #0]
 800a9ea:	1d1a      	adds	r2, r3, #4
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	602a      	str	r2, [r5, #0]
 800a9f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	e0a3      	b.n	800ab44 <_printf_i+0x1f4>
 800a9fc:	6820      	ldr	r0, [r4, #0]
 800a9fe:	6829      	ldr	r1, [r5, #0]
 800aa00:	0606      	lsls	r6, r0, #24
 800aa02:	f101 0304 	add.w	r3, r1, #4
 800aa06:	d50a      	bpl.n	800aa1e <_printf_i+0xce>
 800aa08:	680e      	ldr	r6, [r1, #0]
 800aa0a:	602b      	str	r3, [r5, #0]
 800aa0c:	2e00      	cmp	r6, #0
 800aa0e:	da03      	bge.n	800aa18 <_printf_i+0xc8>
 800aa10:	232d      	movs	r3, #45	; 0x2d
 800aa12:	4276      	negs	r6, r6
 800aa14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa18:	485e      	ldr	r0, [pc, #376]	; (800ab94 <_printf_i+0x244>)
 800aa1a:	230a      	movs	r3, #10
 800aa1c:	e019      	b.n	800aa52 <_printf_i+0x102>
 800aa1e:	680e      	ldr	r6, [r1, #0]
 800aa20:	602b      	str	r3, [r5, #0]
 800aa22:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aa26:	bf18      	it	ne
 800aa28:	b236      	sxthne	r6, r6
 800aa2a:	e7ef      	b.n	800aa0c <_printf_i+0xbc>
 800aa2c:	682b      	ldr	r3, [r5, #0]
 800aa2e:	6820      	ldr	r0, [r4, #0]
 800aa30:	1d19      	adds	r1, r3, #4
 800aa32:	6029      	str	r1, [r5, #0]
 800aa34:	0601      	lsls	r1, r0, #24
 800aa36:	d501      	bpl.n	800aa3c <_printf_i+0xec>
 800aa38:	681e      	ldr	r6, [r3, #0]
 800aa3a:	e002      	b.n	800aa42 <_printf_i+0xf2>
 800aa3c:	0646      	lsls	r6, r0, #25
 800aa3e:	d5fb      	bpl.n	800aa38 <_printf_i+0xe8>
 800aa40:	881e      	ldrh	r6, [r3, #0]
 800aa42:	4854      	ldr	r0, [pc, #336]	; (800ab94 <_printf_i+0x244>)
 800aa44:	2f6f      	cmp	r7, #111	; 0x6f
 800aa46:	bf0c      	ite	eq
 800aa48:	2308      	moveq	r3, #8
 800aa4a:	230a      	movne	r3, #10
 800aa4c:	2100      	movs	r1, #0
 800aa4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa52:	6865      	ldr	r5, [r4, #4]
 800aa54:	60a5      	str	r5, [r4, #8]
 800aa56:	2d00      	cmp	r5, #0
 800aa58:	bfa2      	ittt	ge
 800aa5a:	6821      	ldrge	r1, [r4, #0]
 800aa5c:	f021 0104 	bicge.w	r1, r1, #4
 800aa60:	6021      	strge	r1, [r4, #0]
 800aa62:	b90e      	cbnz	r6, 800aa68 <_printf_i+0x118>
 800aa64:	2d00      	cmp	r5, #0
 800aa66:	d04d      	beq.n	800ab04 <_printf_i+0x1b4>
 800aa68:	4615      	mov	r5, r2
 800aa6a:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa6e:	fb03 6711 	mls	r7, r3, r1, r6
 800aa72:	5dc7      	ldrb	r7, [r0, r7]
 800aa74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa78:	4637      	mov	r7, r6
 800aa7a:	42bb      	cmp	r3, r7
 800aa7c:	460e      	mov	r6, r1
 800aa7e:	d9f4      	bls.n	800aa6a <_printf_i+0x11a>
 800aa80:	2b08      	cmp	r3, #8
 800aa82:	d10b      	bne.n	800aa9c <_printf_i+0x14c>
 800aa84:	6823      	ldr	r3, [r4, #0]
 800aa86:	07de      	lsls	r6, r3, #31
 800aa88:	d508      	bpl.n	800aa9c <_printf_i+0x14c>
 800aa8a:	6923      	ldr	r3, [r4, #16]
 800aa8c:	6861      	ldr	r1, [r4, #4]
 800aa8e:	4299      	cmp	r1, r3
 800aa90:	bfde      	ittt	le
 800aa92:	2330      	movle	r3, #48	; 0x30
 800aa94:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa98:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa9c:	1b52      	subs	r2, r2, r5
 800aa9e:	6122      	str	r2, [r4, #16]
 800aaa0:	f8cd a000 	str.w	sl, [sp]
 800aaa4:	464b      	mov	r3, r9
 800aaa6:	aa03      	add	r2, sp, #12
 800aaa8:	4621      	mov	r1, r4
 800aaaa:	4640      	mov	r0, r8
 800aaac:	f7ff fee2 	bl	800a874 <_printf_common>
 800aab0:	3001      	adds	r0, #1
 800aab2:	d14c      	bne.n	800ab4e <_printf_i+0x1fe>
 800aab4:	f04f 30ff 	mov.w	r0, #4294967295
 800aab8:	b004      	add	sp, #16
 800aaba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aabe:	4835      	ldr	r0, [pc, #212]	; (800ab94 <_printf_i+0x244>)
 800aac0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aac4:	6829      	ldr	r1, [r5, #0]
 800aac6:	6823      	ldr	r3, [r4, #0]
 800aac8:	f851 6b04 	ldr.w	r6, [r1], #4
 800aacc:	6029      	str	r1, [r5, #0]
 800aace:	061d      	lsls	r5, r3, #24
 800aad0:	d514      	bpl.n	800aafc <_printf_i+0x1ac>
 800aad2:	07df      	lsls	r7, r3, #31
 800aad4:	bf44      	itt	mi
 800aad6:	f043 0320 	orrmi.w	r3, r3, #32
 800aada:	6023      	strmi	r3, [r4, #0]
 800aadc:	b91e      	cbnz	r6, 800aae6 <_printf_i+0x196>
 800aade:	6823      	ldr	r3, [r4, #0]
 800aae0:	f023 0320 	bic.w	r3, r3, #32
 800aae4:	6023      	str	r3, [r4, #0]
 800aae6:	2310      	movs	r3, #16
 800aae8:	e7b0      	b.n	800aa4c <_printf_i+0xfc>
 800aaea:	6823      	ldr	r3, [r4, #0]
 800aaec:	f043 0320 	orr.w	r3, r3, #32
 800aaf0:	6023      	str	r3, [r4, #0]
 800aaf2:	2378      	movs	r3, #120	; 0x78
 800aaf4:	4828      	ldr	r0, [pc, #160]	; (800ab98 <_printf_i+0x248>)
 800aaf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aafa:	e7e3      	b.n	800aac4 <_printf_i+0x174>
 800aafc:	0659      	lsls	r1, r3, #25
 800aafe:	bf48      	it	mi
 800ab00:	b2b6      	uxthmi	r6, r6
 800ab02:	e7e6      	b.n	800aad2 <_printf_i+0x182>
 800ab04:	4615      	mov	r5, r2
 800ab06:	e7bb      	b.n	800aa80 <_printf_i+0x130>
 800ab08:	682b      	ldr	r3, [r5, #0]
 800ab0a:	6826      	ldr	r6, [r4, #0]
 800ab0c:	6961      	ldr	r1, [r4, #20]
 800ab0e:	1d18      	adds	r0, r3, #4
 800ab10:	6028      	str	r0, [r5, #0]
 800ab12:	0635      	lsls	r5, r6, #24
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	d501      	bpl.n	800ab1c <_printf_i+0x1cc>
 800ab18:	6019      	str	r1, [r3, #0]
 800ab1a:	e002      	b.n	800ab22 <_printf_i+0x1d2>
 800ab1c:	0670      	lsls	r0, r6, #25
 800ab1e:	d5fb      	bpl.n	800ab18 <_printf_i+0x1c8>
 800ab20:	8019      	strh	r1, [r3, #0]
 800ab22:	2300      	movs	r3, #0
 800ab24:	6123      	str	r3, [r4, #16]
 800ab26:	4615      	mov	r5, r2
 800ab28:	e7ba      	b.n	800aaa0 <_printf_i+0x150>
 800ab2a:	682b      	ldr	r3, [r5, #0]
 800ab2c:	1d1a      	adds	r2, r3, #4
 800ab2e:	602a      	str	r2, [r5, #0]
 800ab30:	681d      	ldr	r5, [r3, #0]
 800ab32:	6862      	ldr	r2, [r4, #4]
 800ab34:	2100      	movs	r1, #0
 800ab36:	4628      	mov	r0, r5
 800ab38:	f7f5 fb5a 	bl	80001f0 <memchr>
 800ab3c:	b108      	cbz	r0, 800ab42 <_printf_i+0x1f2>
 800ab3e:	1b40      	subs	r0, r0, r5
 800ab40:	6060      	str	r0, [r4, #4]
 800ab42:	6863      	ldr	r3, [r4, #4]
 800ab44:	6123      	str	r3, [r4, #16]
 800ab46:	2300      	movs	r3, #0
 800ab48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab4c:	e7a8      	b.n	800aaa0 <_printf_i+0x150>
 800ab4e:	6923      	ldr	r3, [r4, #16]
 800ab50:	462a      	mov	r2, r5
 800ab52:	4649      	mov	r1, r9
 800ab54:	4640      	mov	r0, r8
 800ab56:	47d0      	blx	sl
 800ab58:	3001      	adds	r0, #1
 800ab5a:	d0ab      	beq.n	800aab4 <_printf_i+0x164>
 800ab5c:	6823      	ldr	r3, [r4, #0]
 800ab5e:	079b      	lsls	r3, r3, #30
 800ab60:	d413      	bmi.n	800ab8a <_printf_i+0x23a>
 800ab62:	68e0      	ldr	r0, [r4, #12]
 800ab64:	9b03      	ldr	r3, [sp, #12]
 800ab66:	4298      	cmp	r0, r3
 800ab68:	bfb8      	it	lt
 800ab6a:	4618      	movlt	r0, r3
 800ab6c:	e7a4      	b.n	800aab8 <_printf_i+0x168>
 800ab6e:	2301      	movs	r3, #1
 800ab70:	4632      	mov	r2, r6
 800ab72:	4649      	mov	r1, r9
 800ab74:	4640      	mov	r0, r8
 800ab76:	47d0      	blx	sl
 800ab78:	3001      	adds	r0, #1
 800ab7a:	d09b      	beq.n	800aab4 <_printf_i+0x164>
 800ab7c:	3501      	adds	r5, #1
 800ab7e:	68e3      	ldr	r3, [r4, #12]
 800ab80:	9903      	ldr	r1, [sp, #12]
 800ab82:	1a5b      	subs	r3, r3, r1
 800ab84:	42ab      	cmp	r3, r5
 800ab86:	dcf2      	bgt.n	800ab6e <_printf_i+0x21e>
 800ab88:	e7eb      	b.n	800ab62 <_printf_i+0x212>
 800ab8a:	2500      	movs	r5, #0
 800ab8c:	f104 0619 	add.w	r6, r4, #25
 800ab90:	e7f5      	b.n	800ab7e <_printf_i+0x22e>
 800ab92:	bf00      	nop
 800ab94:	0800b5ce 	.word	0x0800b5ce
 800ab98:	0800b5df 	.word	0x0800b5df

0800ab9c <memmove>:
 800ab9c:	4288      	cmp	r0, r1
 800ab9e:	b510      	push	{r4, lr}
 800aba0:	eb01 0402 	add.w	r4, r1, r2
 800aba4:	d902      	bls.n	800abac <memmove+0x10>
 800aba6:	4284      	cmp	r4, r0
 800aba8:	4623      	mov	r3, r4
 800abaa:	d807      	bhi.n	800abbc <memmove+0x20>
 800abac:	1e43      	subs	r3, r0, #1
 800abae:	42a1      	cmp	r1, r4
 800abb0:	d008      	beq.n	800abc4 <memmove+0x28>
 800abb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abba:	e7f8      	b.n	800abae <memmove+0x12>
 800abbc:	4402      	add	r2, r0
 800abbe:	4601      	mov	r1, r0
 800abc0:	428a      	cmp	r2, r1
 800abc2:	d100      	bne.n	800abc6 <memmove+0x2a>
 800abc4:	bd10      	pop	{r4, pc}
 800abc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800abce:	e7f7      	b.n	800abc0 <memmove+0x24>

0800abd0 <_free_r>:
 800abd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abd2:	2900      	cmp	r1, #0
 800abd4:	d044      	beq.n	800ac60 <_free_r+0x90>
 800abd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abda:	9001      	str	r0, [sp, #4]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	f1a1 0404 	sub.w	r4, r1, #4
 800abe2:	bfb8      	it	lt
 800abe4:	18e4      	addlt	r4, r4, r3
 800abe6:	f000 f913 	bl	800ae10 <__malloc_lock>
 800abea:	4a1e      	ldr	r2, [pc, #120]	; (800ac64 <_free_r+0x94>)
 800abec:	9801      	ldr	r0, [sp, #4]
 800abee:	6813      	ldr	r3, [r2, #0]
 800abf0:	b933      	cbnz	r3, 800ac00 <_free_r+0x30>
 800abf2:	6063      	str	r3, [r4, #4]
 800abf4:	6014      	str	r4, [r2, #0]
 800abf6:	b003      	add	sp, #12
 800abf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abfc:	f000 b90e 	b.w	800ae1c <__malloc_unlock>
 800ac00:	42a3      	cmp	r3, r4
 800ac02:	d908      	bls.n	800ac16 <_free_r+0x46>
 800ac04:	6825      	ldr	r5, [r4, #0]
 800ac06:	1961      	adds	r1, r4, r5
 800ac08:	428b      	cmp	r3, r1
 800ac0a:	bf01      	itttt	eq
 800ac0c:	6819      	ldreq	r1, [r3, #0]
 800ac0e:	685b      	ldreq	r3, [r3, #4]
 800ac10:	1949      	addeq	r1, r1, r5
 800ac12:	6021      	streq	r1, [r4, #0]
 800ac14:	e7ed      	b.n	800abf2 <_free_r+0x22>
 800ac16:	461a      	mov	r2, r3
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	b10b      	cbz	r3, 800ac20 <_free_r+0x50>
 800ac1c:	42a3      	cmp	r3, r4
 800ac1e:	d9fa      	bls.n	800ac16 <_free_r+0x46>
 800ac20:	6811      	ldr	r1, [r2, #0]
 800ac22:	1855      	adds	r5, r2, r1
 800ac24:	42a5      	cmp	r5, r4
 800ac26:	d10b      	bne.n	800ac40 <_free_r+0x70>
 800ac28:	6824      	ldr	r4, [r4, #0]
 800ac2a:	4421      	add	r1, r4
 800ac2c:	1854      	adds	r4, r2, r1
 800ac2e:	42a3      	cmp	r3, r4
 800ac30:	6011      	str	r1, [r2, #0]
 800ac32:	d1e0      	bne.n	800abf6 <_free_r+0x26>
 800ac34:	681c      	ldr	r4, [r3, #0]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	6053      	str	r3, [r2, #4]
 800ac3a:	4421      	add	r1, r4
 800ac3c:	6011      	str	r1, [r2, #0]
 800ac3e:	e7da      	b.n	800abf6 <_free_r+0x26>
 800ac40:	d902      	bls.n	800ac48 <_free_r+0x78>
 800ac42:	230c      	movs	r3, #12
 800ac44:	6003      	str	r3, [r0, #0]
 800ac46:	e7d6      	b.n	800abf6 <_free_r+0x26>
 800ac48:	6825      	ldr	r5, [r4, #0]
 800ac4a:	1961      	adds	r1, r4, r5
 800ac4c:	428b      	cmp	r3, r1
 800ac4e:	bf04      	itt	eq
 800ac50:	6819      	ldreq	r1, [r3, #0]
 800ac52:	685b      	ldreq	r3, [r3, #4]
 800ac54:	6063      	str	r3, [r4, #4]
 800ac56:	bf04      	itt	eq
 800ac58:	1949      	addeq	r1, r1, r5
 800ac5a:	6021      	streq	r1, [r4, #0]
 800ac5c:	6054      	str	r4, [r2, #4]
 800ac5e:	e7ca      	b.n	800abf6 <_free_r+0x26>
 800ac60:	b003      	add	sp, #12
 800ac62:	bd30      	pop	{r4, r5, pc}
 800ac64:	20001e84 	.word	0x20001e84

0800ac68 <sbrk_aligned>:
 800ac68:	b570      	push	{r4, r5, r6, lr}
 800ac6a:	4e0e      	ldr	r6, [pc, #56]	; (800aca4 <sbrk_aligned+0x3c>)
 800ac6c:	460c      	mov	r4, r1
 800ac6e:	6831      	ldr	r1, [r6, #0]
 800ac70:	4605      	mov	r5, r0
 800ac72:	b911      	cbnz	r1, 800ac7a <sbrk_aligned+0x12>
 800ac74:	f000 f8bc 	bl	800adf0 <_sbrk_r>
 800ac78:	6030      	str	r0, [r6, #0]
 800ac7a:	4621      	mov	r1, r4
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	f000 f8b7 	bl	800adf0 <_sbrk_r>
 800ac82:	1c43      	adds	r3, r0, #1
 800ac84:	d00a      	beq.n	800ac9c <sbrk_aligned+0x34>
 800ac86:	1cc4      	adds	r4, r0, #3
 800ac88:	f024 0403 	bic.w	r4, r4, #3
 800ac8c:	42a0      	cmp	r0, r4
 800ac8e:	d007      	beq.n	800aca0 <sbrk_aligned+0x38>
 800ac90:	1a21      	subs	r1, r4, r0
 800ac92:	4628      	mov	r0, r5
 800ac94:	f000 f8ac 	bl	800adf0 <_sbrk_r>
 800ac98:	3001      	adds	r0, #1
 800ac9a:	d101      	bne.n	800aca0 <sbrk_aligned+0x38>
 800ac9c:	f04f 34ff 	mov.w	r4, #4294967295
 800aca0:	4620      	mov	r0, r4
 800aca2:	bd70      	pop	{r4, r5, r6, pc}
 800aca4:	20001e88 	.word	0x20001e88

0800aca8 <_malloc_r>:
 800aca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acac:	1ccd      	adds	r5, r1, #3
 800acae:	f025 0503 	bic.w	r5, r5, #3
 800acb2:	3508      	adds	r5, #8
 800acb4:	2d0c      	cmp	r5, #12
 800acb6:	bf38      	it	cc
 800acb8:	250c      	movcc	r5, #12
 800acba:	2d00      	cmp	r5, #0
 800acbc:	4607      	mov	r7, r0
 800acbe:	db01      	blt.n	800acc4 <_malloc_r+0x1c>
 800acc0:	42a9      	cmp	r1, r5
 800acc2:	d905      	bls.n	800acd0 <_malloc_r+0x28>
 800acc4:	230c      	movs	r3, #12
 800acc6:	603b      	str	r3, [r7, #0]
 800acc8:	2600      	movs	r6, #0
 800acca:	4630      	mov	r0, r6
 800accc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acd0:	4e2e      	ldr	r6, [pc, #184]	; (800ad8c <_malloc_r+0xe4>)
 800acd2:	f000 f89d 	bl	800ae10 <__malloc_lock>
 800acd6:	6833      	ldr	r3, [r6, #0]
 800acd8:	461c      	mov	r4, r3
 800acda:	bb34      	cbnz	r4, 800ad2a <_malloc_r+0x82>
 800acdc:	4629      	mov	r1, r5
 800acde:	4638      	mov	r0, r7
 800ace0:	f7ff ffc2 	bl	800ac68 <sbrk_aligned>
 800ace4:	1c43      	adds	r3, r0, #1
 800ace6:	4604      	mov	r4, r0
 800ace8:	d14d      	bne.n	800ad86 <_malloc_r+0xde>
 800acea:	6834      	ldr	r4, [r6, #0]
 800acec:	4626      	mov	r6, r4
 800acee:	2e00      	cmp	r6, #0
 800acf0:	d140      	bne.n	800ad74 <_malloc_r+0xcc>
 800acf2:	6823      	ldr	r3, [r4, #0]
 800acf4:	4631      	mov	r1, r6
 800acf6:	4638      	mov	r0, r7
 800acf8:	eb04 0803 	add.w	r8, r4, r3
 800acfc:	f000 f878 	bl	800adf0 <_sbrk_r>
 800ad00:	4580      	cmp	r8, r0
 800ad02:	d13a      	bne.n	800ad7a <_malloc_r+0xd2>
 800ad04:	6821      	ldr	r1, [r4, #0]
 800ad06:	3503      	adds	r5, #3
 800ad08:	1a6d      	subs	r5, r5, r1
 800ad0a:	f025 0503 	bic.w	r5, r5, #3
 800ad0e:	3508      	adds	r5, #8
 800ad10:	2d0c      	cmp	r5, #12
 800ad12:	bf38      	it	cc
 800ad14:	250c      	movcc	r5, #12
 800ad16:	4629      	mov	r1, r5
 800ad18:	4638      	mov	r0, r7
 800ad1a:	f7ff ffa5 	bl	800ac68 <sbrk_aligned>
 800ad1e:	3001      	adds	r0, #1
 800ad20:	d02b      	beq.n	800ad7a <_malloc_r+0xd2>
 800ad22:	6823      	ldr	r3, [r4, #0]
 800ad24:	442b      	add	r3, r5
 800ad26:	6023      	str	r3, [r4, #0]
 800ad28:	e00e      	b.n	800ad48 <_malloc_r+0xa0>
 800ad2a:	6822      	ldr	r2, [r4, #0]
 800ad2c:	1b52      	subs	r2, r2, r5
 800ad2e:	d41e      	bmi.n	800ad6e <_malloc_r+0xc6>
 800ad30:	2a0b      	cmp	r2, #11
 800ad32:	d916      	bls.n	800ad62 <_malloc_r+0xba>
 800ad34:	1961      	adds	r1, r4, r5
 800ad36:	42a3      	cmp	r3, r4
 800ad38:	6025      	str	r5, [r4, #0]
 800ad3a:	bf18      	it	ne
 800ad3c:	6059      	strne	r1, [r3, #4]
 800ad3e:	6863      	ldr	r3, [r4, #4]
 800ad40:	bf08      	it	eq
 800ad42:	6031      	streq	r1, [r6, #0]
 800ad44:	5162      	str	r2, [r4, r5]
 800ad46:	604b      	str	r3, [r1, #4]
 800ad48:	4638      	mov	r0, r7
 800ad4a:	f104 060b 	add.w	r6, r4, #11
 800ad4e:	f000 f865 	bl	800ae1c <__malloc_unlock>
 800ad52:	f026 0607 	bic.w	r6, r6, #7
 800ad56:	1d23      	adds	r3, r4, #4
 800ad58:	1af2      	subs	r2, r6, r3
 800ad5a:	d0b6      	beq.n	800acca <_malloc_r+0x22>
 800ad5c:	1b9b      	subs	r3, r3, r6
 800ad5e:	50a3      	str	r3, [r4, r2]
 800ad60:	e7b3      	b.n	800acca <_malloc_r+0x22>
 800ad62:	6862      	ldr	r2, [r4, #4]
 800ad64:	42a3      	cmp	r3, r4
 800ad66:	bf0c      	ite	eq
 800ad68:	6032      	streq	r2, [r6, #0]
 800ad6a:	605a      	strne	r2, [r3, #4]
 800ad6c:	e7ec      	b.n	800ad48 <_malloc_r+0xa0>
 800ad6e:	4623      	mov	r3, r4
 800ad70:	6864      	ldr	r4, [r4, #4]
 800ad72:	e7b2      	b.n	800acda <_malloc_r+0x32>
 800ad74:	4634      	mov	r4, r6
 800ad76:	6876      	ldr	r6, [r6, #4]
 800ad78:	e7b9      	b.n	800acee <_malloc_r+0x46>
 800ad7a:	230c      	movs	r3, #12
 800ad7c:	603b      	str	r3, [r7, #0]
 800ad7e:	4638      	mov	r0, r7
 800ad80:	f000 f84c 	bl	800ae1c <__malloc_unlock>
 800ad84:	e7a1      	b.n	800acca <_malloc_r+0x22>
 800ad86:	6025      	str	r5, [r4, #0]
 800ad88:	e7de      	b.n	800ad48 <_malloc_r+0xa0>
 800ad8a:	bf00      	nop
 800ad8c:	20001e84 	.word	0x20001e84

0800ad90 <_realloc_r>:
 800ad90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad94:	4680      	mov	r8, r0
 800ad96:	4614      	mov	r4, r2
 800ad98:	460e      	mov	r6, r1
 800ad9a:	b921      	cbnz	r1, 800ada6 <_realloc_r+0x16>
 800ad9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ada0:	4611      	mov	r1, r2
 800ada2:	f7ff bf81 	b.w	800aca8 <_malloc_r>
 800ada6:	b92a      	cbnz	r2, 800adb4 <_realloc_r+0x24>
 800ada8:	f7ff ff12 	bl	800abd0 <_free_r>
 800adac:	4625      	mov	r5, r4
 800adae:	4628      	mov	r0, r5
 800adb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adb4:	f000 f838 	bl	800ae28 <_malloc_usable_size_r>
 800adb8:	4284      	cmp	r4, r0
 800adba:	4607      	mov	r7, r0
 800adbc:	d802      	bhi.n	800adc4 <_realloc_r+0x34>
 800adbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800adc2:	d812      	bhi.n	800adea <_realloc_r+0x5a>
 800adc4:	4621      	mov	r1, r4
 800adc6:	4640      	mov	r0, r8
 800adc8:	f7ff ff6e 	bl	800aca8 <_malloc_r>
 800adcc:	4605      	mov	r5, r0
 800adce:	2800      	cmp	r0, #0
 800add0:	d0ed      	beq.n	800adae <_realloc_r+0x1e>
 800add2:	42bc      	cmp	r4, r7
 800add4:	4622      	mov	r2, r4
 800add6:	4631      	mov	r1, r6
 800add8:	bf28      	it	cs
 800adda:	463a      	movcs	r2, r7
 800addc:	f7ff fade 	bl	800a39c <memcpy>
 800ade0:	4631      	mov	r1, r6
 800ade2:	4640      	mov	r0, r8
 800ade4:	f7ff fef4 	bl	800abd0 <_free_r>
 800ade8:	e7e1      	b.n	800adae <_realloc_r+0x1e>
 800adea:	4635      	mov	r5, r6
 800adec:	e7df      	b.n	800adae <_realloc_r+0x1e>
	...

0800adf0 <_sbrk_r>:
 800adf0:	b538      	push	{r3, r4, r5, lr}
 800adf2:	4d06      	ldr	r5, [pc, #24]	; (800ae0c <_sbrk_r+0x1c>)
 800adf4:	2300      	movs	r3, #0
 800adf6:	4604      	mov	r4, r0
 800adf8:	4608      	mov	r0, r1
 800adfa:	602b      	str	r3, [r5, #0]
 800adfc:	f7f7 fd7c 	bl	80028f8 <_sbrk>
 800ae00:	1c43      	adds	r3, r0, #1
 800ae02:	d102      	bne.n	800ae0a <_sbrk_r+0x1a>
 800ae04:	682b      	ldr	r3, [r5, #0]
 800ae06:	b103      	cbz	r3, 800ae0a <_sbrk_r+0x1a>
 800ae08:	6023      	str	r3, [r4, #0]
 800ae0a:	bd38      	pop	{r3, r4, r5, pc}
 800ae0c:	20001e8c 	.word	0x20001e8c

0800ae10 <__malloc_lock>:
 800ae10:	4801      	ldr	r0, [pc, #4]	; (800ae18 <__malloc_lock+0x8>)
 800ae12:	f000 b811 	b.w	800ae38 <__retarget_lock_acquire_recursive>
 800ae16:	bf00      	nop
 800ae18:	20001e90 	.word	0x20001e90

0800ae1c <__malloc_unlock>:
 800ae1c:	4801      	ldr	r0, [pc, #4]	; (800ae24 <__malloc_unlock+0x8>)
 800ae1e:	f000 b80c 	b.w	800ae3a <__retarget_lock_release_recursive>
 800ae22:	bf00      	nop
 800ae24:	20001e90 	.word	0x20001e90

0800ae28 <_malloc_usable_size_r>:
 800ae28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae2c:	1f18      	subs	r0, r3, #4
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	bfbc      	itt	lt
 800ae32:	580b      	ldrlt	r3, [r1, r0]
 800ae34:	18c0      	addlt	r0, r0, r3
 800ae36:	4770      	bx	lr

0800ae38 <__retarget_lock_acquire_recursive>:
 800ae38:	4770      	bx	lr

0800ae3a <__retarget_lock_release_recursive>:
 800ae3a:	4770      	bx	lr

0800ae3c <_init>:
 800ae3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3e:	bf00      	nop
 800ae40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae42:	bc08      	pop	{r3}
 800ae44:	469e      	mov	lr, r3
 800ae46:	4770      	bx	lr

0800ae48 <_fini>:
 800ae48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae4a:	bf00      	nop
 800ae4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae4e:	bc08      	pop	{r3}
 800ae50:	469e      	mov	lr, r3
 800ae52:	4770      	bx	lr


3DLED_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  0800ab60  0800ab60  0001ab60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b37c  0800b37c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800b37c  0800b37c  0001b37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b384  0800b384  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b384  0800b384  0001b384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b388  0800b388  0001b388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800b38c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d34  20000088  0800b414  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dbc  0800b414  00021dbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016157  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030f3  00000000  00000000  0003620f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  00039308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f0  00000000  00000000  0003a640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190c8  00000000  00000000  0003b830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018aff  00000000  00000000  000548f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000920eb  00000000  00000000  0006d3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff4e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005540  00000000  00000000  000ff534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ab48 	.word	0x0800ab48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	0800ab48 	.word	0x0800ab48

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	f5ad 4dc3 	sub.w	sp, sp, #24960	; 0x6180
 800059a:	b097      	sub	sp, #92	; 0x5c
 800059c:	af02      	add	r7, sp, #8
    /* USER CODE BEGIN 1 */

    // Layers configuration
    Layer0.timer = &htim1;
 800059e:	4bb9      	ldr	r3, [pc, #740]	; (8000884 <main+0x2f0>)
 80005a0:	4ab9      	ldr	r2, [pc, #740]	; (8000888 <main+0x2f4>)
 80005a2:	601a      	str	r2, [r3, #0]
    Layer0.dma = &hdma_tim1_ch1;
 80005a4:	4bb7      	ldr	r3, [pc, #732]	; (8000884 <main+0x2f0>)
 80005a6:	4ab9      	ldr	r2, [pc, #740]	; (800088c <main+0x2f8>)
 80005a8:	605a      	str	r2, [r3, #4]
    Layer0.channel = TIM_CHANNEL_1;
 80005aa:	4bb6      	ldr	r3, [pc, #728]	; (8000884 <main+0x2f0>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	721a      	strb	r2, [r3, #8]

    Layer1.timer = &htim1;
 80005b0:	4bb7      	ldr	r3, [pc, #732]	; (8000890 <main+0x2fc>)
 80005b2:	4ab5      	ldr	r2, [pc, #724]	; (8000888 <main+0x2f4>)
 80005b4:	601a      	str	r2, [r3, #0]
    Layer1.dma = &hdma_tim1_ch4_trig_com;
 80005b6:	4bb6      	ldr	r3, [pc, #728]	; (8000890 <main+0x2fc>)
 80005b8:	4ab6      	ldr	r2, [pc, #728]	; (8000894 <main+0x300>)
 80005ba:	605a      	str	r2, [r3, #4]
    Layer1.channel = TIM_CHANNEL_4;
 80005bc:	4bb4      	ldr	r3, [pc, #720]	; (8000890 <main+0x2fc>)
 80005be:	220c      	movs	r2, #12
 80005c0:	721a      	strb	r2, [r3, #8]

    Layer2.timer = &htim3;
 80005c2:	4bb5      	ldr	r3, [pc, #724]	; (8000898 <main+0x304>)
 80005c4:	4ab5      	ldr	r2, [pc, #724]	; (800089c <main+0x308>)
 80005c6:	601a      	str	r2, [r3, #0]
    Layer2.dma = &hdma_tim3_ch1_trig;
 80005c8:	4bb3      	ldr	r3, [pc, #716]	; (8000898 <main+0x304>)
 80005ca:	4ab5      	ldr	r2, [pc, #724]	; (80008a0 <main+0x30c>)
 80005cc:	605a      	str	r2, [r3, #4]
    Layer2.channel = TIM_CHANNEL_1;
 80005ce:	4bb2      	ldr	r3, [pc, #712]	; (8000898 <main+0x304>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	721a      	strb	r2, [r3, #8]

    Layer3.timer = &htim3;
 80005d4:	4bb3      	ldr	r3, [pc, #716]	; (80008a4 <main+0x310>)
 80005d6:	4ab1      	ldr	r2, [pc, #708]	; (800089c <main+0x308>)
 80005d8:	601a      	str	r2, [r3, #0]
    Layer3.dma = &hdma_tim3_ch2;
 80005da:	4bb2      	ldr	r3, [pc, #712]	; (80008a4 <main+0x310>)
 80005dc:	4ab2      	ldr	r2, [pc, #712]	; (80008a8 <main+0x314>)
 80005de:	605a      	str	r2, [r3, #4]
    Layer3.channel = TIM_CHANNEL_2;
 80005e0:	4bb0      	ldr	r3, [pc, #704]	; (80008a4 <main+0x310>)
 80005e2:	2204      	movs	r2, #4
 80005e4:	721a      	strb	r2, [r3, #8]

    Layer4.timer = &htim3;
 80005e6:	4bb1      	ldr	r3, [pc, #708]	; (80008ac <main+0x318>)
 80005e8:	4aac      	ldr	r2, [pc, #688]	; (800089c <main+0x308>)
 80005ea:	601a      	str	r2, [r3, #0]
    Layer4.dma = &hdma_tim3_ch3;
 80005ec:	4baf      	ldr	r3, [pc, #700]	; (80008ac <main+0x318>)
 80005ee:	4ab0      	ldr	r2, [pc, #704]	; (80008b0 <main+0x31c>)
 80005f0:	605a      	str	r2, [r3, #4]
    Layer4.channel = TIM_CHANNEL_3;
 80005f2:	4bae      	ldr	r3, [pc, #696]	; (80008ac <main+0x318>)
 80005f4:	2208      	movs	r2, #8
 80005f6:	721a      	strb	r2, [r3, #8]

    Layers *layers_array[5];
    layers_array[0] = &Layer0;
 80005f8:	4ba2      	ldr	r3, [pc, #648]	; (8000884 <main+0x2f0>)
 80005fa:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 80005fe:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000602:	6013      	str	r3, [r2, #0]
    layers_array[1] = &Layer1;
 8000604:	4ba2      	ldr	r3, [pc, #648]	; (8000890 <main+0x2fc>)
 8000606:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 800060a:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800060e:	6013      	str	r3, [r2, #0]
    layers_array[2] = &Layer2;
 8000610:	4ba1      	ldr	r3, [pc, #644]	; (8000898 <main+0x304>)
 8000612:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000616:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800061a:	6013      	str	r3, [r2, #0]
    layers_array[3] = &Layer3;
 800061c:	4ba1      	ldr	r3, [pc, #644]	; (80008a4 <main+0x310>)
 800061e:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000622:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8000626:	6013      	str	r3, [r2, #0]
    layers_array[4] = &Layer4;
 8000628:	4ba0      	ldr	r3, [pc, #640]	; (80008ac <main+0x318>)
 800062a:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 800062e:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8000632:	6013      	str	r3, [r2, #0]
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000634:	f002 fd58 	bl	80030e8 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000638:	f000 fab2 	bl	8000ba0 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800063c:	f000 fd38 	bl	80010b0 <MX_GPIO_Init>
    MX_DMA_Init();
 8000640:	f000 fce8 	bl	8001014 <MX_DMA_Init>
    MX_TIM1_Init();
 8000644:	f000 fb84 	bl	8000d50 <MX_TIM1_Init>
    MX_FATFS_Init();
 8000648:	f006 f9d8 	bl	80069fc <MX_FATFS_Init>
    MX_SPI1_Init();
 800064c:	f000 fb14 	bl	8000c78 <MX_SPI1_Init>
    MX_USART2_UART_Init();
 8000650:	f000 fcb6 	bl	8000fc0 <MX_USART2_UART_Init>
    MX_SPI3_Init();
 8000654:	f000 fb46 	bl	8000ce4 <MX_SPI3_Init>
    MX_TIM3_Init();
 8000658:	f000 fc26 	bl	8000ea8 <MX_TIM3_Init>
    /* USER CODE BEGIN 2 */

    // GPIO configuration
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800065c:	2007      	movs	r0, #7
 800065e:	f002 fed0 	bl	8003402 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000662:	2008      	movs	r0, #8
 8000664:	f002 fecd 	bl	8003402 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000668:	2009      	movs	r0, #9
 800066a:	f002 feca 	bl	8003402 <HAL_NVIC_EnableIRQ>

    // LCD initialization
    PCD8544_Init(0x24);
 800066e:	2024      	movs	r0, #36	; 0x24
 8000670:	f002 f870 	bl	8002754 <PCD8544_Init>
    PCD8544_GotoXY(8, 21);
 8000674:	2115      	movs	r1, #21
 8000676:	2008      	movs	r0, #8
 8000678:	f002 f9fc 	bl	8002a74 <PCD8544_GotoXY>
    PCD8544_Puts("3D_LED_CUBE", PCD8544_Pixel_Set, PCD8544_FontSize_5x7);
 800067c:	2200      	movs	r2, #0
 800067e:	2101      	movs	r1, #1
 8000680:	488c      	ldr	r0, [pc, #560]	; (80008b4 <main+0x320>)
 8000682:	f002 fab9 	bl	8002bf8 <PCD8544_Puts>
    PCD8544_Refresh();
 8000686:	f002 f957 	bl	8002938 <PCD8544_Refresh>
    HAL_Delay(2000);
 800068a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800068e:	f002 fd9d 	bl	80031cc <HAL_Delay>

    // SD Card initialization
    uint8_t walk_array[32][256][3] = { 0 };
 8000692:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000696:	3b20      	subs	r3, #32
 8000698:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f009 fd10 	bl	800a0c4 <memset>
    ret_status result = STATUS_NULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 80006aa:	f102 0245 	add.w	r2, r2, #69	; 0x45
 80006ae:	7013      	strb	r3, [r2, #0]
    uint8_t number_of_images = 0;
 80006b0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80006b4:	2200      	movs	r2, #0
 80006b6:	f803 2c21 	strb.w	r2, [r3, #-33]

    result = sd_card_init();
 80006ba:	f001 f83f 	bl	800173c <sd_card_init>
 80006be:	4603      	mov	r3, r0
 80006c0:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 80006c4:	f102 0245 	add.w	r2, r2, #69	; 0x45
 80006c8:	7013      	strb	r3, [r2, #0]
    if (STATUS_OK != result) {
 80006ca:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 80006ce:	f103 0345 	add.w	r3, r3, #69	; 0x45
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d009      	beq.n	80006ec <main+0x158>
        PCD8544_Clear();
 80006d8:	f002 f8fc 	bl	80028d4 <PCD8544_Clear>
        PCD8544_Puts("Problem with card initialization. Try re-attach SD card and press RESET", PCD8544_Pixel_Set, PCD8544_FontSize_5x7);
 80006dc:	2200      	movs	r2, #0
 80006de:	2101      	movs	r1, #1
 80006e0:	4875      	ldr	r0, [pc, #468]	; (80008b8 <main+0x324>)
 80006e2:	f002 fa89 	bl	8002bf8 <PCD8544_Puts>
        PCD8544_Refresh();
 80006e6:	f002 f927 	bl	8002938 <PCD8544_Refresh>
        while (1)
 80006ea:	e7fe      	b.n	80006ea <main+0x156>
            ;
    }

    char path[256];

    strcpy(path, "0:/");
 80006ec:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80006f0:	3b24      	subs	r3, #36	; 0x24
 80006f2:	4a72      	ldr	r2, [pc, #456]	; (80008bc <main+0x328>)
 80006f4:	601a      	str	r2, [r3, #0]
    myprintf("Starting scan dir\n");
 80006f6:	4872      	ldr	r0, [pc, #456]	; (80008c0 <main+0x32c>)
 80006f8:	f000 fffa 	bl	80016f0 <myprintf>
    result = sd_card_scan_file((char*) path, (char*) buffor_dirs,
 80006fc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000700:	3b24      	subs	r3, #36	; 0x24
 8000702:	4a70      	ldr	r2, [pc, #448]	; (80008c4 <main+0x330>)
 8000704:	4970      	ldr	r1, [pc, #448]	; (80008c8 <main+0x334>)
 8000706:	4618      	mov	r0, r3
 8000708:	f001 f878 	bl	80017fc <sd_card_scan_file>
 800070c:	4603      	mov	r3, r0
 800070e:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000712:	f102 0245 	add.w	r2, r2, #69	; 0x45
 8000716:	7013      	strb	r3, [r2, #0]
            &number_of_dirs);
    if (STATUS_OK != result) {
 8000718:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 800071c:	f103 0345 	add.w	r3, r3, #69	; 0x45
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d00b      	beq.n	800073e <main+0x1aa>
        PCD8544_Clear();
 8000726:	f002 f8d5 	bl	80028d4 <PCD8544_Clear>
        PCD8544_Puts("Problem with scanning card", PCD8544_Pixel_Set, PCD8544_FontSize_5x7);
 800072a:	2200      	movs	r2, #0
 800072c:	2101      	movs	r1, #1
 800072e:	4867      	ldr	r0, [pc, #412]	; (80008cc <main+0x338>)
 8000730:	f002 fa62 	bl	8002bf8 <PCD8544_Puts>
        PCD8544_Refresh();
 8000734:	f002 f900 	bl	8002938 <PCD8544_Refresh>
        sd_card_close();
 8000738:	f001 f8f4 	bl	8001924 <sd_card_close>
        while (1)
 800073c:	e7fe      	b.n	800073c <main+0x1a8>
            ;
    }

    while (1) {
        HAL_Delay(500);
 800073e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000742:	f002 fd43 	bl	80031cc <HAL_Delay>
        handleMenu();
 8000746:	f000 fd67 	bl	8001218 <handleMenu>
        if (playState)
 800074a:	4b61      	ldr	r3, [pc, #388]	; (80008d0 <main+0x33c>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d100      	bne.n	8000754 <main+0x1c0>
        HAL_Delay(500);
 8000752:	e7f4      	b.n	800073e <main+0x1aa>
            break;
 8000754:	bf00      	nop
    }

    myprintf("Starting read data\n");
 8000756:	485f      	ldr	r0, [pc, #380]	; (80008d4 <main+0x340>)
 8000758:	f000 ffca 	bl	80016f0 <myprintf>
    struct layers_struct layers_config[5];
    result = sd_card_read_data((char*) buffor_dirs[selected],
 800075c:	4b5e      	ldr	r3, [pc, #376]	; (80008d8 <main+0x344>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	4a59      	ldr	r2, [pc, #356]	; (80008c8 <main+0x334>)
 8000764:	1898      	adds	r0, r3, r2
 8000766:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800076a:	3b21      	subs	r3, #33	; 0x21
 800076c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000770:	3a50      	subs	r2, #80	; 0x50
 8000772:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 8000776:	3920      	subs	r1, #32
 8000778:	f001 f8ea 	bl	8001950 <sd_card_read_data>
 800077c:	4603      	mov	r3, r0
 800077e:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000782:	f102 0245 	add.w	r2, r2, #69	; 0x45
 8000786:	7013      	strb	r3, [r2, #0]
            (uint8_t*) walk_array, (struct layers_struct*) layers_config,
            &number_of_images);

    sd_card_close();
 8000788:	f001 f8cc 	bl	8001924 <sd_card_close>

    if (STATUS_OK != result) {
 800078c:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000790:	f103 0345 	add.w	r3, r3, #69	; 0x45
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b01      	cmp	r3, #1
 8000798:	d00d      	beq.n	80007b6 <main+0x222>
        PCD8544_Clear();
 800079a:	f002 f89b 	bl	80028d4 <PCD8544_Clear>
        PCD8544_GotoXY(0, 0);
 800079e:	2100      	movs	r1, #0
 80007a0:	2000      	movs	r0, #0
 80007a2:	f002 f967 	bl	8002a74 <PCD8544_GotoXY>
        PCD8544_Puts("Problem with reading data", PCD8544_Pixel_Set, PCD8544_FontSize_5x7);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2101      	movs	r1, #1
 80007aa:	484c      	ldr	r0, [pc, #304]	; (80008dc <main+0x348>)
 80007ac:	f002 fa24 	bl	8002bf8 <PCD8544_Puts>
        PCD8544_Refresh();
 80007b0:	f002 f8c2 	bl	8002938 <PCD8544_Refresh>
        while (1)
 80007b4:	e7fe      	b.n	80007b4 <main+0x220>
            ;
    }
    PCD8544_GotoXY(20, 38);
 80007b6:	2126      	movs	r1, #38	; 0x26
 80007b8:	2014      	movs	r0, #20
 80007ba:	f002 f95b 	bl	8002a74 <PCD8544_GotoXY>
    PCD8544_Puts("Playing...", PCD8544_Pixel_Set, PCD8544_FontSize_5x7);
 80007be:	2200      	movs	r2, #0
 80007c0:	2101      	movs	r1, #1
 80007c2:	4847      	ldr	r0, [pc, #284]	; (80008e0 <main+0x34c>)
 80007c4:	f002 fa18 	bl	8002bf8 <PCD8544_Puts>
    PCD8544_Refresh();
 80007c8:	f002 f8b6 	bl	8002938 <PCD8544_Refresh>


    uint8_t odd = 1;
 80007cc:	2301      	movs	r3, #1
 80007ce:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 80007d2:	f102 024f 	add.w	r2, r2, #79	; 0x4f
 80007d6:	7013      	strb	r3, [r2, #0]
    uint8_t index = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 80007de:	f102 024e 	add.w	r2, r2, #78	; 0x4e
 80007e2:	7013      	strb	r3, [r2, #0]
    uint8_t counter = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 80007ea:	f102 024d 	add.w	r2, r2, #77	; 0x4d
 80007ee:	7013      	strb	r3, [r2, #0]
    uint8_t number_of_animation = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 80007f6:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 80007fa:	7013      	strb	r3, [r2, #0]
    /* USER CODE BEGIN WHILE */
    while (1) {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        for (uint16_t layer_index = 0; layer_index < 5; layer_index++) {
 80007fc:	2300      	movs	r3, #0
 80007fe:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000802:	f102 024a 	add.w	r2, r2, #74	; 0x4a
 8000806:	8013      	strh	r3, [r2, #0]
 8000808:	e1a0      	b.n	8000b4c <main+0x5b8>
            for (uint8_t x = 0; x < layers_config[layer_index].count; x++) {
 800080a:	2300      	movs	r3, #0
 800080c:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000810:	f102 0249 	add.w	r2, r2, #73	; 0x49
 8000814:	7013      	strb	r3, [r2, #0]
 8000816:	e153      	b.n	8000ac0 <main+0x52c>
                if (layers_config[layer_index].values[x]
 8000818:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 800081c:	f103 034a 	add.w	r3, r3, #74	; 0x4a
 8000820:	881a      	ldrh	r2, [r3, #0]
 8000822:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000826:	f103 0349 	add.w	r3, r3, #73	; 0x49
 800082a:	7819      	ldrb	r1, [r3, #0]
 800082c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000830:	f5a3 70e8 	sub.w	r0, r3, #464	; 0x1d0
 8000834:	4613      	mov	r3, r2
 8000836:	011b      	lsls	r3, r3, #4
 8000838:	4413      	add	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	4403      	add	r3, r0
 800083e:	440b      	add	r3, r1
 8000840:	3302      	adds	r3, #2
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000848:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 800084c:	7812      	ldrb	r2, [r2, #0]
 800084e:	429a      	cmp	r2, r3
 8000850:	f040 8108 	bne.w	8000a64 <main+0x4d0>
                        == number_of_animation) {
                    layers_config[layer_index].isSet = 1;
 8000854:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000858:	f103 034a 	add.w	r3, r3, #74	; 0x4a
 800085c:	881a      	ldrh	r2, [r3, #0]
 800085e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000862:	f5a3 71e8 	sub.w	r1, r3, #464	; 0x1d0
 8000866:	4613      	mov	r3, r2
 8000868:	011b      	lsls	r3, r3, #4
 800086a:	4413      	add	r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	440b      	add	r3, r1
 8000870:	2201      	movs	r2, #1
 8000872:	701a      	strb	r2, [r3, #0]
                    for (uint16_t i = 0; i < 256; i++) {
 8000874:	2300      	movs	r3, #0
 8000876:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 800087a:	f102 0246 	add.w	r2, r2, #70	; 0x46
 800087e:	8013      	strh	r3, [r2, #0]
 8000880:	e0e7      	b.n	8000a52 <main+0x4be>
 8000882:	bf00      	nop
 8000884:	200004b0 	.word	0x200004b0
 8000888:	20000154 	.word	0x20000154
 800088c:	200001e4 	.word	0x200001e4
 8000890:	20000820 	.word	0x20000820
 8000894:	20000244 	.word	0x20000244
 8000898:	20000b90 	.word	0x20000b90
 800089c:	2000019c 	.word	0x2000019c
 80008a0:	200002a4 	.word	0x200002a4
 80008a4:	20000f00 	.word	0x20000f00
 80008a8:	20000304 	.word	0x20000304
 80008ac:	20001270 	.word	0x20001270
 80008b0:	20000364 	.word	0x20000364
 80008b4:	0800ab60 	.word	0x0800ab60
 80008b8:	0800ab6c 	.word	0x0800ab6c
 80008bc:	002f3a30 	.word	0x002f3a30
 80008c0:	0800abb4 	.word	0x0800abb4
 80008c4:	200004ac 	.word	0x200004ac
 80008c8:	2000040c 	.word	0x2000040c
 80008cc:	0800abc8 	.word	0x0800abc8
 80008d0:	200004ae 	.word	0x200004ae
 80008d4:	0800abe4 	.word	0x0800abe4
 80008d8:	200004ad 	.word	0x200004ad
 80008dc:	0800abf8 	.word	0x0800abf8
 80008e0:	0800ac14 	.word	0x0800ac14
                        if (i % 16 == 0) {
 80008e4:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 80008e8:	f103 0346 	add.w	r3, r3, #70	; 0x46
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	f003 030f 	and.w	r3, r3, #15
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d116      	bne.n	8000926 <main+0x392>
                            odd ^= 1;
 80008f8:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 80008fc:	f103 034f 	add.w	r3, r3, #79	; 0x4f
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	f083 0301 	eor.w	r3, r3, #1
 8000906:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 800090a:	f102 024f 	add.w	r2, r2, #79	; 0x4f
 800090e:	7013      	strb	r3, [r2, #0]
                            counter++;
 8000910:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000914:	f103 034d 	add.w	r3, r3, #77	; 0x4d
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000920:	f102 024d 	add.w	r2, r2, #77	; 0x4d
 8000924:	7013      	strb	r3, [r2, #0]
                        }
                        if (odd) {
 8000926:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 800092a:	f103 034f 	add.w	r3, r3, #79	; 0x4f
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d018      	beq.n	8000966 <main+0x3d2>
                            index = (counter * 16 - 1) - (i % 16);
 8000934:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000938:	f103 034d 	add.w	r3, r3, #77	; 0x4d
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	011b      	lsls	r3, r3, #4
 8000940:	b2da      	uxtb	r2, r3
 8000942:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000946:	f103 0346 	add.w	r3, r3, #70	; 0x46
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	b2db      	uxtb	r3, r3
 800094e:	f003 030f 	and.w	r3, r3, #15
 8000952:	b2db      	uxtb	r3, r3
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	b2db      	uxtb	r3, r3
 8000958:	3b01      	subs	r3, #1
 800095a:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 800095e:	f102 024e 	add.w	r2, r2, #78	; 0x4e
 8000962:	7013      	strb	r3, [r2, #0]
 8000964:	e009      	b.n	800097a <main+0x3e6>
                        } else {
                            index = i;
 8000966:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 800096a:	f103 0346 	add.w	r3, r3, #70	; 0x46
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000974:	f102 024e 	add.w	r2, r2, #78	; 0x4e
 8000978:	7013      	strb	r3, [r2, #0]
                        }
                        led_set_RGB(layers_array[layer_index], i,
 800097a:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 800097e:	f103 034a 	add.w	r3, r3, #74	; 0x4a
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 800098a:	f103 0350 	add.w	r3, r3, #80	; 0x50
 800098e:	443b      	add	r3, r7
 8000990:	f853 0c20 	ldr.w	r0, [r3, #-32]
 8000994:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000998:	f103 0346 	add.w	r3, r3, #70	; 0x46
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	b2dc      	uxtb	r4, r3
 80009a0:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 80009a4:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 80009a8:	7819      	ldrb	r1, [r3, #0]
 80009aa:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 80009ae:	f103 034e 	add.w	r3, r3, #78	; 0x4e
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 80009b8:	4615      	mov	r5, r2
 80009ba:	461a      	mov	r2, r3
 80009bc:	0052      	lsls	r2, r2, #1
 80009be:	441a      	add	r2, r3
 80009c0:	460b      	mov	r3, r1
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	440b      	add	r3, r1
 80009c6:	021b      	lsls	r3, r3, #8
 80009c8:	4413      	add	r3, r2
 80009ca:	442b      	add	r3, r5
 80009cc:	3b20      	subs	r3, #32
 80009ce:	781d      	ldrb	r5, [r3, #0]
 80009d0:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 80009d4:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 80009d8:	7819      	ldrb	r1, [r3, #0]
 80009da:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 80009de:	f103 034e 	add.w	r3, r3, #78	; 0x4e
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 80009e8:	4616      	mov	r6, r2
 80009ea:	461a      	mov	r2, r3
 80009ec:	0052      	lsls	r2, r2, #1
 80009ee:	441a      	add	r2, r3
 80009f0:	460b      	mov	r3, r1
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	440b      	add	r3, r1
 80009f6:	021b      	lsls	r3, r3, #8
 80009f8:	4413      	add	r3, r2
 80009fa:	4433      	add	r3, r6
 80009fc:	3b1f      	subs	r3, #31
 80009fe:	781e      	ldrb	r6, [r3, #0]
 8000a00:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000a04:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000a08:	7819      	ldrb	r1, [r3, #0]
 8000a0a:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000a0e:	f103 034e 	add.w	r3, r3, #78	; 0x4e
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8000a18:	4694      	mov	ip, r2
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	0052      	lsls	r2, r2, #1
 8000a1e:	441a      	add	r2, r3
 8000a20:	460b      	mov	r3, r1
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	440b      	add	r3, r1
 8000a26:	021b      	lsls	r3, r3, #8
 8000a28:	4413      	add	r3, r2
 8000a2a:	4463      	add	r3, ip
 8000a2c:	3b1e      	subs	r3, #30
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	4633      	mov	r3, r6
 8000a34:	462a      	mov	r2, r5
 8000a36:	4621      	mov	r1, r4
 8000a38:	f002 fa03 	bl	8002e42 <led_set_RGB>
                    for (uint16_t i = 0; i < 256; i++) {
 8000a3c:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000a40:	f103 0346 	add.w	r3, r3, #70	; 0x46
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	3301      	adds	r3, #1
 8000a48:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000a4c:	f102 0246 	add.w	r2, r2, #70	; 0x46
 8000a50:	8013      	strh	r3, [r2, #0]
 8000a52:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000a56:	f103 0346 	add.w	r3, r3, #70	; 0x46
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	2bff      	cmp	r3, #255	; 0xff
 8000a5e:	f67f af41 	bls.w	80008e4 <main+0x350>
 8000a62:	e022      	b.n	8000aaa <main+0x516>
                                walk_array[number_of_animation][index][0],
                                walk_array[number_of_animation][index][1],
                                walk_array[number_of_animation][index][2]);
                    }
                } else if (layers_config[layer_index].isSet == 0) {
 8000a64:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000a68:	f103 034a 	add.w	r3, r3, #74	; 0x4a
 8000a6c:	881a      	ldrh	r2, [r3, #0]
 8000a6e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000a72:	f5a3 71e8 	sub.w	r1, r3, #464	; 0x1d0
 8000a76:	4613      	mov	r3, r2
 8000a78:	011b      	lsls	r3, r3, #4
 8000a7a:	4413      	add	r3, r2
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	440b      	add	r3, r1
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d111      	bne.n	8000aaa <main+0x516>
                    led_set_all_RGB(layers_array[layer_index], 100, 0, 0);
 8000a86:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000a8a:	f103 034a 	add.w	r3, r3, #74	; 0x4a
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 8000a96:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8000a9a:	443b      	add	r3, r7
 8000a9c:	f853 0c20 	ldr.w	r0, [r3, #-32]
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2164      	movs	r1, #100	; 0x64
 8000aa6:	f002 fa03 	bl	8002eb0 <led_set_all_RGB>
            for (uint8_t x = 0; x < layers_config[layer_index].count; x++) {
 8000aaa:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000aae:	f103 0349 	add.w	r3, r3, #73	; 0x49
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000aba:	f102 0249 	add.w	r2, r2, #73	; 0x49
 8000abe:	7013      	strb	r3, [r2, #0]
 8000ac0:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000ac4:	f103 034a 	add.w	r3, r3, #74	; 0x4a
 8000ac8:	881a      	ldrh	r2, [r3, #0]
 8000aca:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000ace:	f5a3 71e8 	sub.w	r1, r3, #464	; 0x1d0
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	011b      	lsls	r3, r3, #4
 8000ad6:	4413      	add	r3, r2
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	440b      	add	r3, r1
 8000adc:	3301      	adds	r3, #1
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000ae4:	f102 0249 	add.w	r2, r2, #73	; 0x49
 8000ae8:	7812      	ldrb	r2, [r2, #0]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	f4ff ae94 	bcc.w	8000818 <main+0x284>
                }
            }
            layers_config[layer_index].isSet = 0;
 8000af0:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000af4:	f103 034a 	add.w	r3, r3, #74	; 0x4a
 8000af8:	881a      	ldrh	r2, [r3, #0]
 8000afa:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000afe:	f5a3 71e8 	sub.w	r1, r3, #464	; 0x1d0
 8000b02:	4613      	mov	r3, r2
 8000b04:	011b      	lsls	r3, r3, #4
 8000b06:	4413      	add	r3, r2
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	440b      	add	r3, r1
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
            led_render(layers_array[layer_index]);
 8000b10:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000b14:	f103 034a 	add.w	r3, r3, #74	; 0x4a
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 8000b20:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8000b24:	443b      	add	r3, r7
 8000b26:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f002 f9e5 	bl	8002efa <led_render>
            HAL_Delay(10);
 8000b30:	200a      	movs	r0, #10
 8000b32:	f002 fb4b 	bl	80031cc <HAL_Delay>
        for (uint16_t layer_index = 0; layer_index < 5; layer_index++) {
 8000b36:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000b3a:	f103 034a 	add.w	r3, r3, #74	; 0x4a
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	3301      	adds	r3, #1
 8000b42:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000b46:	f102 024a 	add.w	r2, r2, #74	; 0x4a
 8000b4a:	8013      	strh	r3, [r2, #0]
 8000b4c:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000b50:	f103 034a 	add.w	r3, r3, #74	; 0x4a
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	f67f ae57 	bls.w	800080a <main+0x276>
        }
        if (++number_of_animation == number_of_images)
 8000b5c:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8000b60:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	3301      	adds	r3, #1
 8000b68:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000b6c:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8000b70:	7013      	strb	r3, [r2, #0]
 8000b72:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000b76:	f813 3c21 	ldrb.w	r3, [r3, #-33]
 8000b7a:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000b7e:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8000b82:	7812      	ldrb	r2, [r2, #0]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d105      	bne.n	8000b94 <main+0x600>
            number_of_animation = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f507 42c3 	add.w	r2, r7, #24960	; 0x6180
 8000b8e:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8000b92:	7013      	strb	r3, [r2, #0]

        HAL_Delay(500);
 8000b94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b98:	f002 fb18 	bl	80031cc <HAL_Delay>
        for (uint16_t layer_index = 0; layer_index < 5; layer_index++) {
 8000b9c:	e62e      	b.n	80007fc <main+0x268>
 8000b9e:	bf00      	nop

08000ba0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b094      	sub	sp, #80	; 0x50
 8000ba4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ba6:	f107 0320 	add.w	r3, r7, #32
 8000baa:	2230      	movs	r2, #48	; 0x30
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f009 fa88 	bl	800a0c4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <SystemClock_Config+0xd0>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	4a28      	ldr	r2, [pc, #160]	; (8000c70 <SystemClock_Config+0xd0>)
 8000bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd4:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <SystemClock_Config+0xd0>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000be0:	2300      	movs	r3, #0
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	4b23      	ldr	r3, [pc, #140]	; (8000c74 <SystemClock_Config+0xd4>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bec:	4a21      	ldr	r2, [pc, #132]	; (8000c74 <SystemClock_Config+0xd4>)
 8000bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <SystemClock_Config+0xd4>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c00:	2302      	movs	r3, #2
 8000c02:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c04:	2301      	movs	r3, #1
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c08:	2310      	movs	r3, #16
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c10:	2300      	movs	r3, #0
 8000c12:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8000c14:	2308      	movs	r3, #8
 8000c16:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 84;
 8000c18:	2354      	movs	r3, #84	; 0x54
 8000c1a:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 3;
 8000c20:	2303      	movs	r3, #3
 8000c22:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c24:	f107 0320 	add.w	r3, r7, #32
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f003 f94d 	bl	8003ec8 <HAL_RCC_OscConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <SystemClock_Config+0x98>
        Error_Handler();
 8000c34:	f000 fd56 	bl	80016e4 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c38:	230f      	movs	r3, #15
 8000c3a:	60fb      	str	r3, [r7, #12]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c48:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4e:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	2102      	movs	r1, #2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f003 fbae 	bl	80043b8 <HAL_RCC_ClockConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0xc6>
        Error_Handler();
 8000c62:	f000 fd3f 	bl	80016e4 <Error_Handler>
    }
}
 8000c66:	bf00      	nop
 8000c68:	3750      	adds	r7, #80	; 0x50
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40007000 	.word	0x40007000

08000c78 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000c7e:	4a18      	ldr	r2, [pc, #96]	; (8000ce0 <MX_SPI1_Init+0x68>)
 8000c80:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000c84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c88:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c8a:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ca8:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000cac:	2238      	movs	r2, #56	; 0x38
 8000cae:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000cc4:	220a      	movs	r2, #10
 8000cc6:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_SPI1_Init+0x64>)
 8000cca:	f003 fd95 	bl	80047f8 <HAL_SPI_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_SPI1_Init+0x60>
        Error_Handler();
 8000cd4:	f000 fd06 	bl	80016e4 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200000a4 	.word	0x200000a4
 8000ce0:	40013000 	.word	0x40013000

08000ce4 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI3_Init 1 */

    /* USER CODE END SPI3_Init 1 */
    /* SPI3 parameter configuration*/
    hspi3.Instance = SPI3;
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <MX_SPI3_Init+0x64>)
 8000cea:	4a18      	ldr	r2, [pc, #96]	; (8000d4c <MX_SPI3_Init+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
    hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <MX_SPI3_Init+0x64>)
 8000cf0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cf4:	605a      	str	r2, [r3, #4]
    hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_SPI3_Init+0x64>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
    hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <MX_SPI3_Init+0x64>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
    hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_SPI3_Init+0x64>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
    hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_SPI3_Init+0x64>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	615a      	str	r2, [r3, #20]
    hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_SPI3_Init+0x64>)
 8000d10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d14:	619a      	str	r2, [r3, #24]
    hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_SPI3_Init+0x64>)
 8000d18:	2228      	movs	r2, #40	; 0x28
 8000d1a:	61da      	str	r2, [r3, #28]
    hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <MX_SPI3_Init+0x64>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	621a      	str	r2, [r3, #32]
    hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_SPI3_Init+0x64>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	625a      	str	r2, [r3, #36]	; 0x24
    hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <MX_SPI3_Init+0x64>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi3.Init.CRCPolynomial = 10;
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_SPI3_Init+0x64>)
 8000d30:	220a      	movs	r2, #10
 8000d32:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <MX_SPI3_Init+0x64>)
 8000d36:	f003 fd5f 	bl	80047f8 <HAL_SPI_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_SPI3_Init+0x60>
        Error_Handler();
 8000d40:	f000 fcd0 	bl	80016e4 <Error_Handler>
    }
    /* USER CODE BEGIN SPI3_Init 2 */

    /* USER CODE END SPI3_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200000fc 	.word	0x200000fc
 8000d4c:	40003c00 	.word	0x40003c00

08000d50 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b096      	sub	sp, #88	; 0x58
 8000d54:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000d56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000d64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]
 8000d7e:	615a      	str	r2, [r3, #20]
 8000d80:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2220      	movs	r2, #32
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f009 f99b 	bl	800a0c4 <memset>

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 8000d8e:	4b44      	ldr	r3, [pc, #272]	; (8000ea0 <MX_TIM1_Init+0x150>)
 8000d90:	4a44      	ldr	r2, [pc, #272]	; (8000ea4 <MX_TIM1_Init+0x154>)
 8000d92:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 0;
 8000d94:	4b42      	ldr	r3, [pc, #264]	; (8000ea0 <MX_TIM1_Init+0x150>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9a:	4b41      	ldr	r3, [pc, #260]	; (8000ea0 <MX_TIM1_Init+0x150>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 104;
 8000da0:	4b3f      	ldr	r3, [pc, #252]	; (8000ea0 <MX_TIM1_Init+0x150>)
 8000da2:	2268      	movs	r2, #104	; 0x68
 8000da4:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da6:	4b3e      	ldr	r3, [pc, #248]	; (8000ea0 <MX_TIM1_Init+0x150>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 8000dac:	4b3c      	ldr	r3, [pc, #240]	; (8000ea0 <MX_TIM1_Init+0x150>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db2:	4b3b      	ldr	r3, [pc, #236]	; (8000ea0 <MX_TIM1_Init+0x150>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000db8:	4839      	ldr	r0, [pc, #228]	; (8000ea0 <MX_TIM1_Init+0x150>)
 8000dba:	f004 f94f 	bl	800505c <HAL_TIM_Base_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM1_Init+0x78>
        Error_Handler();
 8000dc4:	f000 fc8e 	bl	80016e4 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dcc:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000dce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4832      	ldr	r0, [pc, #200]	; (8000ea0 <MX_TIM1_Init+0x150>)
 8000dd6:	f004 fd21 	bl	800581c <HAL_TIM_ConfigClockSource>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM1_Init+0x94>
        Error_Handler();
 8000de0:	f000 fc80 	bl	80016e4 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000de4:	482e      	ldr	r0, [pc, #184]	; (8000ea0 <MX_TIM1_Init+0x150>)
 8000de6:	f004 f988 	bl	80050fa <HAL_TIM_PWM_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM1_Init+0xa4>
        Error_Handler();
 8000df0:	f000 fc78 	bl	80016e4 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df4:	2300      	movs	r3, #0
 8000df6:	643b      	str	r3, [r7, #64]	; 0x40
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000dfc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e00:	4619      	mov	r1, r3
 8000e02:	4827      	ldr	r0, [pc, #156]	; (8000ea0 <MX_TIM1_Init+0x150>)
 8000e04:	f005 f978 	bl	80060f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM1_Init+0xc2>
            != HAL_OK) {
        Error_Handler();
 8000e0e:	f000 fc69 	bl	80016e4 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e12:	2360      	movs	r3, #96	; 0x60
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
    sConfigOC.Pulse = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e26:	2300      	movs	r3, #0
 8000e28:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e32:	2200      	movs	r2, #0
 8000e34:	4619      	mov	r1, r3
 8000e36:	481a      	ldr	r0, [pc, #104]	; (8000ea0 <MX_TIM1_Init+0x150>)
 8000e38:	f004 fc2e 	bl	8005698 <HAL_TIM_PWM_ConfigChannel>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM1_Init+0xf6>
            != HAL_OK) {
        Error_Handler();
 8000e42:	f000 fc4f 	bl	80016e4 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8000e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4814      	ldr	r0, [pc, #80]	; (8000ea0 <MX_TIM1_Init+0x150>)
 8000e50:	f004 fc22 	bl	8005698 <HAL_TIM_PWM_ConfigChannel>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM1_Init+0x10e>
            != HAL_OK) {
        Error_Handler();
 8000e5a:	f000 fc43 	bl	80016e4 <Error_Handler>
    }
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.DeadTime = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e76:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
    if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4807      	ldr	r0, [pc, #28]	; (8000ea0 <MX_TIM1_Init+0x150>)
 8000e82:	f005 f9a7 	bl	80061d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM1_Init+0x140>
            != HAL_OK) {
        Error_Handler();
 8000e8c:	f000 fc2a 	bl	80016e4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM1_Init 2 */

    /* USER CODE END TIM1_Init 2 */
    HAL_TIM_MspPostInit(&htim1);
 8000e90:	4803      	ldr	r0, [pc, #12]	; (8000ea0 <MX_TIM1_Init+0x150>)
 8000e92:	f001 fa7b 	bl	800238c <HAL_TIM_MspPostInit>

}
 8000e96:	bf00      	nop
 8000e98:	3758      	adds	r7, #88	; 0x58
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000154 	.word	0x20000154
 8000ea4:	40010000 	.word	0x40010000

08000ea8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08e      	sub	sp, #56	; 0x38
 8000eac:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000eae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ebc:	f107 0320 	add.w	r3, r7, #32
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
 8000ed4:	615a      	str	r2, [r3, #20]
 8000ed6:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8000ed8:	4b37      	ldr	r3, [pc, #220]	; (8000fb8 <MX_TIM3_Init+0x110>)
 8000eda:	4a38      	ldr	r2, [pc, #224]	; (8000fbc <MX_TIM3_Init+0x114>)
 8000edc:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 0;
 8000ede:	4b36      	ldr	r3, [pc, #216]	; (8000fb8 <MX_TIM3_Init+0x110>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee4:	4b34      	ldr	r3, [pc, #208]	; (8000fb8 <MX_TIM3_Init+0x110>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 104;
 8000eea:	4b33      	ldr	r3, [pc, #204]	; (8000fb8 <MX_TIM3_Init+0x110>)
 8000eec:	2268      	movs	r2, #104	; 0x68
 8000eee:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef0:	4b31      	ldr	r3, [pc, #196]	; (8000fb8 <MX_TIM3_Init+0x110>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef6:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <MX_TIM3_Init+0x110>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000efc:	482e      	ldr	r0, [pc, #184]	; (8000fb8 <MX_TIM3_Init+0x110>)
 8000efe:	f004 f8ad 	bl	800505c <HAL_TIM_Base_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM3_Init+0x64>
        Error_Handler();
 8000f08:	f000 fbec 	bl	80016e4 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000f12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f16:	4619      	mov	r1, r3
 8000f18:	4827      	ldr	r0, [pc, #156]	; (8000fb8 <MX_TIM3_Init+0x110>)
 8000f1a:	f004 fc7f 	bl	800581c <HAL_TIM_ConfigClockSource>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM3_Init+0x80>
        Error_Handler();
 8000f24:	f000 fbde 	bl	80016e4 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000f28:	4823      	ldr	r0, [pc, #140]	; (8000fb8 <MX_TIM3_Init+0x110>)
 8000f2a:	f004 f8e6 	bl	80050fa <HAL_TIM_PWM_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM3_Init+0x90>
        Error_Handler();
 8000f34:	f000 fbd6 	bl	80016e4 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000f40:	f107 0320 	add.w	r3, r7, #32
 8000f44:	4619      	mov	r1, r3
 8000f46:	481c      	ldr	r0, [pc, #112]	; (8000fb8 <MX_TIM3_Init+0x110>)
 8000f48:	f005 f8d6 	bl	80060f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM3_Init+0xae>
            != HAL_OK) {
        Error_Handler();
 8000f52:	f000 fbc7 	bl	80016e4 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f56:	2360      	movs	r3, #96	; 0x60
 8000f58:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2200      	movs	r2, #0
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4812      	ldr	r0, [pc, #72]	; (8000fb8 <MX_TIM3_Init+0x110>)
 8000f6e:	f004 fb93 	bl	8005698 <HAL_TIM_PWM_ConfigChannel>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM3_Init+0xd4>
            != HAL_OK) {
        Error_Handler();
 8000f78:	f000 fbb4 	bl	80016e4 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	2204      	movs	r2, #4
 8000f80:	4619      	mov	r1, r3
 8000f82:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <MX_TIM3_Init+0x110>)
 8000f84:	f004 fb88 	bl	8005698 <HAL_TIM_PWM_ConfigChannel>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM3_Init+0xea>
            != HAL_OK) {
        Error_Handler();
 8000f8e:	f000 fba9 	bl	80016e4 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2208      	movs	r2, #8
 8000f96:	4619      	mov	r1, r3
 8000f98:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <MX_TIM3_Init+0x110>)
 8000f9a:	f004 fb7d 	bl	8005698 <HAL_TIM_PWM_ConfigChannel>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM3_Init+0x100>
            != HAL_OK) {
        Error_Handler();
 8000fa4:	f000 fb9e 	bl	80016e4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
    HAL_TIM_MspPostInit(&htim3);
 8000fa8:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <MX_TIM3_Init+0x110>)
 8000faa:	f001 f9ef 	bl	800238c <HAL_TIM_MspPostInit>

}
 8000fae:	bf00      	nop
 8000fb0:	3738      	adds	r7, #56	; 0x38
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000019c 	.word	0x2000019c
 8000fbc:	40000400 	.word	0x40000400

08000fc0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_USART2_UART_Init+0x4c>)
 8000fc6:	4a12      	ldr	r2, [pc, #72]	; (8001010 <MX_USART2_UART_Init+0x50>)
 8000fc8:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <MX_USART2_UART_Init+0x4c>)
 8000fcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fd0:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_USART2_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_USART2_UART_Init+0x4c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <MX_USART2_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_USART2_UART_Init+0x4c>)
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <MX_USART2_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_USART2_UART_Init+0x4c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_USART2_UART_Init+0x4c>)
 8000ff8:	f005 f93e 	bl	8006278 <HAL_UART_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_USART2_UART_Init+0x46>
        Error_Handler();
 8001002:	f000 fb6f 	bl	80016e4 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200003c4 	.word	0x200003c4
 8001010:	40004400 	.word	0x40004400

08001014 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA2_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	4b23      	ldr	r3, [pc, #140]	; (80010ac <MX_DMA_Init+0x98>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a22      	ldr	r2, [pc, #136]	; (80010ac <MX_DMA_Init+0x98>)
 8001024:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <MX_DMA_Init+0x98>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <MX_DMA_Init+0x98>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a1b      	ldr	r2, [pc, #108]	; (80010ac <MX_DMA_Init+0x98>)
 8001040:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <MX_DMA_Init+0x98>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]

    /* DMA interrupt init */
    /* DMA1_Stream4_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	200f      	movs	r0, #15
 8001058:	f002 f9b7 	bl	80033ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800105c:	200f      	movs	r0, #15
 800105e:	f002 f9d0 	bl	8003402 <HAL_NVIC_EnableIRQ>
    /* DMA1_Stream5_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	2010      	movs	r0, #16
 8001068:	f002 f9af 	bl	80033ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800106c:	2010      	movs	r0, #16
 800106e:	f002 f9c8 	bl	8003402 <HAL_NVIC_EnableIRQ>
    /* DMA1_Stream7_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	202f      	movs	r0, #47	; 0x2f
 8001078:	f002 f9a7 	bl	80033ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800107c:	202f      	movs	r0, #47	; 0x2f
 800107e:	f002 f9c0 	bl	8003402 <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream1_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	2039      	movs	r0, #57	; 0x39
 8001088:	f002 f99f 	bl	80033ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800108c:	2039      	movs	r0, #57	; 0x39
 800108e:	f002 f9b8 	bl	8003402 <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream4_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	203c      	movs	r0, #60	; 0x3c
 8001098:	f002 f997 	bl	80033ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800109c:	203c      	movs	r0, #60	; 0x3c
 800109e:	f002 f9b0 	bl	8003402 <HAL_NVIC_EnableIRQ>

}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800

080010b0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
 80010c4:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	4b3d      	ldr	r3, [pc, #244]	; (80011c0 <MX_GPIO_Init+0x110>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a3c      	ldr	r2, [pc, #240]	; (80011c0 <MX_GPIO_Init+0x110>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b3a      	ldr	r3, [pc, #232]	; (80011c0 <MX_GPIO_Init+0x110>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <MX_GPIO_Init+0x110>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a35      	ldr	r2, [pc, #212]	; (80011c0 <MX_GPIO_Init+0x110>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <MX_GPIO_Init+0x110>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <MX_GPIO_Init+0x110>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a2e      	ldr	r2, [pc, #184]	; (80011c0 <MX_GPIO_Init+0x110>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b2c      	ldr	r3, [pc, #176]	; (80011c0 <MX_GPIO_Init+0x110>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, LCD_BL_Pin | SD_CS_Pin | LCD_CE_Pin,
 800111a:	2200      	movs	r2, #0
 800111c:	f240 6102 	movw	r1, #1538	; 0x602
 8001120:	4828      	ldr	r0, [pc, #160]	; (80011c4 <MX_GPIO_Init+0x114>)
 8001122:	f002 fe9f 	bl	8003e64 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin | LCD_DC_Pin, GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800112c:	4826      	ldr	r0, [pc, #152]	; (80011c8 <MX_GPIO_Init+0x118>)
 800112e:	f002 fe99 	bl	8003e64 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : BUTTON_UP_Pin BUTTON_MID_Pin BUTTON_DOWN_Pin */
    GPIO_InitStruct.Pin = BUTTON_UP_Pin | BUTTON_MID_Pin | BUTTON_DOWN_Pin;
 8001132:	230e      	movs	r3, #14
 8001134:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001136:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800113a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800113c:	2302      	movs	r3, #2
 800113e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	4619      	mov	r1, r3
 8001146:	4821      	ldr	r0, [pc, #132]	; (80011cc <MX_GPIO_Init+0x11c>)
 8001148:	f002 fd08 	bl	8003b5c <HAL_GPIO_Init>

    /*Configure GPIO pins : LCD_BL_Pin SD_CS_Pin LCD_CE_Pin */
    GPIO_InitStruct.Pin = LCD_BL_Pin | SD_CS_Pin | LCD_CE_Pin;
 800114c:	f240 6302 	movw	r3, #1538	; 0x602
 8001150:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001152:	2301      	movs	r3, #1
 8001154:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	4619      	mov	r1, r3
 8001164:	4817      	ldr	r0, [pc, #92]	; (80011c4 <MX_GPIO_Init+0x114>)
 8001166:	f002 fcf9 	bl	8003b5c <HAL_GPIO_Init>

    /*Configure GPIO pins : LCD_RST_Pin LCD_DC_Pin */
    GPIO_InitStruct.Pin = LCD_RST_Pin | LCD_DC_Pin;
 800116a:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800116e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001170:	2301      	movs	r3, #1
 8001172:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	4619      	mov	r1, r3
 8001182:	4811      	ldr	r0, [pc, #68]	; (80011c8 <MX_GPIO_Init+0x118>)
 8001184:	f002 fcea 	bl	8003b5c <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2100      	movs	r1, #0
 800118c:	2007      	movs	r0, #7
 800118e:	f002 f91c 	bl	80033ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001192:	2007      	movs	r0, #7
 8001194:	f002 f935 	bl	8003402 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	2100      	movs	r1, #0
 800119c:	2008      	movs	r0, #8
 800119e:	f002 f914 	bl	80033ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80011a2:	2008      	movs	r0, #8
 80011a4:	f002 f92d 	bl	8003402 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2100      	movs	r1, #0
 80011ac:	2009      	movs	r0, #9
 80011ae:	f002 f90c 	bl	80033ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80011b2:	2009      	movs	r0, #9
 80011b4:	f002 f925 	bl	8003402 <HAL_NVIC_EnableIRQ>

}
 80011b8:	bf00      	nop
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020000 	.word	0x40020000
 80011c8:	40020400 	.word	0x40020400
 80011cc:	40020800 	.word	0x40020800

080011d0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin) {
 80011da:	88fb      	ldrh	r3, [r7, #6]
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d006      	beq.n	80011ee <HAL_GPIO_EXTI_Callback+0x1e>
 80011e0:	2b08      	cmp	r3, #8
 80011e2:	dc10      	bgt.n	8001206 <HAL_GPIO_EXTI_Callback+0x36>
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d00a      	beq.n	80011fe <HAL_GPIO_EXTI_Callback+0x2e>
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	d004      	beq.n	80011f6 <HAL_GPIO_EXTI_Callback+0x26>
    case BUTTON_UP_Pin:
        button_event = BUTTON_UP;
        break;
    }

}
 80011ec:	e00b      	b.n	8001206 <HAL_GPIO_EXTI_Callback+0x36>
        button_event = BUTTON_DOWN;
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_GPIO_EXTI_Callback+0x44>)
 80011f0:	2203      	movs	r2, #3
 80011f2:	701a      	strb	r2, [r3, #0]
        break;
 80011f4:	e007      	b.n	8001206 <HAL_GPIO_EXTI_Callback+0x36>
        button_event = BUTTON_MID;
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <HAL_GPIO_EXTI_Callback+0x44>)
 80011f8:	2202      	movs	r2, #2
 80011fa:	701a      	strb	r2, [r3, #0]
        break;
 80011fc:	e003      	b.n	8001206 <HAL_GPIO_EXTI_Callback+0x36>
        button_event = BUTTON_UP;
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <HAL_GPIO_EXTI_Callback+0x44>)
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
        break;
 8001204:	bf00      	nop
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000408 	.word	0x20000408

08001218 <handleMenu>:

void handleMenu(void) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af02      	add	r7, sp, #8
    switch (button_event) {
 800121e:	4b48      	ldr	r3, [pc, #288]	; (8001340 <handleMenu+0x128>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b03      	cmp	r3, #3
 8001226:	d82c      	bhi.n	8001282 <handleMenu+0x6a>
 8001228:	a201      	add	r2, pc, #4	; (adr r2, 8001230 <handleMenu+0x18>)
 800122a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122e:	bf00      	nop
 8001230:	08001283 	.word	0x08001283
 8001234:	0800126d 	.word	0x0800126d
 8001238:	0800125d 	.word	0x0800125d
 800123c:	08001241 	.word	0x08001241
    case BUTTON_NULL:
        break;
    case BUTTON_DOWN:
        if ((selected + 1) < number_of_dirs)
 8001240:	4b40      	ldr	r3, [pc, #256]	; (8001344 <handleMenu+0x12c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	4a40      	ldr	r2, [pc, #256]	; (8001348 <handleMenu+0x130>)
 8001248:	7812      	ldrb	r2, [r2, #0]
 800124a:	4293      	cmp	r3, r2
 800124c:	da1b      	bge.n	8001286 <handleMenu+0x6e>
            selected++;
 800124e:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <handleMenu+0x12c>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <handleMenu+0x12c>)
 8001258:	701a      	strb	r2, [r3, #0]
        break;
 800125a:	e014      	b.n	8001286 <handleMenu+0x6e>
    case BUTTON_MID:
        playState ^= 1;
 800125c:	4b3b      	ldr	r3, [pc, #236]	; (800134c <handleMenu+0x134>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	f083 0301 	eor.w	r3, r3, #1
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b39      	ldr	r3, [pc, #228]	; (800134c <handleMenu+0x134>)
 8001268:	701a      	strb	r2, [r3, #0]
        break;
 800126a:	e00f      	b.n	800128c <handleMenu+0x74>
    case BUTTON_UP:
        if (0 < selected)
 800126c:	4b35      	ldr	r3, [pc, #212]	; (8001344 <handleMenu+0x12c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00a      	beq.n	800128a <handleMenu+0x72>
            selected--;
 8001274:	4b33      	ldr	r3, [pc, #204]	; (8001344 <handleMenu+0x12c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	3b01      	subs	r3, #1
 800127a:	b2da      	uxtb	r2, r3
 800127c:	4b31      	ldr	r3, [pc, #196]	; (8001344 <handleMenu+0x12c>)
 800127e:	701a      	strb	r2, [r3, #0]
        break;
 8001280:	e003      	b.n	800128a <handleMenu+0x72>
    default:
        break;
 8001282:	bf00      	nop
 8001284:	e002      	b.n	800128c <handleMenu+0x74>
        break;
 8001286:	bf00      	nop
 8001288:	e000      	b.n	800128c <handleMenu+0x74>
        break;
 800128a:	bf00      	nop
    }

    PCD8544_Clear();
 800128c:	f001 fb22 	bl	80028d4 <PCD8544_Clear>

    for (int i = 0; i < number_of_dirs; i++) {
 8001290:	2300      	movs	r3, #0
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	e048      	b.n	8001328 <handleMenu+0x110>
        if (i == selected) {
 8001296:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <handleMenu+0x12c>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4293      	cmp	r3, r2
 80012a0:	d129      	bne.n	80012f6 <handleMenu+0xde>
            PCD8544_DrawFilledRectangle(0, i * 9, 84, i * 9 + 9,
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	461a      	mov	r2, r3
 80012a8:	00d2      	lsls	r2, r2, #3
 80012aa:	4413      	add	r3, r2
 80012ac:	b2d9      	uxtb	r1, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3301      	adds	r3, #1
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	461a      	mov	r2, r3
 80012b6:	00d2      	lsls	r2, r2, #3
 80012b8:	4413      	add	r3, r2
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2201      	movs	r2, #1
 80012be:	9200      	str	r2, [sp, #0]
 80012c0:	2254      	movs	r2, #84	; 0x54
 80012c2:	2000      	movs	r0, #0
 80012c4:	f001 fd84 	bl	8002dd0 <PCD8544_DrawFilledRectangle>
                    PCD8544_Pixel_Set);
            PCD8544_GotoXY(4, i * 9 + 1);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	00d2      	lsls	r2, r2, #3
 80012d0:	4413      	add	r3, r2
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	3301      	adds	r3, #1
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	4619      	mov	r1, r3
 80012da:	2004      	movs	r0, #4
 80012dc:	f001 fbca 	bl	8002a74 <PCD8544_GotoXY>
            PCD8544_Puts(&buffor_dirs[i][4], PCD8544_Pixel_Clear,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	011b      	lsls	r3, r3, #4
 80012e4:	3304      	adds	r3, #4
 80012e6:	4a1a      	ldr	r2, [pc, #104]	; (8001350 <handleMenu+0x138>)
 80012e8:	4413      	add	r3, r2
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f001 fc82 	bl	8002bf8 <PCD8544_Puts>
 80012f4:	e015      	b.n	8001322 <handleMenu+0x10a>
                    PCD8544_FontSize_5x7);
        } else {
            PCD8544_GotoXY(4, i * 9 + 1);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	461a      	mov	r2, r3
 80012fc:	00d2      	lsls	r2, r2, #3
 80012fe:	4413      	add	r3, r2
 8001300:	b2db      	uxtb	r3, r3
 8001302:	3301      	adds	r3, #1
 8001304:	b2db      	uxtb	r3, r3
 8001306:	4619      	mov	r1, r3
 8001308:	2004      	movs	r0, #4
 800130a:	f001 fbb3 	bl	8002a74 <PCD8544_GotoXY>
            PCD8544_Puts(&buffor_dirs[i][4], PCD8544_Pixel_Set,
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	011b      	lsls	r3, r3, #4
 8001312:	3304      	adds	r3, #4
 8001314:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <handleMenu+0x138>)
 8001316:	4413      	add	r3, r2
 8001318:	2200      	movs	r2, #0
 800131a:	2101      	movs	r1, #1
 800131c:	4618      	mov	r0, r3
 800131e:	f001 fc6b 	bl	8002bf8 <PCD8544_Puts>
    for (int i = 0; i < number_of_dirs; i++) {
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3301      	adds	r3, #1
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <handleMenu+0x130>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4293      	cmp	r3, r2
 8001332:	dbb0      	blt.n	8001296 <handleMenu+0x7e>
                    PCD8544_FontSize_5x7);
        }
    }
    PCD8544_Refresh();
 8001334:	f001 fb00 	bl	8002938 <PCD8544_Refresh>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000408 	.word	0x20000408
 8001344:	200004ad 	.word	0x200004ad
 8001348:	200004ac 	.word	0x200004ac
 800134c:	200004ae 	.word	0x200004ae
 8001350:	2000040c 	.word	0x2000040c

08001354 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

    return (((uint32_t) r + m) << 16) | (((uint32_t) g + m) << 8)
            | ((uint32_t) b + m);
}

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8001354:	b480      	push	{r7}
 8001356:	b087      	sub	sp, #28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

    Layers *layer;

    if (htim == &htim1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a65      	ldr	r2, [pc, #404]	; (80014f4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x1a0>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d106      	bne.n	8001372 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x1e>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	7f1b      	ldrb	r3, [r3, #28]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d102      	bne.n	8001372 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x1e>
        layer = &Layer0;
 800136c:	4b62      	ldr	r3, [pc, #392]	; (80014f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x1a4>)
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	e02c      	b.n	80013cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x78>
    } else if (htim == &htim1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a5f      	ldr	r2, [pc, #380]	; (80014f4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x1a0>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d106      	bne.n	8001388 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x34>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	7f1b      	ldrb	r3, [r3, #28]
 800137e:	2b08      	cmp	r3, #8
 8001380:	d102      	bne.n	8001388 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x34>
        layer = &Layer1;
 8001382:	4b5e      	ldr	r3, [pc, #376]	; (80014fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x1a8>)
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	e021      	b.n	80013cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x78>
    } else if (htim == &htim3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a5d      	ldr	r2, [pc, #372]	; (8001500 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x1ac>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d106      	bne.n	800139e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x4a>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	7f1b      	ldrb	r3, [r3, #28]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d102      	bne.n	800139e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x4a>
        layer = &Layer2;
 8001398:	4b5a      	ldr	r3, [pc, #360]	; (8001504 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x1b0>)
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	e016      	b.n	80013cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x78>
    } else if (htim == &htim3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a57      	ldr	r2, [pc, #348]	; (8001500 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x1ac>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d106      	bne.n	80013b4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x60>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7f1b      	ldrb	r3, [r3, #28]
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d102      	bne.n	80013b4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x60>
        layer = &Layer3;
 80013ae:	4b56      	ldr	r3, [pc, #344]	; (8001508 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x1b4>)
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	e00b      	b.n	80013cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x78>
    } else if (htim == &htim3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a52      	ldr	r2, [pc, #328]	; (8001500 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x1ac>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	f040 8094 	bne.w	80014e6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x192>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	7f1b      	ldrb	r3, [r3, #28]
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	f040 808f 	bne.w	80014e6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x192>
        layer = &Layer4;
 80013c8:	4b50      	ldr	r3, [pc, #320]	; (800150c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x1b8>)
 80013ca:	617b      	str	r3, [r7, #20]
    } else
        return;

    // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
    if (layer->wr_buf_p < NUM_PIXELS) {
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 80013d2:	2bff      	cmp	r3, #255	; 0xff
 80013d4:	d868      	bhi.n	80014a8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x154>
        // We're in. Fill the even buffer
        for (uint_fast8_t i = 0; i < 8; ++i) {
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	e05a      	b.n	8001492 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x13e>
            layer->wr_buf[i] =
            PWM_LO << (((layer->rgb_arr[3 * layer->wr_buf_p] << i) & 0x80) > 0);
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	4413      	add	r3, r2
 80013ec:	7a5b      	ldrb	r3, [r3, #9]
 80013ee:	461a      	mov	r2, r3
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
            layer->wr_buf[i] =
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dd01      	ble.n	8001402 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xae>
 80013fe:	2142      	movs	r1, #66	; 0x42
 8001400:	e000      	b.n	8001404 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb0>
 8001402:	2121      	movs	r1, #33	; 0x21
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	4413      	add	r3, r2
 8001410:	460a      	mov	r2, r1
 8001412:	805a      	strh	r2, [r3, #2]
            layer->wr_buf[i + 8] = PWM_LO
                    << (((layer->rgb_arr[3 * layer->wr_buf_p + 1] << i) & 0x80)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	3301      	adds	r3, #1
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	4413      	add	r3, r2
 8001426:	7a5b      	ldrb	r3, [r3, #9]
 8001428:	461a      	mov	r2, r3
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	f003 0380 	and.w	r3, r3, #128	; 0x80
            layer->wr_buf[i + 8] = PWM_LO
 8001434:	2b00      	cmp	r3, #0
 8001436:	dd01      	ble.n	800143c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe8>
 8001438:	2142      	movs	r1, #66	; 0x42
 800143a:	e000      	b.n	800143e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xea>
 800143c:	2121      	movs	r1, #33	; 0x21
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	3308      	adds	r3, #8
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	460a      	mov	r2, r1
 800144e:	805a      	strh	r2, [r3, #2]
                            > 0);
            layer->wr_buf[i + 16] = PWM_LO
                    << (((layer->rgb_arr[3 * layer->wr_buf_p + 2] << i) & 0x80)
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 8001456:	4613      	mov	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	3302      	adds	r3, #2
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4413      	add	r3, r2
 8001462:	7a5b      	ldrb	r3, [r3, #9]
 8001464:	461a      	mov	r2, r3
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	f003 0380 	and.w	r3, r3, #128	; 0x80
            layer->wr_buf[i + 16] = PWM_LO
 8001470:	2b00      	cmp	r3, #0
 8001472:	dd01      	ble.n	8001478 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x124>
 8001474:	2142      	movs	r1, #66	; 0x42
 8001476:	e000      	b.n	800147a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x126>
 8001478:	2121      	movs	r1, #33	; 0x21
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	3310      	adds	r3, #16
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	460a      	mov	r2, r1
 800148a:	805a      	strh	r2, [r3, #2]
        for (uint_fast8_t i = 0; i < 8; ++i) {
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	3301      	adds	r3, #1
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	2b07      	cmp	r3, #7
 8001496:	d9a1      	bls.n	80013dc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x88>
                            > 0);
        }
        layer->wr_buf_p++;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 80014a6:	e01f      	b.n	80014e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x194>
    } else if (layer->wr_buf_p < NUM_PIXELS + 2) {
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 80014ae:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 80014b2:	d219      	bcs.n	80014e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x194>
        // Last two transfers are resets.
        //                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
        // First half reset zero fill
        for (uint8_t i = 0; i < WR_BUF_LEN / 2; ++i)
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]
 80014b8:	e00a      	b.n	80014d0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x17c>
            layer->wr_buf[i] = 0;
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4413      	add	r3, r2
 80014c6:	2200      	movs	r2, #0
 80014c8:	805a      	strh	r2, [r3, #2]
        for (uint8_t i = 0; i < WR_BUF_LEN / 2; ++i)
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	3301      	adds	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	2b17      	cmp	r3, #23
 80014d4:	d9f1      	bls.n	80014ba <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x166>
        layer->wr_buf_p++;
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 80014dc:	1c5a      	adds	r2, r3, #1
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 80014e4:	e000      	b.n	80014e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x194>
        return;
 80014e6:	bf00      	nop
    }
}
 80014e8:	371c      	adds	r7, #28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000154 	.word	0x20000154
 80014f8:	200004b0 	.word	0x200004b0
 80014fc:	20000820 	.word	0x20000820
 8001500:	2000019c 	.word	0x2000019c
 8001504:	20000b90 	.word	0x20000b90
 8001508:	20000f00 	.word	0x20000f00
 800150c:	20001270 	.word	0x20001270

08001510 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

    Layers *layer;

    if (htim == &htim1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a6b      	ldr	r2, [pc, #428]	; (80016c8 <HAL_TIM_PWM_PulseFinishedCallback+0x1b8>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d106      	bne.n	800152e <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	7f1b      	ldrb	r3, [r3, #28]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d102      	bne.n	800152e <HAL_TIM_PWM_PulseFinishedCallback+0x1e>
        layer = &Layer0;
 8001528:	4b68      	ldr	r3, [pc, #416]	; (80016cc <HAL_TIM_PWM_PulseFinishedCallback+0x1bc>)
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	e02c      	b.n	8001588 <HAL_TIM_PWM_PulseFinishedCallback+0x78>
    } else if (htim == &htim1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a65      	ldr	r2, [pc, #404]	; (80016c8 <HAL_TIM_PWM_PulseFinishedCallback+0x1b8>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d106      	bne.n	8001544 <HAL_TIM_PWM_PulseFinishedCallback+0x34>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	7f1b      	ldrb	r3, [r3, #28]
 800153a:	2b08      	cmp	r3, #8
 800153c:	d102      	bne.n	8001544 <HAL_TIM_PWM_PulseFinishedCallback+0x34>
        layer = &Layer1;
 800153e:	4b64      	ldr	r3, [pc, #400]	; (80016d0 <HAL_TIM_PWM_PulseFinishedCallback+0x1c0>)
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	e021      	b.n	8001588 <HAL_TIM_PWM_PulseFinishedCallback+0x78>
    } else if (htim == &htim3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a63      	ldr	r2, [pc, #396]	; (80016d4 <HAL_TIM_PWM_PulseFinishedCallback+0x1c4>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d106      	bne.n	800155a <HAL_TIM_PWM_PulseFinishedCallback+0x4a>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	7f1b      	ldrb	r3, [r3, #28]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d102      	bne.n	800155a <HAL_TIM_PWM_PulseFinishedCallback+0x4a>
        layer = &Layer2;
 8001554:	4b60      	ldr	r3, [pc, #384]	; (80016d8 <HAL_TIM_PWM_PulseFinishedCallback+0x1c8>)
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	e016      	b.n	8001588 <HAL_TIM_PWM_PulseFinishedCallback+0x78>
    } else if (htim == &htim3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a5d      	ldr	r2, [pc, #372]	; (80016d4 <HAL_TIM_PWM_PulseFinishedCallback+0x1c4>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d106      	bne.n	8001570 <HAL_TIM_PWM_PulseFinishedCallback+0x60>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	7f1b      	ldrb	r3, [r3, #28]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d102      	bne.n	8001570 <HAL_TIM_PWM_PulseFinishedCallback+0x60>
        layer = &Layer3;
 800156a:	4b5c      	ldr	r3, [pc, #368]	; (80016dc <HAL_TIM_PWM_PulseFinishedCallback+0x1cc>)
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	e00b      	b.n	8001588 <HAL_TIM_PWM_PulseFinishedCallback+0x78>
    } else if (htim == &htim3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a58      	ldr	r2, [pc, #352]	; (80016d4 <HAL_TIM_PWM_PulseFinishedCallback+0x1c4>)
 8001574:	4293      	cmp	r3, r2
 8001576:	f040 80a2 	bne.w	80016be <HAL_TIM_PWM_PulseFinishedCallback+0x1ae>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	7f1b      	ldrb	r3, [r3, #28]
 800157e:	2b04      	cmp	r3, #4
 8001580:	f040 809d 	bne.w	80016be <HAL_TIM_PWM_PulseFinishedCallback+0x1ae>
        layer = &Layer4;
 8001584:	4b56      	ldr	r3, [pc, #344]	; (80016e0 <HAL_TIM_PWM_PulseFinishedCallback+0x1d0>)
 8001586:	617b      	str	r3, [r7, #20]
    } else
        return;

    // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
    if (layer->wr_buf_p < NUM_PIXELS) {
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 800158e:	2bff      	cmp	r3, #255	; 0xff
 8001590:	d869      	bhi.n	8001666 <HAL_TIM_PWM_PulseFinishedCallback+0x156>
        // We're in. Fill the odd buffer
        for (uint_fast8_t i = 0; i < 8; ++i) {
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	e05b      	b.n	8001650 <HAL_TIM_PWM_PulseFinishedCallback+0x140>
            layer->wr_buf[i + 24] =
            PWM_LO << (((layer->rgb_arr[3 * layer->wr_buf_p] << i) & 0x80) > 0);
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	4413      	add	r3, r2
 80015a8:	7a5b      	ldrb	r3, [r3, #9]
 80015aa:	461a      	mov	r2, r3
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
            layer->wr_buf[i + 24] =
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	dd01      	ble.n	80015be <HAL_TIM_PWM_PulseFinishedCallback+0xae>
 80015ba:	2142      	movs	r1, #66	; 0x42
 80015bc:	e000      	b.n	80015c0 <HAL_TIM_PWM_PulseFinishedCallback+0xb0>
 80015be:	2121      	movs	r1, #33	; 0x21
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	3318      	adds	r3, #24
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	460a      	mov	r2, r1
 80015d0:	805a      	strh	r2, [r3, #2]
            layer->wr_buf[i + 32] = PWM_LO
                    << (((layer->rgb_arr[3 * layer->wr_buf_p + 1] << i) & 0x80)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 80015d8:	4613      	mov	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	3301      	adds	r3, #1
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	4413      	add	r3, r2
 80015e4:	7a5b      	ldrb	r3, [r3, #9]
 80015e6:	461a      	mov	r2, r3
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
            layer->wr_buf[i + 32] = PWM_LO
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	dd01      	ble.n	80015fa <HAL_TIM_PWM_PulseFinishedCallback+0xea>
 80015f6:	2142      	movs	r1, #66	; 0x42
 80015f8:	e000      	b.n	80015fc <HAL_TIM_PWM_PulseFinishedCallback+0xec>
 80015fa:	2121      	movs	r1, #33	; 0x21
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	3320      	adds	r3, #32
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	460a      	mov	r2, r1
 800160c:	805a      	strh	r2, [r3, #2]
                            > 0);
            layer->wr_buf[i + 40] = PWM_LO
                    << (((layer->rgb_arr[3 * layer->wr_buf_p + 2] << i) & 0x80)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 8001614:	4613      	mov	r3, r2
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4413      	add	r3, r2
 800161a:	3302      	adds	r3, #2
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	4413      	add	r3, r2
 8001620:	7a5b      	ldrb	r3, [r3, #9]
 8001622:	461a      	mov	r2, r3
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	f003 0380 	and.w	r3, r3, #128	; 0x80
            layer->wr_buf[i + 40] = PWM_LO
 800162e:	2b00      	cmp	r3, #0
 8001630:	dd01      	ble.n	8001636 <HAL_TIM_PWM_PulseFinishedCallback+0x126>
 8001632:	2142      	movs	r1, #66	; 0x42
 8001634:	e000      	b.n	8001638 <HAL_TIM_PWM_PulseFinishedCallback+0x128>
 8001636:	2121      	movs	r1, #33	; 0x21
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	3328      	adds	r3, #40	; 0x28
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4413      	add	r3, r2
 8001646:	460a      	mov	r2, r1
 8001648:	805a      	strh	r2, [r3, #2]
        for (uint_fast8_t i = 0; i < 8; ++i) {
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	3301      	adds	r3, #1
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	2b07      	cmp	r3, #7
 8001654:	d9a0      	bls.n	8001598 <HAL_TIM_PWM_PulseFinishedCallback+0x88>
                            > 0);
        }

        layer->wr_buf_p++;
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 8001664:	e02c      	b.n	80016c0 <HAL_TIM_PWM_PulseFinishedCallback+0x1b0>

    } else if (layer->wr_buf_p < NUM_PIXELS + 2) {
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 800166c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8001670:	d218      	bcs.n	80016a4 <HAL_TIM_PWM_PulseFinishedCallback+0x194>
        // Second half reset zero fill
        for (uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i)
 8001672:	2318      	movs	r3, #24
 8001674:	73fb      	strb	r3, [r7, #15]
 8001676:	e00a      	b.n	800168e <HAL_TIM_PWM_PulseFinishedCallback+0x17e>
            layer->wr_buf[i] = 0;
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4413      	add	r3, r2
 8001684:	2200      	movs	r2, #0
 8001686:	805a      	strh	r2, [r3, #2]
        for (uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i)
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	3301      	adds	r3, #1
 800168c:	73fb      	strb	r3, [r7, #15]
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	2b2f      	cmp	r3, #47	; 0x2f
 8001692:	d9f1      	bls.n	8001678 <HAL_TIM_PWM_PulseFinishedCallback+0x168>
        ++layer->wr_buf_p;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 80016a2:	e00d      	b.n	80016c0 <HAL_TIM_PWM_PulseFinishedCallback+0x1b0>
    } else {
        // We're done. Lean back and until next time!
        layer->wr_buf_p = 0;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
        HAL_TIM_PWM_Stop_DMA(layer->timer, layer->channel);
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	7a1b      	ldrb	r3, [r3, #8]
 80016b4:	4619      	mov	r1, r3
 80016b6:	4610      	mov	r0, r2
 80016b8:	f003 ff28 	bl	800550c <HAL_TIM_PWM_Stop_DMA>
 80016bc:	e000      	b.n	80016c0 <HAL_TIM_PWM_PulseFinishedCallback+0x1b0>
        return;
 80016be:	bf00      	nop
    }
}
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000154 	.word	0x20000154
 80016cc:	200004b0 	.word	0x200004b0
 80016d0:	20000820 	.word	0x20000820
 80016d4:	2000019c 	.word	0x2000019c
 80016d8:	20000b90 	.word	0x20000b90
 80016dc:	20000f00 	.word	0x20000f00
 80016e0:	20001270 	.word	0x20001270

080016e4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e8:	b672      	cpsid	i
}
 80016ea:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 80016ec:	e7fe      	b.n	80016ec <Error_Handler+0x8>
	...

080016f0 <myprintf>:
#include "fatfs.h"

extern SPI_HandleTypeDef hspi1;
extern UART_HandleTypeDef huart2;

void myprintf(const char *fmt, ...) {
 80016f0:	b40f      	push	{r0, r1, r2, r3}
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
    static char buffer[256];
    va_list args;
    va_start(args, fmt);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	603b      	str	r3, [r7, #0]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001706:	480b      	ldr	r0, [pc, #44]	; (8001734 <myprintf+0x44>)
 8001708:	f008 fdd0 	bl	800a2ac <vsniprintf>
    va_end(args);

    int len = strlen(buffer);
 800170c:	4809      	ldr	r0, [pc, #36]	; (8001734 <myprintf+0x44>)
 800170e:	f7fe fd67 	bl	80001e0 <strlen>
 8001712:	4603      	mov	r3, r0
 8001714:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) buffer, len, -1);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	b29a      	uxth	r2, r3
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	4905      	ldr	r1, [pc, #20]	; (8001734 <myprintf+0x44>)
 8001720:	4805      	ldr	r0, [pc, #20]	; (8001738 <myprintf+0x48>)
 8001722:	f004 fdf6 	bl	8006312 <HAL_UART_Transmit>

}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001730:	b004      	add	sp, #16
 8001732:	4770      	bx	lr
 8001734:	20001a44 	.word	0x20001a44
 8001738:	200003c4 	.word	0x200003c4

0800173c <sd_card_init>:
//some variables for FatFs
FATFS FatFs; 	//Fatfs handle
FIL fil; 		//File handle
FRESULT fres; //Result after operations

ret_status sd_card_init(void) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
    myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 8001742:	4827      	ldr	r0, [pc, #156]	; (80017e0 <sd_card_init+0xa4>)
 8001744:	f7ff ffd4 	bl	80016f0 <myprintf>

    HAL_Delay(1000); //a short delay is important to let the SD card settle
 8001748:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800174c:	f001 fd3e 	bl	80031cc <HAL_Delay>

    fres = f_mount(&FatFs, "", 1); //1=mount now
 8001750:	2201      	movs	r2, #1
 8001752:	4924      	ldr	r1, [pc, #144]	; (80017e4 <sd_card_init+0xa8>)
 8001754:	4824      	ldr	r0, [pc, #144]	; (80017e8 <sd_card_init+0xac>)
 8001756:	f007 fc9d 	bl	8009094 <f_mount>
 800175a:	4603      	mov	r3, r0
 800175c:	461a      	mov	r2, r3
 800175e:	4b23      	ldr	r3, [pc, #140]	; (80017ec <sd_card_init+0xb0>)
 8001760:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 8001762:	4b22      	ldr	r3, [pc, #136]	; (80017ec <sd_card_init+0xb0>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d007      	beq.n	800177a <sd_card_init+0x3e>
        myprintf("f_mount error (%i)\r\n", fres);
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <sd_card_init+0xb0>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	4619      	mov	r1, r3
 8001770:	481f      	ldr	r0, [pc, #124]	; (80017f0 <sd_card_init+0xb4>)
 8001772:	f7ff ffbd 	bl	80016f0 <myprintf>
        return STATUS_ERROR;
 8001776:	2302      	movs	r3, #2
 8001778:	e02d      	b.n	80017d6 <sd_card_init+0x9a>
    }
    DWORD free_clusters, free_sectors, total_sectors;

    FATFS *getFreeFs;

    fres = f_getfree("", &free_clusters, &getFreeFs);
 800177a:	463a      	mov	r2, r7
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	4619      	mov	r1, r3
 8001780:	4818      	ldr	r0, [pc, #96]	; (80017e4 <sd_card_init+0xa8>)
 8001782:	f008 fb51 	bl	8009e28 <f_getfree>
 8001786:	4603      	mov	r3, r0
 8001788:	461a      	mov	r2, r3
 800178a:	4b18      	ldr	r3, [pc, #96]	; (80017ec <sd_card_init+0xb0>)
 800178c:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 800178e:	4b17      	ldr	r3, [pc, #92]	; (80017ec <sd_card_init+0xb0>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d007      	beq.n	80017a6 <sd_card_init+0x6a>
        myprintf("f_getfree error (%i)\r\n", fres);
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <sd_card_init+0xb0>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	4619      	mov	r1, r3
 800179c:	4815      	ldr	r0, [pc, #84]	; (80017f4 <sd_card_init+0xb8>)
 800179e:	f7ff ffa7 	bl	80016f0 <myprintf>

        return STATUS_ERROR;
 80017a2:	2302      	movs	r3, #2
 80017a4:	e017      	b.n	80017d6 <sd_card_init+0x9a>
    }

    //Formula comes from ChaN's documentation
    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	3b02      	subs	r3, #2
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	8952      	ldrh	r2, [r2, #10]
 80017b0:	fb02 f303 	mul.w	r3, r2, r3
 80017b4:	60fb      	str	r3, [r7, #12]
    free_sectors = free_clusters * getFreeFs->csize;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	895b      	ldrh	r3, [r3, #10]
 80017ba:	461a      	mov	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	fb02 f303 	mul.w	r3, r2, r3
 80017c2:	60bb      	str	r3, [r7, #8]

    myprintf(
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	0859      	lsrs	r1, r3, #1
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	085b      	lsrs	r3, r3, #1
 80017cc:	461a      	mov	r2, r3
 80017ce:	480a      	ldr	r0, [pc, #40]	; (80017f8 <sd_card_init+0xbc>)
 80017d0:	f7ff ff8e 	bl	80016f0 <myprintf>
            "SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n",
            total_sectors / 2, free_sectors / 2);

    return STATUS_OK;
 80017d4:	2301      	movs	r3, #1
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	0800ac20 	.word	0x0800ac20
 80017e4:	0800ac40 	.word	0x0800ac40
 80017e8:	200015e0 	.word	0x200015e0
 80017ec:	20001a40 	.word	0x20001a40
 80017f0:	0800ac44 	.word	0x0800ac44
 80017f4:	0800ac5c 	.word	0x0800ac5c
 80017f8:	0800ac74 	.word	0x0800ac74

080017fc <sd_card_scan_file>:

ret_status sd_card_scan_file(char *path, char* buffor_dirs, uint8_t* number_of_dirs) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b092      	sub	sp, #72	; 0x48
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]

    FRESULT res;
    DIR dir;
    UINT i;
    static FILINFO fno;
    res = f_opendir(&dir, path); /* Open the directory */
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	68f9      	ldr	r1, [r7, #12]
 800180e:	4618      	mov	r0, r3
 8001810:	f008 fa34 	bl	8009c7c <f_opendir>
 8001814:	4603      	mov	r3, r0
 8001816:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (res == FR_OK) {
 800181a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800181e:	2b00      	cmp	r3, #0
 8001820:	d162      	bne.n	80018e8 <sd_card_scan_file+0xec>
        while (1) {
            res = f_readdir(&dir, &fno); /* Read a directory item */
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	4939      	ldr	r1, [pc, #228]	; (800190c <sd_card_scan_file+0x110>)
 8001828:	4618      	mov	r0, r3
 800182a:	f008 fac0 	bl	8009dae <f_readdir>
 800182e:	4603      	mov	r3, r0
 8001830:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            if (res != FR_OK || fno.fname[0] == 0)
 8001834:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001838:	2b00      	cmp	r3, #0
 800183a:	d150      	bne.n	80018de <sd_card_scan_file+0xe2>
 800183c:	4b33      	ldr	r3, [pc, #204]	; (800190c <sd_card_scan_file+0x110>)
 800183e:	7a5b      	ldrb	r3, [r3, #9]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d04c      	beq.n	80018de <sd_card_scan_file+0xe2>
                break; /* Break on error or end of dir */
            if (fno.fattrib & AM_DIR && !(fno.fattrib & AM_HID)
 8001844:	4b31      	ldr	r3, [pc, #196]	; (800190c <sd_card_scan_file+0x110>)
 8001846:	7a1b      	ldrb	r3, [r3, #8]
 8001848:	f003 0310 	and.w	r3, r3, #16
 800184c:	2b00      	cmp	r3, #0
 800184e:	d040      	beq.n	80018d2 <sd_card_scan_file+0xd6>
 8001850:	4b2e      	ldr	r3, [pc, #184]	; (800190c <sd_card_scan_file+0x110>)
 8001852:	7a1b      	ldrb	r3, [r3, #8]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d13a      	bne.n	80018d2 <sd_card_scan_file+0xd6>
                    && !(fno.fattrib & AM_SYS)) { /* It is a directory */
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <sd_card_scan_file+0x110>)
 800185e:	7a1b      	ldrb	r3, [r3, #8]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d134      	bne.n	80018d2 <sd_card_scan_file+0xd6>
                i = strlen(path);
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f7fe fcb9 	bl	80001e0 <strlen>
 800186e:	6438      	str	r0, [r7, #64]	; 0x40
                sprintf(&path[i], "/%s", fno.fname);
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001874:	4413      	add	r3, r2
 8001876:	4a26      	ldr	r2, [pc, #152]	; (8001910 <sd_card_scan_file+0x114>)
 8001878:	4926      	ldr	r1, [pc, #152]	; (8001914 <sd_card_scan_file+0x118>)
 800187a:	4618      	mov	r0, r3
 800187c:	f008 fc2a 	bl	800a0d4 <siprintf>
                sprintf((char*)(buffor_dirs + (*number_of_dirs)*16), "%s", path);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	461a      	mov	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	4413      	add	r3, r2
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	4922      	ldr	r1, [pc, #136]	; (8001918 <sd_card_scan_file+0x11c>)
 8001890:	4618      	mov	r0, r3
 8001892:	f008 fc1f 	bl	800a0d4 <siprintf>
                (*number_of_dirs)++;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	3301      	adds	r3, #1
 800189c:	b2da      	uxtb	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	701a      	strb	r2, [r3, #0]
                res = sd_card_scan_file(path, NULL, NULL); /* Enter the directory */
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f7ff ffa8 	bl	80017fc <sd_card_scan_file>
 80018ac:	4603      	mov	r3, r0
 80018ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                if (res != STATUS_OK)
 80018b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d005      	beq.n	80018c6 <sd_card_scan_file+0xca>
                    myprintf("Error!!! Scanning dir error: %d\n", res);
 80018ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80018be:	4619      	mov	r1, r3
 80018c0:	4816      	ldr	r0, [pc, #88]	; (800191c <sd_card_scan_file+0x120>)
 80018c2:	f7ff ff15 	bl	80016f0 <myprintf>
                path[i] = 0;
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018ca:	4413      	add	r3, r2
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
 80018d0:	e004      	b.n	80018dc <sd_card_scan_file+0xe0>
            } else { /* It is a file. */
                myprintf("%s/%s\r\n", path, fno.fname);
 80018d2:	4a0f      	ldr	r2, [pc, #60]	; (8001910 <sd_card_scan_file+0x114>)
 80018d4:	68f9      	ldr	r1, [r7, #12]
 80018d6:	4812      	ldr	r0, [pc, #72]	; (8001920 <sd_card_scan_file+0x124>)
 80018d8:	f7ff ff0a 	bl	80016f0 <myprintf>
            res = f_readdir(&dir, &fno); /* Read a directory item */
 80018dc:	e7a1      	b.n	8001822 <sd_card_scan_file+0x26>
            }
        }
        f_closedir(&dir);
 80018de:	f107 0310 	add.w	r3, r7, #16
 80018e2:	4618      	mov	r0, r3
 80018e4:	f008 fa3d 	bl	8009d62 <f_closedir>
    }

    if (res != FR_OK){
 80018e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d007      	beq.n	8001900 <sd_card_scan_file+0x104>
        myprintf("Error!!! Scanning dir error: %d\n", res);
 80018f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80018f4:	4619      	mov	r1, r3
 80018f6:	4809      	ldr	r0, [pc, #36]	; (800191c <sd_card_scan_file+0x120>)
 80018f8:	f7ff fefa 	bl	80016f0 <myprintf>
        return STATUS_ERROR;
 80018fc:	2302      	movs	r3, #2
 80018fe:	e000      	b.n	8001902 <sd_card_scan_file+0x106>
    }
    else
        return STATUS_OK;
 8001900:	2301      	movs	r3, #1
}
 8001902:	4618      	mov	r0, r3
 8001904:	3748      	adds	r7, #72	; 0x48
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20001b44 	.word	0x20001b44
 8001910:	20001b4d 	.word	0x20001b4d
 8001914:	0800acbc 	.word	0x0800acbc
 8001918:	0800acc0 	.word	0x0800acc0
 800191c:	0800acc4 	.word	0x0800acc4
 8001920:	0800ace8 	.word	0x0800ace8

08001924 <sd_card_close>:

ret_status sd_card_close(void) {
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
    f_close(&fil);
 8001928:	4806      	ldr	r0, [pc, #24]	; (8001944 <sd_card_close+0x20>)
 800192a:	f007 ff74 	bl	8009816 <f_close>
    f_mount(NULL, "", 0);
 800192e:	2200      	movs	r2, #0
 8001930:	4905      	ldr	r1, [pc, #20]	; (8001948 <sd_card_close+0x24>)
 8001932:	2000      	movs	r0, #0
 8001934:	f007 fbae 	bl	8009094 <f_mount>
    myprintf("\r\nSD card is UNMOUNTED\r\n");
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <sd_card_close+0x28>)
 800193a:	f7ff fed9 	bl	80016f0 <myprintf>
    return STATUS_ERROR;
 800193e:	2302      	movs	r3, #2
}
 8001940:	4618      	mov	r0, r3
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20001810 	.word	0x20001810
 8001948:	0800ac40 	.word	0x0800ac40
 800194c:	0800acf0 	.word	0x0800acf0

08001950 <sd_card_read_data>:

ret_status sd_card_read_data(char *path, uint8_t *data, struct layers_struct *layers, uint8_t *number_of_images) {
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	f5ad 7d31 	sub.w	sp, sp, #708	; 0x2c4
 8001956:	af00      	add	r7, sp, #0
 8001958:	f507 7430 	add.w	r4, r7, #704	; 0x2c0
 800195c:	f5a4 742d 	sub.w	r4, r4, #692	; 0x2b4
 8001960:	6020      	str	r0, [r4, #0]
 8001962:	f507 7030 	add.w	r0, r7, #704	; 0x2c0
 8001966:	f5a0 702e 	sub.w	r0, r0, #696	; 0x2b8
 800196a:	6001      	str	r1, [r0, #0]
 800196c:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8001970:	f5a1 712f 	sub.w	r1, r1, #700	; 0x2bc
 8001974:	600a      	str	r2, [r1, #0]
 8001976:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 800197a:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 800197e:	6013      	str	r3, [r2, #0]


    FIL file;
    UINT br;
    char name[20] = { 0 };
 8001980:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001984:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	3304      	adds	r3, #4
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	60da      	str	r2, [r3, #12]

    // #### READING CONGFIGURATION
    sprintf((char*)name, "%s//%s", (char*)path, "CONFIG~1.txt");
 8001998:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800199c:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 80019a0:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80019a4:	4bbb      	ldr	r3, [pc, #748]	; (8001c94 <sd_card_read_data+0x344>)
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	49bb      	ldr	r1, [pc, #748]	; (8001c98 <sd_card_read_data+0x348>)
 80019aa:	f008 fb93 	bl	800a0d4 <siprintf>
    myprintf("start reading file: %s\r\n", name);
 80019ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019b2:	4619      	mov	r1, r3
 80019b4:	48b9      	ldr	r0, [pc, #740]	; (8001c9c <sd_card_read_data+0x34c>)
 80019b6:	f7ff fe9b 	bl	80016f0 <myprintf>
    fres = f_open(&file, name, FA_READ);
 80019ba:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80019be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019c2:	2201      	movs	r2, #1
 80019c4:	4618      	mov	r0, r3
 80019c6:	f007 fbab 	bl	8009120 <f_open>
 80019ca:	4603      	mov	r3, r0
 80019cc:	461a      	mov	r2, r3
 80019ce:	4bb4      	ldr	r3, [pc, #720]	; (8001ca0 <sd_card_read_data+0x350>)
 80019d0:	701a      	strb	r2, [r3, #0]
    if (fres != FR_OK) {
 80019d2:	4bb3      	ldr	r3, [pc, #716]	; (8001ca0 <sd_card_read_data+0x350>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d007      	beq.n	80019ea <sd_card_read_data+0x9a>
        myprintf("f_open error (%i)\r\n", fres);
 80019da:	4bb1      	ldr	r3, [pc, #708]	; (8001ca0 <sd_card_read_data+0x350>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	4619      	mov	r1, r3
 80019e0:	48b0      	ldr	r0, [pc, #704]	; (8001ca4 <sd_card_read_data+0x354>)
 80019e2:	f7ff fe85 	bl	80016f0 <myprintf>
        return STATUS_ERROR;
 80019e6:	2302      	movs	r3, #2
 80019e8:	e2c8      	b.n	8001f7c <sd_card_read_data+0x62c>
    }

    UINT num = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc

    uint8_t isComment = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f887 32bb 	strb.w	r3, [r7, #699]	; 0x2bb
    char ch;
    TCHAR buffor[32] = {0};
 80019f6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80019fa:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	3304      	adds	r3, #4
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
 8001a10:	615a      	str	r2, [r3, #20]
 8001a12:	619a      	str	r2, [r3, #24]
    while(!f_eof(&file)){
 8001a14:	e191      	b.n	8001d3a <sd_card_read_data+0x3ea>
        fres = f_read(&file, &ch, 1, &br);
 8001a16:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a1a:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8001a1e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001a22:	2201      	movs	r2, #1
 8001a24:	f007 fd3a 	bl	800949c <f_read>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4b9c      	ldr	r3, [pc, #624]	; (8001ca0 <sd_card_read_data+0x350>)
 8001a2e:	701a      	strb	r2, [r3, #0]
        if (fres != FR_OK) {
 8001a30:	4b9b      	ldr	r3, [pc, #620]	; (8001ca0 <sd_card_read_data+0x350>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d007      	beq.n	8001a48 <sd_card_read_data+0xf8>
            myprintf("f_read error (%i)\r\n", fres);
 8001a38:	4b99      	ldr	r3, [pc, #612]	; (8001ca0 <sd_card_read_data+0x350>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	489a      	ldr	r0, [pc, #616]	; (8001ca8 <sd_card_read_data+0x358>)
 8001a40:	f7ff fe56 	bl	80016f0 <myprintf>
            return STATUS_ERROR;
 8001a44:	2302      	movs	r3, #2
 8001a46:	e299      	b.n	8001f7c <sd_card_read_data+0x62c>
        }

        if('\n' == ch){
 8001a48:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001a4c:	f2a3 2369 	subw	r3, r3, #617	; 0x269
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b0a      	cmp	r3, #10
 8001a54:	d103      	bne.n	8001a5e <sd_card_read_data+0x10e>
            isComment = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f887 32bb 	strb.w	r3, [r7, #699]	; 0x2bb
            continue;
 8001a5c:	e16d      	b.n	8001d3a <sd_card_read_data+0x3ea>
        }
        if(isComment) continue;
 8001a5e:	f897 32bb 	ldrb.w	r3, [r7, #699]	; 0x2bb
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d000      	beq.n	8001a68 <sd_card_read_data+0x118>
 8001a66:	e168      	b.n	8001d3a <sd_card_read_data+0x3ea>
        if('#' == ch){
 8001a68:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001a6c:	f2a3 2369 	subw	r3, r3, #617	; 0x269
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b23      	cmp	r3, #35	; 0x23
 8001a74:	d103      	bne.n	8001a7e <sd_card_read_data+0x12e>
            isComment = 1;
 8001a76:	2301      	movs	r3, #1
 8001a78:	f887 32bb 	strb.w	r3, [r7, #699]	; 0x2bb
            continue;
 8001a7c:	e15d      	b.n	8001d3a <sd_card_read_data+0x3ea>
        }

        // Check number of images in animation
        if('N' == ch){
 8001a7e:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001a82:	f2a3 2369 	subw	r3, r3, #617	; 0x269
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b4e      	cmp	r3, #78	; 0x4e
 8001a8a:	f040 809d 	bne.w	8001bc8 <sd_card_read_data+0x278>
            uint8_t length_of_line = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f887 32ba 	strb.w	r3, [r7, #698]	; 0x2ba
            uint8_t position_of_char = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
            char c = 0;
 8001a9a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001a9e:	f2a3 238d 	subw	r3, r3, #653	; 0x28d
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
            while(';' != c){
 8001aa6:	e028      	b.n	8001afa <sd_card_read_data+0x1aa>
                length_of_line++;
 8001aa8:	f897 32ba 	ldrb.w	r3, [r7, #698]	; 0x2ba
 8001aac:	3301      	adds	r3, #1
 8001aae:	f887 32ba 	strb.w	r3, [r7, #698]	; 0x2ba

                if('=' == c) position_of_char = length_of_line;
 8001ab2:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001ab6:	f2a3 238d 	subw	r3, r3, #653	; 0x28d
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b3d      	cmp	r3, #61	; 0x3d
 8001abe:	d103      	bne.n	8001ac8 <sd_card_read_data+0x178>
 8001ac0:	f897 32ba 	ldrb.w	r3, [r7, #698]	; 0x2ba
 8001ac4:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9

                fres = f_read(&file, &c, 1, &br);
 8001ac8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001acc:	f107 0133 	add.w	r1, r7, #51	; 0x33
 8001ad0:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f007 fce1 	bl	800949c <f_read>
 8001ada:	4603      	mov	r3, r0
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b70      	ldr	r3, [pc, #448]	; (8001ca0 <sd_card_read_data+0x350>)
 8001ae0:	701a      	strb	r2, [r3, #0]
                if (fres != FR_OK) {
 8001ae2:	4b6f      	ldr	r3, [pc, #444]	; (8001ca0 <sd_card_read_data+0x350>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d007      	beq.n	8001afa <sd_card_read_data+0x1aa>
                    myprintf("f_read error (%i)\r\n", fres);
 8001aea:	4b6d      	ldr	r3, [pc, #436]	; (8001ca0 <sd_card_read_data+0x350>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	4619      	mov	r1, r3
 8001af0:	486d      	ldr	r0, [pc, #436]	; (8001ca8 <sd_card_read_data+0x358>)
 8001af2:	f7ff fdfd 	bl	80016f0 <myprintf>
                    return STATUS_ERROR;
 8001af6:	2302      	movs	r3, #2
 8001af8:	e240      	b.n	8001f7c <sd_card_read_data+0x62c>
            while(';' != c){
 8001afa:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001afe:	f2a3 238d 	subw	r3, r3, #653	; 0x28d
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b3b      	cmp	r3, #59	; 0x3b
 8001b06:	d1cf      	bne.n	8001aa8 <sd_card_read_data+0x158>
                }
            }
            f_lseek(&file, f_tell(&file)-length_of_line);
 8001b08:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001b0c:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001b10:	699a      	ldr	r2, [r3, #24]
 8001b12:	f897 32ba 	ldrb.w	r3, [r7, #698]	; 0x2ba
 8001b16:	1ad2      	subs	r2, r2, r3
 8001b18:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f007 fea3 	bl	800986a <f_lseek>
            fres = f_read(&file, &buffor, length_of_line, &br);
 8001b24:	f897 22ba 	ldrb.w	r2, [r7, #698]	; 0x2ba
 8001b28:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b2c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001b30:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001b34:	f007 fcb2 	bl	800949c <f_read>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4b58      	ldr	r3, [pc, #352]	; (8001ca0 <sd_card_read_data+0x350>)
 8001b3e:	701a      	strb	r2, [r3, #0]
            if (fres != FR_OK) {
 8001b40:	4b57      	ldr	r3, [pc, #348]	; (8001ca0 <sd_card_read_data+0x350>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d007      	beq.n	8001b58 <sd_card_read_data+0x208>
                myprintf("f_read error (%i)\r\n", fres);
 8001b48:	4b55      	ldr	r3, [pc, #340]	; (8001ca0 <sd_card_read_data+0x350>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4856      	ldr	r0, [pc, #344]	; (8001ca8 <sd_card_read_data+0x358>)
 8001b50:	f7ff fdce 	bl	80016f0 <myprintf>
                return STATUS_ERROR;
 8001b54:	2302      	movs	r3, #2
 8001b56:	e211      	b.n	8001f7c <sd_card_read_data+0x62c>
            }
            char buffor_number_of_image[3] = {0};
 8001b58:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001b5c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001b60:	4a52      	ldr	r2, [pc, #328]	; (8001cac <sd_card_read_data+0x35c>)
 8001b62:	8812      	ldrh	r2, [r2, #0]
 8001b64:	801a      	strh	r2, [r3, #0]
 8001b66:	2200      	movs	r2, #0
 8001b68:	709a      	strb	r2, [r3, #2]
            buffor_number_of_image[2] = '\0';
 8001b6a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001b6e:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001b72:	2200      	movs	r2, #0
 8001b74:	709a      	strb	r2, [r3, #2]
            if('=' != buffor[15]){
 8001b76:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001b7a:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8001b7e:	7bdb      	ldrb	r3, [r3, #15]
 8001b80:	2b3d      	cmp	r3, #61	; 0x3d
 8001b82:	d004      	beq.n	8001b8e <sd_card_read_data+0x23e>
                myprintf("Wrong format of NUMBER_OF_IMAGES in configuration.txt");
 8001b84:	484a      	ldr	r0, [pc, #296]	; (8001cb0 <sd_card_read_data+0x360>)
 8001b86:	f7ff fdb3 	bl	80016f0 <myprintf>
                return STATUS_ERROR;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e1f6      	b.n	8001f7c <sd_card_read_data+0x62c>
            }
            strncpy(buffor_number_of_image, &buffor[16], length_of_line-position_of_char);
 8001b8e:	f897 22ba 	ldrb.w	r2, [r7, #698]	; 0x2ba
 8001b92:	f897 32b9 	ldrb.w	r3, [r7, #697]	; 0x2b9
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b9e:	f103 0110 	add.w	r1, r3, #16
 8001ba2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f008 fab4 	bl	800a114 <strncpy>
            *number_of_images = (uint8_t)atoi(buffor_number_of_image);
 8001bac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f008 fa4a 	bl	800a04a <atoi>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001bbe:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	e0b8      	b.n	8001d3a <sd_card_read_data+0x3ea>
            continue;
        }


        // Check what image should show on the property layer
        if('L' == ch){
 8001bc8:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001bcc:	f2a3 2369 	subw	r3, r3, #617	; 0x269
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b4c      	cmp	r3, #76	; 0x4c
 8001bd4:	f040 80b1 	bne.w	8001d3a <sd_card_read_data+0x3ea>
            uint8_t length = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f887 32b8 	strb.w	r3, [r7, #696]	; 0x2b8
            char c = 0;
 8001bde:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001be2:	f2a3 2391 	subw	r3, r3, #657	; 0x291
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
            while(';' != c){
 8001bea:	e01d      	b.n	8001c28 <sd_card_read_data+0x2d8>
                length++;
 8001bec:	f897 32b8 	ldrb.w	r3, [r7, #696]	; 0x2b8
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	f887 32b8 	strb.w	r3, [r7, #696]	; 0x2b8
                fres = f_read(&file, &c, 1, &br);
 8001bf6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bfa:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 8001bfe:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001c02:	2201      	movs	r2, #1
 8001c04:	f007 fc4a 	bl	800949c <f_read>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <sd_card_read_data+0x350>)
 8001c0e:	701a      	strb	r2, [r3, #0]
                if (fres != FR_OK) {
 8001c10:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <sd_card_read_data+0x350>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d007      	beq.n	8001c28 <sd_card_read_data+0x2d8>
                    myprintf("f_read error (%i)\r\n", fres);
 8001c18:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <sd_card_read_data+0x350>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4822      	ldr	r0, [pc, #136]	; (8001ca8 <sd_card_read_data+0x358>)
 8001c20:	f7ff fd66 	bl	80016f0 <myprintf>
                    return STATUS_ERROR;
 8001c24:	2302      	movs	r3, #2
 8001c26:	e1a9      	b.n	8001f7c <sd_card_read_data+0x62c>
            while(';' != c){
 8001c28:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001c2c:	f2a3 2391 	subw	r3, r3, #657	; 0x291
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b3b      	cmp	r3, #59	; 0x3b
 8001c34:	d1da      	bne.n	8001bec <sd_card_read_data+0x29c>
                }
            }
            f_lseek(&file, f_tell(&file)-length);
 8001c36:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001c3a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001c3e:	699a      	ldr	r2, [r3, #24]
 8001c40:	f897 32b8 	ldrb.w	r3, [r7, #696]	; 0x2b8
 8001c44:	1ad2      	subs	r2, r2, r3
 8001c46:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f007 fe0c 	bl	800986a <f_lseek>
            fres = f_read(&file, &buffor, length, &br);
 8001c52:	f897 22b8 	ldrb.w	r2, [r7, #696]	; 0x2b8
 8001c56:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c5a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001c5e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001c62:	f007 fc1b 	bl	800949c <f_read>
 8001c66:	4603      	mov	r3, r0
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <sd_card_read_data+0x350>)
 8001c6c:	701a      	strb	r2, [r3, #0]
            if (fres != FR_OK) {
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <sd_card_read_data+0x350>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d007      	beq.n	8001c86 <sd_card_read_data+0x336>
                myprintf("f_read error (%i)\r\n", fres);
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <sd_card_read_data+0x350>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	480a      	ldr	r0, [pc, #40]	; (8001ca8 <sd_card_read_data+0x358>)
 8001c7e:	f7ff fd37 	bl	80016f0 <myprintf>
                return STATUS_ERROR;
 8001c82:	2302      	movs	r3, #2
 8001c84:	e17a      	b.n	8001f7c <sd_card_read_data+0x62c>
            }
            int i = 7;
 8001c86:	2307      	movs	r3, #7
 8001c88:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
            int count = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
            while(length > i){
 8001c92:	e036      	b.n	8001d02 <sd_card_read_data+0x3b2>
 8001c94:	0800ad0c 	.word	0x0800ad0c
 8001c98:	0800ad1c 	.word	0x0800ad1c
 8001c9c:	0800ad24 	.word	0x0800ad24
 8001ca0:	20001a40 	.word	0x20001a40
 8001ca4:	0800ad40 	.word	0x0800ad40
 8001ca8:	0800ad54 	.word	0x0800ad54
 8001cac:	0800add8 	.word	0x0800add8
 8001cb0:	0800ad68 	.word	0x0800ad68
                layers[num].values[count] = atoi(&buffor[i]);
 8001cb4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001cb8:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8001cbc:	4413      	add	r3, r2
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f008 f9c3 	bl	800a04a <atoi>
 8001cc4:	4601      	mov	r1, r0
 8001cc6:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8001cca:	4613      	mov	r3, r2
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	4413      	add	r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001cd8:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	441a      	add	r2, r3
 8001ce0:	b2c9      	uxtb	r1, r1
 8001ce2:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3302      	adds	r3, #2
 8001cea:	460a      	mov	r2, r1
 8001cec:	701a      	strb	r2, [r3, #0]
                i+=2;
 8001cee:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
                count++;
 8001cf8:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
            while(length > i){
 8001d02:	f897 32b8 	ldrb.w	r3, [r7, #696]	; 0x2b8
 8001d06:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	dbd2      	blt.n	8001cb4 <sd_card_read_data+0x364>
            }
            layers[num].count = count;
 8001d0e:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8001d12:	4613      	mov	r3, r2
 8001d14:	011b      	lsls	r3, r3, #4
 8001d16:	4413      	add	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001d20:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4413      	add	r3, r2
 8001d28:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	705a      	strb	r2, [r3, #1]
            num++;
 8001d30:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8001d34:	3301      	adds	r3, #1
 8001d36:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
    while(!f_eof(&file)){
 8001d3a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001d3e:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001d42:	699a      	ldr	r2, [r3, #24]
 8001d44:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001d48:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	f47f ae61 	bne.w	8001a16 <sd_card_read_data+0xc6>
        }

    }
    f_close(&file);
 8001d54:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f007 fd5c 	bl	8009816 <f_close>

    // #### READING FILES
//    myprintf("Reading files with animation\r\n");
    for (uint8_t image = 0; image < *number_of_images; image++) {
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f887 32af 	strb.w	r3, [r7, #687]	; 0x2af
 8001d64:	e0fe      	b.n	8001f64 <sd_card_read_data+0x614>
        char name[20] = { 0 };
 8001d66:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001d6a:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	3304      	adds	r3, #4
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
        sprintf((char*)name, "%s//%d.txt", (char*)path, image);
 8001d7e:	f897 32af 	ldrb.w	r3, [r7, #687]	; 0x2af
 8001d82:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8001d86:	f5a2 722d 	sub.w	r2, r2, #692	; 0x2b4
 8001d8a:	f107 0018 	add.w	r0, r7, #24
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	497d      	ldr	r1, [pc, #500]	; (8001f88 <sd_card_read_data+0x638>)
 8001d92:	f008 f99f 	bl	800a0d4 <siprintf>

		fres = f_open(&file, name, FA_READ);
 8001d96:	f107 0118 	add.w	r1, r7, #24
 8001d9a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4618      	mov	r0, r3
 8001da2:	f007 f9bd 	bl	8009120 <f_open>
 8001da6:	4603      	mov	r3, r0
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b78      	ldr	r3, [pc, #480]	; (8001f8c <sd_card_read_data+0x63c>)
 8001dac:	701a      	strb	r2, [r3, #0]
		if (fres != FR_OK) {
 8001dae:	4b77      	ldr	r3, [pc, #476]	; (8001f8c <sd_card_read_data+0x63c>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d007      	beq.n	8001dc6 <sd_card_read_data+0x476>
			myprintf("f_open error (%i)\r\n", fres);
 8001db6:	4b75      	ldr	r3, [pc, #468]	; (8001f8c <sd_card_read_data+0x63c>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4874      	ldr	r0, [pc, #464]	; (8001f90 <sd_card_read_data+0x640>)
 8001dbe:	f7ff fc97 	bl	80016f0 <myprintf>
			return STATUS_ERROR;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e0da      	b.n	8001f7c <sd_card_read_data+0x62c>
		}

        UINT num = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
        int i = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
        int j = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
        while(i < 256){
 8001dd8:	e0af      	b.n	8001f3a <sd_card_read_data+0x5ea>
            num = 1;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
            TCHAR c[2] = {0};
 8001de0:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001de4:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8001de8:	2200      	movs	r2, #0
 8001dea:	801a      	strh	r2, [r3, #0]
            TCHAR string[4] = {0};
 8001dec:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001df0:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]

            fres = f_read(&file, c, 1, &br);
 8001df8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001dfc:	f107 0114 	add.w	r1, r7, #20
 8001e00:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001e04:	2201      	movs	r2, #1
 8001e06:	f007 fb49 	bl	800949c <f_read>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b5f      	ldr	r3, [pc, #380]	; (8001f8c <sd_card_read_data+0x63c>)
 8001e10:	701a      	strb	r2, [r3, #0]
            if (fres != FR_OK) {
 8001e12:	4b5e      	ldr	r3, [pc, #376]	; (8001f8c <sd_card_read_data+0x63c>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d025      	beq.n	8001e66 <sd_card_read_data+0x516>
                myprintf("f_read error (%i)\r\n", fres);
 8001e1a:	4b5c      	ldr	r3, [pc, #368]	; (8001f8c <sd_card_read_data+0x63c>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	485c      	ldr	r0, [pc, #368]	; (8001f94 <sd_card_read_data+0x644>)
 8001e22:	f7ff fc65 	bl	80016f0 <myprintf>
                return STATUS_ERROR;
 8001e26:	2302      	movs	r3, #2
 8001e28:	e0a8      	b.n	8001f7c <sd_card_read_data+0x62c>
            }
            while(',' != c[0]){
                num++;
 8001e2a:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8001e2e:	3301      	adds	r3, #1
 8001e30:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
                fres = f_read(&file, c, 1, &br);
 8001e34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e38:	f107 0114 	add.w	r1, r7, #20
 8001e3c:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001e40:	2201      	movs	r2, #1
 8001e42:	f007 fb2b 	bl	800949c <f_read>
 8001e46:	4603      	mov	r3, r0
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b50      	ldr	r3, [pc, #320]	; (8001f8c <sd_card_read_data+0x63c>)
 8001e4c:	701a      	strb	r2, [r3, #0]
                if (fres != FR_OK) {
 8001e4e:	4b4f      	ldr	r3, [pc, #316]	; (8001f8c <sd_card_read_data+0x63c>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d007      	beq.n	8001e66 <sd_card_read_data+0x516>
                    myprintf("f_read error (%i)\r\n", fres);
 8001e56:	4b4d      	ldr	r3, [pc, #308]	; (8001f8c <sd_card_read_data+0x63c>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	484d      	ldr	r0, [pc, #308]	; (8001f94 <sd_card_read_data+0x644>)
 8001e5e:	f7ff fc47 	bl	80016f0 <myprintf>
                    return STATUS_ERROR;
 8001e62:	2302      	movs	r3, #2
 8001e64:	e068      	b.n	8001f38 <sd_card_read_data+0x5e8>
            while(',' != c[0]){
 8001e66:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001e6a:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b2c      	cmp	r3, #44	; 0x2c
 8001e72:	d1da      	bne.n	8001e2a <sd_card_read_data+0x4da>
                }
            }
            f_lseek(&file, f_tell(&file)-num);
 8001e74:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001e78:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001e7c:	699a      	ldr	r2, [r3, #24]
 8001e7e:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8001e82:	1ad2      	subs	r2, r2, r3
 8001e84:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e88:	4611      	mov	r1, r2
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f007 fced 	bl	800986a <f_lseek>
            fres = f_read(&file, string, num-1, &br);
 8001e90:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8001e94:	1e5a      	subs	r2, r3, #1
 8001e96:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e9a:	f107 0110 	add.w	r1, r7, #16
 8001e9e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001ea2:	f007 fafb 	bl	800949c <f_read>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4b38      	ldr	r3, [pc, #224]	; (8001f8c <sd_card_read_data+0x63c>)
 8001eac:	701a      	strb	r2, [r3, #0]
            if (fres != FR_OK) {
 8001eae:	4b37      	ldr	r3, [pc, #220]	; (8001f8c <sd_card_read_data+0x63c>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d007      	beq.n	8001ec6 <sd_card_read_data+0x576>
                myprintf("f_read error (%i)\r\n", fres);
 8001eb6:	4b35      	ldr	r3, [pc, #212]	; (8001f8c <sd_card_read_data+0x63c>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4835      	ldr	r0, [pc, #212]	; (8001f94 <sd_card_read_data+0x644>)
 8001ebe:	f7ff fc17 	bl	80016f0 <myprintf>
                return STATUS_ERROR;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e038      	b.n	8001f38 <sd_card_read_data+0x5e8>
            }
            f_lseek(&file, f_tell(&file)+1);
 8001ec6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001eca:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f007 fcc6 	bl	800986a <f_lseek>
            *(data + image*256*3 + i*3 + j++) = atoi(string);
 8001ede:	f107 0310 	add.w	r3, r7, #16
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f008 f8b1 	bl	800a04a <atoi>
 8001ee8:	f897 22af 	ldrb.w	r2, [r7, #687]	; 0x2af
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	18ca      	adds	r2, r1, r3
 8001f02:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001f06:	1c59      	adds	r1, r3, #1
 8001f08:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8001f12:	f5a2 722e 	sub.w	r2, r2, #696	; 0x2b8
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	4413      	add	r3, r2
 8001f1a:	b2c2      	uxtb	r2, r0
 8001f1c:	701a      	strb	r2, [r3, #0]
            if(j>2){
 8001f1e:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	dd09      	ble.n	8001f3a <sd_card_read_data+0x5ea>
                j = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
                i++;
 8001f2c:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8001f30:	3301      	adds	r3, #1
 8001f32:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8001f36:	e000      	b.n	8001f3a <sd_card_read_data+0x5ea>
			return STATUS_ERROR;
 8001f38:	e020      	b.n	8001f7c <sd_card_read_data+0x62c>
        while(i < 256){
 8001f3a:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8001f3e:	2bff      	cmp	r3, #255	; 0xff
 8001f40:	f77f af4b 	ble.w	8001dda <sd_card_read_data+0x48a>
            }
        }
        f_close(&file);
 8001f44:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f007 fc64 	bl	8009816 <f_close>
        myprintf("Reading file %s is completed successfully\n", name);
 8001f4e:	f107 0318 	add.w	r3, r7, #24
 8001f52:	4619      	mov	r1, r3
 8001f54:	4810      	ldr	r0, [pc, #64]	; (8001f98 <sd_card_read_data+0x648>)
 8001f56:	f7ff fbcb 	bl	80016f0 <myprintf>
    for (uint8_t image = 0; image < *number_of_images; image++) {
 8001f5a:	f897 32af 	ldrb.w	r3, [r7, #687]	; 0x2af
 8001f5e:	3301      	adds	r3, #1
 8001f60:	f887 32af 	strb.w	r3, [r7, #687]	; 0x2af
 8001f64:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001f68:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	f897 22af 	ldrb.w	r2, [r7, #687]	; 0x2af
 8001f74:	429a      	cmp	r2, r3
 8001f76:	f4ff aef6 	bcc.w	8001d66 <sd_card_read_data+0x416>
    }
    return STATUS_OK;
 8001f7a:	2301      	movs	r3, #1
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f507 7731 	add.w	r7, r7, #708	; 0x2c4
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd90      	pop	{r4, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	0800ada0 	.word	0x0800ada0
 8001f8c:	20001a40 	.word	0x20001a40
 8001f90:	0800ad40 	.word	0x0800ad40
 8001f94:	0800ad54 	.word	0x0800ad54
 8001f98:	0800adac 	.word	0x0800adac

08001f9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	607b      	str	r3, [r7, #4]
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	4a0f      	ldr	r2, [pc, #60]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb2:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	603b      	str	r3, [r7, #0]
 8001fc2:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	4a08      	ldr	r2, [pc, #32]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800

08001fec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08c      	sub	sp, #48	; 0x30
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 031c 	add.w	r3, r7, #28
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a32      	ldr	r2, [pc, #200]	; (80020d4 <HAL_SPI_MspInit+0xe8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d12c      	bne.n	8002068 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	4b31      	ldr	r3, [pc, #196]	; (80020d8 <HAL_SPI_MspInit+0xec>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	4a30      	ldr	r2, [pc, #192]	; (80020d8 <HAL_SPI_MspInit+0xec>)
 8002018:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800201c:	6453      	str	r3, [r2, #68]	; 0x44
 800201e:	4b2e      	ldr	r3, [pc, #184]	; (80020d8 <HAL_SPI_MspInit+0xec>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002026:	61bb      	str	r3, [r7, #24]
 8002028:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <HAL_SPI_MspInit+0xec>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a29      	ldr	r2, [pc, #164]	; (80020d8 <HAL_SPI_MspInit+0xec>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <HAL_SPI_MspInit+0xec>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002046:	23e0      	movs	r3, #224	; 0xe0
 8002048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002052:	2303      	movs	r3, #3
 8002054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002056:	2305      	movs	r3, #5
 8002058:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205a:	f107 031c 	add.w	r3, r7, #28
 800205e:	4619      	mov	r1, r3
 8002060:	481e      	ldr	r0, [pc, #120]	; (80020dc <HAL_SPI_MspInit+0xf0>)
 8002062:	f001 fd7b 	bl	8003b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002066:	e030      	b.n	80020ca <HAL_SPI_MspInit+0xde>
  else if(hspi->Instance==SPI3)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a1c      	ldr	r2, [pc, #112]	; (80020e0 <HAL_SPI_MspInit+0xf4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d12b      	bne.n	80020ca <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <HAL_SPI_MspInit+0xec>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	4a17      	ldr	r2, [pc, #92]	; (80020d8 <HAL_SPI_MspInit+0xec>)
 800207c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002080:	6413      	str	r3, [r2, #64]	; 0x40
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <HAL_SPI_MspInit+0xec>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_SPI_MspInit+0xec>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a10      	ldr	r2, [pc, #64]	; (80020d8 <HAL_SPI_MspInit+0xec>)
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <HAL_SPI_MspInit+0xec>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_CLK_Pin|LCD_DIN_Pin;
 80020aa:	2328      	movs	r3, #40	; 0x28
 80020ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ae:	2302      	movs	r3, #2
 80020b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b6:	2303      	movs	r3, #3
 80020b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80020ba:	2306      	movs	r3, #6
 80020bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020be:	f107 031c 	add.w	r3, r7, #28
 80020c2:	4619      	mov	r1, r3
 80020c4:	4807      	ldr	r0, [pc, #28]	; (80020e4 <HAL_SPI_MspInit+0xf8>)
 80020c6:	f001 fd49 	bl	8003b5c <HAL_GPIO_Init>
}
 80020ca:	bf00      	nop
 80020cc:	3730      	adds	r7, #48	; 0x30
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40013000 	.word	0x40013000
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40020000 	.word	0x40020000
 80020e0:	40003c00 	.word	0x40003c00
 80020e4:	40020400 	.word	0x40020400

080020e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a98      	ldr	r2, [pc, #608]	; (8002358 <HAL_TIM_Base_MspInit+0x270>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d17c      	bne.n	80021f4 <HAL_TIM_Base_MspInit+0x10c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	4b97      	ldr	r3, [pc, #604]	; (800235c <HAL_TIM_Base_MspInit+0x274>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	4a96      	ldr	r2, [pc, #600]	; (800235c <HAL_TIM_Base_MspInit+0x274>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6453      	str	r3, [r2, #68]	; 0x44
 800210a:	4b94      	ldr	r3, [pc, #592]	; (800235c <HAL_TIM_Base_MspInit+0x274>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8002116:	4b92      	ldr	r3, [pc, #584]	; (8002360 <HAL_TIM_Base_MspInit+0x278>)
 8002118:	4a92      	ldr	r2, [pc, #584]	; (8002364 <HAL_TIM_Base_MspInit+0x27c>)
 800211a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800211c:	4b90      	ldr	r3, [pc, #576]	; (8002360 <HAL_TIM_Base_MspInit+0x278>)
 800211e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002122:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002124:	4b8e      	ldr	r3, [pc, #568]	; (8002360 <HAL_TIM_Base_MspInit+0x278>)
 8002126:	2240      	movs	r2, #64	; 0x40
 8002128:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800212a:	4b8d      	ldr	r3, [pc, #564]	; (8002360 <HAL_TIM_Base_MspInit+0x278>)
 800212c:	2200      	movs	r2, #0
 800212e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002130:	4b8b      	ldr	r3, [pc, #556]	; (8002360 <HAL_TIM_Base_MspInit+0x278>)
 8002132:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002136:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002138:	4b89      	ldr	r3, [pc, #548]	; (8002360 <HAL_TIM_Base_MspInit+0x278>)
 800213a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800213e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002140:	4b87      	ldr	r3, [pc, #540]	; (8002360 <HAL_TIM_Base_MspInit+0x278>)
 8002142:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002146:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8002148:	4b85      	ldr	r3, [pc, #532]	; (8002360 <HAL_TIM_Base_MspInit+0x278>)
 800214a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800214e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002150:	4b83      	ldr	r3, [pc, #524]	; (8002360 <HAL_TIM_Base_MspInit+0x278>)
 8002152:	2200      	movs	r2, #0
 8002154:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002156:	4b82      	ldr	r3, [pc, #520]	; (8002360 <HAL_TIM_Base_MspInit+0x278>)
 8002158:	2200      	movs	r2, #0
 800215a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800215c:	4880      	ldr	r0, [pc, #512]	; (8002360 <HAL_TIM_Base_MspInit+0x278>)
 800215e:	f001 f96b 	bl	8003438 <HAL_DMA_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8002168:	f7ff fabc 	bl	80016e4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a7c      	ldr	r2, [pc, #496]	; (8002360 <HAL_TIM_Base_MspInit+0x278>)
 8002170:	625a      	str	r2, [r3, #36]	; 0x24
 8002172:	4a7b      	ldr	r2, [pc, #492]	; (8002360 <HAL_TIM_Base_MspInit+0x278>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 8002178:	4b7b      	ldr	r3, [pc, #492]	; (8002368 <HAL_TIM_Base_MspInit+0x280>)
 800217a:	4a7c      	ldr	r2, [pc, #496]	; (800236c <HAL_TIM_Base_MspInit+0x284>)
 800217c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 800217e:	4b7a      	ldr	r3, [pc, #488]	; (8002368 <HAL_TIM_Base_MspInit+0x280>)
 8002180:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002184:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002186:	4b78      	ldr	r3, [pc, #480]	; (8002368 <HAL_TIM_Base_MspInit+0x280>)
 8002188:	2240      	movs	r2, #64	; 0x40
 800218a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800218c:	4b76      	ldr	r3, [pc, #472]	; (8002368 <HAL_TIM_Base_MspInit+0x280>)
 800218e:	2200      	movs	r2, #0
 8002190:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8002192:	4b75      	ldr	r3, [pc, #468]	; (8002368 <HAL_TIM_Base_MspInit+0x280>)
 8002194:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002198:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800219a:	4b73      	ldr	r3, [pc, #460]	; (8002368 <HAL_TIM_Base_MspInit+0x280>)
 800219c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021a0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021a2:	4b71      	ldr	r3, [pc, #452]	; (8002368 <HAL_TIM_Base_MspInit+0x280>)
 80021a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021a8:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 80021aa:	4b6f      	ldr	r3, [pc, #444]	; (8002368 <HAL_TIM_Base_MspInit+0x280>)
 80021ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021b0:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 80021b2:	4b6d      	ldr	r3, [pc, #436]	; (8002368 <HAL_TIM_Base_MspInit+0x280>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021b8:	4b6b      	ldr	r3, [pc, #428]	; (8002368 <HAL_TIM_Base_MspInit+0x280>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 80021be:	486a      	ldr	r0, [pc, #424]	; (8002368 <HAL_TIM_Base_MspInit+0x280>)
 80021c0:	f001 f93a 	bl	8003438 <HAL_DMA_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_TIM_Base_MspInit+0xe6>
    {
      Error_Handler();
 80021ca:	f7ff fa8b 	bl	80016e4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a65      	ldr	r2, [pc, #404]	; (8002368 <HAL_TIM_Base_MspInit+0x280>)
 80021d2:	631a      	str	r2, [r3, #48]	; 0x30
 80021d4:	4a64      	ldr	r2, [pc, #400]	; (8002368 <HAL_TIM_Base_MspInit+0x280>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a62      	ldr	r2, [pc, #392]	; (8002368 <HAL_TIM_Base_MspInit+0x280>)
 80021de:	639a      	str	r2, [r3, #56]	; 0x38
 80021e0:	4a61      	ldr	r2, [pc, #388]	; (8002368 <HAL_TIM_Base_MspInit+0x280>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a5f      	ldr	r2, [pc, #380]	; (8002368 <HAL_TIM_Base_MspInit+0x280>)
 80021ea:	635a      	str	r2, [r3, #52]	; 0x34
 80021ec:	4a5e      	ldr	r2, [pc, #376]	; (8002368 <HAL_TIM_Base_MspInit+0x280>)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021f2:	e0ac      	b.n	800234e <HAL_TIM_Base_MspInit+0x266>
  else if(htim_base->Instance==TIM3)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a5d      	ldr	r2, [pc, #372]	; (8002370 <HAL_TIM_Base_MspInit+0x288>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	f040 80a7 	bne.w	800234e <HAL_TIM_Base_MspInit+0x266>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002200:	2300      	movs	r3, #0
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	4b55      	ldr	r3, [pc, #340]	; (800235c <HAL_TIM_Base_MspInit+0x274>)
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	4a54      	ldr	r2, [pc, #336]	; (800235c <HAL_TIM_Base_MspInit+0x274>)
 800220a:	f043 0302 	orr.w	r3, r3, #2
 800220e:	6413      	str	r3, [r2, #64]	; 0x40
 8002210:	4b52      	ldr	r3, [pc, #328]	; (800235c <HAL_TIM_Base_MspInit+0x274>)
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 800221c:	4b55      	ldr	r3, [pc, #340]	; (8002374 <HAL_TIM_Base_MspInit+0x28c>)
 800221e:	4a56      	ldr	r2, [pc, #344]	; (8002378 <HAL_TIM_Base_MspInit+0x290>)
 8002220:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8002222:	4b54      	ldr	r3, [pc, #336]	; (8002374 <HAL_TIM_Base_MspInit+0x28c>)
 8002224:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002228:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800222a:	4b52      	ldr	r3, [pc, #328]	; (8002374 <HAL_TIM_Base_MspInit+0x28c>)
 800222c:	2240      	movs	r2, #64	; 0x40
 800222e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002230:	4b50      	ldr	r3, [pc, #320]	; (8002374 <HAL_TIM_Base_MspInit+0x28c>)
 8002232:	2200      	movs	r2, #0
 8002234:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002236:	4b4f      	ldr	r3, [pc, #316]	; (8002374 <HAL_TIM_Base_MspInit+0x28c>)
 8002238:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800223c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800223e:	4b4d      	ldr	r3, [pc, #308]	; (8002374 <HAL_TIM_Base_MspInit+0x28c>)
 8002240:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002244:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002246:	4b4b      	ldr	r3, [pc, #300]	; (8002374 <HAL_TIM_Base_MspInit+0x28c>)
 8002248:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800224c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 800224e:	4b49      	ldr	r3, [pc, #292]	; (8002374 <HAL_TIM_Base_MspInit+0x28c>)
 8002250:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002254:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8002256:	4b47      	ldr	r3, [pc, #284]	; (8002374 <HAL_TIM_Base_MspInit+0x28c>)
 8002258:	2200      	movs	r2, #0
 800225a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800225c:	4b45      	ldr	r3, [pc, #276]	; (8002374 <HAL_TIM_Base_MspInit+0x28c>)
 800225e:	2200      	movs	r2, #0
 8002260:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8002262:	4844      	ldr	r0, [pc, #272]	; (8002374 <HAL_TIM_Base_MspInit+0x28c>)
 8002264:	f001 f8e8 	bl	8003438 <HAL_DMA_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_TIM_Base_MspInit+0x18a>
      Error_Handler();
 800226e:	f7ff fa39 	bl	80016e4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a3f      	ldr	r2, [pc, #252]	; (8002374 <HAL_TIM_Base_MspInit+0x28c>)
 8002276:	625a      	str	r2, [r3, #36]	; 0x24
 8002278:	4a3e      	ldr	r2, [pc, #248]	; (8002374 <HAL_TIM_Base_MspInit+0x28c>)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a3c      	ldr	r2, [pc, #240]	; (8002374 <HAL_TIM_Base_MspInit+0x28c>)
 8002282:	639a      	str	r2, [r3, #56]	; 0x38
 8002284:	4a3b      	ldr	r2, [pc, #236]	; (8002374 <HAL_TIM_Base_MspInit+0x28c>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 800228a:	4b3c      	ldr	r3, [pc, #240]	; (800237c <HAL_TIM_Base_MspInit+0x294>)
 800228c:	4a3c      	ldr	r2, [pc, #240]	; (8002380 <HAL_TIM_Base_MspInit+0x298>)
 800228e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8002290:	4b3a      	ldr	r3, [pc, #232]	; (800237c <HAL_TIM_Base_MspInit+0x294>)
 8002292:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002296:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002298:	4b38      	ldr	r3, [pc, #224]	; (800237c <HAL_TIM_Base_MspInit+0x294>)
 800229a:	2240      	movs	r2, #64	; 0x40
 800229c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800229e:	4b37      	ldr	r3, [pc, #220]	; (800237c <HAL_TIM_Base_MspInit+0x294>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80022a4:	4b35      	ldr	r3, [pc, #212]	; (800237c <HAL_TIM_Base_MspInit+0x294>)
 80022a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022aa:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022ac:	4b33      	ldr	r3, [pc, #204]	; (800237c <HAL_TIM_Base_MspInit+0x294>)
 80022ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022b2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022b4:	4b31      	ldr	r3, [pc, #196]	; (800237c <HAL_TIM_Base_MspInit+0x294>)
 80022b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ba:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 80022bc:	4b2f      	ldr	r3, [pc, #188]	; (800237c <HAL_TIM_Base_MspInit+0x294>)
 80022be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022c2:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80022c4:	4b2d      	ldr	r3, [pc, #180]	; (800237c <HAL_TIM_Base_MspInit+0x294>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022ca:	4b2c      	ldr	r3, [pc, #176]	; (800237c <HAL_TIM_Base_MspInit+0x294>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80022d0:	482a      	ldr	r0, [pc, #168]	; (800237c <HAL_TIM_Base_MspInit+0x294>)
 80022d2:	f001 f8b1 	bl	8003438 <HAL_DMA_Init>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_TIM_Base_MspInit+0x1f8>
      Error_Handler();
 80022dc:	f7ff fa02 	bl	80016e4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a26      	ldr	r2, [pc, #152]	; (800237c <HAL_TIM_Base_MspInit+0x294>)
 80022e4:	629a      	str	r2, [r3, #40]	; 0x28
 80022e6:	4a25      	ldr	r2, [pc, #148]	; (800237c <HAL_TIM_Base_MspInit+0x294>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 80022ec:	4b25      	ldr	r3, [pc, #148]	; (8002384 <HAL_TIM_Base_MspInit+0x29c>)
 80022ee:	4a26      	ldr	r2, [pc, #152]	; (8002388 <HAL_TIM_Base_MspInit+0x2a0>)
 80022f0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 80022f2:	4b24      	ldr	r3, [pc, #144]	; (8002384 <HAL_TIM_Base_MspInit+0x29c>)
 80022f4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80022f8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022fa:	4b22      	ldr	r3, [pc, #136]	; (8002384 <HAL_TIM_Base_MspInit+0x29c>)
 80022fc:	2240      	movs	r2, #64	; 0x40
 80022fe:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002300:	4b20      	ldr	r3, [pc, #128]	; (8002384 <HAL_TIM_Base_MspInit+0x29c>)
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002306:	4b1f      	ldr	r3, [pc, #124]	; (8002384 <HAL_TIM_Base_MspInit+0x29c>)
 8002308:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800230c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800230e:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <HAL_TIM_Base_MspInit+0x29c>)
 8002310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002314:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002316:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <HAL_TIM_Base_MspInit+0x29c>)
 8002318:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800231c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 800231e:	4b19      	ldr	r3, [pc, #100]	; (8002384 <HAL_TIM_Base_MspInit+0x29c>)
 8002320:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002324:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002326:	4b17      	ldr	r3, [pc, #92]	; (8002384 <HAL_TIM_Base_MspInit+0x29c>)
 8002328:	2200      	movs	r2, #0
 800232a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800232c:	4b15      	ldr	r3, [pc, #84]	; (8002384 <HAL_TIM_Base_MspInit+0x29c>)
 800232e:	2200      	movs	r2, #0
 8002330:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8002332:	4814      	ldr	r0, [pc, #80]	; (8002384 <HAL_TIM_Base_MspInit+0x29c>)
 8002334:	f001 f880 	bl	8003438 <HAL_DMA_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_TIM_Base_MspInit+0x25a>
      Error_Handler();
 800233e:	f7ff f9d1 	bl	80016e4 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a0f      	ldr	r2, [pc, #60]	; (8002384 <HAL_TIM_Base_MspInit+0x29c>)
 8002346:	62da      	str	r2, [r3, #44]	; 0x2c
 8002348:	4a0e      	ldr	r2, [pc, #56]	; (8002384 <HAL_TIM_Base_MspInit+0x29c>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40010000 	.word	0x40010000
 800235c:	40023800 	.word	0x40023800
 8002360:	200001e4 	.word	0x200001e4
 8002364:	40026428 	.word	0x40026428
 8002368:	20000244 	.word	0x20000244
 800236c:	40026470 	.word	0x40026470
 8002370:	40000400 	.word	0x40000400
 8002374:	200002a4 	.word	0x200002a4
 8002378:	40026070 	.word	0x40026070
 800237c:	20000304 	.word	0x20000304
 8002380:	40026088 	.word	0x40026088
 8002384:	20000364 	.word	0x20000364
 8002388:	400260b8 	.word	0x400260b8

0800238c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a33      	ldr	r2, [pc, #204]	; (8002478 <HAL_TIM_MspPostInit+0xec>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d11f      	bne.n	80023ee <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	4b32      	ldr	r3, [pc, #200]	; (800247c <HAL_TIM_MspPostInit+0xf0>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a31      	ldr	r2, [pc, #196]	; (800247c <HAL_TIM_MspPostInit+0xf0>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b2f      	ldr	r3, [pc, #188]	; (800247c <HAL_TIM_MspPostInit+0xf0>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80023ca:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80023ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d8:	2300      	movs	r3, #0
 80023da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023dc:	2301      	movs	r3, #1
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	4619      	mov	r1, r3
 80023e6:	4826      	ldr	r0, [pc, #152]	; (8002480 <HAL_TIM_MspPostInit+0xf4>)
 80023e8:	f001 fbb8 	bl	8003b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80023ec:	e040      	b.n	8002470 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a24      	ldr	r2, [pc, #144]	; (8002484 <HAL_TIM_MspPostInit+0xf8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d13b      	bne.n	8002470 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f8:	2300      	movs	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	4b1f      	ldr	r3, [pc, #124]	; (800247c <HAL_TIM_MspPostInit+0xf0>)
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	4a1e      	ldr	r2, [pc, #120]	; (800247c <HAL_TIM_MspPostInit+0xf0>)
 8002402:	f043 0302 	orr.w	r3, r3, #2
 8002406:	6313      	str	r3, [r2, #48]	; 0x30
 8002408:	4b1c      	ldr	r3, [pc, #112]	; (800247c <HAL_TIM_MspPostInit+0xf0>)
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002414:	2300      	movs	r3, #0
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	4b18      	ldr	r3, [pc, #96]	; (800247c <HAL_TIM_MspPostInit+0xf0>)
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	4a17      	ldr	r2, [pc, #92]	; (800247c <HAL_TIM_MspPostInit+0xf0>)
 800241e:	f043 0304 	orr.w	r3, r3, #4
 8002422:	6313      	str	r3, [r2, #48]	; 0x30
 8002424:	4b15      	ldr	r3, [pc, #84]	; (800247c <HAL_TIM_MspPostInit+0xf0>)
 8002426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002430:	2301      	movs	r3, #1
 8002432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002434:	2302      	movs	r3, #2
 8002436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243c:	2300      	movs	r3, #0
 800243e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002440:	2302      	movs	r3, #2
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	4619      	mov	r1, r3
 800244a:	480f      	ldr	r0, [pc, #60]	; (8002488 <HAL_TIM_MspPostInit+0xfc>)
 800244c:	f001 fb86 	bl	8003b5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002450:	23c0      	movs	r3, #192	; 0xc0
 8002452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002454:	2302      	movs	r3, #2
 8002456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2300      	movs	r3, #0
 800245e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002460:	2302      	movs	r3, #2
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	4619      	mov	r1, r3
 800246a:	4808      	ldr	r0, [pc, #32]	; (800248c <HAL_TIM_MspPostInit+0x100>)
 800246c:	f001 fb76 	bl	8003b5c <HAL_GPIO_Init>
}
 8002470:	bf00      	nop
 8002472:	3728      	adds	r7, #40	; 0x28
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40010000 	.word	0x40010000
 800247c:	40023800 	.word	0x40023800
 8002480:	40020000 	.word	0x40020000
 8002484:	40000400 	.word	0x40000400
 8002488:	40020400 	.word	0x40020400
 800248c:	40020800 	.word	0x40020800

08002490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	; 0x28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a19      	ldr	r2, [pc, #100]	; (8002514 <HAL_UART_MspInit+0x84>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d12b      	bne.n	800250a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	4b18      	ldr	r3, [pc, #96]	; (8002518 <HAL_UART_MspInit+0x88>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	4a17      	ldr	r2, [pc, #92]	; (8002518 <HAL_UART_MspInit+0x88>)
 80024bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c0:	6413      	str	r3, [r2, #64]	; 0x40
 80024c2:	4b15      	ldr	r3, [pc, #84]	; (8002518 <HAL_UART_MspInit+0x88>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <HAL_UART_MspInit+0x88>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a10      	ldr	r2, [pc, #64]	; (8002518 <HAL_UART_MspInit+0x88>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <HAL_UART_MspInit+0x88>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024ea:	230c      	movs	r3, #12
 80024ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f6:	2303      	movs	r3, #3
 80024f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024fa:	2307      	movs	r3, #7
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fe:	f107 0314 	add.w	r3, r7, #20
 8002502:	4619      	mov	r1, r3
 8002504:	4805      	ldr	r0, [pc, #20]	; (800251c <HAL_UART_MspInit+0x8c>)
 8002506:	f001 fb29 	bl	8003b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800250a:	bf00      	nop
 800250c:	3728      	adds	r7, #40	; 0x28
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40004400 	.word	0x40004400
 8002518:	40023800 	.word	0x40023800
 800251c:	40020000 	.word	0x40020000

08002520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002524:	e7fe      	b.n	8002524 <NMI_Handler+0x4>

08002526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800252a:	e7fe      	b.n	800252a <HardFault_Handler+0x4>

0800252c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002530:	e7fe      	b.n	8002530 <MemManage_Handler+0x4>

08002532 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002536:	e7fe      	b.n	8002536 <BusFault_Handler+0x4>

08002538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800253c:	e7fe      	b.n	800253c <UsageFault_Handler+0x4>

0800253e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800256c:	f000 fe0e 	bl	800318c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	bd80      	pop	{r7, pc}

08002574 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_UP_Pin);
 8002578:	2002      	movs	r0, #2
 800257a:	f001 fc8d 	bl	8003e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}

08002582 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_MID_Pin);
 8002586:	2004      	movs	r0, #4
 8002588:	f001 fc86 	bl	8003e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}

08002590 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_DOWN_Pin);
 8002594:	2008      	movs	r0, #8
 8002596:	f001 fc7f 	bl	8003e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80025a4:	4802      	ldr	r0, [pc, #8]	; (80025b0 <DMA1_Stream4_IRQHandler+0x10>)
 80025a6:	f001 f86f 	bl	8003688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	200002a4 	.word	0x200002a4

080025b4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <DMA1_Stream5_IRQHandler+0x10>)
 80025ba:	f001 f865 	bl	8003688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000304 	.word	0x20000304

080025c8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <DMA1_Stream7_IRQHandler+0x10>)
 80025ce:	f001 f85b 	bl	8003688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000364 	.word	0x20000364

080025dc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80025e0:	4802      	ldr	r0, [pc, #8]	; (80025ec <DMA2_Stream1_IRQHandler+0x10>)
 80025e2:	f001 f851 	bl	8003688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	200001e4 	.word	0x200001e4

080025f0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 80025f4:	4802      	ldr	r0, [pc, #8]	; (8002600 <DMA2_Stream4_IRQHandler+0x10>)
 80025f6:	f001 f847 	bl	8003688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20000244 	.word	0x20000244

08002604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800260c:	4a14      	ldr	r2, [pc, #80]	; (8002660 <_sbrk+0x5c>)
 800260e:	4b15      	ldr	r3, [pc, #84]	; (8002664 <_sbrk+0x60>)
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002618:	4b13      	ldr	r3, [pc, #76]	; (8002668 <_sbrk+0x64>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d102      	bne.n	8002626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <_sbrk+0x64>)
 8002622:	4a12      	ldr	r2, [pc, #72]	; (800266c <_sbrk+0x68>)
 8002624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <_sbrk+0x64>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	429a      	cmp	r2, r3
 8002632:	d207      	bcs.n	8002644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002634:	f007 fd0e 	bl	800a054 <__errno>
 8002638:	4603      	mov	r3, r0
 800263a:	220c      	movs	r2, #12
 800263c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800263e:	f04f 33ff 	mov.w	r3, #4294967295
 8002642:	e009      	b.n	8002658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <_sbrk+0x64>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <_sbrk+0x64>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	4a05      	ldr	r2, [pc, #20]	; (8002668 <_sbrk+0x64>)
 8002654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002656:	68fb      	ldr	r3, [r7, #12]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	20018000 	.word	0x20018000
 8002664:	00000400 	.word	0x00000400
 8002668:	20001b5c 	.word	0x20001b5c
 800266c:	20001dc0 	.word	0x20001dc0

08002670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <SystemInit+0x20>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267a:	4a05      	ldr	r2, [pc, #20]	; (8002690 <SystemInit+0x20>)
 800267c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <PCD8544_send>:
	{ 0x11, 0x1B, 0x04 },   // }
	{ 0x04, 0x06, 0x02 },   // ~
	{ 0x1F, 0x1F, 0x1F },   // delete
};

void PCD8544_send(unsigned char data) {
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
    PCD8544_CE_LOW;
 800269e:	2200      	movs	r2, #0
 80026a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026a4:	4809      	ldr	r0, [pc, #36]	; (80026cc <PCD8544_send+0x38>)
 80026a6:	f001 fbdd 	bl	8003e64 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, &data, 1, HAL_MAX_DELAY);
 80026aa:	1df9      	adds	r1, r7, #7
 80026ac:	f04f 33ff 	mov.w	r3, #4294967295
 80026b0:	2201      	movs	r2, #1
 80026b2:	4807      	ldr	r0, [pc, #28]	; (80026d0 <PCD8544_send+0x3c>)
 80026b4:	f002 f929 	bl	800490a <HAL_SPI_Transmit>
    PCD8544_CE_HIGH;
 80026b8:	2201      	movs	r2, #1
 80026ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026be:	4803      	ldr	r0, [pc, #12]	; (80026cc <PCD8544_send+0x38>)
 80026c0:	f001 fbd0 	bl	8003e64 <HAL_GPIO_WritePin>
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40020000 	.word	0x40020000
 80026d0:	200000fc 	.word	0x200000fc

080026d4 <PCD8544_Pin>:

void PCD8544_Pin(PCD8544_Pin_t pin, PCD8544_State_t state) {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	460a      	mov	r2, r1
 80026de:	71fb      	strb	r3, [r7, #7]
 80026e0:	4613      	mov	r3, r2
 80026e2:	71bb      	strb	r3, [r7, #6]
	switch (pin) {
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d002      	beq.n	80026f0 <PCD8544_Pin+0x1c>
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d00f      	beq.n	800270e <PCD8544_Pin+0x3a>
			    HAL_GPIO_WritePin(PCD8544_RST_PORT, PCD8544_RST_PIN, GPIO_PIN_SET);
			} else {
			    HAL_GPIO_WritePin(PCD8544_RST_PORT, PCD8544_RST_PIN, GPIO_PIN_RESET);
			}
			break;
		default: break;
 80026ee:	e01f      	b.n	8002730 <PCD8544_Pin+0x5c>
			if (state != PCD8544_State_Low) {
 80026f0:	79bb      	ldrb	r3, [r7, #6]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d005      	beq.n	8002702 <PCD8544_Pin+0x2e>
				HAL_GPIO_WritePin(PCD8544_DC_PORT, PCD8544_DC_PIN, GPIO_PIN_SET);
 80026f6:	2201      	movs	r2, #1
 80026f8:	2110      	movs	r1, #16
 80026fa:	480f      	ldr	r0, [pc, #60]	; (8002738 <PCD8544_Pin+0x64>)
 80026fc:	f001 fbb2 	bl	8003e64 <HAL_GPIO_WritePin>
			break;
 8002700:	e016      	b.n	8002730 <PCD8544_Pin+0x5c>
			    HAL_GPIO_WritePin(PCD8544_DC_PORT, PCD8544_DC_PIN, GPIO_PIN_RESET);
 8002702:	2200      	movs	r2, #0
 8002704:	2110      	movs	r1, #16
 8002706:	480c      	ldr	r0, [pc, #48]	; (8002738 <PCD8544_Pin+0x64>)
 8002708:	f001 fbac 	bl	8003e64 <HAL_GPIO_WritePin>
			break;
 800270c:	e010      	b.n	8002730 <PCD8544_Pin+0x5c>
			if (state != PCD8544_State_Low) {
 800270e:	79bb      	ldrb	r3, [r7, #6]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d006      	beq.n	8002722 <PCD8544_Pin+0x4e>
			    HAL_GPIO_WritePin(PCD8544_RST_PORT, PCD8544_RST_PIN, GPIO_PIN_SET);
 8002714:	2201      	movs	r2, #1
 8002716:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800271a:	4807      	ldr	r0, [pc, #28]	; (8002738 <PCD8544_Pin+0x64>)
 800271c:	f001 fba2 	bl	8003e64 <HAL_GPIO_WritePin>
			break;
 8002720:	e005      	b.n	800272e <PCD8544_Pin+0x5a>
			    HAL_GPIO_WritePin(PCD8544_RST_PORT, PCD8544_RST_PIN, GPIO_PIN_RESET);
 8002722:	2200      	movs	r2, #0
 8002724:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002728:	4803      	ldr	r0, [pc, #12]	; (8002738 <PCD8544_Pin+0x64>)
 800272a:	f001 fb9b 	bl	8003e64 <HAL_GPIO_WritePin>
			break;
 800272e:	bf00      	nop
	}
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40020400 	.word	0x40020400

0800273c <PCD8544_Delay>:


void PCD8544_Delay(unsigned long micros) {
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
    HAL_Delay(micros);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 fd41 	bl	80031cc <HAL_Delay>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <PCD8544_Init>:

void PCD8544_Init(unsigned char contrast) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
	//Reset
	PCD8544_Pin(PCD8544_Pin_RST, PCD8544_State_Low);
 800275e:	2100      	movs	r1, #0
 8002760:	2002      	movs	r0, #2
 8002762:	f7ff ffb7 	bl	80026d4 <PCD8544_Pin>
	PCD8544_Delay(2000);
 8002766:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800276a:	f7ff ffe7 	bl	800273c <PCD8544_Delay>
	PCD8544_Pin(PCD8544_Pin_RST, PCD8544_State_High);
 800276e:	2101      	movs	r1, #1
 8002770:	2002      	movs	r0, #2
 8002772:	f7ff ffaf 	bl	80026d4 <PCD8544_Pin>

	//Turn ON BL
	HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8002776:	2201      	movs	r2, #1
 8002778:	2102      	movs	r1, #2
 800277a:	4816      	ldr	r0, [pc, #88]	; (80027d4 <PCD8544_Init+0x80>)
 800277c:	f001 fb72 	bl	8003e64 <HAL_GPIO_WritePin>
	// Go in extended mode
	PCD8544_Write(PCD8544_COMMAND, PCD8544_FUNCTIONSET | PCD8544_EXTENDEDINSTRUCTION);
 8002780:	2121      	movs	r1, #33	; 0x21
 8002782:	2000      	movs	r0, #0
 8002784:	f000 f828 	bl	80027d8 <PCD8544_Write>

	// LCD bias select
	PCD8544_Write(PCD8544_COMMAND, PCD8544_SETBIAS | 0x4);
 8002788:	2114      	movs	r1, #20
 800278a:	2000      	movs	r0, #0
 800278c:	f000 f824 	bl	80027d8 <PCD8544_Write>

	// set VOP
	if (contrast > 0x7F) {
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	2b00      	cmp	r3, #0
 8002796:	da01      	bge.n	800279c <PCD8544_Init+0x48>
		contrast = 0x7F;
 8002798:	237f      	movs	r3, #127	; 0x7f
 800279a:	71fb      	strb	r3, [r7, #7]
	}
	PCD8544_Write(PCD8544_COMMAND, PCD8544_SETVOP | contrast);
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	4619      	mov	r1, r3
 80027a6:	2000      	movs	r0, #0
 80027a8:	f000 f816 	bl	80027d8 <PCD8544_Write>

	// normal mode
	PCD8544_Write(PCD8544_COMMAND, PCD8544_FUNCTIONSET);
 80027ac:	2120      	movs	r1, #32
 80027ae:	2000      	movs	r0, #0
 80027b0:	f000 f812 	bl	80027d8 <PCD8544_Write>

	// Set display to Normal
	PCD8544_Write(PCD8544_COMMAND, PCD8544_DISPLAYCONTROL | PCD8544_DISPLAYNORMAL);
 80027b4:	210c      	movs	r1, #12
 80027b6:	2000      	movs	r0, #0
 80027b8:	f000 f80e 	bl	80027d8 <PCD8544_Write>

	//Set cursor to home position
	PCD8544_Home();
 80027bc:	f000 f8b0 	bl	8002920 <PCD8544_Home>

	//Normal display
	PCD8544_Write(PCD8544_COMMAND, PCD8544_DISPLAYCONTROL | PCD8544_DISPLAYNORMAL);
 80027c0:	210c      	movs	r1, #12
 80027c2:	2000      	movs	r0, #0
 80027c4:	f000 f808 	bl	80027d8 <PCD8544_Write>

	//Clear display
	PCD8544_Clear();
 80027c8:	f000 f884 	bl	80028d4 <PCD8544_Clear>
}
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40020000 	.word	0x40020000

080027d8 <PCD8544_Write>:

void PCD8544_Write(PCD8544_WriteType_t cd, unsigned char data) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	460a      	mov	r2, r1
 80027e2:	71fb      	strb	r3, [r7, #7]
 80027e4:	4613      	mov	r3, r2
 80027e6:	71bb      	strb	r3, [r7, #6]
	switch (cd) {
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d006      	beq.n	80027fc <PCD8544_Write+0x24>
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d109      	bne.n	8002806 <PCD8544_Write+0x2e>
		//Send data to lcd's ram
		case PCD8544_DATA:
			//Set DC pin HIGH
			PCD8544_Pin(PCD8544_Pin_DC, PCD8544_State_High);
 80027f2:	2101      	movs	r1, #1
 80027f4:	2001      	movs	r0, #1
 80027f6:	f7ff ff6d 	bl	80026d4 <PCD8544_Pin>
			break;
 80027fa:	e005      	b.n	8002808 <PCD8544_Write+0x30>
		//Send command to lcd
		case PCD8544_COMMAND:
			//Set DC pin LOW
			PCD8544_Pin(PCD8544_Pin_DC, PCD8544_State_Low);
 80027fc:	2100      	movs	r1, #0
 80027fe:	2001      	movs	r0, #1
 8002800:	f7ff ff68 	bl	80026d4 <PCD8544_Pin>
			break;
 8002804:	e000      	b.n	8002808 <PCD8544_Write+0x30>
		default: break;
 8002806:	bf00      	nop
	}
	//Send data
	PCD8544_send(data);
 8002808:	79bb      	ldrb	r3, [r7, #6]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff ff42 	bl	8002694 <PCD8544_send>
}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <PCD8544_DrawPixel>:

	// normal mode
	PCD8544_Write(PCD8544_COMMAND, PCD8544_FUNCTIONSET);
}

void PCD8544_DrawPixel(unsigned char x, unsigned char y, PCD8544_Pixel_t pixel) {
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	71fb      	strb	r3, [r7, #7]
 8002822:	460b      	mov	r3, r1
 8002824:	71bb      	strb	r3, [r7, #6]
 8002826:	4613      	mov	r3, r2
 8002828:	717b      	strb	r3, [r7, #5]
	if (x >= PCD8544_WIDTH) {
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	2b53      	cmp	r3, #83	; 0x53
 800282e:	d849      	bhi.n	80028c4 <PCD8544_DrawPixel+0xac>
		return;
	}
	if (y >= PCD8544_HEIGHT) {
 8002830:	79bb      	ldrb	r3, [r7, #6]
 8002832:	2b2f      	cmp	r3, #47	; 0x2f
 8002834:	d848      	bhi.n	80028c8 <PCD8544_DrawPixel+0xb0>
		return;
	}

	if (pixel != PCD8544_Pixel_Clear) {
 8002836:	797b      	ldrb	r3, [r7, #5]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d01d      	beq.n	8002878 <PCD8544_DrawPixel+0x60>
		PCD8544_Buffer[x + (y / 8) * PCD8544_WIDTH] |= 1 << (y % 8);
 800283c:	79fa      	ldrb	r2, [r7, #7]
 800283e:	79bb      	ldrb	r3, [r7, #6]
 8002840:	08db      	lsrs	r3, r3, #3
 8002842:	b2d8      	uxtb	r0, r3
 8002844:	4601      	mov	r1, r0
 8002846:	2354      	movs	r3, #84	; 0x54
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	4a20      	ldr	r2, [pc, #128]	; (80028d0 <PCD8544_DrawPixel+0xb8>)
 8002850:	5cd3      	ldrb	r3, [r2, r3]
 8002852:	b25a      	sxtb	r2, r3
 8002854:	79bb      	ldrb	r3, [r7, #6]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	2101      	movs	r1, #1
 800285c:	fa01 f303 	lsl.w	r3, r1, r3
 8002860:	b25b      	sxtb	r3, r3
 8002862:	4313      	orrs	r3, r2
 8002864:	b259      	sxtb	r1, r3
 8002866:	79fa      	ldrb	r2, [r7, #7]
 8002868:	2354      	movs	r3, #84	; 0x54
 800286a:	fb00 f303 	mul.w	r3, r0, r3
 800286e:	4413      	add	r3, r2
 8002870:	b2c9      	uxtb	r1, r1
 8002872:	4a17      	ldr	r2, [pc, #92]	; (80028d0 <PCD8544_DrawPixel+0xb8>)
 8002874:	54d1      	strb	r1, [r2, r3]
 8002876:	e01e      	b.n	80028b6 <PCD8544_DrawPixel+0x9e>
	} else {
		PCD8544_Buffer[x + (y / 8) * PCD8544_WIDTH] &= ~(1 << (y % 8));
 8002878:	79fa      	ldrb	r2, [r7, #7]
 800287a:	79bb      	ldrb	r3, [r7, #6]
 800287c:	08db      	lsrs	r3, r3, #3
 800287e:	b2d8      	uxtb	r0, r3
 8002880:	4601      	mov	r1, r0
 8002882:	2354      	movs	r3, #84	; 0x54
 8002884:	fb01 f303 	mul.w	r3, r1, r3
 8002888:	4413      	add	r3, r2
 800288a:	4a11      	ldr	r2, [pc, #68]	; (80028d0 <PCD8544_DrawPixel+0xb8>)
 800288c:	5cd3      	ldrb	r3, [r2, r3]
 800288e:	b25a      	sxtb	r2, r3
 8002890:	79bb      	ldrb	r3, [r7, #6]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	2101      	movs	r1, #1
 8002898:	fa01 f303 	lsl.w	r3, r1, r3
 800289c:	b25b      	sxtb	r3, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	b25b      	sxtb	r3, r3
 80028a2:	4013      	ands	r3, r2
 80028a4:	b259      	sxtb	r1, r3
 80028a6:	79fa      	ldrb	r2, [r7, #7]
 80028a8:	2354      	movs	r3, #84	; 0x54
 80028aa:	fb00 f303 	mul.w	r3, r0, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	b2c9      	uxtb	r1, r1
 80028b2:	4a07      	ldr	r2, [pc, #28]	; (80028d0 <PCD8544_DrawPixel+0xb8>)
 80028b4:	54d1      	strb	r1, [r2, r3]
	}
	PCD8544_UpdateArea(x, y, x, y);
 80028b6:	79bb      	ldrb	r3, [r7, #6]
 80028b8:	79fa      	ldrb	r2, [r7, #7]
 80028ba:	79b9      	ldrb	r1, [r7, #6]
 80028bc:	79f8      	ldrb	r0, [r7, #7]
 80028be:	f000 f89d 	bl	80029fc <PCD8544_UpdateArea>
 80028c2:	e002      	b.n	80028ca <PCD8544_DrawPixel+0xb2>
		return;
 80028c4:	bf00      	nop
 80028c6:	e000      	b.n	80028ca <PCD8544_DrawPixel+0xb2>
		return;
 80028c8:	bf00      	nop
}
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20001b60 	.word	0x20001b60

080028d4 <PCD8544_Clear>:
	} else {
		PCD8544_Write(PCD8544_COMMAND, PCD8544_DISPLAYCONTROL | PCD8544_DISPLAYNORMAL);
	}
}

void PCD8544_Clear(void) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
	unsigned int i;
	PCD8544_Home();
 80028da:	f000 f821 	bl	8002920 <PCD8544_Home>
	for (i = 0; i < PCD8544_BUFFER_SIZE; i++) {
 80028de:	2300      	movs	r3, #0
 80028e0:	607b      	str	r3, [r7, #4]
 80028e2:	e007      	b.n	80028f4 <PCD8544_Clear+0x20>
		PCD8544_Buffer[i] = 0x00;
 80028e4:	4a0d      	ldr	r2, [pc, #52]	; (800291c <PCD8544_Clear+0x48>)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < PCD8544_BUFFER_SIZE; i++) {
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3301      	adds	r3, #1
 80028f2:	607b      	str	r3, [r7, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80028fa:	d3f3      	bcc.n	80028e4 <PCD8544_Clear+0x10>
		//PCD8544_Write(PCD8544_DATA, 0x00);
	}
	PCD8544_GotoXY(0, 0);
 80028fc:	2100      	movs	r1, #0
 80028fe:	2000      	movs	r0, #0
 8002900:	f000 f8b8 	bl	8002a74 <PCD8544_GotoXY>
	PCD8544_UpdateArea(0, 0, PCD8544_WIDTH - 1, PCD8544_HEIGHT - 1);
 8002904:	232f      	movs	r3, #47	; 0x2f
 8002906:	2253      	movs	r2, #83	; 0x53
 8002908:	2100      	movs	r1, #0
 800290a:	2000      	movs	r0, #0
 800290c:	f000 f876 	bl	80029fc <PCD8544_UpdateArea>
	PCD8544_Refresh();
 8002910:	f000 f812 	bl	8002938 <PCD8544_Refresh>
}
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20001b60 	.word	0x20001b60

08002920 <PCD8544_Home>:

void PCD8544_Home(void) {
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
	PCD8544_Write(PCD8544_COMMAND, PCD8544_SETXADDR | 0);
 8002924:	2180      	movs	r1, #128	; 0x80
 8002926:	2000      	movs	r0, #0
 8002928:	f7ff ff56 	bl	80027d8 <PCD8544_Write>
	PCD8544_Write(PCD8544_COMMAND, PCD8544_SETYADDR | 0);
 800292c:	2140      	movs	r1, #64	; 0x40
 800292e:	2000      	movs	r0, #0
 8002930:	f7ff ff52 	bl	80027d8 <PCD8544_Write>
}
 8002934:	bf00      	nop
 8002936:	bd80      	pop	{r7, pc}

08002938 <PCD8544_Refresh>:

void PCD8544_Refresh(void) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
	unsigned char i, j;
	for (i = 0; i < 6; i++) {
 800293e:	2300      	movs	r3, #0
 8002940:	71fb      	strb	r3, [r7, #7]
 8002942:	e03b      	b.n	80029bc <PCD8544_Refresh+0x84>
		//Not in range yet
		if (PCD8544_UpdateYmin > ((i + 1) * 8)) {
 8002944:	4b28      	ldr	r3, [pc, #160]	; (80029e8 <PCD8544_Refresh+0xb0>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	461a      	mov	r2, r3
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	3301      	adds	r3, #1
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	429a      	cmp	r2, r3
 8002952:	dc2f      	bgt.n	80029b4 <PCD8544_Refresh+0x7c>
			continue;
		}
		//Over range, stop
		if ((i * 8) > PCD8544_UpdateYmax) {
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4a24      	ldr	r2, [pc, #144]	; (80029ec <PCD8544_Refresh+0xb4>)
 800295a:	7812      	ldrb	r2, [r2, #0]
 800295c:	4293      	cmp	r3, r2
 800295e:	dc31      	bgt.n	80029c4 <PCD8544_Refresh+0x8c>
			break;
		}

		PCD8544_Write(PCD8544_COMMAND, PCD8544_SETYADDR | i);
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002966:	b2db      	uxtb	r3, r3
 8002968:	4619      	mov	r1, r3
 800296a:	2000      	movs	r0, #0
 800296c:	f7ff ff34 	bl	80027d8 <PCD8544_Write>
		PCD8544_Write(PCD8544_COMMAND, PCD8544_SETXADDR | PCD8544_UpdateXmin);
 8002970:	4b1f      	ldr	r3, [pc, #124]	; (80029f0 <PCD8544_Refresh+0xb8>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002978:	b2db      	uxtb	r3, r3
 800297a:	4619      	mov	r1, r3
 800297c:	2000      	movs	r0, #0
 800297e:	f7ff ff2b 	bl	80027d8 <PCD8544_Write>

		for (j = PCD8544_UpdateXmin; j <= PCD8544_UpdateXmax; j++) {
 8002982:	4b1b      	ldr	r3, [pc, #108]	; (80029f0 <PCD8544_Refresh+0xb8>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	71bb      	strb	r3, [r7, #6]
 8002988:	e00e      	b.n	80029a8 <PCD8544_Refresh+0x70>
			PCD8544_Write(PCD8544_DATA, PCD8544_Buffer[(i * PCD8544_WIDTH) + j]);
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	2254      	movs	r2, #84	; 0x54
 800298e:	fb03 f202 	mul.w	r2, r3, r2
 8002992:	79bb      	ldrb	r3, [r7, #6]
 8002994:	4413      	add	r3, r2
 8002996:	4a17      	ldr	r2, [pc, #92]	; (80029f4 <PCD8544_Refresh+0xbc>)
 8002998:	5cd3      	ldrb	r3, [r2, r3]
 800299a:	4619      	mov	r1, r3
 800299c:	2001      	movs	r0, #1
 800299e:	f7ff ff1b 	bl	80027d8 <PCD8544_Write>
		for (j = PCD8544_UpdateXmin; j <= PCD8544_UpdateXmax; j++) {
 80029a2:	79bb      	ldrb	r3, [r7, #6]
 80029a4:	3301      	adds	r3, #1
 80029a6:	71bb      	strb	r3, [r7, #6]
 80029a8:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <PCD8544_Refresh+0xc0>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	79ba      	ldrb	r2, [r7, #6]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d9eb      	bls.n	800298a <PCD8544_Refresh+0x52>
 80029b2:	e000      	b.n	80029b6 <PCD8544_Refresh+0x7e>
			continue;
 80029b4:	bf00      	nop
	for (i = 0; i < 6; i++) {
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	3301      	adds	r3, #1
 80029ba:	71fb      	strb	r3, [r7, #7]
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	2b05      	cmp	r3, #5
 80029c0:	d9c0      	bls.n	8002944 <PCD8544_Refresh+0xc>
 80029c2:	e000      	b.n	80029c6 <PCD8544_Refresh+0x8e>
			break;
 80029c4:	bf00      	nop
		}
	}

	PCD8544_UpdateXmin = PCD8544_WIDTH - 1;
 80029c6:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <PCD8544_Refresh+0xb8>)
 80029c8:	2253      	movs	r2, #83	; 0x53
 80029ca:	701a      	strb	r2, [r3, #0]
	PCD8544_UpdateXmax = 0;
 80029cc:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <PCD8544_Refresh+0xc0>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]
	PCD8544_UpdateYmin = PCD8544_HEIGHT - 1;
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <PCD8544_Refresh+0xb0>)
 80029d4:	222f      	movs	r2, #47	; 0x2f
 80029d6:	701a      	strb	r2, [r3, #0]
	PCD8544_UpdateYmax = 0;
 80029d8:	4b04      	ldr	r3, [pc, #16]	; (80029ec <PCD8544_Refresh+0xb4>)
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20001d5a 	.word	0x20001d5a
 80029ec:	20001d5b 	.word	0x20001d5b
 80029f0:	20001d58 	.word	0x20001d58
 80029f4:	20001b60 	.word	0x20001b60
 80029f8:	20001d59 	.word	0x20001d59

080029fc <PCD8544_UpdateArea>:

void PCD8544_UpdateArea(unsigned char xMin, unsigned char yMin, unsigned char xMax, unsigned char yMax) {
 80029fc:	b490      	push	{r4, r7}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4604      	mov	r4, r0
 8002a04:	4608      	mov	r0, r1
 8002a06:	4611      	mov	r1, r2
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4623      	mov	r3, r4
 8002a0c:	71fb      	strb	r3, [r7, #7]
 8002a0e:	4603      	mov	r3, r0
 8002a10:	71bb      	strb	r3, [r7, #6]
 8002a12:	460b      	mov	r3, r1
 8002a14:	717b      	strb	r3, [r7, #5]
 8002a16:	4613      	mov	r3, r2
 8002a18:	713b      	strb	r3, [r7, #4]
	if (xMin < PCD8544_UpdateXmin) {
 8002a1a:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <PCD8544_UpdateArea+0x68>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	79fa      	ldrb	r2, [r7, #7]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d202      	bcs.n	8002a2a <PCD8544_UpdateArea+0x2e>
		PCD8544_UpdateXmin = xMin;
 8002a24:	4a0f      	ldr	r2, [pc, #60]	; (8002a64 <PCD8544_UpdateArea+0x68>)
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	7013      	strb	r3, [r2, #0]
	}
	if (xMax > PCD8544_UpdateXmax) {
 8002a2a:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <PCD8544_UpdateArea+0x6c>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	797a      	ldrb	r2, [r7, #5]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d902      	bls.n	8002a3a <PCD8544_UpdateArea+0x3e>
		PCD8544_UpdateXmax = xMax;
 8002a34:	4a0c      	ldr	r2, [pc, #48]	; (8002a68 <PCD8544_UpdateArea+0x6c>)
 8002a36:	797b      	ldrb	r3, [r7, #5]
 8002a38:	7013      	strb	r3, [r2, #0]
	}
	if (yMin < PCD8544_UpdateYmin) {
 8002a3a:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <PCD8544_UpdateArea+0x70>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	79ba      	ldrb	r2, [r7, #6]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d202      	bcs.n	8002a4a <PCD8544_UpdateArea+0x4e>
		PCD8544_UpdateYmin = yMin;
 8002a44:	4a09      	ldr	r2, [pc, #36]	; (8002a6c <PCD8544_UpdateArea+0x70>)
 8002a46:	79bb      	ldrb	r3, [r7, #6]
 8002a48:	7013      	strb	r3, [r2, #0]
	}
	if (yMax > PCD8544_UpdateYmax) {
 8002a4a:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <PCD8544_UpdateArea+0x74>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	793a      	ldrb	r2, [r7, #4]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d902      	bls.n	8002a5a <PCD8544_UpdateArea+0x5e>
		PCD8544_UpdateYmax = yMax;
 8002a54:	4a06      	ldr	r2, [pc, #24]	; (8002a70 <PCD8544_UpdateArea+0x74>)
 8002a56:	793b      	ldrb	r3, [r7, #4]
 8002a58:	7013      	strb	r3, [r2, #0]
	}
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc90      	pop	{r4, r7}
 8002a62:	4770      	bx	lr
 8002a64:	20001d58 	.word	0x20001d58
 8002a68:	20001d59 	.word	0x20001d59
 8002a6c:	20001d5a 	.word	0x20001d5a
 8002a70:	20001d5b 	.word	0x20001d5b

08002a74 <PCD8544_GotoXY>:

void PCD8544_GotoXY(unsigned char x, unsigned char y) {
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	460a      	mov	r2, r1
 8002a7e:	71fb      	strb	r3, [r7, #7]
 8002a80:	4613      	mov	r3, r2
 8002a82:	71bb      	strb	r3, [r7, #6]
	PCD8544_x = x;
 8002a84:	4a05      	ldr	r2, [pc, #20]	; (8002a9c <PCD8544_GotoXY+0x28>)
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	7013      	strb	r3, [r2, #0]
	PCD8544_y = y;
 8002a8a:	4a05      	ldr	r2, [pc, #20]	; (8002aa0 <PCD8544_GotoXY+0x2c>)
 8002a8c:	79bb      	ldrb	r3, [r7, #6]
 8002a8e:	7013      	strb	r3, [r2, #0]
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	20001d5c 	.word	0x20001d5c
 8002aa0:	20001d5d 	.word	0x20001d5d

08002aa4 <PCD8544_Putc>:

void PCD8544_Putc(char c, PCD8544_Pixel_t color, PCD8544_FontSize_t size) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71fb      	strb	r3, [r7, #7]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	71bb      	strb	r3, [r7, #6]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	717b      	strb	r3, [r7, #5]
	unsigned char c_height, c_width, i, b, j;
	if (size == PCD8544_FontSize_3x5) {
 8002ab6:	797b      	ldrb	r3, [r7, #5]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d104      	bne.n	8002ac6 <PCD8544_Putc+0x22>
		c_width = PCD8544_CHAR3x5_WIDTH;
 8002abc:	2304      	movs	r3, #4
 8002abe:	73bb      	strb	r3, [r7, #14]
		c_height = PCD8544_CHAR3x5_HEIGHT;
 8002ac0:	2306      	movs	r3, #6
 8002ac2:	73fb      	strb	r3, [r7, #15]
 8002ac4:	e003      	b.n	8002ace <PCD8544_Putc+0x2a>
	} else {
		c_width = PCD8544_CHAR5x7_WIDTH;
 8002ac6:	2306      	movs	r3, #6
 8002ac8:	73bb      	strb	r3, [r7, #14]
		c_height = PCD8544_CHAR5x7_HEIGHT;
 8002aca:	2308      	movs	r3, #8
 8002acc:	73fb      	strb	r3, [r7, #15]
	}
	if ((PCD8544_x + c_width) > PCD8544_WIDTH) {
 8002ace:	4b46      	ldr	r3, [pc, #280]	; (8002be8 <PCD8544_Putc+0x144>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	7bbb      	ldrb	r3, [r7, #14]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	2b54      	cmp	r3, #84	; 0x54
 8002ada:	dd09      	ble.n	8002af0 <PCD8544_Putc+0x4c>
		//If at the end of a line of display, go to new line and set x to 0 position
		PCD8544_y += c_height;
 8002adc:	4b43      	ldr	r3, [pc, #268]	; (8002bec <PCD8544_Putc+0x148>)
 8002ade:	781a      	ldrb	r2, [r3, #0]
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4b41      	ldr	r3, [pc, #260]	; (8002bec <PCD8544_Putc+0x148>)
 8002ae8:	701a      	strb	r2, [r3, #0]
		PCD8544_x = 0;
 8002aea:	4b3f      	ldr	r3, [pc, #252]	; (8002be8 <PCD8544_Putc+0x144>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < c_width - 1; i++) {
 8002af0:	2300      	movs	r3, #0
 8002af2:	737b      	strb	r3, [r7, #13]
 8002af4:	e068      	b.n	8002bc8 <PCD8544_Putc+0x124>
		if (c < 32) {
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	2b1f      	cmp	r3, #31
 8002afa:	d91c      	bls.n	8002b36 <PCD8544_Putc+0x92>
			//b = _custom_chars[_font_size][(uint8_t)chr][i];
		} else if (size == PCD8544_FontSize_3x5) {
 8002afc:	797b      	ldrb	r3, [r7, #5]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d10c      	bne.n	8002b1c <PCD8544_Putc+0x78>
			b = PCD8544_Font3x5[c - 32][i];
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	f1a3 0220 	sub.w	r2, r3, #32
 8002b08:	7b79      	ldrb	r1, [r7, #13]
 8002b0a:	4839      	ldr	r0, [pc, #228]	; (8002bf0 <PCD8544_Putc+0x14c>)
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	4413      	add	r3, r2
 8002b12:	4403      	add	r3, r0
 8002b14:	440b      	add	r3, r1
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	733b      	strb	r3, [r7, #12]
 8002b1a:	e00c      	b.n	8002b36 <PCD8544_Putc+0x92>
		} else {
			b = PCD8544_Font5x7[c - 32][i];
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	f1a3 0220 	sub.w	r2, r3, #32
 8002b22:	7b79      	ldrb	r1, [r7, #13]
 8002b24:	4833      	ldr	r0, [pc, #204]	; (8002bf4 <PCD8544_Putc+0x150>)
 8002b26:	4613      	mov	r3, r2
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	4413      	add	r3, r2
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	4403      	add	r3, r0
 8002b30:	440b      	add	r3, r1
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	733b      	strb	r3, [r7, #12]
		}
		if (b == 0x00 && (c != 0 && c != 32)) {
 8002b36:	7b3b      	ldrb	r3, [r7, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d105      	bne.n	8002b48 <PCD8544_Putc+0xa4>
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <PCD8544_Putc+0xa4>
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	2b20      	cmp	r3, #32
 8002b46:	d13b      	bne.n	8002bc0 <PCD8544_Putc+0x11c>
			continue;
		}
		for (j = 0; j < c_height; j++) {
 8002b48:	2300      	movs	r3, #0
 8002b4a:	72fb      	strb	r3, [r7, #11]
 8002b4c:	e02d      	b.n	8002baa <PCD8544_Putc+0x106>
			if (color == PCD8544_Pixel_Set) {
 8002b4e:	79bb      	ldrb	r3, [r7, #6]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d112      	bne.n	8002b7a <PCD8544_Putc+0xd6>
				PCD8544_DrawPixel(PCD8544_x, (PCD8544_y + j), ((b >> j) & 1) ? PCD8544_Pixel_Set : PCD8544_Pixel_Clear);
 8002b54:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <PCD8544_Putc+0x144>)
 8002b56:	7818      	ldrb	r0, [r3, #0]
 8002b58:	4b24      	ldr	r3, [pc, #144]	; (8002bec <PCD8544_Putc+0x148>)
 8002b5a:	781a      	ldrb	r2, [r3, #0]
 8002b5c:	7afb      	ldrb	r3, [r7, #11]
 8002b5e:	4413      	add	r3, r2
 8002b60:	b2d9      	uxtb	r1, r3
 8002b62:	7b3a      	ldrb	r2, [r7, #12]
 8002b64:	7afb      	ldrb	r3, [r7, #11]
 8002b66:	fa42 f303 	asr.w	r3, r2, r3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	461a      	mov	r2, r3
 8002b74:	f7ff fe50 	bl	8002818 <PCD8544_DrawPixel>
 8002b78:	e014      	b.n	8002ba4 <PCD8544_Putc+0x100>
			} else {
				PCD8544_DrawPixel(PCD8544_x, (PCD8544_y + j), ((b >> j) & 1) ? PCD8544_Pixel_Clear : PCD8544_Pixel_Set);
 8002b7a:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <PCD8544_Putc+0x144>)
 8002b7c:	7818      	ldrb	r0, [r3, #0]
 8002b7e:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <PCD8544_Putc+0x148>)
 8002b80:	781a      	ldrb	r2, [r3, #0]
 8002b82:	7afb      	ldrb	r3, [r7, #11]
 8002b84:	4413      	add	r3, r2
 8002b86:	b2d9      	uxtb	r1, r3
 8002b88:	7b3a      	ldrb	r2, [r7, #12]
 8002b8a:	7afb      	ldrb	r3, [r7, #11]
 8002b8c:	fa42 f303 	asr.w	r3, r2, r3
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	bf0c      	ite	eq
 8002b98:	2301      	moveq	r3, #1
 8002b9a:	2300      	movne	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	f7ff fe3a 	bl	8002818 <PCD8544_DrawPixel>
		for (j = 0; j < c_height; j++) {
 8002ba4:	7afb      	ldrb	r3, [r7, #11]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	72fb      	strb	r3, [r7, #11]
 8002baa:	7afa      	ldrb	r2, [r7, #11]
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d3cd      	bcc.n	8002b4e <PCD8544_Putc+0xaa>
			}
		}
		PCD8544_x++;
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <PCD8544_Putc+0x144>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <PCD8544_Putc+0x144>)
 8002bbc:	701a      	strb	r2, [r3, #0]
 8002bbe:	e000      	b.n	8002bc2 <PCD8544_Putc+0x11e>
			continue;
 8002bc0:	bf00      	nop
	for (i = 0; i < c_width - 1; i++) {
 8002bc2:	7b7b      	ldrb	r3, [r7, #13]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	737b      	strb	r3, [r7, #13]
 8002bc8:	7b7a      	ldrb	r2, [r7, #13]
 8002bca:	7bbb      	ldrb	r3, [r7, #14]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	db91      	blt.n	8002af6 <PCD8544_Putc+0x52>
	}
	PCD8544_x++;
 8002bd2:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <PCD8544_Putc+0x144>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <PCD8544_Putc+0x144>)
 8002bdc:	701a      	strb	r2, [r3, #0]
}
 8002bde:	bf00      	nop
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20001d5c 	.word	0x20001d5c
 8002bec:	20001d5d 	.word	0x20001d5d
 8002bf0:	0800b080 	.word	0x0800b080
 8002bf4:	0800ae38 	.word	0x0800ae38

08002bf8 <PCD8544_Puts>:

void PCD8544_Puts(char *c, PCD8544_Pixel_t color, PCD8544_FontSize_t size) {
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	70fb      	strb	r3, [r7, #3]
 8002c04:	4613      	mov	r3, r2
 8002c06:	70bb      	strb	r3, [r7, #2]
	while (*c) {
 8002c08:	e008      	b.n	8002c1c <PCD8544_Puts+0x24>
		PCD8544_Putc(*c++, color, size);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	78ba      	ldrb	r2, [r7, #2]
 8002c14:	78f9      	ldrb	r1, [r7, #3]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff ff44 	bl	8002aa4 <PCD8544_Putc>
	while (*c) {
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1f2      	bne.n	8002c0a <PCD8544_Puts+0x12>
	}
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <PCD8544_DrawLine>:

void PCD8544_DrawLine(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1, PCD8544_Pixel_t color) {
 8002c2e:	b590      	push	{r4, r7, lr}
 8002c30:	b085      	sub	sp, #20
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	4604      	mov	r4, r0
 8002c36:	4608      	mov	r0, r1
 8002c38:	4611      	mov	r1, r2
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	4623      	mov	r3, r4
 8002c3e:	71fb      	strb	r3, [r7, #7]
 8002c40:	4603      	mov	r3, r0
 8002c42:	71bb      	strb	r3, [r7, #6]
 8002c44:	460b      	mov	r3, r1
 8002c46:	717b      	strb	r3, [r7, #5]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	713b      	strb	r3, [r7, #4]
	short dx, dy;
	short temp;

	if (x0 > x1) {
 8002c4c:	79fa      	ldrb	r2, [r7, #7]
 8002c4e:	797b      	ldrb	r3, [r7, #5]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d905      	bls.n	8002c60 <PCD8544_DrawLine+0x32>
		temp = x1;
 8002c54:	797b      	ldrb	r3, [r7, #5]
 8002c56:	81fb      	strh	r3, [r7, #14]
		x1 = x0;
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	717b      	strb	r3, [r7, #5]
		x0 = temp;
 8002c5c:	89fb      	ldrh	r3, [r7, #14]
 8002c5e:	71fb      	strb	r3, [r7, #7]
	}
	if (y0 > y1) {
 8002c60:	79ba      	ldrb	r2, [r7, #6]
 8002c62:	793b      	ldrb	r3, [r7, #4]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d905      	bls.n	8002c74 <PCD8544_DrawLine+0x46>
		temp = y1;
 8002c68:	793b      	ldrb	r3, [r7, #4]
 8002c6a:	81fb      	strh	r3, [r7, #14]
		y1 = y0;
 8002c6c:	79bb      	ldrb	r3, [r7, #6]
 8002c6e:	713b      	strb	r3, [r7, #4]
		y0 = temp;
 8002c70:	89fb      	ldrh	r3, [r7, #14]
 8002c72:	71bb      	strb	r3, [r7, #6]
	}

	dx = x1 - x0;
 8002c74:	797b      	ldrb	r3, [r7, #5]
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	81bb      	strh	r3, [r7, #12]
	dy = y1 - y0;
 8002c82:	793b      	ldrb	r3, [r7, #4]
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	79bb      	ldrb	r3, [r7, #6]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	817b      	strh	r3, [r7, #10]

	if (dx == 0) {
 8002c90:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10e      	bne.n	8002cb6 <PCD8544_DrawLine+0x88>
		do {
			PCD8544_DrawPixel(x0, y0, color);
 8002c98:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002c9c:	79b9      	ldrb	r1, [r7, #6]
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fdb9 	bl	8002818 <PCD8544_DrawPixel>
			y0++;
 8002ca6:	79bb      	ldrb	r3, [r7, #6]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	71bb      	strb	r3, [r7, #6]
		} while (y1 >= y0);
 8002cac:	793a      	ldrb	r2, [r7, #4]
 8002cae:	79bb      	ldrb	r3, [r7, #6]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d2f1      	bcs.n	8002c98 <PCD8544_DrawLine+0x6a>
		return;
 8002cb4:	e089      	b.n	8002dca <PCD8544_DrawLine+0x19c>
	}
	if (dy == 0) {
 8002cb6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10e      	bne.n	8002cdc <PCD8544_DrawLine+0xae>
		do {
			PCD8544_DrawPixel(x0, y0, color);
 8002cbe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002cc2:	79b9      	ldrb	r1, [r7, #6]
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fda6 	bl	8002818 <PCD8544_DrawPixel>
			x0++;
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	71fb      	strb	r3, [r7, #7]
		} while (x1 >= x0);
 8002cd2:	797a      	ldrb	r2, [r7, #5]
 8002cd4:	79fb      	ldrb	r3, [r7, #7]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d2f1      	bcs.n	8002cbe <PCD8544_DrawLine+0x90>
		return;
 8002cda:	e076      	b.n	8002dca <PCD8544_DrawLine+0x19c>
	}

	/* Based on Bresenham's line algorithm  */
	if (dx > dy) {
 8002cdc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002ce0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	dd38      	ble.n	8002d5a <PCD8544_DrawLine+0x12c>
		temp = 2 * dy - dx;
 8002ce8:	897b      	ldrh	r3, [r7, #10]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	89bb      	ldrh	r3, [r7, #12]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	81fb      	strh	r3, [r7, #14]
		while (x0 != x1) {
 8002cf6:	e024      	b.n	8002d42 <PCD8544_DrawLine+0x114>
			PCD8544_DrawPixel(x0, y0, color);
 8002cf8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002cfc:	79b9      	ldrb	r1, [r7, #6]
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fd89 	bl	8002818 <PCD8544_DrawPixel>
			x0++;
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	71fb      	strb	r3, [r7, #7]
			if (temp > 0) {
 8002d0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	dd0f      	ble.n	8002d34 <PCD8544_DrawLine+0x106>
				y0++;
 8002d14:	79bb      	ldrb	r3, [r7, #6]
 8002d16:	3301      	adds	r3, #1
 8002d18:	71bb      	strb	r3, [r7, #6]
				temp += 2 * dy - 2 * dx;
 8002d1a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002d1e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	89fb      	ldrh	r3, [r7, #14]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	81fb      	strh	r3, [r7, #14]
 8002d32:	e006      	b.n	8002d42 <PCD8544_DrawLine+0x114>
			} else {
				temp += 2 * dy;
 8002d34:	897b      	ldrh	r3, [r7, #10]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	89fb      	ldrh	r3, [r7, #14]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	81fb      	strh	r3, [r7, #14]
		while (x0 != x1) {
 8002d42:	79fa      	ldrb	r2, [r7, #7]
 8002d44:	797b      	ldrb	r3, [r7, #5]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d1d6      	bne.n	8002cf8 <PCD8544_DrawLine+0xca>
			}
		}
		PCD8544_DrawPixel(x0, y0, color);
 8002d4a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002d4e:	79b9      	ldrb	r1, [r7, #6]
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fd60 	bl	8002818 <PCD8544_DrawPixel>
 8002d58:	e037      	b.n	8002dca <PCD8544_DrawLine+0x19c>
	} else {
		temp = 2 * dx - dy;
 8002d5a:	89bb      	ldrh	r3, [r7, #12]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	897b      	ldrh	r3, [r7, #10]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	81fb      	strh	r3, [r7, #14]
		while (y0 != y1) {
 8002d68:	e024      	b.n	8002db4 <PCD8544_DrawLine+0x186>
			PCD8544_DrawPixel(x0, y0, color);
 8002d6a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002d6e:	79b9      	ldrb	r1, [r7, #6]
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fd50 	bl	8002818 <PCD8544_DrawPixel>
			y0++;
 8002d78:	79bb      	ldrb	r3, [r7, #6]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	71bb      	strb	r3, [r7, #6]
			if (temp > 0) {
 8002d7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	dd0f      	ble.n	8002da6 <PCD8544_DrawLine+0x178>
				x0++;
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	71fb      	strb	r3, [r7, #7]
				temp += 2 * dy - 2 * dx;
 8002d8c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002d90:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	89fb      	ldrh	r3, [r7, #14]
 8002d9e:	4413      	add	r3, r2
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	81fb      	strh	r3, [r7, #14]
 8002da4:	e006      	b.n	8002db4 <PCD8544_DrawLine+0x186>
			} else {
				temp += 2 * dy;
 8002da6:	897b      	ldrh	r3, [r7, #10]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	89fb      	ldrh	r3, [r7, #14]
 8002dae:	4413      	add	r3, r2
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	81fb      	strh	r3, [r7, #14]
		while (y0 != y1) {
 8002db4:	79ba      	ldrb	r2, [r7, #6]
 8002db6:	793b      	ldrb	r3, [r7, #4]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d1d6      	bne.n	8002d6a <PCD8544_DrawLine+0x13c>
			}
		}
		PCD8544_DrawPixel(x0, y0, color);
 8002dbc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002dc0:	79b9      	ldrb	r1, [r7, #6]
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fd27 	bl	8002818 <PCD8544_DrawPixel>
	}
}
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd90      	pop	{r4, r7, pc}

08002dd0 <PCD8544_DrawFilledRectangle>:
	PCD8544_DrawLine(x0, y0, x0, y1, color);	//Left
	PCD8544_DrawLine(x1, y0, x1, y1, color);	//Right
	PCD8544_DrawLine(x0, y1, x1, y1, color);	//Bottom
}

void PCD8544_DrawFilledRectangle(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1, PCD8544_Pixel_t color) {
 8002dd0:	b590      	push	{r4, r7, lr}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	4608      	mov	r0, r1
 8002dda:	4611      	mov	r1, r2
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4623      	mov	r3, r4
 8002de0:	71fb      	strb	r3, [r7, #7]
 8002de2:	4603      	mov	r3, r0
 8002de4:	71bb      	strb	r3, [r7, #6]
 8002de6:	460b      	mov	r3, r1
 8002de8:	717b      	strb	r3, [r7, #5]
 8002dea:	4613      	mov	r3, r2
 8002dec:	713b      	strb	r3, [r7, #4]
	for (; y0 < y1; y0++) {
 8002dee:	e00b      	b.n	8002e08 <PCD8544_DrawFilledRectangle+0x38>
		PCD8544_DrawLine(x0, y0, x1, y0, color);
 8002df0:	79bc      	ldrb	r4, [r7, #6]
 8002df2:	797a      	ldrb	r2, [r7, #5]
 8002df4:	79b9      	ldrb	r1, [r7, #6]
 8002df6:	79f8      	ldrb	r0, [r7, #7]
 8002df8:	7e3b      	ldrb	r3, [r7, #24]
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	4623      	mov	r3, r4
 8002dfe:	f7ff ff16 	bl	8002c2e <PCD8544_DrawLine>
	for (; y0 < y1; y0++) {
 8002e02:	79bb      	ldrb	r3, [r7, #6]
 8002e04:	3301      	adds	r3, #1
 8002e06:	71bb      	strb	r3, [r7, #6]
 8002e08:	79ba      	ldrb	r2, [r7, #6]
 8002e0a:	793b      	ldrb	r3, [r7, #4]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d3ef      	bcc.n	8002df0 <PCD8544_DrawFilledRectangle+0x20>
	}
}
 8002e10:	bf00      	nop
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd90      	pop	{r4, r7, pc}

08002e1a <scale8>:
// Peripheral usage
#include "stm32f4xx_hal.h"

#include "ws2812b.h"

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4603      	mov	r3, r0
 8002e22:	460a      	mov	r2, r1
 8002e24:	71fb      	strb	r3, [r7, #7]
 8002e26:	4613      	mov	r3, r2
 8002e28:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
 8002e2c:	79ba      	ldrb	r2, [r7, #6]
 8002e2e:	fb02 f303 	mul.w	r3, r2, r3
 8002e32:	121b      	asrs	r3, r3, #8
 8002e34:	b2db      	uxtb	r3, r3
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(Layers *layer, uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8002e42:	b590      	push	{r4, r7, lr}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	4608      	mov	r0, r1
 8002e4c:	4611      	mov	r1, r2
 8002e4e:	461a      	mov	r2, r3
 8002e50:	4603      	mov	r3, r0
 8002e52:	70fb      	strb	r3, [r7, #3]
 8002e54:	460b      	mov	r3, r1
 8002e56:	70bb      	strb	r3, [r7, #2]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	707b      	strb	r3, [r7, #1]
	layer->rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8002e5c:	78fa      	ldrb	r2, [r7, #3]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	189c      	adds	r4, r3, r2
 8002e64:	787b      	ldrb	r3, [r7, #1]
 8002e66:	21b0      	movs	r1, #176	; 0xb0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff ffd6 	bl	8002e1a <scale8>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	461a      	mov	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4423      	add	r3, r4
 8002e76:	725a      	strb	r2, [r3, #9]
	layer->rgb_arr[3 * index + 1] = r;
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4413      	add	r3, r2
 8002e80:	3301      	adds	r3, #1
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	78ba      	ldrb	r2, [r7, #2]
 8002e88:	725a      	strb	r2, [r3, #9]
	layer->rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	4413      	add	r3, r2
 8002e92:	1c9c      	adds	r4, r3, #2
 8002e94:	7e3b      	ldrb	r3, [r7, #24]
 8002e96:	21f0      	movs	r1, #240	; 0xf0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ffbe 	bl	8002e1a <scale8>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4423      	add	r3, r4
 8002ea6:	725a      	strb	r2, [r3, #9]
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd90      	pop	{r4, r7, pc}

08002eb0 <led_set_all_RGB>:

// Set all colors to RGB
void led_set_all_RGB(Layers *layer, uint8_t r, uint8_t g, uint8_t b) {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	4608      	mov	r0, r1
 8002eba:	4611      	mov	r1, r2
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	70fb      	strb	r3, [r7, #3]
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	70bb      	strb	r3, [r7, #2]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	707b      	strb	r3, [r7, #1]
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGB(layer, i, r, g, b);
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	e00c      	b.n	8002eea <led_set_all_RGB+0x3a>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	b2d9      	uxtb	r1, r3
 8002ed4:	78b8      	ldrb	r0, [r7, #2]
 8002ed6:	78fa      	ldrb	r2, [r7, #3]
 8002ed8:	787b      	ldrb	r3, [r7, #1]
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	4603      	mov	r3, r0
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff ffaf 	bl	8002e42 <led_set_RGB>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2bff      	cmp	r3, #255	; 0xff
 8002eee:	d9ef      	bls.n	8002ed0 <led_set_all_RGB+0x20>
}
 8002ef0:	bf00      	nop
 8002ef2:	bf00      	nop
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <led_render>:

// Shuttle the data to the LEDs!
void led_render(Layers *layer) {
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  if(layer->wr_buf_p != 0 || layer->dma->State != HAL_DMA_STATE_READY) {
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d106      	bne.n	8002f1a <led_render+0x20>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d01d      	beq.n	8002f56 <led_render+0x5c>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) layer->wr_buf[i] = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	73fb      	strb	r3, [r7, #15]
 8002f1e:	e00a      	b.n	8002f36 <led_render+0x3c>
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	4413      	add	r3, r2
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	805a      	strh	r2, [r3, #2]
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
 8002f32:	3301      	adds	r3, #1
 8002f34:	73fb      	strb	r3, [r7, #15]
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	2b2f      	cmp	r3, #47	; 0x2f
 8002f3a:	d9f1      	bls.n	8002f20 <led_render+0x26>
    layer->wr_buf_p = 0;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
    HAL_TIM_PWM_Stop_DMA(layer->timer, layer->channel);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	7a1b      	ldrb	r3, [r3, #8]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4610      	mov	r0, r2
 8002f50:	f002 fadc 	bl	800550c <HAL_TIM_PWM_Stop_DMA>
    return;
 8002f54:	e09b      	b.n	800308e <led_render+0x194>
  }
  // Ooh boi the first data buffer half (and the second!)
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8002f56:	2300      	movs	r3, #0
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	e085      	b.n	8003068 <led_render+0x16e>
	  layer->wr_buf[i     ] = PWM_LO << (((layer->rgb_arr[0] << i) & 0x80) > 0);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	7a5b      	ldrb	r3, [r3, #9]
 8002f60:	461a      	mov	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	dd01      	ble.n	8002f74 <led_render+0x7a>
 8002f70:	2142      	movs	r1, #66	; 0x42
 8002f72:	e000      	b.n	8002f76 <led_render+0x7c>
 8002f74:	2121      	movs	r1, #33	; 0x21
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4413      	add	r3, r2
 8002f82:	460a      	mov	r2, r1
 8002f84:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i +  8] = PWM_LO << (((layer->rgb_arr[1] << i) & 0x80) > 0);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	7a9b      	ldrb	r3, [r3, #10]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	dd01      	ble.n	8002f9e <led_render+0xa4>
 8002f9a:	2142      	movs	r1, #66	; 0x42
 8002f9c:	e000      	b.n	8002fa0 <led_render+0xa6>
 8002f9e:	2121      	movs	r1, #33	; 0x21
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	3308      	adds	r3, #8
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	4413      	add	r3, r2
 8002fae:	460a      	mov	r2, r1
 8002fb0:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i + 16] = PWM_LO << (((layer->rgb_arr[2] << i) & 0x80) > 0);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	7adb      	ldrb	r3, [r3, #11]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	dd01      	ble.n	8002fca <led_render+0xd0>
 8002fc6:	2142      	movs	r1, #66	; 0x42
 8002fc8:	e000      	b.n	8002fcc <led_render+0xd2>
 8002fca:	2121      	movs	r1, #33	; 0x21
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	3310      	adds	r3, #16
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	4413      	add	r3, r2
 8002fda:	460a      	mov	r2, r1
 8002fdc:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i + 24] = PWM_LO << (((layer->rgb_arr[3] << i) & 0x80) > 0);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	7b1b      	ldrb	r3, [r3, #12]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	dd01      	ble.n	8002ff6 <led_render+0xfc>
 8002ff2:	2142      	movs	r1, #66	; 0x42
 8002ff4:	e000      	b.n	8002ff8 <led_render+0xfe>
 8002ff6:	2121      	movs	r1, #33	; 0x21
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	3318      	adds	r3, #24
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4413      	add	r3, r2
 8003006:	460a      	mov	r2, r1
 8003008:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i + 32] = PWM_LO << (((layer->rgb_arr[4] << i) & 0x80) > 0);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	7b5b      	ldrb	r3, [r3, #13]
 800300e:	461a      	mov	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301a:	2b00      	cmp	r3, #0
 800301c:	dd01      	ble.n	8003022 <led_render+0x128>
 800301e:	2142      	movs	r1, #66	; 0x42
 8003020:	e000      	b.n	8003024 <led_render+0x12a>
 8003022:	2121      	movs	r1, #33	; 0x21
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	3320      	adds	r3, #32
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	4413      	add	r3, r2
 8003032:	460a      	mov	r2, r1
 8003034:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i + 40] = PWM_LO << (((layer->rgb_arr[5] << i) & 0x80) > 0);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	7b9b      	ldrb	r3, [r3, #14]
 800303a:	461a      	mov	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003046:	2b00      	cmp	r3, #0
 8003048:	dd01      	ble.n	800304e <led_render+0x154>
 800304a:	2142      	movs	r1, #66	; 0x42
 800304c:	e000      	b.n	8003050 <led_render+0x156>
 800304e:	2121      	movs	r1, #33	; 0x21
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	3328      	adds	r3, #40	; 0x28
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	4413      	add	r3, r2
 800305e:	460a      	mov	r2, r1
 8003060:	805a      	strh	r2, [r3, #2]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	3301      	adds	r3, #1
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b07      	cmp	r3, #7
 800306c:	f67f af76 	bls.w	8002f5c <led_render+0x62>
  }
  HAL_TIM_PWM_Start_DMA(layer->timer, layer->channel, (uint32_t *)layer->wr_buf, WR_BUF_LEN);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	7a1b      	ldrb	r3, [r3, #8]
 8003078:	4619      	mov	r1, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f203 320a 	addw	r2, r3, #778	; 0x30a
 8003080:	2330      	movs	r3, #48	; 0x30
 8003082:	f002 f893 	bl	80051ac <HAL_TIM_PWM_Start_DMA>
  layer->wr_buf_p = 2; // Since we're ready for the next buffer
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2202      	movs	r2, #2
 800308a:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
}
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003094:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003098:	480d      	ldr	r0, [pc, #52]	; (80030d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800309a:	490e      	ldr	r1, [pc, #56]	; (80030d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800309c:	4a0e      	ldr	r2, [pc, #56]	; (80030d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800309e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030a0:	e002      	b.n	80030a8 <LoopCopyDataInit>

080030a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030a6:	3304      	adds	r3, #4

080030a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030ac:	d3f9      	bcc.n	80030a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ae:	4a0b      	ldr	r2, [pc, #44]	; (80030dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030b0:	4c0b      	ldr	r4, [pc, #44]	; (80030e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030b4:	e001      	b.n	80030ba <LoopFillZerobss>

080030b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030b8:	3204      	adds	r2, #4

080030ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030bc:	d3fb      	bcc.n	80030b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030be:	f7ff fad7 	bl	8002670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030c2:	f006 ffcd 	bl	800a060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030c6:	f7fd fa65 	bl	8000594 <main>
  bx  lr    
 80030ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80030cc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80030d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030d4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80030d8:	0800b38c 	.word	0x0800b38c
  ldr r2, =_sbss
 80030dc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80030e0:	20001dbc 	.word	0x20001dbc

080030e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030e4:	e7fe      	b.n	80030e4 <ADC_IRQHandler>
	...

080030e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030ec:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <HAL_Init+0x40>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a0d      	ldr	r2, [pc, #52]	; (8003128 <HAL_Init+0x40>)
 80030f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030f8:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <HAL_Init+0x40>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a0a      	ldr	r2, [pc, #40]	; (8003128 <HAL_Init+0x40>)
 80030fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003102:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003104:	4b08      	ldr	r3, [pc, #32]	; (8003128 <HAL_Init+0x40>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a07      	ldr	r2, [pc, #28]	; (8003128 <HAL_Init+0x40>)
 800310a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003110:	2003      	movs	r0, #3
 8003112:	f000 f94f 	bl	80033b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003116:	2000      	movs	r0, #0
 8003118:	f000 f808 	bl	800312c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800311c:	f7fe ff3e 	bl	8001f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40023c00 	.word	0x40023c00

0800312c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003134:	4b12      	ldr	r3, [pc, #72]	; (8003180 <HAL_InitTick+0x54>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b12      	ldr	r3, [pc, #72]	; (8003184 <HAL_InitTick+0x58>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	4619      	mov	r1, r3
 800313e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003142:	fbb3 f3f1 	udiv	r3, r3, r1
 8003146:	fbb2 f3f3 	udiv	r3, r2, r3
 800314a:	4618      	mov	r0, r3
 800314c:	f000 f967 	bl	800341e <HAL_SYSTICK_Config>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e00e      	b.n	8003178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b0f      	cmp	r3, #15
 800315e:	d80a      	bhi.n	8003176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003160:	2200      	movs	r2, #0
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	f04f 30ff 	mov.w	r0, #4294967295
 8003168:	f000 f92f 	bl	80033ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800316c:	4a06      	ldr	r2, [pc, #24]	; (8003188 <HAL_InitTick+0x5c>)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	e000      	b.n	8003178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
}
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	20000000 	.word	0x20000000
 8003184:	20000008 	.word	0x20000008
 8003188:	20000004 	.word	0x20000004

0800318c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003190:	4b06      	ldr	r3, [pc, #24]	; (80031ac <HAL_IncTick+0x20>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	461a      	mov	r2, r3
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <HAL_IncTick+0x24>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4413      	add	r3, r2
 800319c:	4a04      	ldr	r2, [pc, #16]	; (80031b0 <HAL_IncTick+0x24>)
 800319e:	6013      	str	r3, [r2, #0]
}
 80031a0:	bf00      	nop
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	20000008 	.word	0x20000008
 80031b0:	20001d60 	.word	0x20001d60

080031b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return uwTick;
 80031b8:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <HAL_GetTick+0x14>)
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20001d60 	.word	0x20001d60

080031cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031d4:	f7ff ffee 	bl	80031b4 <HAL_GetTick>
 80031d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e4:	d005      	beq.n	80031f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031e6:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <HAL_Delay+0x44>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4413      	add	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031f2:	bf00      	nop
 80031f4:	f7ff ffde 	bl	80031b4 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	429a      	cmp	r2, r3
 8003202:	d8f7      	bhi.n	80031f4 <HAL_Delay+0x28>
  {
  }
}
 8003204:	bf00      	nop
 8003206:	bf00      	nop
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000008 	.word	0x20000008

08003214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <__NVIC_SetPriorityGrouping+0x44>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003230:	4013      	ands	r3, r2
 8003232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800323c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003246:	4a04      	ldr	r2, [pc, #16]	; (8003258 <__NVIC_SetPriorityGrouping+0x44>)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	60d3      	str	r3, [r2, #12]
}
 800324c:	bf00      	nop
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	e000ed00 	.word	0xe000ed00

0800325c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003260:	4b04      	ldr	r3, [pc, #16]	; (8003274 <__NVIC_GetPriorityGrouping+0x18>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	0a1b      	lsrs	r3, r3, #8
 8003266:	f003 0307 	and.w	r3, r3, #7
}
 800326a:	4618      	mov	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	e000ed00 	.word	0xe000ed00

08003278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	2b00      	cmp	r3, #0
 8003288:	db0b      	blt.n	80032a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	f003 021f 	and.w	r2, r3, #31
 8003290:	4907      	ldr	r1, [pc, #28]	; (80032b0 <__NVIC_EnableIRQ+0x38>)
 8003292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	2001      	movs	r0, #1
 800329a:	fa00 f202 	lsl.w	r2, r0, r2
 800329e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	e000e100 	.word	0xe000e100

080032b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	6039      	str	r1, [r7, #0]
 80032be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	db0a      	blt.n	80032de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	490c      	ldr	r1, [pc, #48]	; (8003300 <__NVIC_SetPriority+0x4c>)
 80032ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d2:	0112      	lsls	r2, r2, #4
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	440b      	add	r3, r1
 80032d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032dc:	e00a      	b.n	80032f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	4908      	ldr	r1, [pc, #32]	; (8003304 <__NVIC_SetPriority+0x50>)
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	3b04      	subs	r3, #4
 80032ec:	0112      	lsls	r2, r2, #4
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	440b      	add	r3, r1
 80032f2:	761a      	strb	r2, [r3, #24]
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	e000e100 	.word	0xe000e100
 8003304:	e000ed00 	.word	0xe000ed00

08003308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003308:	b480      	push	{r7}
 800330a:	b089      	sub	sp, #36	; 0x24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f1c3 0307 	rsb	r3, r3, #7
 8003322:	2b04      	cmp	r3, #4
 8003324:	bf28      	it	cs
 8003326:	2304      	movcs	r3, #4
 8003328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	3304      	adds	r3, #4
 800332e:	2b06      	cmp	r3, #6
 8003330:	d902      	bls.n	8003338 <NVIC_EncodePriority+0x30>
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	3b03      	subs	r3, #3
 8003336:	e000      	b.n	800333a <NVIC_EncodePriority+0x32>
 8003338:	2300      	movs	r3, #0
 800333a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800333c:	f04f 32ff 	mov.w	r2, #4294967295
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43da      	mvns	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	401a      	ands	r2, r3
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003350:	f04f 31ff 	mov.w	r1, #4294967295
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	fa01 f303 	lsl.w	r3, r1, r3
 800335a:	43d9      	mvns	r1, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003360:	4313      	orrs	r3, r2
         );
}
 8003362:	4618      	mov	r0, r3
 8003364:	3724      	adds	r7, #36	; 0x24
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
	...

08003370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3b01      	subs	r3, #1
 800337c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003380:	d301      	bcc.n	8003386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003382:	2301      	movs	r3, #1
 8003384:	e00f      	b.n	80033a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003386:	4a0a      	ldr	r2, [pc, #40]	; (80033b0 <SysTick_Config+0x40>)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3b01      	subs	r3, #1
 800338c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800338e:	210f      	movs	r1, #15
 8003390:	f04f 30ff 	mov.w	r0, #4294967295
 8003394:	f7ff ff8e 	bl	80032b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <SysTick_Config+0x40>)
 800339a:	2200      	movs	r2, #0
 800339c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800339e:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <SysTick_Config+0x40>)
 80033a0:	2207      	movs	r2, #7
 80033a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	e000e010 	.word	0xe000e010

080033b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff ff29 	bl	8003214 <__NVIC_SetPriorityGrouping>
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b086      	sub	sp, #24
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	4603      	mov	r3, r0
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
 80033d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033dc:	f7ff ff3e 	bl	800325c <__NVIC_GetPriorityGrouping>
 80033e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	6978      	ldr	r0, [r7, #20]
 80033e8:	f7ff ff8e 	bl	8003308 <NVIC_EncodePriority>
 80033ec:	4602      	mov	r2, r0
 80033ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f2:	4611      	mov	r1, r2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff ff5d 	bl	80032b4 <__NVIC_SetPriority>
}
 80033fa:	bf00      	nop
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	4603      	mov	r3, r0
 800340a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800340c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff ff31 	bl	8003278 <__NVIC_EnableIRQ>
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff ffa2 	bl	8003370 <SysTick_Config>
 800342c:	4603      	mov	r3, r0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
	...

08003438 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003444:	f7ff feb6 	bl	80031b4 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e099      	b.n	8003588 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0201 	bic.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003474:	e00f      	b.n	8003496 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003476:	f7ff fe9d 	bl	80031b4 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b05      	cmp	r3, #5
 8003482:	d908      	bls.n	8003496 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2203      	movs	r2, #3
 800348e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e078      	b.n	8003588 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1e8      	bne.n	8003476 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	4b38      	ldr	r3, [pc, #224]	; (8003590 <HAL_DMA_Init+0x158>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d107      	bne.n	8003500 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f8:	4313      	orrs	r3, r2
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f023 0307 	bic.w	r3, r3, #7
 8003516:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	4313      	orrs	r3, r2
 8003520:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	2b04      	cmp	r3, #4
 8003528:	d117      	bne.n	800355a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00e      	beq.n	800355a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fa91 	bl	8003a64 <DMA_CheckFifoParam>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2240      	movs	r2, #64	; 0x40
 800354c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003556:	2301      	movs	r3, #1
 8003558:	e016      	b.n	8003588 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 fa48 	bl	80039f8 <DMA_CalcBaseAndBitshift>
 8003568:	4603      	mov	r3, r0
 800356a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003570:	223f      	movs	r2, #63	; 0x3f
 8003572:	409a      	lsls	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	f010803f 	.word	0xf010803f

08003594 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_DMA_Start_IT+0x26>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e040      	b.n	800363c <HAL_DMA_Start_IT+0xa8>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d12f      	bne.n	800362e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2202      	movs	r2, #2
 80035d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f9da 	bl	800399c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ec:	223f      	movs	r2, #63	; 0x3f
 80035ee:	409a      	lsls	r2, r3
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0216 	orr.w	r2, r2, #22
 8003602:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	2b00      	cmp	r3, #0
 800360a:	d007      	beq.n	800361c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0208 	orr.w	r2, r2, #8
 800361a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0201 	orr.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	e005      	b.n	800363a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003636:	2302      	movs	r3, #2
 8003638:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800363a:	7dfb      	ldrb	r3, [r7, #23]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d004      	beq.n	8003662 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2280      	movs	r2, #128	; 0x80
 800365c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e00c      	b.n	800367c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2205      	movs	r2, #5
 8003666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0201 	bic.w	r2, r2, #1
 8003678:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003694:	4b8e      	ldr	r3, [pc, #568]	; (80038d0 <HAL_DMA_IRQHandler+0x248>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a8e      	ldr	r2, [pc, #568]	; (80038d4 <HAL_DMA_IRQHandler+0x24c>)
 800369a:	fba2 2303 	umull	r2, r3, r2, r3
 800369e:	0a9b      	lsrs	r3, r3, #10
 80036a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b2:	2208      	movs	r2, #8
 80036b4:	409a      	lsls	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d01a      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d013      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0204 	bic.w	r2, r2, #4
 80036da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e0:	2208      	movs	r2, #8
 80036e2:	409a      	lsls	r2, r3
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ec:	f043 0201 	orr.w	r2, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f8:	2201      	movs	r2, #1
 80036fa:	409a      	lsls	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4013      	ands	r3, r2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d012      	beq.n	800372a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00b      	beq.n	800372a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003716:	2201      	movs	r2, #1
 8003718:	409a      	lsls	r2, r3
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003722:	f043 0202 	orr.w	r2, r3, #2
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372e:	2204      	movs	r2, #4
 8003730:	409a      	lsls	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4013      	ands	r3, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d012      	beq.n	8003760 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00b      	beq.n	8003760 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374c:	2204      	movs	r2, #4
 800374e:	409a      	lsls	r2, r3
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003758:	f043 0204 	orr.w	r2, r3, #4
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003764:	2210      	movs	r2, #16
 8003766:	409a      	lsls	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4013      	ands	r3, r2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d043      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b00      	cmp	r3, #0
 800377c:	d03c      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003782:	2210      	movs	r2, #16
 8003784:	409a      	lsls	r2, r3
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d018      	beq.n	80037ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d108      	bne.n	80037b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d024      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	4798      	blx	r3
 80037b6:	e01f      	b.n	80037f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d01b      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	4798      	blx	r3
 80037c8:	e016      	b.n	80037f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d107      	bne.n	80037e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0208 	bic.w	r2, r2, #8
 80037e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fc:	2220      	movs	r2, #32
 80037fe:	409a      	lsls	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4013      	ands	r3, r2
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 808f 	beq.w	8003928 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0310 	and.w	r3, r3, #16
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 8087 	beq.w	8003928 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381e:	2220      	movs	r2, #32
 8003820:	409a      	lsls	r2, r3
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b05      	cmp	r3, #5
 8003830:	d136      	bne.n	80038a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0216 	bic.w	r2, r2, #22
 8003840:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695a      	ldr	r2, [r3, #20]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003850:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	d103      	bne.n	8003862 <HAL_DMA_IRQHandler+0x1da>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800385e:	2b00      	cmp	r3, #0
 8003860:	d007      	beq.n	8003872 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0208 	bic.w	r2, r2, #8
 8003870:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003876:	223f      	movs	r2, #63	; 0x3f
 8003878:	409a      	lsls	r2, r3
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003892:	2b00      	cmp	r3, #0
 8003894:	d07e      	beq.n	8003994 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	4798      	blx	r3
        }
        return;
 800389e:	e079      	b.n	8003994 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d01d      	beq.n	80038ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10d      	bne.n	80038d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d031      	beq.n	8003928 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	4798      	blx	r3
 80038cc:	e02c      	b.n	8003928 <HAL_DMA_IRQHandler+0x2a0>
 80038ce:	bf00      	nop
 80038d0:	20000000 	.word	0x20000000
 80038d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d023      	beq.n	8003928 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	4798      	blx	r3
 80038e8:	e01e      	b.n	8003928 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10f      	bne.n	8003918 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0210 	bic.w	r2, r2, #16
 8003906:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392c:	2b00      	cmp	r3, #0
 800392e:	d032      	beq.n	8003996 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	d022      	beq.n	8003982 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2205      	movs	r2, #5
 8003940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0201 	bic.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	3301      	adds	r3, #1
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	429a      	cmp	r2, r3
 800395e:	d307      	bcc.n	8003970 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f2      	bne.n	8003954 <HAL_DMA_IRQHandler+0x2cc>
 800396e:	e000      	b.n	8003972 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003970:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	4798      	blx	r3
 8003992:	e000      	b.n	8003996 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003994:	bf00      	nop
    }
  }
}
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2b40      	cmp	r3, #64	; 0x40
 80039c8:	d108      	bne.n	80039dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039da:	e007      	b.n	80039ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	60da      	str	r2, [r3, #12]
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	3b10      	subs	r3, #16
 8003a08:	4a14      	ldr	r2, [pc, #80]	; (8003a5c <DMA_CalcBaseAndBitshift+0x64>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	091b      	lsrs	r3, r3, #4
 8003a10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a12:	4a13      	ldr	r2, [pc, #76]	; (8003a60 <DMA_CalcBaseAndBitshift+0x68>)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4413      	add	r3, r2
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d909      	bls.n	8003a3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a2e:	f023 0303 	bic.w	r3, r3, #3
 8003a32:	1d1a      	adds	r2, r3, #4
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	659a      	str	r2, [r3, #88]	; 0x58
 8003a38:	e007      	b.n	8003a4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a42:	f023 0303 	bic.w	r3, r3, #3
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	aaaaaaab 	.word	0xaaaaaaab
 8003a60:	0800b1c0 	.word	0x0800b1c0

08003a64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d11f      	bne.n	8003abe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d856      	bhi.n	8003b32 <DMA_CheckFifoParam+0xce>
 8003a84:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <DMA_CheckFifoParam+0x28>)
 8003a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8a:	bf00      	nop
 8003a8c:	08003a9d 	.word	0x08003a9d
 8003a90:	08003aaf 	.word	0x08003aaf
 8003a94:	08003a9d 	.word	0x08003a9d
 8003a98:	08003b33 	.word	0x08003b33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d046      	beq.n	8003b36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aac:	e043      	b.n	8003b36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ab6:	d140      	bne.n	8003b3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003abc:	e03d      	b.n	8003b3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac6:	d121      	bne.n	8003b0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	d837      	bhi.n	8003b3e <DMA_CheckFifoParam+0xda>
 8003ace:	a201      	add	r2, pc, #4	; (adr r2, 8003ad4 <DMA_CheckFifoParam+0x70>)
 8003ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad4:	08003ae5 	.word	0x08003ae5
 8003ad8:	08003aeb 	.word	0x08003aeb
 8003adc:	08003ae5 	.word	0x08003ae5
 8003ae0:	08003afd 	.word	0x08003afd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae8:	e030      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d025      	beq.n	8003b42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003afa:	e022      	b.n	8003b42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b04:	d11f      	bne.n	8003b46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b0a:	e01c      	b.n	8003b46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d903      	bls.n	8003b1a <DMA_CheckFifoParam+0xb6>
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d003      	beq.n	8003b20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b18:	e018      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8003b1e:	e015      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00e      	beq.n	8003b4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b30:	e00b      	b.n	8003b4a <DMA_CheckFifoParam+0xe6>
      break;
 8003b32:	bf00      	nop
 8003b34:	e00a      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      break;
 8003b36:	bf00      	nop
 8003b38:	e008      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      break;
 8003b3a:	bf00      	nop
 8003b3c:	e006      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      break;
 8003b3e:	bf00      	nop
 8003b40:	e004      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      break;
 8003b42:	bf00      	nop
 8003b44:	e002      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      break;   
 8003b46:	bf00      	nop
 8003b48:	e000      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      break;
 8003b4a:	bf00      	nop
    }
  } 
  
  return status; 
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop

08003b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b089      	sub	sp, #36	; 0x24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b72:	2300      	movs	r3, #0
 8003b74:	61fb      	str	r3, [r7, #28]
 8003b76:	e159      	b.n	8003e2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b78:	2201      	movs	r2, #1
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	f040 8148 	bne.w	8003e26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d005      	beq.n	8003bae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d130      	bne.n	8003c10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	2203      	movs	r2, #3
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003be4:	2201      	movs	r2, #1
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	091b      	lsrs	r3, r3, #4
 8003bfa:	f003 0201 	and.w	r2, r3, #1
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 0303 	and.w	r3, r3, #3
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d017      	beq.n	8003c4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	2203      	movs	r2, #3
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4013      	ands	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 0303 	and.w	r3, r3, #3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d123      	bne.n	8003ca0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	08da      	lsrs	r2, r3, #3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3208      	adds	r2, #8
 8003c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	220f      	movs	r2, #15
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	08da      	lsrs	r2, r3, #3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3208      	adds	r2, #8
 8003c9a:	69b9      	ldr	r1, [r7, #24]
 8003c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	2203      	movs	r2, #3
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 0203 	and.w	r2, r3, #3
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80a2 	beq.w	8003e26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	4b57      	ldr	r3, [pc, #348]	; (8003e44 <HAL_GPIO_Init+0x2e8>)
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cea:	4a56      	ldr	r2, [pc, #344]	; (8003e44 <HAL_GPIO_Init+0x2e8>)
 8003cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8003cf2:	4b54      	ldr	r3, [pc, #336]	; (8003e44 <HAL_GPIO_Init+0x2e8>)
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cfe:	4a52      	ldr	r2, [pc, #328]	; (8003e48 <HAL_GPIO_Init+0x2ec>)
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	089b      	lsrs	r3, r3, #2
 8003d04:	3302      	adds	r3, #2
 8003d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	220f      	movs	r2, #15
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a49      	ldr	r2, [pc, #292]	; (8003e4c <HAL_GPIO_Init+0x2f0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d019      	beq.n	8003d5e <HAL_GPIO_Init+0x202>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a48      	ldr	r2, [pc, #288]	; (8003e50 <HAL_GPIO_Init+0x2f4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d013      	beq.n	8003d5a <HAL_GPIO_Init+0x1fe>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a47      	ldr	r2, [pc, #284]	; (8003e54 <HAL_GPIO_Init+0x2f8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00d      	beq.n	8003d56 <HAL_GPIO_Init+0x1fa>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a46      	ldr	r2, [pc, #280]	; (8003e58 <HAL_GPIO_Init+0x2fc>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d007      	beq.n	8003d52 <HAL_GPIO_Init+0x1f6>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a45      	ldr	r2, [pc, #276]	; (8003e5c <HAL_GPIO_Init+0x300>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d101      	bne.n	8003d4e <HAL_GPIO_Init+0x1f2>
 8003d4a:	2304      	movs	r3, #4
 8003d4c:	e008      	b.n	8003d60 <HAL_GPIO_Init+0x204>
 8003d4e:	2307      	movs	r3, #7
 8003d50:	e006      	b.n	8003d60 <HAL_GPIO_Init+0x204>
 8003d52:	2303      	movs	r3, #3
 8003d54:	e004      	b.n	8003d60 <HAL_GPIO_Init+0x204>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e002      	b.n	8003d60 <HAL_GPIO_Init+0x204>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <HAL_GPIO_Init+0x204>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	f002 0203 	and.w	r2, r2, #3
 8003d66:	0092      	lsls	r2, r2, #2
 8003d68:	4093      	lsls	r3, r2
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d70:	4935      	ldr	r1, [pc, #212]	; (8003e48 <HAL_GPIO_Init+0x2ec>)
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	089b      	lsrs	r3, r3, #2
 8003d76:	3302      	adds	r3, #2
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d7e:	4b38      	ldr	r3, [pc, #224]	; (8003e60 <HAL_GPIO_Init+0x304>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003da2:	4a2f      	ldr	r2, [pc, #188]	; (8003e60 <HAL_GPIO_Init+0x304>)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003da8:	4b2d      	ldr	r3, [pc, #180]	; (8003e60 <HAL_GPIO_Init+0x304>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	43db      	mvns	r3, r3
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	4013      	ands	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dcc:	4a24      	ldr	r2, [pc, #144]	; (8003e60 <HAL_GPIO_Init+0x304>)
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dd2:	4b23      	ldr	r3, [pc, #140]	; (8003e60 <HAL_GPIO_Init+0x304>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4013      	ands	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003df6:	4a1a      	ldr	r2, [pc, #104]	; (8003e60 <HAL_GPIO_Init+0x304>)
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dfc:	4b18      	ldr	r3, [pc, #96]	; (8003e60 <HAL_GPIO_Init+0x304>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	43db      	mvns	r3, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e20:	4a0f      	ldr	r2, [pc, #60]	; (8003e60 <HAL_GPIO_Init+0x304>)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	61fb      	str	r3, [r7, #28]
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	2b0f      	cmp	r3, #15
 8003e30:	f67f aea2 	bls.w	8003b78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e34:	bf00      	nop
 8003e36:	bf00      	nop
 8003e38:	3724      	adds	r7, #36	; 0x24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40023800 	.word	0x40023800
 8003e48:	40013800 	.word	0x40013800
 8003e4c:	40020000 	.word	0x40020000
 8003e50:	40020400 	.word	0x40020400
 8003e54:	40020800 	.word	0x40020800
 8003e58:	40020c00 	.word	0x40020c00
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40013c00 	.word	0x40013c00

08003e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	807b      	strh	r3, [r7, #2]
 8003e70:	4613      	mov	r3, r2
 8003e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e74:	787b      	ldrb	r3, [r7, #1]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e7a:	887a      	ldrh	r2, [r7, #2]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e80:	e003      	b.n	8003e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e82:	887b      	ldrh	r3, [r7, #2]
 8003e84:	041a      	lsls	r2, r3, #16
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	619a      	str	r2, [r3, #24]
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ea2:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ea4:	695a      	ldr	r2, [r3, #20]
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d006      	beq.n	8003ebc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003eae:	4a05      	ldr	r2, [pc, #20]	; (8003ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003eb0:	88fb      	ldrh	r3, [r7, #6]
 8003eb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003eb4:	88fb      	ldrh	r3, [r7, #6]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fd f98a 	bl	80011d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ebc:	bf00      	nop
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40013c00 	.word	0x40013c00

08003ec8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e267      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d075      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ee6:	4b88      	ldr	r3, [pc, #544]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d00c      	beq.n	8003f0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ef2:	4b85      	ldr	r3, [pc, #532]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d112      	bne.n	8003f24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003efe:	4b82      	ldr	r3, [pc, #520]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f0a:	d10b      	bne.n	8003f24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f0c:	4b7e      	ldr	r3, [pc, #504]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d05b      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x108>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d157      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e242      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2c:	d106      	bne.n	8003f3c <HAL_RCC_OscConfig+0x74>
 8003f2e:	4b76      	ldr	r3, [pc, #472]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a75      	ldr	r2, [pc, #468]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	e01d      	b.n	8003f78 <HAL_RCC_OscConfig+0xb0>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f44:	d10c      	bne.n	8003f60 <HAL_RCC_OscConfig+0x98>
 8003f46:	4b70      	ldr	r3, [pc, #448]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a6f      	ldr	r2, [pc, #444]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	4b6d      	ldr	r3, [pc, #436]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a6c      	ldr	r2, [pc, #432]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	e00b      	b.n	8003f78 <HAL_RCC_OscConfig+0xb0>
 8003f60:	4b69      	ldr	r3, [pc, #420]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a68      	ldr	r2, [pc, #416]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f6a:	6013      	str	r3, [r2, #0]
 8003f6c:	4b66      	ldr	r3, [pc, #408]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a65      	ldr	r2, [pc, #404]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d013      	beq.n	8003fa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f80:	f7ff f918 	bl	80031b4 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f88:	f7ff f914 	bl	80031b4 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b64      	cmp	r3, #100	; 0x64
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e207      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9a:	4b5b      	ldr	r3, [pc, #364]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCC_OscConfig+0xc0>
 8003fa6:	e014      	b.n	8003fd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa8:	f7ff f904 	bl	80031b4 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fb0:	f7ff f900 	bl	80031b4 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b64      	cmp	r3, #100	; 0x64
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e1f3      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fc2:	4b51      	ldr	r3, [pc, #324]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0xe8>
 8003fce:	e000      	b.n	8003fd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d063      	beq.n	80040a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fde:	4b4a      	ldr	r3, [pc, #296]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00b      	beq.n	8004002 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fea:	4b47      	ldr	r3, [pc, #284]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d11c      	bne.n	8004030 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ff6:	4b44      	ldr	r3, [pc, #272]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d116      	bne.n	8004030 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004002:	4b41      	ldr	r3, [pc, #260]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_RCC_OscConfig+0x152>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d001      	beq.n	800401a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e1c7      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800401a:	4b3b      	ldr	r3, [pc, #236]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	4937      	ldr	r1, [pc, #220]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 800402a:	4313      	orrs	r3, r2
 800402c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800402e:	e03a      	b.n	80040a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d020      	beq.n	800407a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004038:	4b34      	ldr	r3, [pc, #208]	; (800410c <HAL_RCC_OscConfig+0x244>)
 800403a:	2201      	movs	r2, #1
 800403c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403e:	f7ff f8b9 	bl	80031b4 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004046:	f7ff f8b5 	bl	80031b4 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e1a8      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004058:	4b2b      	ldr	r3, [pc, #172]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f0      	beq.n	8004046 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004064:	4b28      	ldr	r3, [pc, #160]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	4925      	ldr	r1, [pc, #148]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 8004074:	4313      	orrs	r3, r2
 8004076:	600b      	str	r3, [r1, #0]
 8004078:	e015      	b.n	80040a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800407a:	4b24      	ldr	r3, [pc, #144]	; (800410c <HAL_RCC_OscConfig+0x244>)
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004080:	f7ff f898 	bl	80031b4 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004088:	f7ff f894 	bl	80031b4 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e187      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800409a:	4b1b      	ldr	r3, [pc, #108]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f0      	bne.n	8004088 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d036      	beq.n	8004120 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d016      	beq.n	80040e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ba:	4b15      	ldr	r3, [pc, #84]	; (8004110 <HAL_RCC_OscConfig+0x248>)
 80040bc:	2201      	movs	r2, #1
 80040be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c0:	f7ff f878 	bl	80031b4 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040c8:	f7ff f874 	bl	80031b4 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e167      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040da:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <HAL_RCC_OscConfig+0x240>)
 80040dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0f0      	beq.n	80040c8 <HAL_RCC_OscConfig+0x200>
 80040e6:	e01b      	b.n	8004120 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040e8:	4b09      	ldr	r3, [pc, #36]	; (8004110 <HAL_RCC_OscConfig+0x248>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ee:	f7ff f861 	bl	80031b4 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040f4:	e00e      	b.n	8004114 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040f6:	f7ff f85d 	bl	80031b4 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d907      	bls.n	8004114 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e150      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
 8004108:	40023800 	.word	0x40023800
 800410c:	42470000 	.word	0x42470000
 8004110:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004114:	4b88      	ldr	r3, [pc, #544]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 8004116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1ea      	bne.n	80040f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 8097 	beq.w	800425c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800412e:	2300      	movs	r3, #0
 8004130:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004132:	4b81      	ldr	r3, [pc, #516]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10f      	bne.n	800415e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800413e:	2300      	movs	r3, #0
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	4b7d      	ldr	r3, [pc, #500]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	4a7c      	ldr	r2, [pc, #496]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 8004148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800414c:	6413      	str	r3, [r2, #64]	; 0x40
 800414e:	4b7a      	ldr	r3, [pc, #488]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004156:	60bb      	str	r3, [r7, #8]
 8004158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800415a:	2301      	movs	r3, #1
 800415c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415e:	4b77      	ldr	r3, [pc, #476]	; (800433c <HAL_RCC_OscConfig+0x474>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004166:	2b00      	cmp	r3, #0
 8004168:	d118      	bne.n	800419c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800416a:	4b74      	ldr	r3, [pc, #464]	; (800433c <HAL_RCC_OscConfig+0x474>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a73      	ldr	r2, [pc, #460]	; (800433c <HAL_RCC_OscConfig+0x474>)
 8004170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004176:	f7ff f81d 	bl	80031b4 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800417e:	f7ff f819 	bl	80031b4 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e10c      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004190:	4b6a      	ldr	r3, [pc, #424]	; (800433c <HAL_RCC_OscConfig+0x474>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f0      	beq.n	800417e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d106      	bne.n	80041b2 <HAL_RCC_OscConfig+0x2ea>
 80041a4:	4b64      	ldr	r3, [pc, #400]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 80041a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a8:	4a63      	ldr	r2, [pc, #396]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 80041aa:	f043 0301 	orr.w	r3, r3, #1
 80041ae:	6713      	str	r3, [r2, #112]	; 0x70
 80041b0:	e01c      	b.n	80041ec <HAL_RCC_OscConfig+0x324>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b05      	cmp	r3, #5
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCC_OscConfig+0x30c>
 80041ba:	4b5f      	ldr	r3, [pc, #380]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 80041bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041be:	4a5e      	ldr	r2, [pc, #376]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 80041c0:	f043 0304 	orr.w	r3, r3, #4
 80041c4:	6713      	str	r3, [r2, #112]	; 0x70
 80041c6:	4b5c      	ldr	r3, [pc, #368]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 80041c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ca:	4a5b      	ldr	r2, [pc, #364]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	6713      	str	r3, [r2, #112]	; 0x70
 80041d2:	e00b      	b.n	80041ec <HAL_RCC_OscConfig+0x324>
 80041d4:	4b58      	ldr	r3, [pc, #352]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 80041d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d8:	4a57      	ldr	r2, [pc, #348]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 80041da:	f023 0301 	bic.w	r3, r3, #1
 80041de:	6713      	str	r3, [r2, #112]	; 0x70
 80041e0:	4b55      	ldr	r3, [pc, #340]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 80041e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e4:	4a54      	ldr	r2, [pc, #336]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 80041e6:	f023 0304 	bic.w	r3, r3, #4
 80041ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d015      	beq.n	8004220 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f4:	f7fe ffde 	bl	80031b4 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041fa:	e00a      	b.n	8004212 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041fc:	f7fe ffda 	bl	80031b4 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	f241 3288 	movw	r2, #5000	; 0x1388
 800420a:	4293      	cmp	r3, r2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e0cb      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004212:	4b49      	ldr	r3, [pc, #292]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0ee      	beq.n	80041fc <HAL_RCC_OscConfig+0x334>
 800421e:	e014      	b.n	800424a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004220:	f7fe ffc8 	bl	80031b4 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004226:	e00a      	b.n	800423e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004228:	f7fe ffc4 	bl	80031b4 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f241 3288 	movw	r2, #5000	; 0x1388
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e0b5      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800423e:	4b3e      	ldr	r3, [pc, #248]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1ee      	bne.n	8004228 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800424a:	7dfb      	ldrb	r3, [r7, #23]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d105      	bne.n	800425c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004250:	4b39      	ldr	r3, [pc, #228]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 8004252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004254:	4a38      	ldr	r2, [pc, #224]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 8004256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800425a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 80a1 	beq.w	80043a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004266:	4b34      	ldr	r3, [pc, #208]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 030c 	and.w	r3, r3, #12
 800426e:	2b08      	cmp	r3, #8
 8004270:	d05c      	beq.n	800432c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d141      	bne.n	80042fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800427a:	4b31      	ldr	r3, [pc, #196]	; (8004340 <HAL_RCC_OscConfig+0x478>)
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004280:	f7fe ff98 	bl	80031b4 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004288:	f7fe ff94 	bl	80031b4 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e087      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800429a:	4b27      	ldr	r3, [pc, #156]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69da      	ldr	r2, [r3, #28]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	019b      	lsls	r3, r3, #6
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	085b      	lsrs	r3, r3, #1
 80042be:	3b01      	subs	r3, #1
 80042c0:	041b      	lsls	r3, r3, #16
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c8:	061b      	lsls	r3, r3, #24
 80042ca:	491b      	ldr	r1, [pc, #108]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042d0:	4b1b      	ldr	r3, [pc, #108]	; (8004340 <HAL_RCC_OscConfig+0x478>)
 80042d2:	2201      	movs	r2, #1
 80042d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d6:	f7fe ff6d 	bl	80031b4 <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042dc:	e008      	b.n	80042f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042de:	f7fe ff69 	bl	80031b4 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e05c      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f0:	4b11      	ldr	r3, [pc, #68]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0f0      	beq.n	80042de <HAL_RCC_OscConfig+0x416>
 80042fc:	e054      	b.n	80043a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fe:	4b10      	ldr	r3, [pc, #64]	; (8004340 <HAL_RCC_OscConfig+0x478>)
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004304:	f7fe ff56 	bl	80031b4 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800430c:	f7fe ff52 	bl	80031b4 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e045      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431e:	4b06      	ldr	r3, [pc, #24]	; (8004338 <HAL_RCC_OscConfig+0x470>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f0      	bne.n	800430c <HAL_RCC_OscConfig+0x444>
 800432a:	e03d      	b.n	80043a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d107      	bne.n	8004344 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e038      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
 8004338:	40023800 	.word	0x40023800
 800433c:	40007000 	.word	0x40007000
 8004340:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004344:	4b1b      	ldr	r3, [pc, #108]	; (80043b4 <HAL_RCC_OscConfig+0x4ec>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d028      	beq.n	80043a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800435c:	429a      	cmp	r2, r3
 800435e:	d121      	bne.n	80043a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800436a:	429a      	cmp	r2, r3
 800436c:	d11a      	bne.n	80043a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004374:	4013      	ands	r3, r2
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800437a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800437c:	4293      	cmp	r3, r2
 800437e:	d111      	bne.n	80043a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438a:	085b      	lsrs	r3, r3, #1
 800438c:	3b01      	subs	r3, #1
 800438e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004390:	429a      	cmp	r2, r3
 8004392:	d107      	bne.n	80043a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d001      	beq.n	80043a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e000      	b.n	80043aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	40023800 	.word	0x40023800

080043b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0cc      	b.n	8004566 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043cc:	4b68      	ldr	r3, [pc, #416]	; (8004570 <HAL_RCC_ClockConfig+0x1b8>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d90c      	bls.n	80043f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043da:	4b65      	ldr	r3, [pc, #404]	; (8004570 <HAL_RCC_ClockConfig+0x1b8>)
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e2:	4b63      	ldr	r3, [pc, #396]	; (8004570 <HAL_RCC_ClockConfig+0x1b8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d001      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0b8      	b.n	8004566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d020      	beq.n	8004442 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d005      	beq.n	8004418 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800440c:	4b59      	ldr	r3, [pc, #356]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	4a58      	ldr	r2, [pc, #352]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004416:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004424:	4b53      	ldr	r3, [pc, #332]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	4a52      	ldr	r2, [pc, #328]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 800442a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800442e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004430:	4b50      	ldr	r3, [pc, #320]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	494d      	ldr	r1, [pc, #308]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	4313      	orrs	r3, r2
 8004440:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d044      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d107      	bne.n	8004466 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004456:	4b47      	ldr	r3, [pc, #284]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d119      	bne.n	8004496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e07f      	b.n	8004566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d003      	beq.n	8004476 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004472:	2b03      	cmp	r3, #3
 8004474:	d107      	bne.n	8004486 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004476:	4b3f      	ldr	r3, [pc, #252]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d109      	bne.n	8004496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e06f      	b.n	8004566 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004486:	4b3b      	ldr	r3, [pc, #236]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e067      	b.n	8004566 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004496:	4b37      	ldr	r3, [pc, #220]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f023 0203 	bic.w	r2, r3, #3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	4934      	ldr	r1, [pc, #208]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044a8:	f7fe fe84 	bl	80031b4 <HAL_GetTick>
 80044ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ae:	e00a      	b.n	80044c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b0:	f7fe fe80 	bl	80031b4 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80044be:	4293      	cmp	r3, r2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e04f      	b.n	8004566 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c6:	4b2b      	ldr	r3, [pc, #172]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 020c 	and.w	r2, r3, #12
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d1eb      	bne.n	80044b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044d8:	4b25      	ldr	r3, [pc, #148]	; (8004570 <HAL_RCC_ClockConfig+0x1b8>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d20c      	bcs.n	8004500 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e6:	4b22      	ldr	r3, [pc, #136]	; (8004570 <HAL_RCC_ClockConfig+0x1b8>)
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ee:	4b20      	ldr	r3, [pc, #128]	; (8004570 <HAL_RCC_ClockConfig+0x1b8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d001      	beq.n	8004500 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e032      	b.n	8004566 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800450c:	4b19      	ldr	r3, [pc, #100]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	4916      	ldr	r1, [pc, #88]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	4313      	orrs	r3, r2
 800451c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800452a:	4b12      	ldr	r3, [pc, #72]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	490e      	ldr	r1, [pc, #56]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 800453a:	4313      	orrs	r3, r2
 800453c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800453e:	f000 f821 	bl	8004584 <HAL_RCC_GetSysClockFreq>
 8004542:	4602      	mov	r2, r0
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_RCC_ClockConfig+0x1bc>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	091b      	lsrs	r3, r3, #4
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	490a      	ldr	r1, [pc, #40]	; (8004578 <HAL_RCC_ClockConfig+0x1c0>)
 8004550:	5ccb      	ldrb	r3, [r1, r3]
 8004552:	fa22 f303 	lsr.w	r3, r2, r3
 8004556:	4a09      	ldr	r2, [pc, #36]	; (800457c <HAL_RCC_ClockConfig+0x1c4>)
 8004558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800455a:	4b09      	ldr	r3, [pc, #36]	; (8004580 <HAL_RCC_ClockConfig+0x1c8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f7fe fde4 	bl	800312c <HAL_InitTick>

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40023c00 	.word	0x40023c00
 8004574:	40023800 	.word	0x40023800
 8004578:	0800ae20 	.word	0x0800ae20
 800457c:	20000000 	.word	0x20000000
 8004580:	20000004 	.word	0x20000004

08004584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004588:	b094      	sub	sp, #80	; 0x50
 800458a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	647b      	str	r3, [r7, #68]	; 0x44
 8004590:	2300      	movs	r3, #0
 8004592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004594:	2300      	movs	r3, #0
 8004596:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800459c:	4b79      	ldr	r3, [pc, #484]	; (8004784 <HAL_RCC_GetSysClockFreq+0x200>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 030c 	and.w	r3, r3, #12
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d00d      	beq.n	80045c4 <HAL_RCC_GetSysClockFreq+0x40>
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	f200 80e1 	bhi.w	8004770 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <HAL_RCC_GetSysClockFreq+0x34>
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	d003      	beq.n	80045be <HAL_RCC_GetSysClockFreq+0x3a>
 80045b6:	e0db      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045b8:	4b73      	ldr	r3, [pc, #460]	; (8004788 <HAL_RCC_GetSysClockFreq+0x204>)
 80045ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80045bc:	e0db      	b.n	8004776 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045be:	4b73      	ldr	r3, [pc, #460]	; (800478c <HAL_RCC_GetSysClockFreq+0x208>)
 80045c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045c2:	e0d8      	b.n	8004776 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045c4:	4b6f      	ldr	r3, [pc, #444]	; (8004784 <HAL_RCC_GetSysClockFreq+0x200>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045ce:	4b6d      	ldr	r3, [pc, #436]	; (8004784 <HAL_RCC_GetSysClockFreq+0x200>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d063      	beq.n	80046a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045da:	4b6a      	ldr	r3, [pc, #424]	; (8004784 <HAL_RCC_GetSysClockFreq+0x200>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	099b      	lsrs	r3, r3, #6
 80045e0:	2200      	movs	r2, #0
 80045e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80045e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80045e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ec:	633b      	str	r3, [r7, #48]	; 0x30
 80045ee:	2300      	movs	r3, #0
 80045f0:	637b      	str	r3, [r7, #52]	; 0x34
 80045f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80045f6:	4622      	mov	r2, r4
 80045f8:	462b      	mov	r3, r5
 80045fa:	f04f 0000 	mov.w	r0, #0
 80045fe:	f04f 0100 	mov.w	r1, #0
 8004602:	0159      	lsls	r1, r3, #5
 8004604:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004608:	0150      	lsls	r0, r2, #5
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	4621      	mov	r1, r4
 8004610:	1a51      	subs	r1, r2, r1
 8004612:	6139      	str	r1, [r7, #16]
 8004614:	4629      	mov	r1, r5
 8004616:	eb63 0301 	sbc.w	r3, r3, r1
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004628:	4659      	mov	r1, fp
 800462a:	018b      	lsls	r3, r1, #6
 800462c:	4651      	mov	r1, sl
 800462e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004632:	4651      	mov	r1, sl
 8004634:	018a      	lsls	r2, r1, #6
 8004636:	4651      	mov	r1, sl
 8004638:	ebb2 0801 	subs.w	r8, r2, r1
 800463c:	4659      	mov	r1, fp
 800463e:	eb63 0901 	sbc.w	r9, r3, r1
 8004642:	f04f 0200 	mov.w	r2, #0
 8004646:	f04f 0300 	mov.w	r3, #0
 800464a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800464e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004652:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004656:	4690      	mov	r8, r2
 8004658:	4699      	mov	r9, r3
 800465a:	4623      	mov	r3, r4
 800465c:	eb18 0303 	adds.w	r3, r8, r3
 8004660:	60bb      	str	r3, [r7, #8]
 8004662:	462b      	mov	r3, r5
 8004664:	eb49 0303 	adc.w	r3, r9, r3
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	f04f 0300 	mov.w	r3, #0
 8004672:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004676:	4629      	mov	r1, r5
 8004678:	024b      	lsls	r3, r1, #9
 800467a:	4621      	mov	r1, r4
 800467c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004680:	4621      	mov	r1, r4
 8004682:	024a      	lsls	r2, r1, #9
 8004684:	4610      	mov	r0, r2
 8004686:	4619      	mov	r1, r3
 8004688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800468a:	2200      	movs	r2, #0
 800468c:	62bb      	str	r3, [r7, #40]	; 0x28
 800468e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004690:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004694:	f7fb fdfc 	bl	8000290 <__aeabi_uldivmod>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	4613      	mov	r3, r2
 800469e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046a0:	e058      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046a2:	4b38      	ldr	r3, [pc, #224]	; (8004784 <HAL_RCC_GetSysClockFreq+0x200>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	099b      	lsrs	r3, r3, #6
 80046a8:	2200      	movs	r2, #0
 80046aa:	4618      	mov	r0, r3
 80046ac:	4611      	mov	r1, r2
 80046ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046b2:	623b      	str	r3, [r7, #32]
 80046b4:	2300      	movs	r3, #0
 80046b6:	627b      	str	r3, [r7, #36]	; 0x24
 80046b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046bc:	4642      	mov	r2, r8
 80046be:	464b      	mov	r3, r9
 80046c0:	f04f 0000 	mov.w	r0, #0
 80046c4:	f04f 0100 	mov.w	r1, #0
 80046c8:	0159      	lsls	r1, r3, #5
 80046ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046ce:	0150      	lsls	r0, r2, #5
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4641      	mov	r1, r8
 80046d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80046da:	4649      	mov	r1, r9
 80046dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046f4:	ebb2 040a 	subs.w	r4, r2, sl
 80046f8:	eb63 050b 	sbc.w	r5, r3, fp
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	00eb      	lsls	r3, r5, #3
 8004706:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800470a:	00e2      	lsls	r2, r4, #3
 800470c:	4614      	mov	r4, r2
 800470e:	461d      	mov	r5, r3
 8004710:	4643      	mov	r3, r8
 8004712:	18e3      	adds	r3, r4, r3
 8004714:	603b      	str	r3, [r7, #0]
 8004716:	464b      	mov	r3, r9
 8004718:	eb45 0303 	adc.w	r3, r5, r3
 800471c:	607b      	str	r3, [r7, #4]
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	e9d7 4500 	ldrd	r4, r5, [r7]
 800472a:	4629      	mov	r1, r5
 800472c:	028b      	lsls	r3, r1, #10
 800472e:	4621      	mov	r1, r4
 8004730:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004734:	4621      	mov	r1, r4
 8004736:	028a      	lsls	r2, r1, #10
 8004738:	4610      	mov	r0, r2
 800473a:	4619      	mov	r1, r3
 800473c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800473e:	2200      	movs	r2, #0
 8004740:	61bb      	str	r3, [r7, #24]
 8004742:	61fa      	str	r2, [r7, #28]
 8004744:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004748:	f7fb fda2 	bl	8000290 <__aeabi_uldivmod>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4613      	mov	r3, r2
 8004752:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004754:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <HAL_RCC_GetSysClockFreq+0x200>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	0c1b      	lsrs	r3, r3, #16
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	3301      	adds	r3, #1
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004764:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004768:	fbb2 f3f3 	udiv	r3, r2, r3
 800476c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800476e:	e002      	b.n	8004776 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004770:	4b05      	ldr	r3, [pc, #20]	; (8004788 <HAL_RCC_GetSysClockFreq+0x204>)
 8004772:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004774:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004778:	4618      	mov	r0, r3
 800477a:	3750      	adds	r7, #80	; 0x50
 800477c:	46bd      	mov	sp, r7
 800477e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004782:	bf00      	nop
 8004784:	40023800 	.word	0x40023800
 8004788:	00f42400 	.word	0x00f42400
 800478c:	007a1200 	.word	0x007a1200

08004790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004794:	4b03      	ldr	r3, [pc, #12]	; (80047a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004796:	681b      	ldr	r3, [r3, #0]
}
 8004798:	4618      	mov	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	20000000 	.word	0x20000000

080047a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047ac:	f7ff fff0 	bl	8004790 <HAL_RCC_GetHCLKFreq>
 80047b0:	4602      	mov	r2, r0
 80047b2:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	0a9b      	lsrs	r3, r3, #10
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	4903      	ldr	r1, [pc, #12]	; (80047cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047be:	5ccb      	ldrb	r3, [r1, r3]
 80047c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40023800 	.word	0x40023800
 80047cc:	0800ae30 	.word	0x0800ae30

080047d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047d4:	f7ff ffdc 	bl	8004790 <HAL_RCC_GetHCLKFreq>
 80047d8:	4602      	mov	r2, r0
 80047da:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	0b5b      	lsrs	r3, r3, #13
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	4903      	ldr	r1, [pc, #12]	; (80047f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047e6:	5ccb      	ldrb	r3, [r1, r3]
 80047e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40023800 	.word	0x40023800
 80047f4:	0800ae30 	.word	0x0800ae30

080047f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e07b      	b.n	8004902 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	2b00      	cmp	r3, #0
 8004810:	d108      	bne.n	8004824 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800481a:	d009      	beq.n	8004830 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	61da      	str	r2, [r3, #28]
 8004822:	e005      	b.n	8004830 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d106      	bne.n	8004850 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fd fbce 	bl	8001fec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004866:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004878:	431a      	orrs	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b4:	ea42 0103 	orr.w	r1, r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	0c1b      	lsrs	r3, r3, #16
 80048ce:	f003 0104 	and.w	r1, r3, #4
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	f003 0210 	and.w	r2, r3, #16
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69da      	ldr	r2, [r3, #28]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b088      	sub	sp, #32
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	603b      	str	r3, [r7, #0]
 8004916:	4613      	mov	r3, r2
 8004918:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800491a:	2300      	movs	r3, #0
 800491c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_SPI_Transmit+0x22>
 8004928:	2302      	movs	r3, #2
 800492a:	e126      	b.n	8004b7a <HAL_SPI_Transmit+0x270>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004934:	f7fe fc3e 	bl	80031b4 <HAL_GetTick>
 8004938:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800493a:	88fb      	ldrh	r3, [r7, #6]
 800493c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b01      	cmp	r3, #1
 8004948:	d002      	beq.n	8004950 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800494a:	2302      	movs	r3, #2
 800494c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800494e:	e10b      	b.n	8004b68 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <HAL_SPI_Transmit+0x52>
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d102      	bne.n	8004962 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004960:	e102      	b.n	8004b68 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2203      	movs	r2, #3
 8004966:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	88fa      	ldrh	r2, [r7, #6]
 800497a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	88fa      	ldrh	r2, [r7, #6]
 8004980:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a8:	d10f      	bne.n	80049ca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d4:	2b40      	cmp	r3, #64	; 0x40
 80049d6:	d007      	beq.n	80049e8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049f0:	d14b      	bne.n	8004a8a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <HAL_SPI_Transmit+0xf6>
 80049fa:	8afb      	ldrh	r3, [r7, #22]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d13e      	bne.n	8004a7e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	881a      	ldrh	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a10:	1c9a      	adds	r2, r3, #2
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a24:	e02b      	b.n	8004a7e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d112      	bne.n	8004a5a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	881a      	ldrh	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a44:	1c9a      	adds	r2, r3, #2
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a58:	e011      	b.n	8004a7e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a5a:	f7fe fbab 	bl	80031b4 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d803      	bhi.n	8004a72 <HAL_SPI_Transmit+0x168>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a70:	d102      	bne.n	8004a78 <HAL_SPI_Transmit+0x16e>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d102      	bne.n	8004a7e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a7c:	e074      	b.n	8004b68 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1ce      	bne.n	8004a26 <HAL_SPI_Transmit+0x11c>
 8004a88:	e04c      	b.n	8004b24 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_SPI_Transmit+0x18e>
 8004a92:	8afb      	ldrh	r3, [r7, #22]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d140      	bne.n	8004b1a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	330c      	adds	r3, #12
 8004aa2:	7812      	ldrb	r2, [r2, #0]
 8004aa4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004abe:	e02c      	b.n	8004b1a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d113      	bne.n	8004af6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	330c      	adds	r3, #12
 8004ad8:	7812      	ldrb	r2, [r2, #0]
 8004ada:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004af4:	e011      	b.n	8004b1a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004af6:	f7fe fb5d 	bl	80031b4 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d803      	bhi.n	8004b0e <HAL_SPI_Transmit+0x204>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0c:	d102      	bne.n	8004b14 <HAL_SPI_Transmit+0x20a>
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d102      	bne.n	8004b1a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b18:	e026      	b.n	8004b68 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1cd      	bne.n	8004ac0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	6839      	ldr	r1, [r7, #0]
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 fa55 	bl	8004fd8 <SPI_EndRxTxTransaction>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2220      	movs	r2, #32
 8004b38:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10a      	bne.n	8004b58 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b42:	2300      	movs	r3, #0
 8004b44:	613b      	str	r3, [r7, #16]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	77fb      	strb	r3, [r7, #31]
 8004b64:	e000      	b.n	8004b68 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004b66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b78:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3720      	adds	r7, #32
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b08c      	sub	sp, #48	; 0x30
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	60f8      	str	r0, [r7, #12]
 8004b8a:	60b9      	str	r1, [r7, #8]
 8004b8c:	607a      	str	r2, [r7, #4]
 8004b8e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b90:	2301      	movs	r3, #1
 8004b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_SPI_TransmitReceive+0x26>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e18a      	b.n	8004ebe <HAL_SPI_TransmitReceive+0x33c>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bb0:	f7fe fb00 	bl	80031b4 <HAL_GetTick>
 8004bb4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004bc6:	887b      	ldrh	r3, [r7, #2]
 8004bc8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d00f      	beq.n	8004bf2 <HAL_SPI_TransmitReceive+0x70>
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bd8:	d107      	bne.n	8004bea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d103      	bne.n	8004bea <HAL_SPI_TransmitReceive+0x68>
 8004be2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d003      	beq.n	8004bf2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004bea:	2302      	movs	r3, #2
 8004bec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004bf0:	e15b      	b.n	8004eaa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <HAL_SPI_TransmitReceive+0x82>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <HAL_SPI_TransmitReceive+0x82>
 8004bfe:	887b      	ldrh	r3, [r7, #2]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d103      	bne.n	8004c0c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c0a:	e14e      	b.n	8004eaa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d003      	beq.n	8004c20 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2205      	movs	r2, #5
 8004c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	887a      	ldrh	r2, [r7, #2]
 8004c30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	887a      	ldrh	r2, [r7, #2]
 8004c36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	887a      	ldrh	r2, [r7, #2]
 8004c42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	887a      	ldrh	r2, [r7, #2]
 8004c48:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c60:	2b40      	cmp	r3, #64	; 0x40
 8004c62:	d007      	beq.n	8004c74 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c7c:	d178      	bne.n	8004d70 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <HAL_SPI_TransmitReceive+0x10a>
 8004c86:	8b7b      	ldrh	r3, [r7, #26]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d166      	bne.n	8004d5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c90:	881a      	ldrh	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9c:	1c9a      	adds	r2, r3, #2
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cb0:	e053      	b.n	8004d5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d11b      	bne.n	8004cf8 <HAL_SPI_TransmitReceive+0x176>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d016      	beq.n	8004cf8 <HAL_SPI_TransmitReceive+0x176>
 8004cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d113      	bne.n	8004cf8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd4:	881a      	ldrh	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce0:	1c9a      	adds	r2, r3, #2
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d119      	bne.n	8004d3a <HAL_SPI_TransmitReceive+0x1b8>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d014      	beq.n	8004d3a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1a:	b292      	uxth	r2, r2
 8004d1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d22:	1c9a      	adds	r2, r3, #2
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d36:	2301      	movs	r3, #1
 8004d38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d3a:	f7fe fa3b 	bl	80031b4 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d807      	bhi.n	8004d5a <HAL_SPI_TransmitReceive+0x1d8>
 8004d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d50:	d003      	beq.n	8004d5a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d58:	e0a7      	b.n	8004eaa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1a6      	bne.n	8004cb2 <HAL_SPI_TransmitReceive+0x130>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1a1      	bne.n	8004cb2 <HAL_SPI_TransmitReceive+0x130>
 8004d6e:	e07c      	b.n	8004e6a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <HAL_SPI_TransmitReceive+0x1fc>
 8004d78:	8b7b      	ldrh	r3, [r7, #26]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d16b      	bne.n	8004e56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	330c      	adds	r3, #12
 8004d88:	7812      	ldrb	r2, [r2, #0]
 8004d8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004da4:	e057      	b.n	8004e56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d11c      	bne.n	8004dee <HAL_SPI_TransmitReceive+0x26c>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d017      	beq.n	8004dee <HAL_SPI_TransmitReceive+0x26c>
 8004dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d114      	bne.n	8004dee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	330c      	adds	r3, #12
 8004dce:	7812      	ldrb	r2, [r2, #0]
 8004dd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d119      	bne.n	8004e30 <HAL_SPI_TransmitReceive+0x2ae>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d014      	beq.n	8004e30 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e30:	f7fe f9c0 	bl	80031b4 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d803      	bhi.n	8004e48 <HAL_SPI_TransmitReceive+0x2c6>
 8004e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e46:	d102      	bne.n	8004e4e <HAL_SPI_TransmitReceive+0x2cc>
 8004e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d103      	bne.n	8004e56 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e54:	e029      	b.n	8004eaa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1a2      	bne.n	8004da6 <HAL_SPI_TransmitReceive+0x224>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d19d      	bne.n	8004da6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f8b2 	bl	8004fd8 <SPI_EndRxTxTransaction>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d006      	beq.n	8004e88 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2220      	movs	r2, #32
 8004e84:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004e86:	e010      	b.n	8004eaa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10b      	bne.n	8004ea8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	e000      	b.n	8004eaa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004ea8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004eba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3730      	adds	r7, #48	; 0x30
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ed8:	f7fe f96c 	bl	80031b4 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee0:	1a9b      	subs	r3, r3, r2
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ee8:	f7fe f964 	bl	80031b4 <HAL_GetTick>
 8004eec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004eee:	4b39      	ldr	r3, [pc, #228]	; (8004fd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	015b      	lsls	r3, r3, #5
 8004ef4:	0d1b      	lsrs	r3, r3, #20
 8004ef6:	69fa      	ldr	r2, [r7, #28]
 8004ef8:	fb02 f303 	mul.w	r3, r2, r3
 8004efc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004efe:	e054      	b.n	8004faa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f06:	d050      	beq.n	8004faa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f08:	f7fe f954 	bl	80031b4 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d902      	bls.n	8004f1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d13d      	bne.n	8004f9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f36:	d111      	bne.n	8004f5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f40:	d004      	beq.n	8004f4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f4a:	d107      	bne.n	8004f5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f64:	d10f      	bne.n	8004f86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e017      	b.n	8004fca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	bf0c      	ite	eq
 8004fba:	2301      	moveq	r3, #1
 8004fbc:	2300      	movne	r3, #0
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	79fb      	ldrb	r3, [r7, #7]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d19b      	bne.n	8004f00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3720      	adds	r7, #32
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	20000000 	.word	0x20000000

08004fd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b088      	sub	sp, #32
 8004fdc:	af02      	add	r7, sp, #8
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004fe4:	4b1b      	ldr	r3, [pc, #108]	; (8005054 <SPI_EndRxTxTransaction+0x7c>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a1b      	ldr	r2, [pc, #108]	; (8005058 <SPI_EndRxTxTransaction+0x80>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	0d5b      	lsrs	r3, r3, #21
 8004ff0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ff4:	fb02 f303 	mul.w	r3, r2, r3
 8004ff8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005002:	d112      	bne.n	800502a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2200      	movs	r2, #0
 800500c:	2180      	movs	r1, #128	; 0x80
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f7ff ff5a 	bl	8004ec8 <SPI_WaitFlagStateUntilTimeout>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d016      	beq.n	8005048 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501e:	f043 0220 	orr.w	r2, r3, #32
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e00f      	b.n	800504a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00a      	beq.n	8005046 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	3b01      	subs	r3, #1
 8005034:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005040:	2b80      	cmp	r3, #128	; 0x80
 8005042:	d0f2      	beq.n	800502a <SPI_EndRxTxTransaction+0x52>
 8005044:	e000      	b.n	8005048 <SPI_EndRxTxTransaction+0x70>
        break;
 8005046:	bf00      	nop
  }

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3718      	adds	r7, #24
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20000000 	.word	0x20000000
 8005058:	165e9f81 	.word	0x165e9f81

0800505c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e041      	b.n	80050f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d106      	bne.n	8005088 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7fd f830 	bl	80020e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3304      	adds	r3, #4
 8005098:	4619      	mov	r1, r3
 800509a:	4610      	mov	r0, r2
 800509c:	f000 fd60 	bl	8005b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b082      	sub	sp, #8
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e041      	b.n	8005190 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	d106      	bne.n	8005126 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f839 	bl	8005198 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2202      	movs	r2, #2
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3304      	adds	r3, #4
 8005136:	4619      	mov	r1, r3
 8005138:	4610      	mov	r0, r2
 800513a:	f000 fd11 	bl	8005b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d109      	bne.n	80051d8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	bf0c      	ite	eq
 80051d0:	2301      	moveq	r3, #1
 80051d2:	2300      	movne	r3, #0
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	e022      	b.n	800521e <HAL_TIM_PWM_Start_DMA+0x72>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d109      	bne.n	80051f2 <HAL_TIM_PWM_Start_DMA+0x46>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	bf0c      	ite	eq
 80051ea:	2301      	moveq	r3, #1
 80051ec:	2300      	movne	r3, #0
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	e015      	b.n	800521e <HAL_TIM_PWM_Start_DMA+0x72>
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d109      	bne.n	800520c <HAL_TIM_PWM_Start_DMA+0x60>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	bf0c      	ite	eq
 8005204:	2301      	moveq	r3, #1
 8005206:	2300      	movne	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	e008      	b.n	800521e <HAL_TIM_PWM_Start_DMA+0x72>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	bf0c      	ite	eq
 8005218:	2301      	moveq	r3, #1
 800521a:	2300      	movne	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005222:	2302      	movs	r3, #2
 8005224:	e15d      	b.n	80054e2 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d109      	bne.n	8005240 <HAL_TIM_PWM_Start_DMA+0x94>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b01      	cmp	r3, #1
 8005236:	bf0c      	ite	eq
 8005238:	2301      	moveq	r3, #1
 800523a:	2300      	movne	r3, #0
 800523c:	b2db      	uxtb	r3, r3
 800523e:	e022      	b.n	8005286 <HAL_TIM_PWM_Start_DMA+0xda>
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b04      	cmp	r3, #4
 8005244:	d109      	bne.n	800525a <HAL_TIM_PWM_Start_DMA+0xae>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b01      	cmp	r3, #1
 8005250:	bf0c      	ite	eq
 8005252:	2301      	moveq	r3, #1
 8005254:	2300      	movne	r3, #0
 8005256:	b2db      	uxtb	r3, r3
 8005258:	e015      	b.n	8005286 <HAL_TIM_PWM_Start_DMA+0xda>
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b08      	cmp	r3, #8
 800525e:	d109      	bne.n	8005274 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b01      	cmp	r3, #1
 800526a:	bf0c      	ite	eq
 800526c:	2301      	moveq	r3, #1
 800526e:	2300      	movne	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	e008      	b.n	8005286 <HAL_TIM_PWM_Start_DMA+0xda>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b01      	cmp	r3, #1
 800527e:	bf0c      	ite	eq
 8005280:	2301      	moveq	r3, #1
 8005282:	2300      	movne	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d024      	beq.n	80052d4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d104      	bne.n	800529a <HAL_TIM_PWM_Start_DMA+0xee>
 8005290:	887b      	ldrh	r3, [r7, #2]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e123      	b.n	80054e2 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d104      	bne.n	80052aa <HAL_TIM_PWM_Start_DMA+0xfe>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052a8:	e016      	b.n	80052d8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	d104      	bne.n	80052ba <HAL_TIM_PWM_Start_DMA+0x10e>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052b8:	e00e      	b.n	80052d8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d104      	bne.n	80052ca <HAL_TIM_PWM_Start_DMA+0x11e>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052c8:	e006      	b.n	80052d8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2202      	movs	r2, #2
 80052ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052d2:	e001      	b.n	80052d8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e104      	b.n	80054e2 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b0c      	cmp	r3, #12
 80052dc:	f200 80ae 	bhi.w	800543c <HAL_TIM_PWM_Start_DMA+0x290>
 80052e0:	a201      	add	r2, pc, #4	; (adr r2, 80052e8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80052e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e6:	bf00      	nop
 80052e8:	0800531d 	.word	0x0800531d
 80052ec:	0800543d 	.word	0x0800543d
 80052f0:	0800543d 	.word	0x0800543d
 80052f4:	0800543d 	.word	0x0800543d
 80052f8:	08005365 	.word	0x08005365
 80052fc:	0800543d 	.word	0x0800543d
 8005300:	0800543d 	.word	0x0800543d
 8005304:	0800543d 	.word	0x0800543d
 8005308:	080053ad 	.word	0x080053ad
 800530c:	0800543d 	.word	0x0800543d
 8005310:	0800543d 	.word	0x0800543d
 8005314:	0800543d 	.word	0x0800543d
 8005318:	080053f5 	.word	0x080053f5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	4a72      	ldr	r2, [pc, #456]	; (80054ec <HAL_TIM_PWM_Start_DMA+0x340>)
 8005322:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	4a71      	ldr	r2, [pc, #452]	; (80054f0 <HAL_TIM_PWM_Start_DMA+0x344>)
 800532a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	4a70      	ldr	r2, [pc, #448]	; (80054f4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8005332:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3334      	adds	r3, #52	; 0x34
 8005340:	461a      	mov	r2, r3
 8005342:	887b      	ldrh	r3, [r7, #2]
 8005344:	f7fe f926 	bl	8003594 <HAL_DMA_Start_IT>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e0c7      	b.n	80054e2 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68da      	ldr	r2, [r3, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005360:	60da      	str	r2, [r3, #12]
      break;
 8005362:	e06e      	b.n	8005442 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005368:	4a60      	ldr	r2, [pc, #384]	; (80054ec <HAL_TIM_PWM_Start_DMA+0x340>)
 800536a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005370:	4a5f      	ldr	r2, [pc, #380]	; (80054f0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8005372:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005378:	4a5e      	ldr	r2, [pc, #376]	; (80054f4 <HAL_TIM_PWM_Start_DMA+0x348>)
 800537a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005380:	6879      	ldr	r1, [r7, #4]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3338      	adds	r3, #56	; 0x38
 8005388:	461a      	mov	r2, r3
 800538a:	887b      	ldrh	r3, [r7, #2]
 800538c:	f7fe f902 	bl	8003594 <HAL_DMA_Start_IT>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e0a3      	b.n	80054e2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68da      	ldr	r2, [r3, #12]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053a8:	60da      	str	r2, [r3, #12]
      break;
 80053aa:	e04a      	b.n	8005442 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b0:	4a4e      	ldr	r2, [pc, #312]	; (80054ec <HAL_TIM_PWM_Start_DMA+0x340>)
 80053b2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b8:	4a4d      	ldr	r2, [pc, #308]	; (80054f0 <HAL_TIM_PWM_Start_DMA+0x344>)
 80053ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c0:	4a4c      	ldr	r2, [pc, #304]	; (80054f4 <HAL_TIM_PWM_Start_DMA+0x348>)
 80053c2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80053c8:	6879      	ldr	r1, [r7, #4]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	333c      	adds	r3, #60	; 0x3c
 80053d0:	461a      	mov	r2, r3
 80053d2:	887b      	ldrh	r3, [r7, #2]
 80053d4:	f7fe f8de 	bl	8003594 <HAL_DMA_Start_IT>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e07f      	b.n	80054e2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053f0:	60da      	str	r2, [r3, #12]
      break;
 80053f2:	e026      	b.n	8005442 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f8:	4a3c      	ldr	r2, [pc, #240]	; (80054ec <HAL_TIM_PWM_Start_DMA+0x340>)
 80053fa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005400:	4a3b      	ldr	r2, [pc, #236]	; (80054f0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8005402:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005408:	4a3a      	ldr	r2, [pc, #232]	; (80054f4 <HAL_TIM_PWM_Start_DMA+0x348>)
 800540a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3340      	adds	r3, #64	; 0x40
 8005418:	461a      	mov	r2, r3
 800541a:	887b      	ldrh	r3, [r7, #2]
 800541c:	f7fe f8ba 	bl	8003594 <HAL_DMA_Start_IT>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e05b      	b.n	80054e2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005438:	60da      	str	r2, [r3, #12]
      break;
 800543a:	e002      	b.n	8005442 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	75fb      	strb	r3, [r7, #23]
      break;
 8005440:	bf00      	nop
  }

  if (status == HAL_OK)
 8005442:	7dfb      	ldrb	r3, [r7, #23]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d14b      	bne.n	80054e0 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2201      	movs	r2, #1
 800544e:	68b9      	ldr	r1, [r7, #8]
 8005450:	4618      	mov	r0, r3
 8005452:	f000 fe2b 	bl	80060ac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a27      	ldr	r2, [pc, #156]	; (80054f8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d107      	bne.n	8005470 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800546e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a20      	ldr	r2, [pc, #128]	; (80054f8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d018      	beq.n	80054ac <HAL_TIM_PWM_Start_DMA+0x300>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005482:	d013      	beq.n	80054ac <HAL_TIM_PWM_Start_DMA+0x300>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a1c      	ldr	r2, [pc, #112]	; (80054fc <HAL_TIM_PWM_Start_DMA+0x350>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d00e      	beq.n	80054ac <HAL_TIM_PWM_Start_DMA+0x300>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a1b      	ldr	r2, [pc, #108]	; (8005500 <HAL_TIM_PWM_Start_DMA+0x354>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d009      	beq.n	80054ac <HAL_TIM_PWM_Start_DMA+0x300>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a19      	ldr	r2, [pc, #100]	; (8005504 <HAL_TIM_PWM_Start_DMA+0x358>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d004      	beq.n	80054ac <HAL_TIM_PWM_Start_DMA+0x300>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a18      	ldr	r2, [pc, #96]	; (8005508 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d111      	bne.n	80054d0 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	2b06      	cmp	r3, #6
 80054bc:	d010      	beq.n	80054e0 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f042 0201 	orr.w	r2, r2, #1
 80054cc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ce:	e007      	b.n	80054e0 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0201 	orr.w	r2, r2, #1
 80054de:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80054e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3718      	adds	r7, #24
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	08005a51 	.word	0x08005a51
 80054f0:	08005af9 	.word	0x08005af9
 80054f4:	080059bf 	.word	0x080059bf
 80054f8:	40010000 	.word	0x40010000
 80054fc:	40000400 	.word	0x40000400
 8005500:	40000800 	.word	0x40000800
 8005504:	40000c00 	.word	0x40000c00
 8005508:	40014000 	.word	0x40014000

0800550c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b0c      	cmp	r3, #12
 800551e:	d855      	bhi.n	80055cc <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005520:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005526:	bf00      	nop
 8005528:	0800555d 	.word	0x0800555d
 800552c:	080055cd 	.word	0x080055cd
 8005530:	080055cd 	.word	0x080055cd
 8005534:	080055cd 	.word	0x080055cd
 8005538:	08005579 	.word	0x08005579
 800553c:	080055cd 	.word	0x080055cd
 8005540:	080055cd 	.word	0x080055cd
 8005544:	080055cd 	.word	0x080055cd
 8005548:	08005595 	.word	0x08005595
 800554c:	080055cd 	.word	0x080055cd
 8005550:	080055cd 	.word	0x080055cd
 8005554:	080055cd 	.word	0x080055cd
 8005558:	080055b1 	.word	0x080055b1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800556a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	4618      	mov	r0, r3
 8005572:	f7fe f867 	bl	8003644 <HAL_DMA_Abort_IT>
      break;
 8005576:	e02c      	b.n	80055d2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005586:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558c:	4618      	mov	r0, r3
 800558e:	f7fe f859 	bl	8003644 <HAL_DMA_Abort_IT>
      break;
 8005592:	e01e      	b.n	80055d2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7fe f84b 	bl	8003644 <HAL_DMA_Abort_IT>
      break;
 80055ae:	e010      	b.n	80055d2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055be:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7fe f83d 	bl	8003644 <HAL_DMA_Abort_IT>
      break;
 80055ca:	e002      	b.n	80055d2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	73fb      	strb	r3, [r7, #15]
      break;
 80055d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d157      	bne.n	8005688 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2200      	movs	r2, #0
 80055de:	6839      	ldr	r1, [r7, #0]
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 fd63 	bl	80060ac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a2a      	ldr	r2, [pc, #168]	; (8005694 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d117      	bne.n	8005620 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6a1a      	ldr	r2, [r3, #32]
 80055f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10f      	bne.n	8005620 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6a1a      	ldr	r2, [r3, #32]
 8005606:	f240 4344 	movw	r3, #1092	; 0x444
 800560a:	4013      	ands	r3, r2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d107      	bne.n	8005620 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800561e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6a1a      	ldr	r2, [r3, #32]
 8005626:	f241 1311 	movw	r3, #4369	; 0x1111
 800562a:	4013      	ands	r3, r2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10f      	bne.n	8005650 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6a1a      	ldr	r2, [r3, #32]
 8005636:	f240 4344 	movw	r3, #1092	; 0x444
 800563a:	4013      	ands	r3, r2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d107      	bne.n	8005650 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0201 	bic.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d104      	bne.n	8005660 <HAL_TIM_PWM_Stop_DMA+0x154>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800565e:	e013      	b.n	8005688 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	2b04      	cmp	r3, #4
 8005664:	d104      	bne.n	8005670 <HAL_TIM_PWM_Stop_DMA+0x164>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800566e:	e00b      	b.n	8005688 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2b08      	cmp	r3, #8
 8005674:	d104      	bne.n	8005680 <HAL_TIM_PWM_Stop_DMA+0x174>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800567e:	e003      	b.n	8005688 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005688:	7bfb      	ldrb	r3, [r7, #15]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	40010000 	.word	0x40010000

08005698 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d101      	bne.n	80056b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056b2:	2302      	movs	r3, #2
 80056b4:	e0ae      	b.n	8005814 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b0c      	cmp	r3, #12
 80056c2:	f200 809f 	bhi.w	8005804 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80056c6:	a201      	add	r2, pc, #4	; (adr r2, 80056cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056cc:	08005701 	.word	0x08005701
 80056d0:	08005805 	.word	0x08005805
 80056d4:	08005805 	.word	0x08005805
 80056d8:	08005805 	.word	0x08005805
 80056dc:	08005741 	.word	0x08005741
 80056e0:	08005805 	.word	0x08005805
 80056e4:	08005805 	.word	0x08005805
 80056e8:	08005805 	.word	0x08005805
 80056ec:	08005783 	.word	0x08005783
 80056f0:	08005805 	.word	0x08005805
 80056f4:	08005805 	.word	0x08005805
 80056f8:	08005805 	.word	0x08005805
 80056fc:	080057c3 	.word	0x080057c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68b9      	ldr	r1, [r7, #8]
 8005706:	4618      	mov	r0, r3
 8005708:	f000 faaa 	bl	8005c60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	699a      	ldr	r2, [r3, #24]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 0208 	orr.w	r2, r2, #8
 800571a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f022 0204 	bic.w	r2, r2, #4
 800572a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6999      	ldr	r1, [r3, #24]
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	691a      	ldr	r2, [r3, #16]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	619a      	str	r2, [r3, #24]
      break;
 800573e:	e064      	b.n	800580a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68b9      	ldr	r1, [r7, #8]
 8005746:	4618      	mov	r0, r3
 8005748:	f000 faf0 	bl	8005d2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	699a      	ldr	r2, [r3, #24]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800575a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699a      	ldr	r2, [r3, #24]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800576a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6999      	ldr	r1, [r3, #24]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	021a      	lsls	r2, r3, #8
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	619a      	str	r2, [r3, #24]
      break;
 8005780:	e043      	b.n	800580a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68b9      	ldr	r1, [r7, #8]
 8005788:	4618      	mov	r0, r3
 800578a:	f000 fb3b 	bl	8005e04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69da      	ldr	r2, [r3, #28]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f042 0208 	orr.w	r2, r2, #8
 800579c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	69da      	ldr	r2, [r3, #28]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 0204 	bic.w	r2, r2, #4
 80057ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69d9      	ldr	r1, [r3, #28]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	691a      	ldr	r2, [r3, #16]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	61da      	str	r2, [r3, #28]
      break;
 80057c0:	e023      	b.n	800580a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68b9      	ldr	r1, [r7, #8]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 fb85 	bl	8005ed8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	69da      	ldr	r2, [r3, #28]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	69da      	ldr	r2, [r3, #28]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	69d9      	ldr	r1, [r3, #28]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	021a      	lsls	r2, r3, #8
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	61da      	str	r2, [r3, #28]
      break;
 8005802:	e002      	b.n	800580a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	75fb      	strb	r3, [r7, #23]
      break;
 8005808:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005812:	7dfb      	ldrb	r3, [r7, #23]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005830:	2b01      	cmp	r3, #1
 8005832:	d101      	bne.n	8005838 <HAL_TIM_ConfigClockSource+0x1c>
 8005834:	2302      	movs	r3, #2
 8005836:	e0b4      	b.n	80059a2 <HAL_TIM_ConfigClockSource+0x186>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800585e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005870:	d03e      	beq.n	80058f0 <HAL_TIM_ConfigClockSource+0xd4>
 8005872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005876:	f200 8087 	bhi.w	8005988 <HAL_TIM_ConfigClockSource+0x16c>
 800587a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587e:	f000 8086 	beq.w	800598e <HAL_TIM_ConfigClockSource+0x172>
 8005882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005886:	d87f      	bhi.n	8005988 <HAL_TIM_ConfigClockSource+0x16c>
 8005888:	2b70      	cmp	r3, #112	; 0x70
 800588a:	d01a      	beq.n	80058c2 <HAL_TIM_ConfigClockSource+0xa6>
 800588c:	2b70      	cmp	r3, #112	; 0x70
 800588e:	d87b      	bhi.n	8005988 <HAL_TIM_ConfigClockSource+0x16c>
 8005890:	2b60      	cmp	r3, #96	; 0x60
 8005892:	d050      	beq.n	8005936 <HAL_TIM_ConfigClockSource+0x11a>
 8005894:	2b60      	cmp	r3, #96	; 0x60
 8005896:	d877      	bhi.n	8005988 <HAL_TIM_ConfigClockSource+0x16c>
 8005898:	2b50      	cmp	r3, #80	; 0x50
 800589a:	d03c      	beq.n	8005916 <HAL_TIM_ConfigClockSource+0xfa>
 800589c:	2b50      	cmp	r3, #80	; 0x50
 800589e:	d873      	bhi.n	8005988 <HAL_TIM_ConfigClockSource+0x16c>
 80058a0:	2b40      	cmp	r3, #64	; 0x40
 80058a2:	d058      	beq.n	8005956 <HAL_TIM_ConfigClockSource+0x13a>
 80058a4:	2b40      	cmp	r3, #64	; 0x40
 80058a6:	d86f      	bhi.n	8005988 <HAL_TIM_ConfigClockSource+0x16c>
 80058a8:	2b30      	cmp	r3, #48	; 0x30
 80058aa:	d064      	beq.n	8005976 <HAL_TIM_ConfigClockSource+0x15a>
 80058ac:	2b30      	cmp	r3, #48	; 0x30
 80058ae:	d86b      	bhi.n	8005988 <HAL_TIM_ConfigClockSource+0x16c>
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	d060      	beq.n	8005976 <HAL_TIM_ConfigClockSource+0x15a>
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	d867      	bhi.n	8005988 <HAL_TIM_ConfigClockSource+0x16c>
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d05c      	beq.n	8005976 <HAL_TIM_ConfigClockSource+0x15a>
 80058bc:	2b10      	cmp	r3, #16
 80058be:	d05a      	beq.n	8005976 <HAL_TIM_ConfigClockSource+0x15a>
 80058c0:	e062      	b.n	8005988 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	6899      	ldr	r1, [r3, #8]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	f000 fbcb 	bl	800606c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	609a      	str	r2, [r3, #8]
      break;
 80058ee:	e04f      	b.n	8005990 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6818      	ldr	r0, [r3, #0]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	6899      	ldr	r1, [r3, #8]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f000 fbb4 	bl	800606c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689a      	ldr	r2, [r3, #8]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005912:	609a      	str	r2, [r3, #8]
      break;
 8005914:	e03c      	b.n	8005990 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6818      	ldr	r0, [r3, #0]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	6859      	ldr	r1, [r3, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	461a      	mov	r2, r3
 8005924:	f000 fb28 	bl	8005f78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2150      	movs	r1, #80	; 0x50
 800592e:	4618      	mov	r0, r3
 8005930:	f000 fb81 	bl	8006036 <TIM_ITRx_SetConfig>
      break;
 8005934:	e02c      	b.n	8005990 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6818      	ldr	r0, [r3, #0]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	6859      	ldr	r1, [r3, #4]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	461a      	mov	r2, r3
 8005944:	f000 fb47 	bl	8005fd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2160      	movs	r1, #96	; 0x60
 800594e:	4618      	mov	r0, r3
 8005950:	f000 fb71 	bl	8006036 <TIM_ITRx_SetConfig>
      break;
 8005954:	e01c      	b.n	8005990 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6818      	ldr	r0, [r3, #0]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	6859      	ldr	r1, [r3, #4]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	461a      	mov	r2, r3
 8005964:	f000 fb08 	bl	8005f78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2140      	movs	r1, #64	; 0x40
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fb61 	bl	8006036 <TIM_ITRx_SetConfig>
      break;
 8005974:	e00c      	b.n	8005990 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4619      	mov	r1, r3
 8005980:	4610      	mov	r0, r2
 8005982:	f000 fb58 	bl	8006036 <TIM_ITRx_SetConfig>
      break;
 8005986:	e003      	b.n	8005990 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	73fb      	strb	r3, [r7, #15]
      break;
 800598c:	e000      	b.n	8005990 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800598e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b084      	sub	sp, #16
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ca:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d107      	bne.n	80059e6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059e4:	e02a      	b.n	8005a3c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d107      	bne.n	8005a00 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2202      	movs	r2, #2
 80059f4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059fe:	e01d      	b.n	8005a3c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d107      	bne.n	8005a1a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2204      	movs	r2, #4
 8005a0e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a18:	e010      	b.n	8005a3c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d107      	bne.n	8005a34 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2208      	movs	r2, #8
 8005a28:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a32:	e003      	b.n	8005a3c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f7ff ffb4 	bl	80059aa <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	771a      	strb	r2, [r3, #28]
}
 8005a48:	bf00      	nop
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d10b      	bne.n	8005a80 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d136      	bne.n	8005ae4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a7e:	e031      	b.n	8005ae4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d10b      	bne.n	8005aa2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d125      	bne.n	8005ae4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005aa0:	e020      	b.n	8005ae4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d10b      	bne.n	8005ac4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2204      	movs	r2, #4
 8005ab0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d114      	bne.n	8005ae4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ac2:	e00f      	b.n	8005ae4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d10a      	bne.n	8005ae4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2208      	movs	r2, #8
 8005ad2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d103      	bne.n	8005ae4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f7fb fd13 	bl	8001510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	771a      	strb	r2, [r3, #28]
}
 8005af0:	bf00      	nop
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b04:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d103      	bne.n	8005b18 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2201      	movs	r2, #1
 8005b14:	771a      	strb	r2, [r3, #28]
 8005b16:	e019      	b.n	8005b4c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d103      	bne.n	8005b2a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2202      	movs	r2, #2
 8005b26:	771a      	strb	r2, [r3, #28]
 8005b28:	e010      	b.n	8005b4c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d103      	bne.n	8005b3c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2204      	movs	r2, #4
 8005b38:	771a      	strb	r2, [r3, #28]
 8005b3a:	e007      	b.n	8005b4c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d102      	bne.n	8005b4c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2208      	movs	r2, #8
 8005b4a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f7fb fc01 	bl	8001354 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	771a      	strb	r2, [r3, #28]
}
 8005b58:	bf00      	nop
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a34      	ldr	r2, [pc, #208]	; (8005c44 <TIM_Base_SetConfig+0xe4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d00f      	beq.n	8005b98 <TIM_Base_SetConfig+0x38>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b7e:	d00b      	beq.n	8005b98 <TIM_Base_SetConfig+0x38>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a31      	ldr	r2, [pc, #196]	; (8005c48 <TIM_Base_SetConfig+0xe8>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d007      	beq.n	8005b98 <TIM_Base_SetConfig+0x38>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a30      	ldr	r2, [pc, #192]	; (8005c4c <TIM_Base_SetConfig+0xec>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d003      	beq.n	8005b98 <TIM_Base_SetConfig+0x38>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a2f      	ldr	r2, [pc, #188]	; (8005c50 <TIM_Base_SetConfig+0xf0>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d108      	bne.n	8005baa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a25      	ldr	r2, [pc, #148]	; (8005c44 <TIM_Base_SetConfig+0xe4>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d01b      	beq.n	8005bea <TIM_Base_SetConfig+0x8a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb8:	d017      	beq.n	8005bea <TIM_Base_SetConfig+0x8a>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a22      	ldr	r2, [pc, #136]	; (8005c48 <TIM_Base_SetConfig+0xe8>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d013      	beq.n	8005bea <TIM_Base_SetConfig+0x8a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a21      	ldr	r2, [pc, #132]	; (8005c4c <TIM_Base_SetConfig+0xec>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00f      	beq.n	8005bea <TIM_Base_SetConfig+0x8a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a20      	ldr	r2, [pc, #128]	; (8005c50 <TIM_Base_SetConfig+0xf0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d00b      	beq.n	8005bea <TIM_Base_SetConfig+0x8a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a1f      	ldr	r2, [pc, #124]	; (8005c54 <TIM_Base_SetConfig+0xf4>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d007      	beq.n	8005bea <TIM_Base_SetConfig+0x8a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a1e      	ldr	r2, [pc, #120]	; (8005c58 <TIM_Base_SetConfig+0xf8>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d003      	beq.n	8005bea <TIM_Base_SetConfig+0x8a>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a1d      	ldr	r2, [pc, #116]	; (8005c5c <TIM_Base_SetConfig+0xfc>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d108      	bne.n	8005bfc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a08      	ldr	r2, [pc, #32]	; (8005c44 <TIM_Base_SetConfig+0xe4>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d103      	bne.n	8005c30 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	691a      	ldr	r2, [r3, #16]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	615a      	str	r2, [r3, #20]
}
 8005c36:	bf00      	nop
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	40010000 	.word	0x40010000
 8005c48:	40000400 	.word	0x40000400
 8005c4c:	40000800 	.word	0x40000800
 8005c50:	40000c00 	.word	0x40000c00
 8005c54:	40014000 	.word	0x40014000
 8005c58:	40014400 	.word	0x40014400
 8005c5c:	40014800 	.word	0x40014800

08005c60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	f023 0201 	bic.w	r2, r3, #1
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0303 	bic.w	r3, r3, #3
 8005c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f023 0302 	bic.w	r3, r3, #2
 8005ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a1c      	ldr	r2, [pc, #112]	; (8005d28 <TIM_OC1_SetConfig+0xc8>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d10c      	bne.n	8005cd6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f023 0308 	bic.w	r3, r3, #8
 8005cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f023 0304 	bic.w	r3, r3, #4
 8005cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a13      	ldr	r2, [pc, #76]	; (8005d28 <TIM_OC1_SetConfig+0xc8>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d111      	bne.n	8005d02 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	621a      	str	r2, [r3, #32]
}
 8005d1c:	bf00      	nop
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	40010000 	.word	0x40010000

08005d2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	f023 0210 	bic.w	r2, r3, #16
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	021b      	lsls	r3, r3, #8
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	f023 0320 	bic.w	r3, r3, #32
 8005d76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a1e      	ldr	r2, [pc, #120]	; (8005e00 <TIM_OC2_SetConfig+0xd4>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d10d      	bne.n	8005da8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	011b      	lsls	r3, r3, #4
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005da6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a15      	ldr	r2, [pc, #84]	; (8005e00 <TIM_OC2_SetConfig+0xd4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d113      	bne.n	8005dd8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005db6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	bf00      	nop
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40010000 	.word	0x40010000

08005e04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 0303 	bic.w	r3, r3, #3
 8005e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	021b      	lsls	r3, r3, #8
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a1d      	ldr	r2, [pc, #116]	; (8005ed4 <TIM_OC3_SetConfig+0xd0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d10d      	bne.n	8005e7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	021b      	lsls	r3, r3, #8
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a14      	ldr	r2, [pc, #80]	; (8005ed4 <TIM_OC3_SetConfig+0xd0>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d113      	bne.n	8005eae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	011b      	lsls	r3, r3, #4
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	621a      	str	r2, [r3, #32]
}
 8005ec8:	bf00      	nop
 8005eca:	371c      	adds	r7, #28
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	40010000 	.word	0x40010000

08005ed8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	021b      	lsls	r3, r3, #8
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	031b      	lsls	r3, r3, #12
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a10      	ldr	r2, [pc, #64]	; (8005f74 <TIM_OC4_SetConfig+0x9c>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d109      	bne.n	8005f4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	019b      	lsls	r3, r3, #6
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	621a      	str	r2, [r3, #32]
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	40010000 	.word	0x40010000

08005f78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	f023 0201 	bic.w	r2, r3, #1
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	011b      	lsls	r3, r3, #4
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f023 030a 	bic.w	r3, r3, #10
 8005fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	621a      	str	r2, [r3, #32]
}
 8005fca:	bf00      	nop
 8005fcc:	371c      	adds	r7, #28
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b087      	sub	sp, #28
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	f023 0210 	bic.w	r2, r3, #16
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006000:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	031b      	lsls	r3, r3, #12
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4313      	orrs	r3, r2
 800600a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006012:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	4313      	orrs	r3, r2
 800601c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	621a      	str	r2, [r3, #32]
}
 800602a:	bf00      	nop
 800602c:	371c      	adds	r7, #28
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006036:	b480      	push	{r7}
 8006038:	b085      	sub	sp, #20
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4313      	orrs	r3, r2
 8006054:	f043 0307 	orr.w	r3, r3, #7
 8006058:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	609a      	str	r2, [r3, #8]
}
 8006060:	bf00      	nop
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006086:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	021a      	lsls	r2, r3, #8
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	431a      	orrs	r2, r3
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	4313      	orrs	r3, r2
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	4313      	orrs	r3, r2
 8006098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	609a      	str	r2, [r3, #8]
}
 80060a0:	bf00      	nop
 80060a2:	371c      	adds	r7, #28
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	f003 031f 	and.w	r3, r3, #31
 80060be:	2201      	movs	r2, #1
 80060c0:	fa02 f303 	lsl.w	r3, r2, r3
 80060c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6a1a      	ldr	r2, [r3, #32]
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	43db      	mvns	r3, r3
 80060ce:	401a      	ands	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6a1a      	ldr	r2, [r3, #32]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f003 031f 	and.w	r3, r3, #31
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	fa01 f303 	lsl.w	r3, r1, r3
 80060e4:	431a      	orrs	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	621a      	str	r2, [r3, #32]
}
 80060ea:	bf00      	nop
 80060ec:	371c      	adds	r7, #28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
	...

080060f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800610c:	2302      	movs	r3, #2
 800610e:	e050      	b.n	80061b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006136:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	4313      	orrs	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a1c      	ldr	r2, [pc, #112]	; (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d018      	beq.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800615c:	d013      	beq.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a18      	ldr	r2, [pc, #96]	; (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d00e      	beq.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a16      	ldr	r2, [pc, #88]	; (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d009      	beq.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a15      	ldr	r2, [pc, #84]	; (80061cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d004      	beq.n	8006186 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a13      	ldr	r2, [pc, #76]	; (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d10c      	bne.n	80061a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800618c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	4313      	orrs	r3, r2
 8006196:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	40010000 	.word	0x40010000
 80061c4:	40000400 	.word	0x40000400
 80061c8:	40000800 	.word	0x40000800
 80061cc:	40000c00 	.word	0x40000c00
 80061d0:	40014000 	.word	0x40014000

080061d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d101      	bne.n	80061f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061ec:	2302      	movs	r3, #2
 80061ee:	e03d      	b.n	800626c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	4313      	orrs	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4313      	orrs	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	4313      	orrs	r3, r2
 800624a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	4313      	orrs	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e03f      	b.n	800630a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d106      	bne.n	80062a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7fc f8f6 	bl	8002490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2224      	movs	r2, #36	; 0x24
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f929 	bl	8006514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	691a      	ldr	r2, [r3, #16]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	695a      	ldr	r2, [r3, #20]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2220      	movs	r2, #32
 80062fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2220      	movs	r2, #32
 8006304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b08a      	sub	sp, #40	; 0x28
 8006316:	af02      	add	r7, sp, #8
 8006318:	60f8      	str	r0, [r7, #12]
 800631a:	60b9      	str	r1, [r7, #8]
 800631c:	603b      	str	r3, [r7, #0]
 800631e:	4613      	mov	r3, r2
 8006320:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b20      	cmp	r3, #32
 8006330:	d17c      	bne.n	800642c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d002      	beq.n	800633e <HAL_UART_Transmit+0x2c>
 8006338:	88fb      	ldrh	r3, [r7, #6]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e075      	b.n	800642e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_UART_Transmit+0x3e>
 800634c:	2302      	movs	r3, #2
 800634e:	e06e      	b.n	800642e <HAL_UART_Transmit+0x11c>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2221      	movs	r2, #33	; 0x21
 8006362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006366:	f7fc ff25 	bl	80031b4 <HAL_GetTick>
 800636a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	88fa      	ldrh	r2, [r7, #6]
 8006370:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	88fa      	ldrh	r2, [r7, #6]
 8006376:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006380:	d108      	bne.n	8006394 <HAL_UART_Transmit+0x82>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d104      	bne.n	8006394 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800638a:	2300      	movs	r3, #0
 800638c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	61bb      	str	r3, [r7, #24]
 8006392:	e003      	b.n	800639c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006398:	2300      	movs	r3, #0
 800639a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80063a4:	e02a      	b.n	80063fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2200      	movs	r2, #0
 80063ae:	2180      	movs	r1, #128	; 0x80
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 f840 	bl	8006436 <UART_WaitOnFlagUntilTimeout>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e036      	b.n	800642e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10b      	bne.n	80063de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	461a      	mov	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	3302      	adds	r3, #2
 80063da:	61bb      	str	r3, [r7, #24]
 80063dc:	e007      	b.n	80063ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	781a      	ldrb	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	3301      	adds	r3, #1
 80063ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	3b01      	subs	r3, #1
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006400:	b29b      	uxth	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1cf      	bne.n	80063a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	2200      	movs	r2, #0
 800640e:	2140      	movs	r1, #64	; 0x40
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 f810 	bl	8006436 <UART_WaitOnFlagUntilTimeout>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e006      	b.n	800642e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2220      	movs	r2, #32
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006428:	2300      	movs	r3, #0
 800642a:	e000      	b.n	800642e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800642c:	2302      	movs	r3, #2
  }
}
 800642e:	4618      	mov	r0, r3
 8006430:	3720      	adds	r7, #32
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b090      	sub	sp, #64	; 0x40
 800643a:	af00      	add	r7, sp, #0
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	60b9      	str	r1, [r7, #8]
 8006440:	603b      	str	r3, [r7, #0]
 8006442:	4613      	mov	r3, r2
 8006444:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006446:	e050      	b.n	80064ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800644a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644e:	d04c      	beq.n	80064ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006452:	2b00      	cmp	r3, #0
 8006454:	d007      	beq.n	8006466 <UART_WaitOnFlagUntilTimeout+0x30>
 8006456:	f7fc fead 	bl	80031b4 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006462:	429a      	cmp	r2, r3
 8006464:	d241      	bcs.n	80064ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	330c      	adds	r3, #12
 800646c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	e853 3f00 	ldrex	r3, [r3]
 8006474:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800647c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	330c      	adds	r3, #12
 8006484:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006486:	637a      	str	r2, [r7, #52]	; 0x34
 8006488:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800648c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1e5      	bne.n	8006466 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3314      	adds	r3, #20
 80064a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	e853 3f00 	ldrex	r3, [r3]
 80064a8:	613b      	str	r3, [r7, #16]
   return(result);
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	f023 0301 	bic.w	r3, r3, #1
 80064b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3314      	adds	r3, #20
 80064b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064ba:	623a      	str	r2, [r7, #32]
 80064bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064be:	69f9      	ldr	r1, [r7, #28]
 80064c0:	6a3a      	ldr	r2, [r7, #32]
 80064c2:	e841 2300 	strex	r3, r2, [r1]
 80064c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1e5      	bne.n	800649a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2220      	movs	r2, #32
 80064d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2220      	movs	r2, #32
 80064da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e00f      	b.n	800650a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4013      	ands	r3, r2
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	bf0c      	ite	eq
 80064fa:	2301      	moveq	r3, #1
 80064fc:	2300      	movne	r3, #0
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	461a      	mov	r2, r3
 8006502:	79fb      	ldrb	r3, [r7, #7]
 8006504:	429a      	cmp	r2, r3
 8006506:	d09f      	beq.n	8006448 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3740      	adds	r7, #64	; 0x40
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
	...

08006514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006518:	b0c0      	sub	sp, #256	; 0x100
 800651a:	af00      	add	r7, sp, #0
 800651c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800652c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006530:	68d9      	ldr	r1, [r3, #12]
 8006532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	ea40 0301 	orr.w	r3, r0, r1
 800653c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800653e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006542:	689a      	ldr	r2, [r3, #8]
 8006544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	431a      	orrs	r2, r3
 800654c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	431a      	orrs	r2, r3
 8006554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	4313      	orrs	r3, r2
 800655c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800656c:	f021 010c 	bic.w	r1, r1, #12
 8006570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800657a:	430b      	orrs	r3, r1
 800657c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800657e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800658a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800658e:	6999      	ldr	r1, [r3, #24]
 8006590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	ea40 0301 	orr.w	r3, r0, r1
 800659a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800659c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	4b8f      	ldr	r3, [pc, #572]	; (80067e0 <UART_SetConfig+0x2cc>)
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d005      	beq.n	80065b4 <UART_SetConfig+0xa0>
 80065a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	4b8d      	ldr	r3, [pc, #564]	; (80067e4 <UART_SetConfig+0x2d0>)
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d104      	bne.n	80065be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065b4:	f7fe f90c 	bl	80047d0 <HAL_RCC_GetPCLK2Freq>
 80065b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80065bc:	e003      	b.n	80065c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065be:	f7fe f8f3 	bl	80047a8 <HAL_RCC_GetPCLK1Freq>
 80065c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065d0:	f040 810c 	bne.w	80067ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065d8:	2200      	movs	r2, #0
 80065da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80065e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80065e6:	4622      	mov	r2, r4
 80065e8:	462b      	mov	r3, r5
 80065ea:	1891      	adds	r1, r2, r2
 80065ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80065ee:	415b      	adcs	r3, r3
 80065f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80065f6:	4621      	mov	r1, r4
 80065f8:	eb12 0801 	adds.w	r8, r2, r1
 80065fc:	4629      	mov	r1, r5
 80065fe:	eb43 0901 	adc.w	r9, r3, r1
 8006602:	f04f 0200 	mov.w	r2, #0
 8006606:	f04f 0300 	mov.w	r3, #0
 800660a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800660e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006616:	4690      	mov	r8, r2
 8006618:	4699      	mov	r9, r3
 800661a:	4623      	mov	r3, r4
 800661c:	eb18 0303 	adds.w	r3, r8, r3
 8006620:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006624:	462b      	mov	r3, r5
 8006626:	eb49 0303 	adc.w	r3, r9, r3
 800662a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800662e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800663a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800663e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006642:	460b      	mov	r3, r1
 8006644:	18db      	adds	r3, r3, r3
 8006646:	653b      	str	r3, [r7, #80]	; 0x50
 8006648:	4613      	mov	r3, r2
 800664a:	eb42 0303 	adc.w	r3, r2, r3
 800664e:	657b      	str	r3, [r7, #84]	; 0x54
 8006650:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006654:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006658:	f7f9 fe1a 	bl	8000290 <__aeabi_uldivmod>
 800665c:	4602      	mov	r2, r0
 800665e:	460b      	mov	r3, r1
 8006660:	4b61      	ldr	r3, [pc, #388]	; (80067e8 <UART_SetConfig+0x2d4>)
 8006662:	fba3 2302 	umull	r2, r3, r3, r2
 8006666:	095b      	lsrs	r3, r3, #5
 8006668:	011c      	lsls	r4, r3, #4
 800666a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800666e:	2200      	movs	r2, #0
 8006670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006674:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006678:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800667c:	4642      	mov	r2, r8
 800667e:	464b      	mov	r3, r9
 8006680:	1891      	adds	r1, r2, r2
 8006682:	64b9      	str	r1, [r7, #72]	; 0x48
 8006684:	415b      	adcs	r3, r3
 8006686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006688:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800668c:	4641      	mov	r1, r8
 800668e:	eb12 0a01 	adds.w	sl, r2, r1
 8006692:	4649      	mov	r1, r9
 8006694:	eb43 0b01 	adc.w	fp, r3, r1
 8006698:	f04f 0200 	mov.w	r2, #0
 800669c:	f04f 0300 	mov.w	r3, #0
 80066a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066ac:	4692      	mov	sl, r2
 80066ae:	469b      	mov	fp, r3
 80066b0:	4643      	mov	r3, r8
 80066b2:	eb1a 0303 	adds.w	r3, sl, r3
 80066b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066ba:	464b      	mov	r3, r9
 80066bc:	eb4b 0303 	adc.w	r3, fp, r3
 80066c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80066c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80066d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80066d8:	460b      	mov	r3, r1
 80066da:	18db      	adds	r3, r3, r3
 80066dc:	643b      	str	r3, [r7, #64]	; 0x40
 80066de:	4613      	mov	r3, r2
 80066e0:	eb42 0303 	adc.w	r3, r2, r3
 80066e4:	647b      	str	r3, [r7, #68]	; 0x44
 80066e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80066ee:	f7f9 fdcf 	bl	8000290 <__aeabi_uldivmod>
 80066f2:	4602      	mov	r2, r0
 80066f4:	460b      	mov	r3, r1
 80066f6:	4611      	mov	r1, r2
 80066f8:	4b3b      	ldr	r3, [pc, #236]	; (80067e8 <UART_SetConfig+0x2d4>)
 80066fa:	fba3 2301 	umull	r2, r3, r3, r1
 80066fe:	095b      	lsrs	r3, r3, #5
 8006700:	2264      	movs	r2, #100	; 0x64
 8006702:	fb02 f303 	mul.w	r3, r2, r3
 8006706:	1acb      	subs	r3, r1, r3
 8006708:	00db      	lsls	r3, r3, #3
 800670a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800670e:	4b36      	ldr	r3, [pc, #216]	; (80067e8 <UART_SetConfig+0x2d4>)
 8006710:	fba3 2302 	umull	r2, r3, r3, r2
 8006714:	095b      	lsrs	r3, r3, #5
 8006716:	005b      	lsls	r3, r3, #1
 8006718:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800671c:	441c      	add	r4, r3
 800671e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006722:	2200      	movs	r2, #0
 8006724:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006728:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800672c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006730:	4642      	mov	r2, r8
 8006732:	464b      	mov	r3, r9
 8006734:	1891      	adds	r1, r2, r2
 8006736:	63b9      	str	r1, [r7, #56]	; 0x38
 8006738:	415b      	adcs	r3, r3
 800673a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800673c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006740:	4641      	mov	r1, r8
 8006742:	1851      	adds	r1, r2, r1
 8006744:	6339      	str	r1, [r7, #48]	; 0x30
 8006746:	4649      	mov	r1, r9
 8006748:	414b      	adcs	r3, r1
 800674a:	637b      	str	r3, [r7, #52]	; 0x34
 800674c:	f04f 0200 	mov.w	r2, #0
 8006750:	f04f 0300 	mov.w	r3, #0
 8006754:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006758:	4659      	mov	r1, fp
 800675a:	00cb      	lsls	r3, r1, #3
 800675c:	4651      	mov	r1, sl
 800675e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006762:	4651      	mov	r1, sl
 8006764:	00ca      	lsls	r2, r1, #3
 8006766:	4610      	mov	r0, r2
 8006768:	4619      	mov	r1, r3
 800676a:	4603      	mov	r3, r0
 800676c:	4642      	mov	r2, r8
 800676e:	189b      	adds	r3, r3, r2
 8006770:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006774:	464b      	mov	r3, r9
 8006776:	460a      	mov	r2, r1
 8006778:	eb42 0303 	adc.w	r3, r2, r3
 800677c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800678c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006790:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006794:	460b      	mov	r3, r1
 8006796:	18db      	adds	r3, r3, r3
 8006798:	62bb      	str	r3, [r7, #40]	; 0x28
 800679a:	4613      	mov	r3, r2
 800679c:	eb42 0303 	adc.w	r3, r2, r3
 80067a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80067aa:	f7f9 fd71 	bl	8000290 <__aeabi_uldivmod>
 80067ae:	4602      	mov	r2, r0
 80067b0:	460b      	mov	r3, r1
 80067b2:	4b0d      	ldr	r3, [pc, #52]	; (80067e8 <UART_SetConfig+0x2d4>)
 80067b4:	fba3 1302 	umull	r1, r3, r3, r2
 80067b8:	095b      	lsrs	r3, r3, #5
 80067ba:	2164      	movs	r1, #100	; 0x64
 80067bc:	fb01 f303 	mul.w	r3, r1, r3
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	3332      	adds	r3, #50	; 0x32
 80067c6:	4a08      	ldr	r2, [pc, #32]	; (80067e8 <UART_SetConfig+0x2d4>)
 80067c8:	fba2 2303 	umull	r2, r3, r2, r3
 80067cc:	095b      	lsrs	r3, r3, #5
 80067ce:	f003 0207 	and.w	r2, r3, #7
 80067d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4422      	add	r2, r4
 80067da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067dc:	e105      	b.n	80069ea <UART_SetConfig+0x4d6>
 80067de:	bf00      	nop
 80067e0:	40011000 	.word	0x40011000
 80067e4:	40011400 	.word	0x40011400
 80067e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067f0:	2200      	movs	r2, #0
 80067f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80067f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80067fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80067fe:	4642      	mov	r2, r8
 8006800:	464b      	mov	r3, r9
 8006802:	1891      	adds	r1, r2, r2
 8006804:	6239      	str	r1, [r7, #32]
 8006806:	415b      	adcs	r3, r3
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
 800680a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800680e:	4641      	mov	r1, r8
 8006810:	1854      	adds	r4, r2, r1
 8006812:	4649      	mov	r1, r9
 8006814:	eb43 0501 	adc.w	r5, r3, r1
 8006818:	f04f 0200 	mov.w	r2, #0
 800681c:	f04f 0300 	mov.w	r3, #0
 8006820:	00eb      	lsls	r3, r5, #3
 8006822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006826:	00e2      	lsls	r2, r4, #3
 8006828:	4614      	mov	r4, r2
 800682a:	461d      	mov	r5, r3
 800682c:	4643      	mov	r3, r8
 800682e:	18e3      	adds	r3, r4, r3
 8006830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006834:	464b      	mov	r3, r9
 8006836:	eb45 0303 	adc.w	r3, r5, r3
 800683a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800683e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800684a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800684e:	f04f 0200 	mov.w	r2, #0
 8006852:	f04f 0300 	mov.w	r3, #0
 8006856:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800685a:	4629      	mov	r1, r5
 800685c:	008b      	lsls	r3, r1, #2
 800685e:	4621      	mov	r1, r4
 8006860:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006864:	4621      	mov	r1, r4
 8006866:	008a      	lsls	r2, r1, #2
 8006868:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800686c:	f7f9 fd10 	bl	8000290 <__aeabi_uldivmod>
 8006870:	4602      	mov	r2, r0
 8006872:	460b      	mov	r3, r1
 8006874:	4b60      	ldr	r3, [pc, #384]	; (80069f8 <UART_SetConfig+0x4e4>)
 8006876:	fba3 2302 	umull	r2, r3, r3, r2
 800687a:	095b      	lsrs	r3, r3, #5
 800687c:	011c      	lsls	r4, r3, #4
 800687e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006882:	2200      	movs	r2, #0
 8006884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006888:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800688c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006890:	4642      	mov	r2, r8
 8006892:	464b      	mov	r3, r9
 8006894:	1891      	adds	r1, r2, r2
 8006896:	61b9      	str	r1, [r7, #24]
 8006898:	415b      	adcs	r3, r3
 800689a:	61fb      	str	r3, [r7, #28]
 800689c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068a0:	4641      	mov	r1, r8
 80068a2:	1851      	adds	r1, r2, r1
 80068a4:	6139      	str	r1, [r7, #16]
 80068a6:	4649      	mov	r1, r9
 80068a8:	414b      	adcs	r3, r1
 80068aa:	617b      	str	r3, [r7, #20]
 80068ac:	f04f 0200 	mov.w	r2, #0
 80068b0:	f04f 0300 	mov.w	r3, #0
 80068b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068b8:	4659      	mov	r1, fp
 80068ba:	00cb      	lsls	r3, r1, #3
 80068bc:	4651      	mov	r1, sl
 80068be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068c2:	4651      	mov	r1, sl
 80068c4:	00ca      	lsls	r2, r1, #3
 80068c6:	4610      	mov	r0, r2
 80068c8:	4619      	mov	r1, r3
 80068ca:	4603      	mov	r3, r0
 80068cc:	4642      	mov	r2, r8
 80068ce:	189b      	adds	r3, r3, r2
 80068d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068d4:	464b      	mov	r3, r9
 80068d6:	460a      	mov	r2, r1
 80068d8:	eb42 0303 	adc.w	r3, r2, r3
 80068dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80068ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80068ec:	f04f 0200 	mov.w	r2, #0
 80068f0:	f04f 0300 	mov.w	r3, #0
 80068f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80068f8:	4649      	mov	r1, r9
 80068fa:	008b      	lsls	r3, r1, #2
 80068fc:	4641      	mov	r1, r8
 80068fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006902:	4641      	mov	r1, r8
 8006904:	008a      	lsls	r2, r1, #2
 8006906:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800690a:	f7f9 fcc1 	bl	8000290 <__aeabi_uldivmod>
 800690e:	4602      	mov	r2, r0
 8006910:	460b      	mov	r3, r1
 8006912:	4b39      	ldr	r3, [pc, #228]	; (80069f8 <UART_SetConfig+0x4e4>)
 8006914:	fba3 1302 	umull	r1, r3, r3, r2
 8006918:	095b      	lsrs	r3, r3, #5
 800691a:	2164      	movs	r1, #100	; 0x64
 800691c:	fb01 f303 	mul.w	r3, r1, r3
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	011b      	lsls	r3, r3, #4
 8006924:	3332      	adds	r3, #50	; 0x32
 8006926:	4a34      	ldr	r2, [pc, #208]	; (80069f8 <UART_SetConfig+0x4e4>)
 8006928:	fba2 2303 	umull	r2, r3, r2, r3
 800692c:	095b      	lsrs	r3, r3, #5
 800692e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006932:	441c      	add	r4, r3
 8006934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006938:	2200      	movs	r2, #0
 800693a:	673b      	str	r3, [r7, #112]	; 0x70
 800693c:	677a      	str	r2, [r7, #116]	; 0x74
 800693e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006942:	4642      	mov	r2, r8
 8006944:	464b      	mov	r3, r9
 8006946:	1891      	adds	r1, r2, r2
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	415b      	adcs	r3, r3
 800694c:	60fb      	str	r3, [r7, #12]
 800694e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006952:	4641      	mov	r1, r8
 8006954:	1851      	adds	r1, r2, r1
 8006956:	6039      	str	r1, [r7, #0]
 8006958:	4649      	mov	r1, r9
 800695a:	414b      	adcs	r3, r1
 800695c:	607b      	str	r3, [r7, #4]
 800695e:	f04f 0200 	mov.w	r2, #0
 8006962:	f04f 0300 	mov.w	r3, #0
 8006966:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800696a:	4659      	mov	r1, fp
 800696c:	00cb      	lsls	r3, r1, #3
 800696e:	4651      	mov	r1, sl
 8006970:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006974:	4651      	mov	r1, sl
 8006976:	00ca      	lsls	r2, r1, #3
 8006978:	4610      	mov	r0, r2
 800697a:	4619      	mov	r1, r3
 800697c:	4603      	mov	r3, r0
 800697e:	4642      	mov	r2, r8
 8006980:	189b      	adds	r3, r3, r2
 8006982:	66bb      	str	r3, [r7, #104]	; 0x68
 8006984:	464b      	mov	r3, r9
 8006986:	460a      	mov	r2, r1
 8006988:	eb42 0303 	adc.w	r3, r2, r3
 800698c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800698e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	663b      	str	r3, [r7, #96]	; 0x60
 8006998:	667a      	str	r2, [r7, #100]	; 0x64
 800699a:	f04f 0200 	mov.w	r2, #0
 800699e:	f04f 0300 	mov.w	r3, #0
 80069a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80069a6:	4649      	mov	r1, r9
 80069a8:	008b      	lsls	r3, r1, #2
 80069aa:	4641      	mov	r1, r8
 80069ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069b0:	4641      	mov	r1, r8
 80069b2:	008a      	lsls	r2, r1, #2
 80069b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80069b8:	f7f9 fc6a 	bl	8000290 <__aeabi_uldivmod>
 80069bc:	4602      	mov	r2, r0
 80069be:	460b      	mov	r3, r1
 80069c0:	4b0d      	ldr	r3, [pc, #52]	; (80069f8 <UART_SetConfig+0x4e4>)
 80069c2:	fba3 1302 	umull	r1, r3, r3, r2
 80069c6:	095b      	lsrs	r3, r3, #5
 80069c8:	2164      	movs	r1, #100	; 0x64
 80069ca:	fb01 f303 	mul.w	r3, r1, r3
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	011b      	lsls	r3, r3, #4
 80069d2:	3332      	adds	r3, #50	; 0x32
 80069d4:	4a08      	ldr	r2, [pc, #32]	; (80069f8 <UART_SetConfig+0x4e4>)
 80069d6:	fba2 2303 	umull	r2, r3, r2, r3
 80069da:	095b      	lsrs	r3, r3, #5
 80069dc:	f003 020f 	and.w	r2, r3, #15
 80069e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4422      	add	r2, r4
 80069e8:	609a      	str	r2, [r3, #8]
}
 80069ea:	bf00      	nop
 80069ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80069f0:	46bd      	mov	sp, r7
 80069f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069f6:	bf00      	nop
 80069f8:	51eb851f 	.word	0x51eb851f

080069fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006a00:	4904      	ldr	r1, [pc, #16]	; (8006a14 <MX_FATFS_Init+0x18>)
 8006a02:	4805      	ldr	r0, [pc, #20]	; (8006a18 <MX_FATFS_Init+0x1c>)
 8006a04:	f003 fb12 	bl	800a02c <FATFS_LinkDriver>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	4b03      	ldr	r3, [pc, #12]	; (8006a1c <MX_FATFS_Init+0x20>)
 8006a0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006a10:	bf00      	nop
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	20001d68 	.word	0x20001d68
 8006a18:	2000000c 	.word	0x2000000c
 8006a1c:	20001d64 	.word	0x20001d64

08006a20 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006a20:	b480      	push	{r7}
 8006a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006a24:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	4603      	mov	r3, r0
 8006a38:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8006a3a:	79fb      	ldrb	r3, [r7, #7]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 f9dd 	bl	8006dfc <USER_SPI_initialize>
 8006a42:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3708      	adds	r7, #8
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	4603      	mov	r3, r0
 8006a54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8006a56:	79fb      	ldrb	r3, [r7, #7]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 fab9 	bl	8006fd0 <USER_SPI_status>
 8006a5e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60b9      	str	r1, [r7, #8]
 8006a70:	607a      	str	r2, [r7, #4]
 8006a72:	603b      	str	r3, [r7, #0]
 8006a74:	4603      	mov	r3, r0
 8006a76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8006a78:	7bf8      	ldrb	r0, [r7, #15]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	68b9      	ldr	r1, [r7, #8]
 8006a80:	f000 fabc 	bl	8006ffc <USER_SPI_read>
 8006a84:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b084      	sub	sp, #16
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
 8006a98:	603b      	str	r3, [r7, #0]
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8006a9e:	7bf8      	ldrb	r0, [r7, #15]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	68b9      	ldr	r1, [r7, #8]
 8006aa6:	f000 fb0f 	bl	80070c8 <USER_SPI_write>
 8006aaa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	4603      	mov	r3, r0
 8006abc:	603a      	str	r2, [r7, #0]
 8006abe:	71fb      	strb	r3, [r7, #7]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8006ac4:	79b9      	ldrb	r1, [r7, #6]
 8006ac6:	79fb      	ldrb	r3, [r7, #7]
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f000 fb78 	bl	80071c0 <USER_SPI_ioctl>
 8006ad0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
	...

08006adc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006ae4:	f7fc fb66 	bl	80031b4 <HAL_GetTick>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	4a04      	ldr	r2, [pc, #16]	; (8006afc <SPI_Timer_On+0x20>)
 8006aec:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8006aee:	4a04      	ldr	r2, [pc, #16]	; (8006b00 <SPI_Timer_On+0x24>)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6013      	str	r3, [r2, #0]
}
 8006af4:	bf00      	nop
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	20001d70 	.word	0x20001d70
 8006b00:	20001d74 	.word	0x20001d74

08006b04 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006b08:	f7fc fb54 	bl	80031b4 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	4b06      	ldr	r3, [pc, #24]	; (8006b28 <SPI_Timer_Status+0x24>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	1ad2      	subs	r2, r2, r3
 8006b14:	4b05      	ldr	r3, [pc, #20]	; (8006b2c <SPI_Timer_Status+0x28>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	bf34      	ite	cc
 8006b1c:	2301      	movcc	r3, #1
 8006b1e:	2300      	movcs	r3, #0
 8006b20:	b2db      	uxtb	r3, r3
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	20001d70 	.word	0x20001d70
 8006b2c:	20001d74 	.word	0x20001d74

08006b30 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af02      	add	r7, sp, #8
 8006b36:	4603      	mov	r3, r0
 8006b38:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006b3a:	f107 020f 	add.w	r2, r7, #15
 8006b3e:	1df9      	adds	r1, r7, #7
 8006b40:	2332      	movs	r3, #50	; 0x32
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	2301      	movs	r3, #1
 8006b46:	4804      	ldr	r0, [pc, #16]	; (8006b58 <xchg_spi+0x28>)
 8006b48:	f7fe f81b 	bl	8004b82 <HAL_SPI_TransmitReceive>
    return rxDat;
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	200000a4 	.word	0x200000a4

08006b5c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006b5c:	b590      	push	{r4, r7, lr}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8006b66:	2300      	movs	r3, #0
 8006b68:	60fb      	str	r3, [r7, #12]
 8006b6a:	e00a      	b.n	8006b82 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	18d4      	adds	r4, r2, r3
 8006b72:	20ff      	movs	r0, #255	; 0xff
 8006b74:	f7ff ffdc 	bl	8006b30 <xchg_spi>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	60fb      	str	r3, [r7, #12]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d3f0      	bcc.n	8006b6c <rcvr_spi_multi+0x10>
	}
}
 8006b8a:	bf00      	nop
 8006b8c:	bf00      	nop
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd90      	pop	{r4, r7, pc}

08006b94 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	60fb      	str	r3, [r7, #12]
 8006ba2:	e009      	b.n	8006bb8 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	4413      	add	r3, r2
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7ff ffbf 	bl	8006b30 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	60fb      	str	r3, [r7, #12]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d3f1      	bcc.n	8006ba4 <xmit_spi_multi+0x10>
	}
}
 8006bc0:	bf00      	nop
 8006bc2:	bf00      	nop
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b086      	sub	sp, #24
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006bd2:	f7fc faef 	bl	80031b4 <HAL_GetTick>
 8006bd6:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006bdc:	20ff      	movs	r0, #255	; 0xff
 8006bde:	f7ff ffa7 	bl	8006b30 <xchg_spi>
 8006be2:	4603      	mov	r3, r0
 8006be4:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006be6:	7bfb      	ldrb	r3, [r7, #15]
 8006be8:	2bff      	cmp	r3, #255	; 0xff
 8006bea:	d007      	beq.n	8006bfc <wait_ready+0x32>
 8006bec:	f7fc fae2 	bl	80031b4 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d8ef      	bhi.n	8006bdc <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
 8006bfe:	2bff      	cmp	r3, #255	; 0xff
 8006c00:	bf0c      	ite	eq
 8006c02:	2301      	moveq	r3, #1
 8006c04:	2300      	movne	r3, #0
 8006c06:	b2db      	uxtb	r3, r3
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006c14:	2201      	movs	r2, #1
 8006c16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c1a:	4804      	ldr	r0, [pc, #16]	; (8006c2c <despiselect+0x1c>)
 8006c1c:	f7fd f922 	bl	8003e64 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006c20:	20ff      	movs	r0, #255	; 0xff
 8006c22:	f7ff ff85 	bl	8006b30 <xchg_spi>

}
 8006c26:	bf00      	nop
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	40020000 	.word	0x40020000

08006c30 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006c34:	2200      	movs	r2, #0
 8006c36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c3a:	480a      	ldr	r0, [pc, #40]	; (8006c64 <spiselect+0x34>)
 8006c3c:	f7fd f912 	bl	8003e64 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006c40:	20ff      	movs	r0, #255	; 0xff
 8006c42:	f7ff ff75 	bl	8006b30 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006c46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006c4a:	f7ff ffbe 	bl	8006bca <wait_ready>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d001      	beq.n	8006c58 <spiselect+0x28>
 8006c54:	2301      	movs	r3, #1
 8006c56:	e002      	b.n	8006c5e <spiselect+0x2e>

	despiselect();
 8006c58:	f7ff ffda 	bl	8006c10 <despiselect>
	return 0;	/* Timeout */
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	40020000 	.word	0x40020000

08006c68 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8006c72:	20c8      	movs	r0, #200	; 0xc8
 8006c74:	f7ff ff32 	bl	8006adc <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006c78:	20ff      	movs	r0, #255	; 0xff
 8006c7a:	f7ff ff59 	bl	8006b30 <xchg_spi>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
 8006c84:	2bff      	cmp	r3, #255	; 0xff
 8006c86:	d104      	bne.n	8006c92 <rcvr_datablock+0x2a>
 8006c88:	f7ff ff3c 	bl	8006b04 <SPI_Timer_Status>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1f2      	bne.n	8006c78 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8006c92:	7bfb      	ldrb	r3, [r7, #15]
 8006c94:	2bfe      	cmp	r3, #254	; 0xfe
 8006c96:	d001      	beq.n	8006c9c <rcvr_datablock+0x34>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	e00a      	b.n	8006cb2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006c9c:	6839      	ldr	r1, [r7, #0]
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7ff ff5c 	bl	8006b5c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006ca4:	20ff      	movs	r0, #255	; 0xff
 8006ca6:	f7ff ff43 	bl	8006b30 <xchg_spi>
 8006caa:	20ff      	movs	r0, #255	; 0xff
 8006cac:	f7ff ff40 	bl	8006b30 <xchg_spi>

	return 1;						/* Function succeeded */
 8006cb0:	2301      	movs	r3, #1
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b084      	sub	sp, #16
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006cc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006cca:	f7ff ff7e 	bl	8006bca <wait_ready>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <xmit_datablock+0x1e>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	e01e      	b.n	8006d16 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006cd8:	78fb      	ldrb	r3, [r7, #3]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7ff ff28 	bl	8006b30 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006ce0:	78fb      	ldrb	r3, [r7, #3]
 8006ce2:	2bfd      	cmp	r3, #253	; 0xfd
 8006ce4:	d016      	beq.n	8006d14 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006ce6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7ff ff52 	bl	8006b94 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006cf0:	20ff      	movs	r0, #255	; 0xff
 8006cf2:	f7ff ff1d 	bl	8006b30 <xchg_spi>
 8006cf6:	20ff      	movs	r0, #255	; 0xff
 8006cf8:	f7ff ff1a 	bl	8006b30 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006cfc:	20ff      	movs	r0, #255	; 0xff
 8006cfe:	f7ff ff17 	bl	8006b30 <xchg_spi>
 8006d02:	4603      	mov	r3, r0
 8006d04:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006d06:	7bfb      	ldrb	r3, [r7, #15]
 8006d08:	f003 031f 	and.w	r3, r3, #31
 8006d0c:	2b05      	cmp	r3, #5
 8006d0e:	d001      	beq.n	8006d14 <xmit_datablock+0x5a>
 8006d10:	2300      	movs	r3, #0
 8006d12:	e000      	b.n	8006d16 <xmit_datablock+0x5c>
	}
	return 1;
 8006d14:	2301      	movs	r3, #1
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	4603      	mov	r3, r0
 8006d26:	6039      	str	r1, [r7, #0]
 8006d28:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	da0e      	bge.n	8006d50 <send_cmd+0x32>
		cmd &= 0x7F;
 8006d32:	79fb      	ldrb	r3, [r7, #7]
 8006d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d38:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	2037      	movs	r0, #55	; 0x37
 8006d3e:	f7ff ffee 	bl	8006d1e <send_cmd>
 8006d42:	4603      	mov	r3, r0
 8006d44:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006d46:	7bbb      	ldrb	r3, [r7, #14]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d901      	bls.n	8006d50 <send_cmd+0x32>
 8006d4c:	7bbb      	ldrb	r3, [r7, #14]
 8006d4e:	e051      	b.n	8006df4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8006d50:	79fb      	ldrb	r3, [r7, #7]
 8006d52:	2b0c      	cmp	r3, #12
 8006d54:	d008      	beq.n	8006d68 <send_cmd+0x4a>
		despiselect();
 8006d56:	f7ff ff5b 	bl	8006c10 <despiselect>
		if (!spiselect()) return 0xFF;
 8006d5a:	f7ff ff69 	bl	8006c30 <spiselect>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <send_cmd+0x4a>
 8006d64:	23ff      	movs	r3, #255	; 0xff
 8006d66:	e045      	b.n	8006df4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006d68:	79fb      	ldrb	r3, [r7, #7]
 8006d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7ff fedd 	bl	8006b30 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	0e1b      	lsrs	r3, r3, #24
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7ff fed7 	bl	8006b30 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	0c1b      	lsrs	r3, r3, #16
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7ff fed1 	bl	8006b30 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	0a1b      	lsrs	r3, r3, #8
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7ff fecb 	bl	8006b30 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff fec6 	bl	8006b30 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006da4:	2301      	movs	r3, #1
 8006da6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006da8:	79fb      	ldrb	r3, [r7, #7]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <send_cmd+0x94>
 8006dae:	2395      	movs	r3, #149	; 0x95
 8006db0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006db2:	79fb      	ldrb	r3, [r7, #7]
 8006db4:	2b08      	cmp	r3, #8
 8006db6:	d101      	bne.n	8006dbc <send_cmd+0x9e>
 8006db8:	2387      	movs	r3, #135	; 0x87
 8006dba:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7ff feb6 	bl	8006b30 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006dc4:	79fb      	ldrb	r3, [r7, #7]
 8006dc6:	2b0c      	cmp	r3, #12
 8006dc8:	d102      	bne.n	8006dd0 <send_cmd+0xb2>
 8006dca:	20ff      	movs	r0, #255	; 0xff
 8006dcc:	f7ff feb0 	bl	8006b30 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006dd0:	230a      	movs	r3, #10
 8006dd2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006dd4:	20ff      	movs	r0, #255	; 0xff
 8006dd6:	f7ff feab 	bl	8006b30 <xchg_spi>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006dde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	da05      	bge.n	8006df2 <send_cmd+0xd4>
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
 8006de8:	3b01      	subs	r3, #1
 8006dea:	73fb      	strb	r3, [r7, #15]
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1f0      	bne.n	8006dd4 <send_cmd+0xb6>

	return res;							/* Return received response */
 8006df2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006dfc:	b590      	push	{r4, r7, lr}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	4603      	mov	r3, r0
 8006e04:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006e06:	79fb      	ldrb	r3, [r7, #7]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <USER_SPI_initialize+0x14>
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e0d4      	b.n	8006fba <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006e10:	4b6c      	ldr	r3, [pc, #432]	; (8006fc4 <USER_SPI_initialize+0x1c8>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d003      	beq.n	8006e26 <USER_SPI_initialize+0x2a>
 8006e1e:	4b69      	ldr	r3, [pc, #420]	; (8006fc4 <USER_SPI_initialize+0x1c8>)
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	e0c9      	b.n	8006fba <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8006e26:	4b68      	ldr	r3, [pc, #416]	; (8006fc8 <USER_SPI_initialize+0x1cc>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	4b66      	ldr	r3, [pc, #408]	; (8006fc8 <USER_SPI_initialize+0x1cc>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8006e34:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006e36:	230a      	movs	r3, #10
 8006e38:	73fb      	strb	r3, [r7, #15]
 8006e3a:	e005      	b.n	8006e48 <USER_SPI_initialize+0x4c>
 8006e3c:	20ff      	movs	r0, #255	; 0xff
 8006e3e:	f7ff fe77 	bl	8006b30 <xchg_spi>
 8006e42:	7bfb      	ldrb	r3, [r7, #15]
 8006e44:	3b01      	subs	r3, #1
 8006e46:	73fb      	strb	r3, [r7, #15]
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1f6      	bne.n	8006e3c <USER_SPI_initialize+0x40>

	ty = 0;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006e52:	2100      	movs	r1, #0
 8006e54:	2000      	movs	r0, #0
 8006e56:	f7ff ff62 	bl	8006d1e <send_cmd>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	f040 808b 	bne.w	8006f78 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006e62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e66:	f7ff fe39 	bl	8006adc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006e6a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006e6e:	2008      	movs	r0, #8
 8006e70:	f7ff ff55 	bl	8006d1e <send_cmd>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d151      	bne.n	8006f1e <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	73fb      	strb	r3, [r7, #15]
 8006e7e:	e00d      	b.n	8006e9c <USER_SPI_initialize+0xa0>
 8006e80:	7bfc      	ldrb	r4, [r7, #15]
 8006e82:	20ff      	movs	r0, #255	; 0xff
 8006e84:	f7ff fe54 	bl	8006b30 <xchg_spi>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	f104 0310 	add.w	r3, r4, #16
 8006e90:	443b      	add	r3, r7
 8006e92:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	73fb      	strb	r3, [r7, #15]
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d9ee      	bls.n	8006e80 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006ea2:	7abb      	ldrb	r3, [r7, #10]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d167      	bne.n	8006f78 <USER_SPI_initialize+0x17c>
 8006ea8:	7afb      	ldrb	r3, [r7, #11]
 8006eaa:	2baa      	cmp	r3, #170	; 0xaa
 8006eac:	d164      	bne.n	8006f78 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006eae:	bf00      	nop
 8006eb0:	f7ff fe28 	bl	8006b04 <SPI_Timer_Status>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d007      	beq.n	8006eca <USER_SPI_initialize+0xce>
 8006eba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006ebe:	20a9      	movs	r0, #169	; 0xa9
 8006ec0:	f7ff ff2d 	bl	8006d1e <send_cmd>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1f2      	bne.n	8006eb0 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006eca:	f7ff fe1b 	bl	8006b04 <SPI_Timer_Status>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d051      	beq.n	8006f78 <USER_SPI_initialize+0x17c>
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	203a      	movs	r0, #58	; 0x3a
 8006ed8:	f7ff ff21 	bl	8006d1e <send_cmd>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d14a      	bne.n	8006f78 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	73fb      	strb	r3, [r7, #15]
 8006ee6:	e00d      	b.n	8006f04 <USER_SPI_initialize+0x108>
 8006ee8:	7bfc      	ldrb	r4, [r7, #15]
 8006eea:	20ff      	movs	r0, #255	; 0xff
 8006eec:	f7ff fe20 	bl	8006b30 <xchg_spi>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	f104 0310 	add.w	r3, r4, #16
 8006ef8:	443b      	add	r3, r7
 8006efa:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
 8006f00:	3301      	adds	r3, #1
 8006f02:	73fb      	strb	r3, [r7, #15]
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
 8006f06:	2b03      	cmp	r3, #3
 8006f08:	d9ee      	bls.n	8006ee8 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006f0a:	7a3b      	ldrb	r3, [r7, #8]
 8006f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <USER_SPI_initialize+0x11c>
 8006f14:	230c      	movs	r3, #12
 8006f16:	e000      	b.n	8006f1a <USER_SPI_initialize+0x11e>
 8006f18:	2304      	movs	r3, #4
 8006f1a:	737b      	strb	r3, [r7, #13]
 8006f1c:	e02c      	b.n	8006f78 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006f1e:	2100      	movs	r1, #0
 8006f20:	20a9      	movs	r0, #169	; 0xa9
 8006f22:	f7ff fefc 	bl	8006d1e <send_cmd>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d804      	bhi.n	8006f36 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	737b      	strb	r3, [r7, #13]
 8006f30:	23a9      	movs	r3, #169	; 0xa9
 8006f32:	73bb      	strb	r3, [r7, #14]
 8006f34:	e003      	b.n	8006f3e <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006f36:	2301      	movs	r3, #1
 8006f38:	737b      	strb	r3, [r7, #13]
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006f3e:	bf00      	nop
 8006f40:	f7ff fde0 	bl	8006b04 <SPI_Timer_Status>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d007      	beq.n	8006f5a <USER_SPI_initialize+0x15e>
 8006f4a:	7bbb      	ldrb	r3, [r7, #14]
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7ff fee5 	bl	8006d1e <send_cmd>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1f2      	bne.n	8006f40 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006f5a:	f7ff fdd3 	bl	8006b04 <SPI_Timer_Status>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d007      	beq.n	8006f74 <USER_SPI_initialize+0x178>
 8006f64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f68:	2010      	movs	r0, #16
 8006f6a:	f7ff fed8 	bl	8006d1e <send_cmd>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d001      	beq.n	8006f78 <USER_SPI_initialize+0x17c>
				ty = 0;
 8006f74:	2300      	movs	r3, #0
 8006f76:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006f78:	4a14      	ldr	r2, [pc, #80]	; (8006fcc <USER_SPI_initialize+0x1d0>)
 8006f7a:	7b7b      	ldrb	r3, [r7, #13]
 8006f7c:	7013      	strb	r3, [r2, #0]
	despiselect();
 8006f7e:	f7ff fe47 	bl	8006c10 <despiselect>

	if (ty) {			/* OK */
 8006f82:	7b7b      	ldrb	r3, [r7, #13]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d012      	beq.n	8006fae <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8006f88:	4b0f      	ldr	r3, [pc, #60]	; (8006fc8 <USER_SPI_initialize+0x1cc>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006f92:	4b0d      	ldr	r3, [pc, #52]	; (8006fc8 <USER_SPI_initialize+0x1cc>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f042 0218 	orr.w	r2, r2, #24
 8006f9a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006f9c:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <USER_SPI_initialize+0x1c8>)
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	f023 0301 	bic.w	r3, r3, #1
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <USER_SPI_initialize+0x1c8>)
 8006faa:	701a      	strb	r2, [r3, #0]
 8006fac:	e002      	b.n	8006fb4 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8006fae:	4b05      	ldr	r3, [pc, #20]	; (8006fc4 <USER_SPI_initialize+0x1c8>)
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006fb4:	4b03      	ldr	r3, [pc, #12]	; (8006fc4 <USER_SPI_initialize+0x1c8>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	b2db      	uxtb	r3, r3
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd90      	pop	{r4, r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20000020 	.word	0x20000020
 8006fc8:	200000a4 	.word	0x200000a4
 8006fcc:	20001d6c 	.word	0x20001d6c

08006fd0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006fda:	79fb      	ldrb	r3, [r7, #7]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d001      	beq.n	8006fe4 <USER_SPI_status+0x14>
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e002      	b.n	8006fea <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006fe4:	4b04      	ldr	r3, [pc, #16]	; (8006ff8 <USER_SPI_status+0x28>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	b2db      	uxtb	r3, r3
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	20000020 	.word	0x20000020

08006ffc <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	60b9      	str	r1, [r7, #8]
 8007004:	607a      	str	r2, [r7, #4]
 8007006:	603b      	str	r3, [r7, #0]
 8007008:	4603      	mov	r3, r0
 800700a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800700c:	7bfb      	ldrb	r3, [r7, #15]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d102      	bne.n	8007018 <USER_SPI_read+0x1c>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <USER_SPI_read+0x20>
 8007018:	2304      	movs	r3, #4
 800701a:	e04d      	b.n	80070b8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800701c:	4b28      	ldr	r3, [pc, #160]	; (80070c0 <USER_SPI_read+0xc4>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	b2db      	uxtb	r3, r3
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	2b00      	cmp	r3, #0
 8007028:	d001      	beq.n	800702e <USER_SPI_read+0x32>
 800702a:	2303      	movs	r3, #3
 800702c:	e044      	b.n	80070b8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800702e:	4b25      	ldr	r3, [pc, #148]	; (80070c4 <USER_SPI_read+0xc8>)
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	f003 0308 	and.w	r3, r3, #8
 8007036:	2b00      	cmp	r3, #0
 8007038:	d102      	bne.n	8007040 <USER_SPI_read+0x44>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	025b      	lsls	r3, r3, #9
 800703e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d111      	bne.n	800706a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	2011      	movs	r0, #17
 800704a:	f7ff fe68 	bl	8006d1e <send_cmd>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d129      	bne.n	80070a8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007054:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007058:	68b8      	ldr	r0, [r7, #8]
 800705a:	f7ff fe05 	bl	8006c68 <rcvr_datablock>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d021      	beq.n	80070a8 <USER_SPI_read+0xac>
			count = 0;
 8007064:	2300      	movs	r3, #0
 8007066:	603b      	str	r3, [r7, #0]
 8007068:	e01e      	b.n	80070a8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	2012      	movs	r0, #18
 800706e:	f7ff fe56 	bl	8006d1e <send_cmd>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d117      	bne.n	80070a8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007078:	f44f 7100 	mov.w	r1, #512	; 0x200
 800707c:	68b8      	ldr	r0, [r7, #8]
 800707e:	f7ff fdf3 	bl	8006c68 <rcvr_datablock>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00a      	beq.n	800709e <USER_SPI_read+0xa2>
				buff += 512;
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800708e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	3b01      	subs	r3, #1
 8007094:	603b      	str	r3, [r7, #0]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1ed      	bne.n	8007078 <USER_SPI_read+0x7c>
 800709c:	e000      	b.n	80070a0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800709e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80070a0:	2100      	movs	r1, #0
 80070a2:	200c      	movs	r0, #12
 80070a4:	f7ff fe3b 	bl	8006d1e <send_cmd>
		}
	}
	despiselect();
 80070a8:	f7ff fdb2 	bl	8006c10 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	bf14      	ite	ne
 80070b2:	2301      	movne	r3, #1
 80070b4:	2300      	moveq	r3, #0
 80070b6:	b2db      	uxtb	r3, r3
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	20000020 	.word	0x20000020
 80070c4:	20001d6c 	.word	0x20001d6c

080070c8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60b9      	str	r1, [r7, #8]
 80070d0:	607a      	str	r2, [r7, #4]
 80070d2:	603b      	str	r3, [r7, #0]
 80070d4:	4603      	mov	r3, r0
 80070d6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d102      	bne.n	80070e4 <USER_SPI_write+0x1c>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <USER_SPI_write+0x20>
 80070e4:	2304      	movs	r3, #4
 80070e6:	e063      	b.n	80071b0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80070e8:	4b33      	ldr	r3, [pc, #204]	; (80071b8 <USER_SPI_write+0xf0>)
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <USER_SPI_write+0x32>
 80070f6:	2303      	movs	r3, #3
 80070f8:	e05a      	b.n	80071b0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80070fa:	4b2f      	ldr	r3, [pc, #188]	; (80071b8 <USER_SPI_write+0xf0>)
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	f003 0304 	and.w	r3, r3, #4
 8007104:	2b00      	cmp	r3, #0
 8007106:	d001      	beq.n	800710c <USER_SPI_write+0x44>
 8007108:	2302      	movs	r3, #2
 800710a:	e051      	b.n	80071b0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800710c:	4b2b      	ldr	r3, [pc, #172]	; (80071bc <USER_SPI_write+0xf4>)
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	f003 0308 	and.w	r3, r3, #8
 8007114:	2b00      	cmp	r3, #0
 8007116:	d102      	bne.n	800711e <USER_SPI_write+0x56>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	025b      	lsls	r3, r3, #9
 800711c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d110      	bne.n	8007146 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007124:	6879      	ldr	r1, [r7, #4]
 8007126:	2018      	movs	r0, #24
 8007128:	f7ff fdf9 	bl	8006d1e <send_cmd>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d136      	bne.n	80071a0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8007132:	21fe      	movs	r1, #254	; 0xfe
 8007134:	68b8      	ldr	r0, [r7, #8]
 8007136:	f7ff fdc0 	bl	8006cba <xmit_datablock>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d02f      	beq.n	80071a0 <USER_SPI_write+0xd8>
			count = 0;
 8007140:	2300      	movs	r3, #0
 8007142:	603b      	str	r3, [r7, #0]
 8007144:	e02c      	b.n	80071a0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8007146:	4b1d      	ldr	r3, [pc, #116]	; (80071bc <USER_SPI_write+0xf4>)
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	f003 0306 	and.w	r3, r3, #6
 800714e:	2b00      	cmp	r3, #0
 8007150:	d003      	beq.n	800715a <USER_SPI_write+0x92>
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	2097      	movs	r0, #151	; 0x97
 8007156:	f7ff fde2 	bl	8006d1e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800715a:	6879      	ldr	r1, [r7, #4]
 800715c:	2019      	movs	r0, #25
 800715e:	f7ff fdde 	bl	8006d1e <send_cmd>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d11b      	bne.n	80071a0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007168:	21fc      	movs	r1, #252	; 0xfc
 800716a:	68b8      	ldr	r0, [r7, #8]
 800716c:	f7ff fda5 	bl	8006cba <xmit_datablock>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <USER_SPI_write+0xc4>
				buff += 512;
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800717c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	3b01      	subs	r3, #1
 8007182:	603b      	str	r3, [r7, #0]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1ee      	bne.n	8007168 <USER_SPI_write+0xa0>
 800718a:	e000      	b.n	800718e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800718c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800718e:	21fd      	movs	r1, #253	; 0xfd
 8007190:	2000      	movs	r0, #0
 8007192:	f7ff fd92 	bl	8006cba <xmit_datablock>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <USER_SPI_write+0xd8>
 800719c:	2301      	movs	r3, #1
 800719e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80071a0:	f7ff fd36 	bl	8006c10 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	bf14      	ite	ne
 80071aa:	2301      	movne	r3, #1
 80071ac:	2300      	moveq	r3, #0
 80071ae:	b2db      	uxtb	r3, r3
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	20000020 	.word	0x20000020
 80071bc:	20001d6c 	.word	0x20001d6c

080071c0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b08c      	sub	sp, #48	; 0x30
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	4603      	mov	r3, r0
 80071c8:	603a      	str	r2, [r7, #0]
 80071ca:	71fb      	strb	r3, [r7, #7]
 80071cc:	460b      	mov	r3, r1
 80071ce:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80071d0:	79fb      	ldrb	r3, [r7, #7]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <USER_SPI_ioctl+0x1a>
 80071d6:	2304      	movs	r3, #4
 80071d8:	e15a      	b.n	8007490 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80071da:	4baf      	ldr	r3, [pc, #700]	; (8007498 <USER_SPI_ioctl+0x2d8>)
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d001      	beq.n	80071ec <USER_SPI_ioctl+0x2c>
 80071e8:	2303      	movs	r3, #3
 80071ea:	e151      	b.n	8007490 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80071f2:	79bb      	ldrb	r3, [r7, #6]
 80071f4:	2b04      	cmp	r3, #4
 80071f6:	f200 8136 	bhi.w	8007466 <USER_SPI_ioctl+0x2a6>
 80071fa:	a201      	add	r2, pc, #4	; (adr r2, 8007200 <USER_SPI_ioctl+0x40>)
 80071fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007200:	08007215 	.word	0x08007215
 8007204:	08007229 	.word	0x08007229
 8007208:	08007467 	.word	0x08007467
 800720c:	080072d5 	.word	0x080072d5
 8007210:	080073cb 	.word	0x080073cb
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8007214:	f7ff fd0c 	bl	8006c30 <spiselect>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	f000 8127 	beq.w	800746e <USER_SPI_ioctl+0x2ae>
 8007220:	2300      	movs	r3, #0
 8007222:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007226:	e122      	b.n	800746e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007228:	2100      	movs	r1, #0
 800722a:	2009      	movs	r0, #9
 800722c:	f7ff fd77 	bl	8006d1e <send_cmd>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	f040 811d 	bne.w	8007472 <USER_SPI_ioctl+0x2b2>
 8007238:	f107 030c 	add.w	r3, r7, #12
 800723c:	2110      	movs	r1, #16
 800723e:	4618      	mov	r0, r3
 8007240:	f7ff fd12 	bl	8006c68 <rcvr_datablock>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 8113 	beq.w	8007472 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800724c:	7b3b      	ldrb	r3, [r7, #12]
 800724e:	099b      	lsrs	r3, r3, #6
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b01      	cmp	r3, #1
 8007254:	d111      	bne.n	800727a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8007256:	7d7b      	ldrb	r3, [r7, #21]
 8007258:	461a      	mov	r2, r3
 800725a:	7d3b      	ldrb	r3, [r7, #20]
 800725c:	021b      	lsls	r3, r3, #8
 800725e:	4413      	add	r3, r2
 8007260:	461a      	mov	r2, r3
 8007262:	7cfb      	ldrb	r3, [r7, #19]
 8007264:	041b      	lsls	r3, r3, #16
 8007266:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800726a:	4413      	add	r3, r2
 800726c:	3301      	adds	r3, #1
 800726e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	029a      	lsls	r2, r3, #10
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	601a      	str	r2, [r3, #0]
 8007278:	e028      	b.n	80072cc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800727a:	7c7b      	ldrb	r3, [r7, #17]
 800727c:	f003 030f 	and.w	r3, r3, #15
 8007280:	b2da      	uxtb	r2, r3
 8007282:	7dbb      	ldrb	r3, [r7, #22]
 8007284:	09db      	lsrs	r3, r3, #7
 8007286:	b2db      	uxtb	r3, r3
 8007288:	4413      	add	r3, r2
 800728a:	b2da      	uxtb	r2, r3
 800728c:	7d7b      	ldrb	r3, [r7, #21]
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	b2db      	uxtb	r3, r3
 8007292:	f003 0306 	and.w	r3, r3, #6
 8007296:	b2db      	uxtb	r3, r3
 8007298:	4413      	add	r3, r2
 800729a:	b2db      	uxtb	r3, r3
 800729c:	3302      	adds	r3, #2
 800729e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80072a2:	7d3b      	ldrb	r3, [r7, #20]
 80072a4:	099b      	lsrs	r3, r3, #6
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	461a      	mov	r2, r3
 80072aa:	7cfb      	ldrb	r3, [r7, #19]
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	441a      	add	r2, r3
 80072b0:	7cbb      	ldrb	r3, [r7, #18]
 80072b2:	029b      	lsls	r3, r3, #10
 80072b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80072b8:	4413      	add	r3, r2
 80072ba:	3301      	adds	r3, #1
 80072bc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80072be:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80072c2:	3b09      	subs	r3, #9
 80072c4:	69fa      	ldr	r2, [r7, #28]
 80072c6:	409a      	lsls	r2, r3
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80072d2:	e0ce      	b.n	8007472 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80072d4:	4b71      	ldr	r3, [pc, #452]	; (800749c <USER_SPI_ioctl+0x2dc>)
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	f003 0304 	and.w	r3, r3, #4
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d031      	beq.n	8007344 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80072e0:	2100      	movs	r1, #0
 80072e2:	208d      	movs	r0, #141	; 0x8d
 80072e4:	f7ff fd1b 	bl	8006d1e <send_cmd>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f040 80c3 	bne.w	8007476 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80072f0:	20ff      	movs	r0, #255	; 0xff
 80072f2:	f7ff fc1d 	bl	8006b30 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80072f6:	f107 030c 	add.w	r3, r7, #12
 80072fa:	2110      	movs	r1, #16
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7ff fcb3 	bl	8006c68 <rcvr_datablock>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 80b6 	beq.w	8007476 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800730a:	2330      	movs	r3, #48	; 0x30
 800730c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007310:	e007      	b.n	8007322 <USER_SPI_ioctl+0x162>
 8007312:	20ff      	movs	r0, #255	; 0xff
 8007314:	f7ff fc0c 	bl	8006b30 <xchg_spi>
 8007318:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800731c:	3b01      	subs	r3, #1
 800731e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007322:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1f3      	bne.n	8007312 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800732a:	7dbb      	ldrb	r3, [r7, #22]
 800732c:	091b      	lsrs	r3, r3, #4
 800732e:	b2db      	uxtb	r3, r3
 8007330:	461a      	mov	r2, r3
 8007332:	2310      	movs	r3, #16
 8007334:	fa03 f202 	lsl.w	r2, r3, r2
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8007342:	e098      	b.n	8007476 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007344:	2100      	movs	r1, #0
 8007346:	2009      	movs	r0, #9
 8007348:	f7ff fce9 	bl	8006d1e <send_cmd>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	f040 8091 	bne.w	8007476 <USER_SPI_ioctl+0x2b6>
 8007354:	f107 030c 	add.w	r3, r7, #12
 8007358:	2110      	movs	r1, #16
 800735a:	4618      	mov	r0, r3
 800735c:	f7ff fc84 	bl	8006c68 <rcvr_datablock>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 8087 	beq.w	8007476 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007368:	4b4c      	ldr	r3, [pc, #304]	; (800749c <USER_SPI_ioctl+0x2dc>)
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	f003 0302 	and.w	r3, r3, #2
 8007370:	2b00      	cmp	r3, #0
 8007372:	d012      	beq.n	800739a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007374:	7dbb      	ldrb	r3, [r7, #22]
 8007376:	005b      	lsls	r3, r3, #1
 8007378:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800737c:	7dfa      	ldrb	r2, [r7, #23]
 800737e:	09d2      	lsrs	r2, r2, #7
 8007380:	b2d2      	uxtb	r2, r2
 8007382:	4413      	add	r3, r2
 8007384:	1c5a      	adds	r2, r3, #1
 8007386:	7e7b      	ldrb	r3, [r7, #25]
 8007388:	099b      	lsrs	r3, r3, #6
 800738a:	b2db      	uxtb	r3, r3
 800738c:	3b01      	subs	r3, #1
 800738e:	fa02 f303 	lsl.w	r3, r2, r3
 8007392:	461a      	mov	r2, r3
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	601a      	str	r2, [r3, #0]
 8007398:	e013      	b.n	80073c2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800739a:	7dbb      	ldrb	r3, [r7, #22]
 800739c:	109b      	asrs	r3, r3, #2
 800739e:	b29b      	uxth	r3, r3
 80073a0:	f003 031f 	and.w	r3, r3, #31
 80073a4:	3301      	adds	r3, #1
 80073a6:	7dfa      	ldrb	r2, [r7, #23]
 80073a8:	00d2      	lsls	r2, r2, #3
 80073aa:	f002 0218 	and.w	r2, r2, #24
 80073ae:	7df9      	ldrb	r1, [r7, #23]
 80073b0:	0949      	lsrs	r1, r1, #5
 80073b2:	b2c9      	uxtb	r1, r1
 80073b4:	440a      	add	r2, r1
 80073b6:	3201      	adds	r2, #1
 80073b8:	fb02 f303 	mul.w	r3, r2, r3
 80073bc:	461a      	mov	r2, r3
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80073c8:	e055      	b.n	8007476 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80073ca:	4b34      	ldr	r3, [pc, #208]	; (800749c <USER_SPI_ioctl+0x2dc>)
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	f003 0306 	and.w	r3, r3, #6
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d051      	beq.n	800747a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80073d6:	f107 020c 	add.w	r2, r7, #12
 80073da:	79fb      	ldrb	r3, [r7, #7]
 80073dc:	210b      	movs	r1, #11
 80073de:	4618      	mov	r0, r3
 80073e0:	f7ff feee 	bl	80071c0 <USER_SPI_ioctl>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d149      	bne.n	800747e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80073ea:	7b3b      	ldrb	r3, [r7, #12]
 80073ec:	099b      	lsrs	r3, r3, #6
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d104      	bne.n	80073fe <USER_SPI_ioctl+0x23e>
 80073f4:	7dbb      	ldrb	r3, [r7, #22]
 80073f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d041      	beq.n	8007482 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	623b      	str	r3, [r7, #32]
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	62bb      	str	r3, [r7, #40]	; 0x28
 8007408:	6a3b      	ldr	r3, [r7, #32]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800740e:	4b23      	ldr	r3, [pc, #140]	; (800749c <USER_SPI_ioctl+0x2dc>)
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	f003 0308 	and.w	r3, r3, #8
 8007416:	2b00      	cmp	r3, #0
 8007418:	d105      	bne.n	8007426 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800741a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741c:	025b      	lsls	r3, r3, #9
 800741e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	025b      	lsls	r3, r3, #9
 8007424:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007426:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007428:	2020      	movs	r0, #32
 800742a:	f7ff fc78 	bl	8006d1e <send_cmd>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d128      	bne.n	8007486 <USER_SPI_ioctl+0x2c6>
 8007434:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007436:	2021      	movs	r0, #33	; 0x21
 8007438:	f7ff fc71 	bl	8006d1e <send_cmd>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d121      	bne.n	8007486 <USER_SPI_ioctl+0x2c6>
 8007442:	2100      	movs	r1, #0
 8007444:	2026      	movs	r0, #38	; 0x26
 8007446:	f7ff fc6a 	bl	8006d1e <send_cmd>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d11a      	bne.n	8007486 <USER_SPI_ioctl+0x2c6>
 8007450:	f247 5030 	movw	r0, #30000	; 0x7530
 8007454:	f7ff fbb9 	bl	8006bca <wait_ready>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d013      	beq.n	8007486 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800745e:	2300      	movs	r3, #0
 8007460:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007464:	e00f      	b.n	8007486 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8007466:	2304      	movs	r3, #4
 8007468:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800746c:	e00c      	b.n	8007488 <USER_SPI_ioctl+0x2c8>
		break;
 800746e:	bf00      	nop
 8007470:	e00a      	b.n	8007488 <USER_SPI_ioctl+0x2c8>
		break;
 8007472:	bf00      	nop
 8007474:	e008      	b.n	8007488 <USER_SPI_ioctl+0x2c8>
		break;
 8007476:	bf00      	nop
 8007478:	e006      	b.n	8007488 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800747a:	bf00      	nop
 800747c:	e004      	b.n	8007488 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800747e:	bf00      	nop
 8007480:	e002      	b.n	8007488 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007482:	bf00      	nop
 8007484:	e000      	b.n	8007488 <USER_SPI_ioctl+0x2c8>
		break;
 8007486:	bf00      	nop
	}

	despiselect();
 8007488:	f7ff fbc2 	bl	8006c10 <despiselect>

	return res;
 800748c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007490:	4618      	mov	r0, r3
 8007492:	3730      	adds	r7, #48	; 0x30
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	20000020 	.word	0x20000020
 800749c:	20001d6c 	.word	0x20001d6c

080074a0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	4603      	mov	r3, r0
 80074a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80074aa:	79fb      	ldrb	r3, [r7, #7]
 80074ac:	4a08      	ldr	r2, [pc, #32]	; (80074d0 <disk_status+0x30>)
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4413      	add	r3, r2
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	79fa      	ldrb	r2, [r7, #7]
 80074b8:	4905      	ldr	r1, [pc, #20]	; (80074d0 <disk_status+0x30>)
 80074ba:	440a      	add	r2, r1
 80074bc:	7a12      	ldrb	r2, [r2, #8]
 80074be:	4610      	mov	r0, r2
 80074c0:	4798      	blx	r3
 80074c2:	4603      	mov	r3, r0
 80074c4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	20001da0 	.word	0x20001da0

080074d4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	4603      	mov	r3, r0
 80074dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80074de:	2300      	movs	r3, #0
 80074e0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80074e2:	79fb      	ldrb	r3, [r7, #7]
 80074e4:	4a0d      	ldr	r2, [pc, #52]	; (800751c <disk_initialize+0x48>)
 80074e6:	5cd3      	ldrb	r3, [r2, r3]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d111      	bne.n	8007510 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80074ec:	79fb      	ldrb	r3, [r7, #7]
 80074ee:	4a0b      	ldr	r2, [pc, #44]	; (800751c <disk_initialize+0x48>)
 80074f0:	2101      	movs	r1, #1
 80074f2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80074f4:	79fb      	ldrb	r3, [r7, #7]
 80074f6:	4a09      	ldr	r2, [pc, #36]	; (800751c <disk_initialize+0x48>)
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4413      	add	r3, r2
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	79fa      	ldrb	r2, [r7, #7]
 8007502:	4906      	ldr	r1, [pc, #24]	; (800751c <disk_initialize+0x48>)
 8007504:	440a      	add	r2, r1
 8007506:	7a12      	ldrb	r2, [r2, #8]
 8007508:	4610      	mov	r0, r2
 800750a:	4798      	blx	r3
 800750c:	4603      	mov	r3, r0
 800750e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007510:	7bfb      	ldrb	r3, [r7, #15]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	20001da0 	.word	0x20001da0

08007520 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007520:	b590      	push	{r4, r7, lr}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	60b9      	str	r1, [r7, #8]
 8007528:	607a      	str	r2, [r7, #4]
 800752a:	603b      	str	r3, [r7, #0]
 800752c:	4603      	mov	r3, r0
 800752e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007530:	7bfb      	ldrb	r3, [r7, #15]
 8007532:	4a0a      	ldr	r2, [pc, #40]	; (800755c <disk_read+0x3c>)
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	4413      	add	r3, r2
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	689c      	ldr	r4, [r3, #8]
 800753c:	7bfb      	ldrb	r3, [r7, #15]
 800753e:	4a07      	ldr	r2, [pc, #28]	; (800755c <disk_read+0x3c>)
 8007540:	4413      	add	r3, r2
 8007542:	7a18      	ldrb	r0, [r3, #8]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	68b9      	ldr	r1, [r7, #8]
 800754a:	47a0      	blx	r4
 800754c:	4603      	mov	r3, r0
 800754e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007550:	7dfb      	ldrb	r3, [r7, #23]
}
 8007552:	4618      	mov	r0, r3
 8007554:	371c      	adds	r7, #28
 8007556:	46bd      	mov	sp, r7
 8007558:	bd90      	pop	{r4, r7, pc}
 800755a:	bf00      	nop
 800755c:	20001da0 	.word	0x20001da0

08007560 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007560:	b590      	push	{r4, r7, lr}
 8007562:	b087      	sub	sp, #28
 8007564:	af00      	add	r7, sp, #0
 8007566:	60b9      	str	r1, [r7, #8]
 8007568:	607a      	str	r2, [r7, #4]
 800756a:	603b      	str	r3, [r7, #0]
 800756c:	4603      	mov	r3, r0
 800756e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007570:	7bfb      	ldrb	r3, [r7, #15]
 8007572:	4a0a      	ldr	r2, [pc, #40]	; (800759c <disk_write+0x3c>)
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	68dc      	ldr	r4, [r3, #12]
 800757c:	7bfb      	ldrb	r3, [r7, #15]
 800757e:	4a07      	ldr	r2, [pc, #28]	; (800759c <disk_write+0x3c>)
 8007580:	4413      	add	r3, r2
 8007582:	7a18      	ldrb	r0, [r3, #8]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	68b9      	ldr	r1, [r7, #8]
 800758a:	47a0      	blx	r4
 800758c:	4603      	mov	r3, r0
 800758e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007590:	7dfb      	ldrb	r3, [r7, #23]
}
 8007592:	4618      	mov	r0, r3
 8007594:	371c      	adds	r7, #28
 8007596:	46bd      	mov	sp, r7
 8007598:	bd90      	pop	{r4, r7, pc}
 800759a:	bf00      	nop
 800759c:	20001da0 	.word	0x20001da0

080075a0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	4603      	mov	r3, r0
 80075a8:	603a      	str	r2, [r7, #0]
 80075aa:	71fb      	strb	r3, [r7, #7]
 80075ac:	460b      	mov	r3, r1
 80075ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80075b0:	79fb      	ldrb	r3, [r7, #7]
 80075b2:	4a09      	ldr	r2, [pc, #36]	; (80075d8 <disk_ioctl+0x38>)
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	79fa      	ldrb	r2, [r7, #7]
 80075be:	4906      	ldr	r1, [pc, #24]	; (80075d8 <disk_ioctl+0x38>)
 80075c0:	440a      	add	r2, r1
 80075c2:	7a10      	ldrb	r0, [r2, #8]
 80075c4:	79b9      	ldrb	r1, [r7, #6]
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	4798      	blx	r3
 80075ca:	4603      	mov	r3, r0
 80075cc:	73fb      	strb	r3, [r7, #15]
  return res;
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	20001da0 	.word	0x20001da0

080075dc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80075dc:	b480      	push	{r7}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	3301      	adds	r3, #1
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80075ec:	89fb      	ldrh	r3, [r7, #14]
 80075ee:	021b      	lsls	r3, r3, #8
 80075f0:	b21a      	sxth	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	b21b      	sxth	r3, r3
 80075f8:	4313      	orrs	r3, r2
 80075fa:	b21b      	sxth	r3, r3
 80075fc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80075fe:	89fb      	ldrh	r3, [r7, #14]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3303      	adds	r3, #3
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	021b      	lsls	r3, r3, #8
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	3202      	adds	r2, #2
 8007624:	7812      	ldrb	r2, [r2, #0]
 8007626:	4313      	orrs	r3, r2
 8007628:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	021b      	lsls	r3, r3, #8
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	3201      	adds	r2, #1
 8007632:	7812      	ldrb	r2, [r2, #0]
 8007634:	4313      	orrs	r3, r2
 8007636:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	021b      	lsls	r3, r3, #8
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	7812      	ldrb	r2, [r2, #0]
 8007640:	4313      	orrs	r3, r2
 8007642:	60fb      	str	r3, [r7, #12]
	return rv;
 8007644:	68fb      	ldr	r3, [r7, #12]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	460b      	mov	r3, r1
 800765c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	1c5a      	adds	r2, r3, #1
 8007662:	607a      	str	r2, [r7, #4]
 8007664:	887a      	ldrh	r2, [r7, #2]
 8007666:	b2d2      	uxtb	r2, r2
 8007668:	701a      	strb	r2, [r3, #0]
 800766a:	887b      	ldrh	r3, [r7, #2]
 800766c:	0a1b      	lsrs	r3, r3, #8
 800766e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	1c5a      	adds	r2, r3, #1
 8007674:	607a      	str	r2, [r7, #4]
 8007676:	887a      	ldrh	r2, [r7, #2]
 8007678:	b2d2      	uxtb	r2, r2
 800767a:	701a      	strb	r2, [r3, #0]
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	1c5a      	adds	r2, r3, #1
 8007696:	607a      	str	r2, [r7, #4]
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	b2d2      	uxtb	r2, r2
 800769c:	701a      	strb	r2, [r3, #0]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	0a1b      	lsrs	r3, r3, #8
 80076a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	1c5a      	adds	r2, r3, #1
 80076a8:	607a      	str	r2, [r7, #4]
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	b2d2      	uxtb	r2, r2
 80076ae:	701a      	strb	r2, [r3, #0]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	0a1b      	lsrs	r3, r3, #8
 80076b4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	1c5a      	adds	r2, r3, #1
 80076ba:	607a      	str	r2, [r7, #4]
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	b2d2      	uxtb	r2, r2
 80076c0:	701a      	strb	r2, [r3, #0]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	0a1b      	lsrs	r3, r3, #8
 80076c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	1c5a      	adds	r2, r3, #1
 80076cc:	607a      	str	r2, [r7, #4]
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	b2d2      	uxtb	r2, r2
 80076d2:	701a      	strb	r2, [r3, #0]
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00d      	beq.n	8007716 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	1c53      	adds	r3, r2, #1
 80076fe:	613b      	str	r3, [r7, #16]
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	1c59      	adds	r1, r3, #1
 8007704:	6179      	str	r1, [r7, #20]
 8007706:	7812      	ldrb	r2, [r2, #0]
 8007708:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	3b01      	subs	r3, #1
 800770e:	607b      	str	r3, [r7, #4]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1f1      	bne.n	80076fa <mem_cpy+0x1a>
	}
}
 8007716:	bf00      	nop
 8007718:	371c      	adds	r7, #28
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr

08007722 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007722:	b480      	push	{r7}
 8007724:	b087      	sub	sp, #28
 8007726:	af00      	add	r7, sp, #0
 8007728:	60f8      	str	r0, [r7, #12]
 800772a:	60b9      	str	r1, [r7, #8]
 800772c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	1c5a      	adds	r2, r3, #1
 8007736:	617a      	str	r2, [r7, #20]
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	b2d2      	uxtb	r2, r2
 800773c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	3b01      	subs	r3, #1
 8007742:	607b      	str	r3, [r7, #4]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1f3      	bne.n	8007732 <mem_set+0x10>
}
 800774a:	bf00      	nop
 800774c:	bf00      	nop
 800774e:	371c      	adds	r7, #28
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007758:	b480      	push	{r7}
 800775a:	b089      	sub	sp, #36	; 0x24
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	61fb      	str	r3, [r7, #28]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800776c:	2300      	movs	r3, #0
 800776e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	1c5a      	adds	r2, r3, #1
 8007774:	61fa      	str	r2, [r7, #28]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	4619      	mov	r1, r3
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	1c5a      	adds	r2, r3, #1
 800777e:	61ba      	str	r2, [r7, #24]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	1acb      	subs	r3, r1, r3
 8007784:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	3b01      	subs	r3, #1
 800778a:	607b      	str	r3, [r7, #4]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d002      	beq.n	8007798 <mem_cmp+0x40>
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d0eb      	beq.n	8007770 <mem_cmp+0x18>

	return r;
 8007798:	697b      	ldr	r3, [r7, #20]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3724      	adds	r7, #36	; 0x24
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80077a6:	b480      	push	{r7}
 80077a8:	b083      	sub	sp, #12
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80077b0:	e002      	b.n	80077b8 <chk_chr+0x12>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	3301      	adds	r3, #1
 80077b6:	607b      	str	r3, [r7, #4]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d005      	beq.n	80077cc <chk_chr+0x26>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	461a      	mov	r2, r3
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d1f2      	bne.n	80077b2 <chk_chr+0xc>
	return *str;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	781b      	ldrb	r3, [r3, #0]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80077e6:	2300      	movs	r3, #0
 80077e8:	60bb      	str	r3, [r7, #8]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	60fb      	str	r3, [r7, #12]
 80077ee:	e029      	b.n	8007844 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80077f0:	4a27      	ldr	r2, [pc, #156]	; (8007890 <chk_lock+0xb4>)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	011b      	lsls	r3, r3, #4
 80077f6:	4413      	add	r3, r2
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d01d      	beq.n	800783a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80077fe:	4a24      	ldr	r2, [pc, #144]	; (8007890 <chk_lock+0xb4>)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	011b      	lsls	r3, r3, #4
 8007804:	4413      	add	r3, r2
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	429a      	cmp	r2, r3
 800780e:	d116      	bne.n	800783e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007810:	4a1f      	ldr	r2, [pc, #124]	; (8007890 <chk_lock+0xb4>)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	011b      	lsls	r3, r3, #4
 8007816:	4413      	add	r3, r2
 8007818:	3304      	adds	r3, #4
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007820:	429a      	cmp	r2, r3
 8007822:	d10c      	bne.n	800783e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007824:	4a1a      	ldr	r2, [pc, #104]	; (8007890 <chk_lock+0xb4>)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	011b      	lsls	r3, r3, #4
 800782a:	4413      	add	r3, r2
 800782c:	3308      	adds	r3, #8
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007834:	429a      	cmp	r2, r3
 8007836:	d102      	bne.n	800783e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007838:	e007      	b.n	800784a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800783a:	2301      	movs	r3, #1
 800783c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	3301      	adds	r3, #1
 8007842:	60fb      	str	r3, [r7, #12]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d9d2      	bls.n	80077f0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2b02      	cmp	r3, #2
 800784e:	d109      	bne.n	8007864 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d102      	bne.n	800785c <chk_lock+0x80>
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b02      	cmp	r3, #2
 800785a:	d101      	bne.n	8007860 <chk_lock+0x84>
 800785c:	2300      	movs	r3, #0
 800785e:	e010      	b.n	8007882 <chk_lock+0xa6>
 8007860:	2312      	movs	r3, #18
 8007862:	e00e      	b.n	8007882 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d108      	bne.n	800787c <chk_lock+0xa0>
 800786a:	4a09      	ldr	r2, [pc, #36]	; (8007890 <chk_lock+0xb4>)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	011b      	lsls	r3, r3, #4
 8007870:	4413      	add	r3, r2
 8007872:	330c      	adds	r3, #12
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800787a:	d101      	bne.n	8007880 <chk_lock+0xa4>
 800787c:	2310      	movs	r3, #16
 800787e:	e000      	b.n	8007882 <chk_lock+0xa6>
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	20001d80 	.word	0x20001d80

08007894 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800789a:	2300      	movs	r3, #0
 800789c:	607b      	str	r3, [r7, #4]
 800789e:	e002      	b.n	80078a6 <enq_lock+0x12>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	3301      	adds	r3, #1
 80078a4:	607b      	str	r3, [r7, #4]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d806      	bhi.n	80078ba <enq_lock+0x26>
 80078ac:	4a09      	ldr	r2, [pc, #36]	; (80078d4 <enq_lock+0x40>)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	011b      	lsls	r3, r3, #4
 80078b2:	4413      	add	r3, r2
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1f2      	bne.n	80078a0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b02      	cmp	r3, #2
 80078be:	bf14      	ite	ne
 80078c0:	2301      	movne	r3, #1
 80078c2:	2300      	moveq	r3, #0
 80078c4:	b2db      	uxtb	r3, r3
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	20001d80 	.word	0x20001d80

080078d8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80078e2:	2300      	movs	r3, #0
 80078e4:	60fb      	str	r3, [r7, #12]
 80078e6:	e01f      	b.n	8007928 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80078e8:	4a41      	ldr	r2, [pc, #260]	; (80079f0 <inc_lock+0x118>)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	011b      	lsls	r3, r3, #4
 80078ee:	4413      	add	r3, r2
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d113      	bne.n	8007922 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80078fa:	4a3d      	ldr	r2, [pc, #244]	; (80079f0 <inc_lock+0x118>)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	011b      	lsls	r3, r3, #4
 8007900:	4413      	add	r3, r2
 8007902:	3304      	adds	r3, #4
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800790a:	429a      	cmp	r2, r3
 800790c:	d109      	bne.n	8007922 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800790e:	4a38      	ldr	r2, [pc, #224]	; (80079f0 <inc_lock+0x118>)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	011b      	lsls	r3, r3, #4
 8007914:	4413      	add	r3, r2
 8007916:	3308      	adds	r3, #8
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800791e:	429a      	cmp	r2, r3
 8007920:	d006      	beq.n	8007930 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	3301      	adds	r3, #1
 8007926:	60fb      	str	r3, [r7, #12]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d9dc      	bls.n	80078e8 <inc_lock+0x10>
 800792e:	e000      	b.n	8007932 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007930:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2b02      	cmp	r3, #2
 8007936:	d132      	bne.n	800799e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007938:	2300      	movs	r3, #0
 800793a:	60fb      	str	r3, [r7, #12]
 800793c:	e002      	b.n	8007944 <inc_lock+0x6c>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	3301      	adds	r3, #1
 8007942:	60fb      	str	r3, [r7, #12]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d806      	bhi.n	8007958 <inc_lock+0x80>
 800794a:	4a29      	ldr	r2, [pc, #164]	; (80079f0 <inc_lock+0x118>)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	011b      	lsls	r3, r3, #4
 8007950:	4413      	add	r3, r2
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1f2      	bne.n	800793e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2b02      	cmp	r3, #2
 800795c:	d101      	bne.n	8007962 <inc_lock+0x8a>
 800795e:	2300      	movs	r3, #0
 8007960:	e040      	b.n	80079e4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	4922      	ldr	r1, [pc, #136]	; (80079f0 <inc_lock+0x118>)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	011b      	lsls	r3, r3, #4
 800796c:	440b      	add	r3, r1
 800796e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	689a      	ldr	r2, [r3, #8]
 8007974:	491e      	ldr	r1, [pc, #120]	; (80079f0 <inc_lock+0x118>)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	011b      	lsls	r3, r3, #4
 800797a:	440b      	add	r3, r1
 800797c:	3304      	adds	r3, #4
 800797e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	695a      	ldr	r2, [r3, #20]
 8007984:	491a      	ldr	r1, [pc, #104]	; (80079f0 <inc_lock+0x118>)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	011b      	lsls	r3, r3, #4
 800798a:	440b      	add	r3, r1
 800798c:	3308      	adds	r3, #8
 800798e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007990:	4a17      	ldr	r2, [pc, #92]	; (80079f0 <inc_lock+0x118>)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	011b      	lsls	r3, r3, #4
 8007996:	4413      	add	r3, r2
 8007998:	330c      	adds	r3, #12
 800799a:	2200      	movs	r2, #0
 800799c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d009      	beq.n	80079b8 <inc_lock+0xe0>
 80079a4:	4a12      	ldr	r2, [pc, #72]	; (80079f0 <inc_lock+0x118>)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	011b      	lsls	r3, r3, #4
 80079aa:	4413      	add	r3, r2
 80079ac:	330c      	adds	r3, #12
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d001      	beq.n	80079b8 <inc_lock+0xe0>
 80079b4:	2300      	movs	r3, #0
 80079b6:	e015      	b.n	80079e4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d108      	bne.n	80079d0 <inc_lock+0xf8>
 80079be:	4a0c      	ldr	r2, [pc, #48]	; (80079f0 <inc_lock+0x118>)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	011b      	lsls	r3, r3, #4
 80079c4:	4413      	add	r3, r2
 80079c6:	330c      	adds	r3, #12
 80079c8:	881b      	ldrh	r3, [r3, #0]
 80079ca:	3301      	adds	r3, #1
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	e001      	b.n	80079d4 <inc_lock+0xfc>
 80079d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079d4:	4906      	ldr	r1, [pc, #24]	; (80079f0 <inc_lock+0x118>)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	011b      	lsls	r3, r3, #4
 80079da:	440b      	add	r3, r1
 80079dc:	330c      	adds	r3, #12
 80079de:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	3301      	adds	r3, #1
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr
 80079f0:	20001d80 	.word	0x20001d80

080079f4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	3b01      	subs	r3, #1
 8007a00:	607b      	str	r3, [r7, #4]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d825      	bhi.n	8007a54 <dec_lock+0x60>
		n = Files[i].ctr;
 8007a08:	4a17      	ldr	r2, [pc, #92]	; (8007a68 <dec_lock+0x74>)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	011b      	lsls	r3, r3, #4
 8007a0e:	4413      	add	r3, r2
 8007a10:	330c      	adds	r3, #12
 8007a12:	881b      	ldrh	r3, [r3, #0]
 8007a14:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007a16:	89fb      	ldrh	r3, [r7, #14]
 8007a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a1c:	d101      	bne.n	8007a22 <dec_lock+0x2e>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007a22:	89fb      	ldrh	r3, [r7, #14]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d002      	beq.n	8007a2e <dec_lock+0x3a>
 8007a28:	89fb      	ldrh	r3, [r7, #14]
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007a2e:	4a0e      	ldr	r2, [pc, #56]	; (8007a68 <dec_lock+0x74>)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	011b      	lsls	r3, r3, #4
 8007a34:	4413      	add	r3, r2
 8007a36:	330c      	adds	r3, #12
 8007a38:	89fa      	ldrh	r2, [r7, #14]
 8007a3a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007a3c:	89fb      	ldrh	r3, [r7, #14]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d105      	bne.n	8007a4e <dec_lock+0x5a>
 8007a42:	4a09      	ldr	r2, [pc, #36]	; (8007a68 <dec_lock+0x74>)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	011b      	lsls	r3, r3, #4
 8007a48:	4413      	add	r3, r2
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	737b      	strb	r3, [r7, #13]
 8007a52:	e001      	b.n	8007a58 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007a54:	2302      	movs	r3, #2
 8007a56:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007a58:	7b7b      	ldrb	r3, [r7, #13]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3714      	adds	r7, #20
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	20001d80 	.word	0x20001d80

08007a6c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007a74:	2300      	movs	r3, #0
 8007a76:	60fb      	str	r3, [r7, #12]
 8007a78:	e010      	b.n	8007a9c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007a7a:	4a0d      	ldr	r2, [pc, #52]	; (8007ab0 <clear_lock+0x44>)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	011b      	lsls	r3, r3, #4
 8007a80:	4413      	add	r3, r2
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d105      	bne.n	8007a96 <clear_lock+0x2a>
 8007a8a:	4a09      	ldr	r2, [pc, #36]	; (8007ab0 <clear_lock+0x44>)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	011b      	lsls	r3, r3, #4
 8007a90:	4413      	add	r3, r2
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	60fb      	str	r3, [r7, #12]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d9eb      	bls.n	8007a7a <clear_lock+0xe>
	}
}
 8007aa2:	bf00      	nop
 8007aa4:	bf00      	nop
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr
 8007ab0:	20001d80 	.word	0x20001d80

08007ab4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	78db      	ldrb	r3, [r3, #3]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d034      	beq.n	8007b32 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007acc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	7858      	ldrb	r0, [r3, #1]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007ad8:	2301      	movs	r3, #1
 8007ada:	697a      	ldr	r2, [r7, #20]
 8007adc:	f7ff fd40 	bl	8007560 <disk_write>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d002      	beq.n	8007aec <sync_window+0x38>
			res = FR_DISK_ERR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	73fb      	strb	r3, [r7, #15]
 8007aea:	e022      	b.n	8007b32 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a1b      	ldr	r3, [r3, #32]
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	1ad2      	subs	r2, r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d217      	bcs.n	8007b32 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	789b      	ldrb	r3, [r3, #2]
 8007b06:	613b      	str	r3, [r7, #16]
 8007b08:	e010      	b.n	8007b2c <sync_window+0x78>
					wsect += fs->fsize;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	697a      	ldr	r2, [r7, #20]
 8007b10:	4413      	add	r3, r2
 8007b12:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	7858      	ldrb	r0, [r3, #1]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b1e:	2301      	movs	r3, #1
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	f7ff fd1d 	bl	8007560 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	613b      	str	r3, [r7, #16]
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d8eb      	bhi.n	8007b0a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3718      	adds	r7, #24
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d01b      	beq.n	8007b8c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff ffad 	bl	8007ab4 <sync_window>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d113      	bne.n	8007b8c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	7858      	ldrb	r0, [r3, #1]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b6e:	2301      	movs	r3, #1
 8007b70:	683a      	ldr	r2, [r7, #0]
 8007b72:	f7ff fcd5 	bl	8007520 <disk_read>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d004      	beq.n	8007b86 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b80:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
	...

08007b98 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f7ff ff87 	bl	8007ab4 <sync_window>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007baa:	7bfb      	ldrb	r3, [r7, #15]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d158      	bne.n	8007c62 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	2b03      	cmp	r3, #3
 8007bb6:	d148      	bne.n	8007c4a <sync_fs+0xb2>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	791b      	ldrb	r3, [r3, #4]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d144      	bne.n	8007c4a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3330      	adds	r3, #48	; 0x30
 8007bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bc8:	2100      	movs	r1, #0
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7ff fda9 	bl	8007722 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	3330      	adds	r3, #48	; 0x30
 8007bd4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007bd8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7ff fd38 	bl	8007652 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	3330      	adds	r3, #48	; 0x30
 8007be6:	4921      	ldr	r1, [pc, #132]	; (8007c6c <sync_fs+0xd4>)
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7ff fd4d 	bl	8007688 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	3330      	adds	r3, #48	; 0x30
 8007bf2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007bf6:	491e      	ldr	r1, [pc, #120]	; (8007c70 <sync_fs+0xd8>)
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7ff fd45 	bl	8007688 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	3330      	adds	r3, #48	; 0x30
 8007c02:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	f7ff fd3b 	bl	8007688 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	3330      	adds	r3, #48	; 0x30
 8007c16:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	4619      	mov	r1, r3
 8007c20:	4610      	mov	r0, r2
 8007c22:	f7ff fd31 	bl	8007688 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	69db      	ldr	r3, [r3, #28]
 8007c2a:	1c5a      	adds	r2, r3, #1
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	7858      	ldrb	r0, [r3, #1]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3e:	2301      	movs	r3, #1
 8007c40:	f7ff fc8e 	bl	8007560 <disk_write>
			fs->fsi_flag = 0;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	785b      	ldrb	r3, [r3, #1]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	2100      	movs	r1, #0
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7ff fca4 	bl	80075a0 <disk_ioctl>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <sync_fs+0xca>
 8007c5e:	2301      	movs	r3, #1
 8007c60:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	41615252 	.word	0x41615252
 8007c70:	61417272 	.word	0x61417272

08007c74 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	3b02      	subs	r3, #2
 8007c82:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	695b      	ldr	r3, [r3, #20]
 8007c88:	3b02      	subs	r3, #2
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d301      	bcc.n	8007c94 <clust2sect+0x20>
 8007c90:	2300      	movs	r3, #0
 8007c92:	e008      	b.n	8007ca6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	895b      	ldrh	r3, [r3, #10]
 8007c98:	461a      	mov	r2, r3
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	fb03 f202 	mul.w	r2, r3, r2
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca4:	4413      	add	r3, r2
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b086      	sub	sp, #24
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d904      	bls.n	8007cd2 <get_fat+0x20>
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d302      	bcc.n	8007cd8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	617b      	str	r3, [r7, #20]
 8007cd6:	e08f      	b.n	8007df8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cdc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	2b03      	cmp	r3, #3
 8007ce4:	d062      	beq.n	8007dac <get_fat+0xfa>
 8007ce6:	2b03      	cmp	r3, #3
 8007ce8:	dc7c      	bgt.n	8007de4 <get_fat+0x132>
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d002      	beq.n	8007cf4 <get_fat+0x42>
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d042      	beq.n	8007d78 <get_fat+0xc6>
 8007cf2:	e077      	b.n	8007de4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	085b      	lsrs	r3, r3, #1
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	4413      	add	r3, r2
 8007d00:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	6a1a      	ldr	r2, [r3, #32]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	0a5b      	lsrs	r3, r3, #9
 8007d0a:	4413      	add	r3, r2
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	6938      	ldr	r0, [r7, #16]
 8007d10:	f7ff ff14 	bl	8007b3c <move_window>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d167      	bne.n	8007dea <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	1c5a      	adds	r2, r3, #1
 8007d1e:	60fa      	str	r2, [r7, #12]
 8007d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	4413      	add	r3, r2
 8007d28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d2c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	6a1a      	ldr	r2, [r3, #32]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	0a5b      	lsrs	r3, r3, #9
 8007d36:	4413      	add	r3, r2
 8007d38:	4619      	mov	r1, r3
 8007d3a:	6938      	ldr	r0, [r7, #16]
 8007d3c:	f7ff fefe 	bl	8007b3c <move_window>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d153      	bne.n	8007dee <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d54:	021b      	lsls	r3, r3, #8
 8007d56:	461a      	mov	r2, r3
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d002      	beq.n	8007d6e <get_fat+0xbc>
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	091b      	lsrs	r3, r3, #4
 8007d6c:	e002      	b.n	8007d74 <get_fat+0xc2>
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d74:	617b      	str	r3, [r7, #20]
			break;
 8007d76:	e03f      	b.n	8007df8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	6a1a      	ldr	r2, [r3, #32]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	0a1b      	lsrs	r3, r3, #8
 8007d80:	4413      	add	r3, r2
 8007d82:	4619      	mov	r1, r3
 8007d84:	6938      	ldr	r0, [r7, #16]
 8007d86:	f7ff fed9 	bl	8007b3c <move_window>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d130      	bne.n	8007df2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007d9e:	4413      	add	r3, r2
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7ff fc1b 	bl	80075dc <ld_word>
 8007da6:	4603      	mov	r3, r0
 8007da8:	617b      	str	r3, [r7, #20]
			break;
 8007daa:	e025      	b.n	8007df8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	6a1a      	ldr	r2, [r3, #32]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	09db      	lsrs	r3, r3, #7
 8007db4:	4413      	add	r3, r2
 8007db6:	4619      	mov	r1, r3
 8007db8:	6938      	ldr	r0, [r7, #16]
 8007dba:	f7ff febf 	bl	8007b3c <move_window>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d118      	bne.n	8007df6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007dd2:	4413      	add	r3, r2
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7ff fc19 	bl	800760c <ld_dword>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007de0:	617b      	str	r3, [r7, #20]
			break;
 8007de2:	e009      	b.n	8007df8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007de4:	2301      	movs	r3, #1
 8007de6:	617b      	str	r3, [r7, #20]
 8007de8:	e006      	b.n	8007df8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007dea:	bf00      	nop
 8007dec:	e004      	b.n	8007df8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007dee:	bf00      	nop
 8007df0:	e002      	b.n	8007df8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007df2:	bf00      	nop
 8007df4:	e000      	b.n	8007df8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007df6:	bf00      	nop
		}
	}

	return val;
 8007df8:	697b      	ldr	r3, [r7, #20]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3718      	adds	r7, #24
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007e02:	b590      	push	{r4, r7, lr}
 8007e04:	b089      	sub	sp, #36	; 0x24
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	60f8      	str	r0, [r7, #12]
 8007e0a:	60b9      	str	r1, [r7, #8]
 8007e0c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007e0e:	2302      	movs	r3, #2
 8007e10:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	f240 80d2 	bls.w	8007fbe <put_fat+0x1bc>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	f080 80cc 	bcs.w	8007fbe <put_fat+0x1bc>
		switch (fs->fs_type) {
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	f000 8096 	beq.w	8007f5c <put_fat+0x15a>
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	f300 80cd 	bgt.w	8007fd0 <put_fat+0x1ce>
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d002      	beq.n	8007e40 <put_fat+0x3e>
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d06e      	beq.n	8007f1c <put_fat+0x11a>
 8007e3e:	e0c7      	b.n	8007fd0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	61bb      	str	r3, [r7, #24]
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	085b      	lsrs	r3, r3, #1
 8007e48:	69ba      	ldr	r2, [r7, #24]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6a1a      	ldr	r2, [r3, #32]
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	0a5b      	lsrs	r3, r3, #9
 8007e56:	4413      	add	r3, r2
 8007e58:	4619      	mov	r1, r3
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f7ff fe6e 	bl	8007b3c <move_window>
 8007e60:	4603      	mov	r3, r0
 8007e62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e64:	7ffb      	ldrb	r3, [r7, #31]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f040 80ab 	bne.w	8007fc2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	1c59      	adds	r1, r3, #1
 8007e76:	61b9      	str	r1, [r7, #24]
 8007e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e7c:	4413      	add	r3, r2
 8007e7e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00d      	beq.n	8007ea6 <put_fat+0xa4>
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	b25b      	sxtb	r3, r3
 8007e90:	f003 030f 	and.w	r3, r3, #15
 8007e94:	b25a      	sxtb	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	011b      	lsls	r3, r3, #4
 8007e9c:	b25b      	sxtb	r3, r3
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	b25b      	sxtb	r3, r3
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	e001      	b.n	8007eaa <put_fat+0xa8>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6a1a      	ldr	r2, [r3, #32]
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	0a5b      	lsrs	r3, r3, #9
 8007ebc:	4413      	add	r3, r2
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f7ff fe3b 	bl	8007b3c <move_window>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007eca:	7ffb      	ldrb	r3, [r7, #31]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d17a      	bne.n	8007fc6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007edc:	4413      	add	r3, r2
 8007ede:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <put_fat+0xf0>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	091b      	lsrs	r3, r3, #4
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	e00e      	b.n	8007f10 <put_fat+0x10e>
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	b25b      	sxtb	r3, r3
 8007ef8:	f023 030f 	bic.w	r3, r3, #15
 8007efc:	b25a      	sxtb	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	0a1b      	lsrs	r3, r3, #8
 8007f02:	b25b      	sxtb	r3, r3
 8007f04:	f003 030f 	and.w	r3, r3, #15
 8007f08:	b25b      	sxtb	r3, r3
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	b25b      	sxtb	r3, r3
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2201      	movs	r2, #1
 8007f18:	70da      	strb	r2, [r3, #3]
			break;
 8007f1a:	e059      	b.n	8007fd0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6a1a      	ldr	r2, [r3, #32]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	0a1b      	lsrs	r3, r3, #8
 8007f24:	4413      	add	r3, r2
 8007f26:	4619      	mov	r1, r3
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f7ff fe07 	bl	8007b3c <move_window>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f32:	7ffb      	ldrb	r3, [r7, #31]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d148      	bne.n	8007fca <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	005b      	lsls	r3, r3, #1
 8007f42:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007f46:	4413      	add	r3, r2
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	b292      	uxth	r2, r2
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7ff fb7f 	bl	8007652 <st_word>
			fs->wflag = 1;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2201      	movs	r2, #1
 8007f58:	70da      	strb	r2, [r3, #3]
			break;
 8007f5a:	e039      	b.n	8007fd0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6a1a      	ldr	r2, [r3, #32]
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	09db      	lsrs	r3, r3, #7
 8007f64:	4413      	add	r3, r2
 8007f66:	4619      	mov	r1, r3
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f7ff fde7 	bl	8007b3c <move_window>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f72:	7ffb      	ldrb	r3, [r7, #31]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d12a      	bne.n	8007fce <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007f8c:	4413      	add	r3, r2
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7ff fb3c 	bl	800760c <ld_dword>
 8007f94:	4603      	mov	r3, r0
 8007f96:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007f9a:	4323      	orrs	r3, r4
 8007f9c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007fac:	4413      	add	r3, r2
 8007fae:	6879      	ldr	r1, [r7, #4]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7ff fb69 	bl	8007688 <st_dword>
			fs->wflag = 1;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	70da      	strb	r2, [r3, #3]
			break;
 8007fbc:	e008      	b.n	8007fd0 <put_fat+0x1ce>
		}
	}
 8007fbe:	bf00      	nop
 8007fc0:	e006      	b.n	8007fd0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007fc2:	bf00      	nop
 8007fc4:	e004      	b.n	8007fd0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007fc6:	bf00      	nop
 8007fc8:	e002      	b.n	8007fd0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007fca:	bf00      	nop
 8007fcc:	e000      	b.n	8007fd0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007fce:	bf00      	nop
	return res;
 8007fd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3724      	adds	r7, #36	; 0x24
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd90      	pop	{r4, r7, pc}

08007fda <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b088      	sub	sp, #32
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	60f8      	str	r0, [r7, #12]
 8007fe2:	60b9      	str	r1, [r7, #8]
 8007fe4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d904      	bls.n	8008000 <remove_chain+0x26>
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d301      	bcc.n	8008004 <remove_chain+0x2a>
 8008000:	2302      	movs	r3, #2
 8008002:	e04b      	b.n	800809c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00c      	beq.n	8008024 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800800a:	f04f 32ff 	mov.w	r2, #4294967295
 800800e:	6879      	ldr	r1, [r7, #4]
 8008010:	69b8      	ldr	r0, [r7, #24]
 8008012:	f7ff fef6 	bl	8007e02 <put_fat>
 8008016:	4603      	mov	r3, r0
 8008018:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800801a:	7ffb      	ldrb	r3, [r7, #31]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <remove_chain+0x4a>
 8008020:	7ffb      	ldrb	r3, [r7, #31]
 8008022:	e03b      	b.n	800809c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008024:	68b9      	ldr	r1, [r7, #8]
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f7ff fe43 	bl	8007cb2 <get_fat>
 800802c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d031      	beq.n	8008098 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	2b01      	cmp	r3, #1
 8008038:	d101      	bne.n	800803e <remove_chain+0x64>
 800803a:	2302      	movs	r3, #2
 800803c:	e02e      	b.n	800809c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008044:	d101      	bne.n	800804a <remove_chain+0x70>
 8008046:	2301      	movs	r3, #1
 8008048:	e028      	b.n	800809c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800804a:	2200      	movs	r2, #0
 800804c:	68b9      	ldr	r1, [r7, #8]
 800804e:	69b8      	ldr	r0, [r7, #24]
 8008050:	f7ff fed7 	bl	8007e02 <put_fat>
 8008054:	4603      	mov	r3, r0
 8008056:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008058:	7ffb      	ldrb	r3, [r7, #31]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d001      	beq.n	8008062 <remove_chain+0x88>
 800805e:	7ffb      	ldrb	r3, [r7, #31]
 8008060:	e01c      	b.n	800809c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	691a      	ldr	r2, [r3, #16]
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	3b02      	subs	r3, #2
 800806c:	429a      	cmp	r2, r3
 800806e:	d20b      	bcs.n	8008088 <remove_chain+0xae>
			fs->free_clst++;
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	1c5a      	adds	r2, r3, #1
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	791b      	ldrb	r3, [r3, #4]
 800807e:	f043 0301 	orr.w	r3, r3, #1
 8008082:	b2da      	uxtb	r2, r3
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	695b      	ldr	r3, [r3, #20]
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	429a      	cmp	r2, r3
 8008094:	d3c6      	bcc.n	8008024 <remove_chain+0x4a>
 8008096:	e000      	b.n	800809a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008098:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3720      	adds	r7, #32
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b088      	sub	sp, #32
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10d      	bne.n	80080d6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d004      	beq.n	80080d0 <create_chain+0x2c>
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	69ba      	ldr	r2, [r7, #24]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d31b      	bcc.n	8008108 <create_chain+0x64>
 80080d0:	2301      	movs	r3, #1
 80080d2:	61bb      	str	r3, [r7, #24]
 80080d4:	e018      	b.n	8008108 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80080d6:	6839      	ldr	r1, [r7, #0]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7ff fdea 	bl	8007cb2 <get_fat>
 80080de:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d801      	bhi.n	80080ea <create_chain+0x46>
 80080e6:	2301      	movs	r3, #1
 80080e8:	e070      	b.n	80081cc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f0:	d101      	bne.n	80080f6 <create_chain+0x52>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	e06a      	b.n	80081cc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d201      	bcs.n	8008104 <create_chain+0x60>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	e063      	b.n	80081cc <create_chain+0x128>
		scl = clst;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	3301      	adds	r3, #1
 8008110:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	695b      	ldr	r3, [r3, #20]
 8008116:	69fa      	ldr	r2, [r7, #28]
 8008118:	429a      	cmp	r2, r3
 800811a:	d307      	bcc.n	800812c <create_chain+0x88>
				ncl = 2;
 800811c:	2302      	movs	r3, #2
 800811e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008120:	69fa      	ldr	r2, [r7, #28]
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	429a      	cmp	r2, r3
 8008126:	d901      	bls.n	800812c <create_chain+0x88>
 8008128:	2300      	movs	r3, #0
 800812a:	e04f      	b.n	80081cc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800812c:	69f9      	ldr	r1, [r7, #28]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7ff fdbf 	bl	8007cb2 <get_fat>
 8008134:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00e      	beq.n	800815a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d003      	beq.n	800814a <create_chain+0xa6>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008148:	d101      	bne.n	800814e <create_chain+0xaa>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	e03e      	b.n	80081cc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800814e:	69fa      	ldr	r2, [r7, #28]
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	429a      	cmp	r2, r3
 8008154:	d1da      	bne.n	800810c <create_chain+0x68>
 8008156:	2300      	movs	r3, #0
 8008158:	e038      	b.n	80081cc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800815a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800815c:	f04f 32ff 	mov.w	r2, #4294967295
 8008160:	69f9      	ldr	r1, [r7, #28]
 8008162:	6938      	ldr	r0, [r7, #16]
 8008164:	f7ff fe4d 	bl	8007e02 <put_fat>
 8008168:	4603      	mov	r3, r0
 800816a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800816c:	7dfb      	ldrb	r3, [r7, #23]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d109      	bne.n	8008186 <create_chain+0xe2>
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d006      	beq.n	8008186 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008178:	69fa      	ldr	r2, [r7, #28]
 800817a:	6839      	ldr	r1, [r7, #0]
 800817c:	6938      	ldr	r0, [r7, #16]
 800817e:	f7ff fe40 	bl	8007e02 <put_fat>
 8008182:	4603      	mov	r3, r0
 8008184:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008186:	7dfb      	ldrb	r3, [r7, #23]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d116      	bne.n	80081ba <create_chain+0x116>
		fs->last_clst = ncl;
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	69fa      	ldr	r2, [r7, #28]
 8008190:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	691a      	ldr	r2, [r3, #16]
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	695b      	ldr	r3, [r3, #20]
 800819a:	3b02      	subs	r3, #2
 800819c:	429a      	cmp	r2, r3
 800819e:	d804      	bhi.n	80081aa <create_chain+0x106>
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	1e5a      	subs	r2, r3, #1
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	791b      	ldrb	r3, [r3, #4]
 80081ae:	f043 0301 	orr.w	r3, r3, #1
 80081b2:	b2da      	uxtb	r2, r3
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	711a      	strb	r2, [r3, #4]
 80081b8:	e007      	b.n	80081ca <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80081ba:	7dfb      	ldrb	r3, [r7, #23]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d102      	bne.n	80081c6 <create_chain+0x122>
 80081c0:	f04f 33ff 	mov.w	r3, #4294967295
 80081c4:	e000      	b.n	80081c8 <create_chain+0x124>
 80081c6:	2301      	movs	r3, #1
 80081c8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80081ca:	69fb      	ldr	r3, [r7, #28]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3720      	adds	r7, #32
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b087      	sub	sp, #28
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e8:	3304      	adds	r3, #4
 80081ea:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	0a5b      	lsrs	r3, r3, #9
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	8952      	ldrh	r2, [r2, #10]
 80081f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80081f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	1d1a      	adds	r2, r3, #4
 80081fe:	613a      	str	r2, [r7, #16]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <clmt_clust+0x3a>
 800820a:	2300      	movs	r3, #0
 800820c:	e010      	b.n	8008230 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	429a      	cmp	r2, r3
 8008214:	d307      	bcc.n	8008226 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	1ad3      	subs	r3, r2, r3
 800821c:	617b      	str	r3, [r7, #20]
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	3304      	adds	r3, #4
 8008222:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008224:	e7e9      	b.n	80081fa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008226:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	4413      	add	r3, r2
}
 8008230:	4618      	mov	r0, r3
 8008232:	371c      	adds	r7, #28
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008252:	d204      	bcs.n	800825e <dir_sdi+0x22>
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	f003 031f 	and.w	r3, r3, #31
 800825a:	2b00      	cmp	r3, #0
 800825c:	d001      	beq.n	8008262 <dir_sdi+0x26>
		return FR_INT_ERR;
 800825e:	2302      	movs	r3, #2
 8008260:	e063      	b.n	800832a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	683a      	ldr	r2, [r7, #0]
 8008266:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d106      	bne.n	8008282 <dir_sdi+0x46>
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	2b02      	cmp	r3, #2
 800827a:	d902      	bls.n	8008282 <dir_sdi+0x46>
		clst = fs->dirbase;
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008280:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10c      	bne.n	80082a2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	095b      	lsrs	r3, r3, #5
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	8912      	ldrh	r2, [r2, #8]
 8008290:	4293      	cmp	r3, r2
 8008292:	d301      	bcc.n	8008298 <dir_sdi+0x5c>
 8008294:	2302      	movs	r3, #2
 8008296:	e048      	b.n	800832a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	61da      	str	r2, [r3, #28]
 80082a0:	e029      	b.n	80082f6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	895b      	ldrh	r3, [r3, #10]
 80082a6:	025b      	lsls	r3, r3, #9
 80082a8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80082aa:	e019      	b.n	80082e0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6979      	ldr	r1, [r7, #20]
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7ff fcfe 	bl	8007cb2 <get_fat>
 80082b6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082be:	d101      	bne.n	80082c4 <dir_sdi+0x88>
 80082c0:	2301      	movs	r3, #1
 80082c2:	e032      	b.n	800832a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d904      	bls.n	80082d4 <dir_sdi+0x98>
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d301      	bcc.n	80082d8 <dir_sdi+0x9c>
 80082d4:	2302      	movs	r3, #2
 80082d6:	e028      	b.n	800832a <dir_sdi+0xee>
			ofs -= csz;
 80082d8:	683a      	ldr	r2, [r7, #0]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d2e1      	bcs.n	80082ac <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80082e8:	6979      	ldr	r1, [r7, #20]
 80082ea:	6938      	ldr	r0, [r7, #16]
 80082ec:	f7ff fcc2 	bl	8007c74 <clust2sect>
 80082f0:	4602      	mov	r2, r0
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	697a      	ldr	r2, [r7, #20]
 80082fa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	69db      	ldr	r3, [r3, #28]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <dir_sdi+0xcc>
 8008304:	2302      	movs	r3, #2
 8008306:	e010      	b.n	800832a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	69da      	ldr	r2, [r3, #28]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	0a5b      	lsrs	r3, r3, #9
 8008310:	441a      	add	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008322:	441a      	add	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3718      	adds	r7, #24
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b086      	sub	sp, #24
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	3320      	adds	r3, #32
 8008348:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	69db      	ldr	r3, [r3, #28]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <dir_next+0x28>
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008358:	d301      	bcc.n	800835e <dir_next+0x2c>
 800835a:	2304      	movs	r3, #4
 800835c:	e0aa      	b.n	80084b4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008364:	2b00      	cmp	r3, #0
 8008366:	f040 8098 	bne.w	800849a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	69db      	ldr	r3, [r3, #28]
 800836e:	1c5a      	adds	r2, r3, #1
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10b      	bne.n	8008394 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	095b      	lsrs	r3, r3, #5
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	8912      	ldrh	r2, [r2, #8]
 8008384:	4293      	cmp	r3, r2
 8008386:	f0c0 8088 	bcc.w	800849a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	61da      	str	r2, [r3, #28]
 8008390:	2304      	movs	r3, #4
 8008392:	e08f      	b.n	80084b4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	0a5b      	lsrs	r3, r3, #9
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	8952      	ldrh	r2, [r2, #10]
 800839c:	3a01      	subs	r2, #1
 800839e:	4013      	ands	r3, r2
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d17a      	bne.n	800849a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	4619      	mov	r1, r3
 80083ac:	4610      	mov	r0, r2
 80083ae:	f7ff fc80 	bl	8007cb2 <get_fat>
 80083b2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d801      	bhi.n	80083be <dir_next+0x8c>
 80083ba:	2302      	movs	r3, #2
 80083bc:	e07a      	b.n	80084b4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c4:	d101      	bne.n	80083ca <dir_next+0x98>
 80083c6:	2301      	movs	r3, #1
 80083c8:	e074      	b.n	80084b4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d358      	bcc.n	8008486 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d104      	bne.n	80083e4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	61da      	str	r2, [r3, #28]
 80083e0:	2304      	movs	r3, #4
 80083e2:	e067      	b.n	80084b4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	699b      	ldr	r3, [r3, #24]
 80083ea:	4619      	mov	r1, r3
 80083ec:	4610      	mov	r0, r2
 80083ee:	f7ff fe59 	bl	80080a4 <create_chain>
 80083f2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <dir_next+0xcc>
 80083fa:	2307      	movs	r3, #7
 80083fc:	e05a      	b.n	80084b4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d101      	bne.n	8008408 <dir_next+0xd6>
 8008404:	2302      	movs	r3, #2
 8008406:	e055      	b.n	80084b4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840e:	d101      	bne.n	8008414 <dir_next+0xe2>
 8008410:	2301      	movs	r3, #1
 8008412:	e04f      	b.n	80084b4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f7ff fb4d 	bl	8007ab4 <sync_window>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <dir_next+0xf2>
 8008420:	2301      	movs	r3, #1
 8008422:	e047      	b.n	80084b4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	3330      	adds	r3, #48	; 0x30
 8008428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800842c:	2100      	movs	r1, #0
 800842e:	4618      	mov	r0, r3
 8008430:	f7ff f977 	bl	8007722 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008434:	2300      	movs	r3, #0
 8008436:	613b      	str	r3, [r7, #16]
 8008438:	6979      	ldr	r1, [r7, #20]
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f7ff fc1a 	bl	8007c74 <clust2sect>
 8008440:	4602      	mov	r2, r0
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	62da      	str	r2, [r3, #44]	; 0x2c
 8008446:	e012      	b.n	800846e <dir_next+0x13c>
						fs->wflag = 1;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2201      	movs	r2, #1
 800844c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f7ff fb30 	bl	8007ab4 <sync_window>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <dir_next+0x12c>
 800845a:	2301      	movs	r3, #1
 800845c:	e02a      	b.n	80084b4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	3301      	adds	r3, #1
 8008462:	613b      	str	r3, [r7, #16]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008468:	1c5a      	adds	r2, r3, #1
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	62da      	str	r2, [r3, #44]	; 0x2c
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	895b      	ldrh	r3, [r3, #10]
 8008472:	461a      	mov	r2, r3
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	4293      	cmp	r3, r2
 8008478:	d3e6      	bcc.n	8008448 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	1ad2      	subs	r2, r2, r3
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800848c:	6979      	ldr	r1, [r7, #20]
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f7ff fbf0 	bl	8007c74 <clust2sect>
 8008494:	4602      	mov	r2, r0
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ac:	441a      	add	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3718      	adds	r7, #24
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80084cc:	2100      	movs	r1, #0
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f7ff feb4 	bl	800823c <dir_sdi>
 80084d4:	4603      	mov	r3, r0
 80084d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80084d8:	7dfb      	ldrb	r3, [r7, #23]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d12b      	bne.n	8008536 <dir_alloc+0x7a>
		n = 0;
 80084de:	2300      	movs	r3, #0
 80084e0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	69db      	ldr	r3, [r3, #28]
 80084e6:	4619      	mov	r1, r3
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f7ff fb27 	bl	8007b3c <move_window>
 80084ee:	4603      	mov	r3, r0
 80084f0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80084f2:	7dfb      	ldrb	r3, [r7, #23]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d11d      	bne.n	8008534 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	2be5      	cmp	r3, #229	; 0xe5
 8008500:	d004      	beq.n	800850c <dir_alloc+0x50>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d107      	bne.n	800851c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	3301      	adds	r3, #1
 8008510:	613b      	str	r3, [r7, #16]
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	429a      	cmp	r2, r3
 8008518:	d102      	bne.n	8008520 <dir_alloc+0x64>
 800851a:	e00c      	b.n	8008536 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800851c:	2300      	movs	r3, #0
 800851e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008520:	2101      	movs	r1, #1
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f7ff ff05 	bl	8008332 <dir_next>
 8008528:	4603      	mov	r3, r0
 800852a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800852c:	7dfb      	ldrb	r3, [r7, #23]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d0d7      	beq.n	80084e2 <dir_alloc+0x26>
 8008532:	e000      	b.n	8008536 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008534:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008536:	7dfb      	ldrb	r3, [r7, #23]
 8008538:	2b04      	cmp	r3, #4
 800853a:	d101      	bne.n	8008540 <dir_alloc+0x84>
 800853c:	2307      	movs	r3, #7
 800853e:	75fb      	strb	r3, [r7, #23]
	return res;
 8008540:	7dfb      	ldrb	r3, [r7, #23]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3718      	adds	r7, #24
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b084      	sub	sp, #16
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	331a      	adds	r3, #26
 8008558:	4618      	mov	r0, r3
 800855a:	f7ff f83f 	bl	80075dc <ld_word>
 800855e:	4603      	mov	r3, r0
 8008560:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	2b03      	cmp	r3, #3
 8008568:	d109      	bne.n	800857e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	3314      	adds	r3, #20
 800856e:	4618      	mov	r0, r3
 8008570:	f7ff f834 	bl	80075dc <ld_word>
 8008574:	4603      	mov	r3, r0
 8008576:	041b      	lsls	r3, r3, #16
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	4313      	orrs	r3, r2
 800857c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800857e:	68fb      	ldr	r3, [r7, #12]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	331a      	adds	r3, #26
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	b292      	uxth	r2, r2
 800859c:	4611      	mov	r1, r2
 800859e:	4618      	mov	r0, r3
 80085a0:	f7ff f857 	bl	8007652 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	2b03      	cmp	r3, #3
 80085aa:	d109      	bne.n	80085c0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	f103 0214 	add.w	r2, r3, #20
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	0c1b      	lsrs	r3, r3, #16
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	4619      	mov	r1, r3
 80085ba:	4610      	mov	r0, r2
 80085bc:	f7ff f849 	bl	8007652 <st_word>
	}
}
 80085c0:	bf00      	nop
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80085d2:	2304      	movs	r3, #4
 80085d4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80085dc:	e03c      	b.n	8008658 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	69db      	ldr	r3, [r3, #28]
 80085e2:	4619      	mov	r1, r3
 80085e4:	6938      	ldr	r0, [r7, #16]
 80085e6:	f7ff faa9 	bl	8007b3c <move_window>
 80085ea:	4603      	mov	r3, r0
 80085ec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80085ee:	7dfb      	ldrb	r3, [r7, #23]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d136      	bne.n	8008662 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a1b      	ldr	r3, [r3, #32]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d102      	bne.n	8008608 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8008602:	2304      	movs	r3, #4
 8008604:	75fb      	strb	r3, [r7, #23]
 8008606:	e031      	b.n	800866c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a1b      	ldr	r3, [r3, #32]
 800860c:	330b      	adds	r3, #11
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008614:	73bb      	strb	r3, [r7, #14]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	7bba      	ldrb	r2, [r7, #14]
 800861a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800861c:	7bfb      	ldrb	r3, [r7, #15]
 800861e:	2be5      	cmp	r3, #229	; 0xe5
 8008620:	d011      	beq.n	8008646 <dir_read+0x7e>
 8008622:	7bfb      	ldrb	r3, [r7, #15]
 8008624:	2b2e      	cmp	r3, #46	; 0x2e
 8008626:	d00e      	beq.n	8008646 <dir_read+0x7e>
 8008628:	7bbb      	ldrb	r3, [r7, #14]
 800862a:	2b0f      	cmp	r3, #15
 800862c:	d00b      	beq.n	8008646 <dir_read+0x7e>
 800862e:	7bbb      	ldrb	r3, [r7, #14]
 8008630:	f023 0320 	bic.w	r3, r3, #32
 8008634:	2b08      	cmp	r3, #8
 8008636:	bf0c      	ite	eq
 8008638:	2301      	moveq	r3, #1
 800863a:	2300      	movne	r3, #0
 800863c:	b2db      	uxtb	r3, r3
 800863e:	461a      	mov	r2, r3
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	4293      	cmp	r3, r2
 8008644:	d00f      	beq.n	8008666 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8008646:	2100      	movs	r1, #0
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f7ff fe72 	bl	8008332 <dir_next>
 800864e:	4603      	mov	r3, r0
 8008650:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008652:	7dfb      	ldrb	r3, [r7, #23]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d108      	bne.n	800866a <dir_read+0xa2>
	while (dp->sect) {
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	69db      	ldr	r3, [r3, #28]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1be      	bne.n	80085de <dir_read+0x16>
 8008660:	e004      	b.n	800866c <dir_read+0xa4>
		if (res != FR_OK) break;
 8008662:	bf00      	nop
 8008664:	e002      	b.n	800866c <dir_read+0xa4>
				break;
 8008666:	bf00      	nop
 8008668:	e000      	b.n	800866c <dir_read+0xa4>
		if (res != FR_OK) break;
 800866a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800866c:	7dfb      	ldrb	r3, [r7, #23]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d002      	beq.n	8008678 <dir_read+0xb0>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	61da      	str	r2, [r3, #28]
	return res;
 8008678:	7dfb      	ldrb	r3, [r7, #23]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3718      	adds	r7, #24
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b086      	sub	sp, #24
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008690:	2100      	movs	r1, #0
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f7ff fdd2 	bl	800823c <dir_sdi>
 8008698:	4603      	mov	r3, r0
 800869a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800869c:	7dfb      	ldrb	r3, [r7, #23]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d001      	beq.n	80086a6 <dir_find+0x24>
 80086a2:	7dfb      	ldrb	r3, [r7, #23]
 80086a4:	e03e      	b.n	8008724 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	69db      	ldr	r3, [r3, #28]
 80086aa:	4619      	mov	r1, r3
 80086ac:	6938      	ldr	r0, [r7, #16]
 80086ae:	f7ff fa45 	bl	8007b3c <move_window>
 80086b2:	4603      	mov	r3, r0
 80086b4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80086b6:	7dfb      	ldrb	r3, [r7, #23]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d12f      	bne.n	800871c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a1b      	ldr	r3, [r3, #32]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d102      	bne.n	80086d0 <dir_find+0x4e>
 80086ca:	2304      	movs	r3, #4
 80086cc:	75fb      	strb	r3, [r7, #23]
 80086ce:	e028      	b.n	8008722 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a1b      	ldr	r3, [r3, #32]
 80086d4:	330b      	adds	r3, #11
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086dc:	b2da      	uxtb	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	330b      	adds	r3, #11
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	f003 0308 	and.w	r3, r3, #8
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10a      	bne.n	8008708 <dir_find+0x86>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a18      	ldr	r0, [r3, #32]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	3324      	adds	r3, #36	; 0x24
 80086fa:	220b      	movs	r2, #11
 80086fc:	4619      	mov	r1, r3
 80086fe:	f7ff f82b 	bl	8007758 <mem_cmp>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00b      	beq.n	8008720 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008708:	2100      	movs	r1, #0
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7ff fe11 	bl	8008332 <dir_next>
 8008710:	4603      	mov	r3, r0
 8008712:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008714:	7dfb      	ldrb	r3, [r7, #23]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d0c5      	beq.n	80086a6 <dir_find+0x24>
 800871a:	e002      	b.n	8008722 <dir_find+0xa0>
		if (res != FR_OK) break;
 800871c:	bf00      	nop
 800871e:	e000      	b.n	8008722 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008720:	bf00      	nop

	return res;
 8008722:	7dfb      	ldrb	r3, [r7, #23]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3718      	adds	r7, #24
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800873a:	2101      	movs	r1, #1
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f7ff febd 	bl	80084bc <dir_alloc>
 8008742:	4603      	mov	r3, r0
 8008744:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008746:	7bfb      	ldrb	r3, [r7, #15]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d11c      	bne.n	8008786 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	69db      	ldr	r3, [r3, #28]
 8008750:	4619      	mov	r1, r3
 8008752:	68b8      	ldr	r0, [r7, #8]
 8008754:	f7ff f9f2 	bl	8007b3c <move_window>
 8008758:	4603      	mov	r3, r0
 800875a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800875c:	7bfb      	ldrb	r3, [r7, #15]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d111      	bne.n	8008786 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	2220      	movs	r2, #32
 8008768:	2100      	movs	r1, #0
 800876a:	4618      	mov	r0, r3
 800876c:	f7fe ffd9 	bl	8007722 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a18      	ldr	r0, [r3, #32]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	3324      	adds	r3, #36	; 0x24
 8008778:	220b      	movs	r2, #11
 800877a:	4619      	mov	r1, r3
 800877c:	f7fe ffb0 	bl	80076e0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	2201      	movs	r2, #1
 8008784:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008786:	7bfb      	ldrb	r3, [r7, #15]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	2200      	movs	r2, #0
 800879e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	69db      	ldr	r3, [r3, #28]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d04e      	beq.n	8008846 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80087a8:	2300      	movs	r3, #0
 80087aa:	613b      	str	r3, [r7, #16]
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80087b0:	e021      	b.n	80087f6 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a1a      	ldr	r2, [r3, #32]
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	1c59      	adds	r1, r3, #1
 80087ba:	6179      	str	r1, [r7, #20]
 80087bc:	4413      	add	r3, r2
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
 80087c4:	2b20      	cmp	r3, #32
 80087c6:	d100      	bne.n	80087ca <get_fileinfo+0x3a>
 80087c8:	e015      	b.n	80087f6 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
 80087cc:	2b05      	cmp	r3, #5
 80087ce:	d101      	bne.n	80087d4 <get_fileinfo+0x44>
 80087d0:	23e5      	movs	r3, #229	; 0xe5
 80087d2:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	2b09      	cmp	r3, #9
 80087d8:	d106      	bne.n	80087e8 <get_fileinfo+0x58>
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	1c5a      	adds	r2, r3, #1
 80087de:	613a      	str	r2, [r7, #16]
 80087e0:	683a      	ldr	r2, [r7, #0]
 80087e2:	4413      	add	r3, r2
 80087e4:	222e      	movs	r2, #46	; 0x2e
 80087e6:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	1c5a      	adds	r2, r3, #1
 80087ec:	613a      	str	r2, [r7, #16]
 80087ee:	683a      	ldr	r2, [r7, #0]
 80087f0:	4413      	add	r3, r2
 80087f2:	7bfa      	ldrb	r2, [r7, #15]
 80087f4:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2b0a      	cmp	r3, #10
 80087fa:	d9da      	bls.n	80087b2 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80087fc:	683a      	ldr	r2, [r7, #0]
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	4413      	add	r3, r2
 8008802:	3309      	adds	r3, #9
 8008804:	2200      	movs	r2, #0
 8008806:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6a1b      	ldr	r3, [r3, #32]
 800880c:	7ada      	ldrb	r2, [r3, #11]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a1b      	ldr	r3, [r3, #32]
 8008816:	331c      	adds	r3, #28
 8008818:	4618      	mov	r0, r3
 800881a:	f7fe fef7 	bl	800760c <ld_dword>
 800881e:	4602      	mov	r2, r0
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a1b      	ldr	r3, [r3, #32]
 8008828:	3316      	adds	r3, #22
 800882a:	4618      	mov	r0, r3
 800882c:	f7fe feee 	bl	800760c <ld_dword>
 8008830:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	b29a      	uxth	r2, r3
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	80da      	strh	r2, [r3, #6]
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	0c1b      	lsrs	r3, r3, #16
 800883e:	b29a      	uxth	r2, r3
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	809a      	strh	r2, [r3, #4]
 8008844:	e000      	b.n	8008848 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008846:	bf00      	nop
}
 8008848:	3718      	adds	r7, #24
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
	...

08008850 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b088      	sub	sp, #32
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	60fb      	str	r3, [r7, #12]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	3324      	adds	r3, #36	; 0x24
 8008864:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008866:	220b      	movs	r2, #11
 8008868:	2120      	movs	r1, #32
 800886a:	68b8      	ldr	r0, [r7, #8]
 800886c:	f7fe ff59 	bl	8007722 <mem_set>
	si = i = 0; ni = 8;
 8008870:	2300      	movs	r3, #0
 8008872:	613b      	str	r3, [r7, #16]
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	61fb      	str	r3, [r7, #28]
 8008878:	2308      	movs	r3, #8
 800887a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	1c5a      	adds	r2, r3, #1
 8008880:	61fa      	str	r2, [r7, #28]
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	4413      	add	r3, r2
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800888a:	7efb      	ldrb	r3, [r7, #27]
 800888c:	2b20      	cmp	r3, #32
 800888e:	d94e      	bls.n	800892e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008890:	7efb      	ldrb	r3, [r7, #27]
 8008892:	2b2f      	cmp	r3, #47	; 0x2f
 8008894:	d006      	beq.n	80088a4 <create_name+0x54>
 8008896:	7efb      	ldrb	r3, [r7, #27]
 8008898:	2b5c      	cmp	r3, #92	; 0x5c
 800889a:	d110      	bne.n	80088be <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800889c:	e002      	b.n	80088a4 <create_name+0x54>
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	3301      	adds	r3, #1
 80088a2:	61fb      	str	r3, [r7, #28]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	4413      	add	r3, r2
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	2b2f      	cmp	r3, #47	; 0x2f
 80088ae:	d0f6      	beq.n	800889e <create_name+0x4e>
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	4413      	add	r3, r2
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	2b5c      	cmp	r3, #92	; 0x5c
 80088ba:	d0f0      	beq.n	800889e <create_name+0x4e>
			break;
 80088bc:	e038      	b.n	8008930 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80088be:	7efb      	ldrb	r3, [r7, #27]
 80088c0:	2b2e      	cmp	r3, #46	; 0x2e
 80088c2:	d003      	beq.n	80088cc <create_name+0x7c>
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d30c      	bcc.n	80088e6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	2b0b      	cmp	r3, #11
 80088d0:	d002      	beq.n	80088d8 <create_name+0x88>
 80088d2:	7efb      	ldrb	r3, [r7, #27]
 80088d4:	2b2e      	cmp	r3, #46	; 0x2e
 80088d6:	d001      	beq.n	80088dc <create_name+0x8c>
 80088d8:	2306      	movs	r3, #6
 80088da:	e044      	b.n	8008966 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80088dc:	2308      	movs	r3, #8
 80088de:	613b      	str	r3, [r7, #16]
 80088e0:	230b      	movs	r3, #11
 80088e2:	617b      	str	r3, [r7, #20]
			continue;
 80088e4:	e022      	b.n	800892c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80088e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	da04      	bge.n	80088f8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80088ee:	7efb      	ldrb	r3, [r7, #27]
 80088f0:	3b80      	subs	r3, #128	; 0x80
 80088f2:	4a1f      	ldr	r2, [pc, #124]	; (8008970 <create_name+0x120>)
 80088f4:	5cd3      	ldrb	r3, [r2, r3]
 80088f6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80088f8:	7efb      	ldrb	r3, [r7, #27]
 80088fa:	4619      	mov	r1, r3
 80088fc:	481d      	ldr	r0, [pc, #116]	; (8008974 <create_name+0x124>)
 80088fe:	f7fe ff52 	bl	80077a6 <chk_chr>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <create_name+0xbc>
 8008908:	2306      	movs	r3, #6
 800890a:	e02c      	b.n	8008966 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800890c:	7efb      	ldrb	r3, [r7, #27]
 800890e:	2b60      	cmp	r3, #96	; 0x60
 8008910:	d905      	bls.n	800891e <create_name+0xce>
 8008912:	7efb      	ldrb	r3, [r7, #27]
 8008914:	2b7a      	cmp	r3, #122	; 0x7a
 8008916:	d802      	bhi.n	800891e <create_name+0xce>
 8008918:	7efb      	ldrb	r3, [r7, #27]
 800891a:	3b20      	subs	r3, #32
 800891c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	1c5a      	adds	r2, r3, #1
 8008922:	613a      	str	r2, [r7, #16]
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	4413      	add	r3, r2
 8008928:	7efa      	ldrb	r2, [r7, #27]
 800892a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800892c:	e7a6      	b.n	800887c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800892e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	441a      	add	r2, r3
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d101      	bne.n	8008944 <create_name+0xf4>
 8008940:	2306      	movs	r3, #6
 8008942:	e010      	b.n	8008966 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	2be5      	cmp	r3, #229	; 0xe5
 800894a:	d102      	bne.n	8008952 <create_name+0x102>
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	2205      	movs	r2, #5
 8008950:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008952:	7efb      	ldrb	r3, [r7, #27]
 8008954:	2b20      	cmp	r3, #32
 8008956:	d801      	bhi.n	800895c <create_name+0x10c>
 8008958:	2204      	movs	r2, #4
 800895a:	e000      	b.n	800895e <create_name+0x10e>
 800895c:	2200      	movs	r2, #0
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	330b      	adds	r3, #11
 8008962:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008964:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008966:	4618      	mov	r0, r3
 8008968:	3720      	adds	r7, #32
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	0800b1c8 	.word	0x0800b1c8
 8008974:	0800addc 	.word	0x0800addc

08008978 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800898c:	e002      	b.n	8008994 <follow_path+0x1c>
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	3301      	adds	r3, #1
 8008992:	603b      	str	r3, [r7, #0]
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	2b2f      	cmp	r3, #47	; 0x2f
 800899a:	d0f8      	beq.n	800898e <follow_path+0x16>
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	2b5c      	cmp	r3, #92	; 0x5c
 80089a2:	d0f4      	beq.n	800898e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	2200      	movs	r2, #0
 80089a8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	2b1f      	cmp	r3, #31
 80089b0:	d80a      	bhi.n	80089c8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2280      	movs	r2, #128	; 0x80
 80089b6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80089ba:	2100      	movs	r1, #0
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f7ff fc3d 	bl	800823c <dir_sdi>
 80089c2:	4603      	mov	r3, r0
 80089c4:	75fb      	strb	r3, [r7, #23]
 80089c6:	e043      	b.n	8008a50 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80089c8:	463b      	mov	r3, r7
 80089ca:	4619      	mov	r1, r3
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f7ff ff3f 	bl	8008850 <create_name>
 80089d2:	4603      	mov	r3, r0
 80089d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80089d6:	7dfb      	ldrb	r3, [r7, #23]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d134      	bne.n	8008a46 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f7ff fe50 	bl	8008682 <dir_find>
 80089e2:	4603      	mov	r3, r0
 80089e4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80089ec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80089ee:	7dfb      	ldrb	r3, [r7, #23]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00a      	beq.n	8008a0a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80089f4:	7dfb      	ldrb	r3, [r7, #23]
 80089f6:	2b04      	cmp	r3, #4
 80089f8:	d127      	bne.n	8008a4a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80089fa:	7afb      	ldrb	r3, [r7, #11]
 80089fc:	f003 0304 	and.w	r3, r3, #4
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d122      	bne.n	8008a4a <follow_path+0xd2>
 8008a04:	2305      	movs	r3, #5
 8008a06:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008a08:	e01f      	b.n	8008a4a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008a0a:	7afb      	ldrb	r3, [r7, #11]
 8008a0c:	f003 0304 	and.w	r3, r3, #4
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d11c      	bne.n	8008a4e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	799b      	ldrb	r3, [r3, #6]
 8008a18:	f003 0310 	and.w	r3, r3, #16
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d102      	bne.n	8008a26 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008a20:	2305      	movs	r3, #5
 8008a22:	75fb      	strb	r3, [r7, #23]
 8008a24:	e014      	b.n	8008a50 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	695b      	ldr	r3, [r3, #20]
 8008a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a34:	4413      	add	r3, r2
 8008a36:	4619      	mov	r1, r3
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f7ff fd86 	bl	800854a <ld_clust>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008a44:	e7c0      	b.n	80089c8 <follow_path+0x50>
			if (res != FR_OK) break;
 8008a46:	bf00      	nop
 8008a48:	e002      	b.n	8008a50 <follow_path+0xd8>
				break;
 8008a4a:	bf00      	nop
 8008a4c:	e000      	b.n	8008a50 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008a4e:	bf00      	nop
			}
		}
	}

	return res;
 8008a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3718      	adds	r7, #24
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b087      	sub	sp, #28
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008a62:	f04f 33ff 	mov.w	r3, #4294967295
 8008a66:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d031      	beq.n	8008ad4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	617b      	str	r3, [r7, #20]
 8008a76:	e002      	b.n	8008a7e <get_ldnumber+0x24>
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	617b      	str	r3, [r7, #20]
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	2b20      	cmp	r3, #32
 8008a84:	d903      	bls.n	8008a8e <get_ldnumber+0x34>
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	2b3a      	cmp	r3, #58	; 0x3a
 8008a8c:	d1f4      	bne.n	8008a78 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	2b3a      	cmp	r3, #58	; 0x3a
 8008a94:	d11c      	bne.n	8008ad0 <get_ldnumber+0x76>
			tp = *path;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	1c5a      	adds	r2, r3, #1
 8008aa0:	60fa      	str	r2, [r7, #12]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	3b30      	subs	r3, #48	; 0x30
 8008aa6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	2b09      	cmp	r3, #9
 8008aac:	d80e      	bhi.n	8008acc <get_ldnumber+0x72>
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d10a      	bne.n	8008acc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d107      	bne.n	8008acc <get_ldnumber+0x72>
					vol = (int)i;
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	617b      	str	r3, [r7, #20]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	697a      	ldr	r2, [r7, #20]
 8008aca:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	e002      	b.n	8008ad6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008ad4:	693b      	ldr	r3, [r7, #16]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	371c      	adds	r7, #28
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
	...

08008ae4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	70da      	strb	r2, [r3, #3]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f04f 32ff 	mov.w	r2, #4294967295
 8008afa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008afc:	6839      	ldr	r1, [r7, #0]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f7ff f81c 	bl	8007b3c <move_window>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d001      	beq.n	8008b0e <check_fs+0x2a>
 8008b0a:	2304      	movs	r3, #4
 8008b0c:	e038      	b.n	8008b80 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	3330      	adds	r3, #48	; 0x30
 8008b12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7fe fd60 	bl	80075dc <ld_word>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	461a      	mov	r2, r3
 8008b20:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d001      	beq.n	8008b2c <check_fs+0x48>
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e029      	b.n	8008b80 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b32:	2be9      	cmp	r3, #233	; 0xe9
 8008b34:	d009      	beq.n	8008b4a <check_fs+0x66>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b3c:	2beb      	cmp	r3, #235	; 0xeb
 8008b3e:	d11e      	bne.n	8008b7e <check_fs+0x9a>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008b46:	2b90      	cmp	r3, #144	; 0x90
 8008b48:	d119      	bne.n	8008b7e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	3330      	adds	r3, #48	; 0x30
 8008b4e:	3336      	adds	r3, #54	; 0x36
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fe fd5b 	bl	800760c <ld_dword>
 8008b56:	4603      	mov	r3, r0
 8008b58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008b5c:	4a0a      	ldr	r2, [pc, #40]	; (8008b88 <check_fs+0xa4>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d101      	bne.n	8008b66 <check_fs+0x82>
 8008b62:	2300      	movs	r3, #0
 8008b64:	e00c      	b.n	8008b80 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	3330      	adds	r3, #48	; 0x30
 8008b6a:	3352      	adds	r3, #82	; 0x52
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fe fd4d 	bl	800760c <ld_dword>
 8008b72:	4603      	mov	r3, r0
 8008b74:	4a05      	ldr	r2, [pc, #20]	; (8008b8c <check_fs+0xa8>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d101      	bne.n	8008b7e <check_fs+0x9a>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	e000      	b.n	8008b80 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008b7e:	2302      	movs	r3, #2
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	00544146 	.word	0x00544146
 8008b8c:	33544146 	.word	0x33544146

08008b90 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b096      	sub	sp, #88	; 0x58
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f7ff ff58 	bl	8008a5a <get_ldnumber>
 8008baa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	da01      	bge.n	8008bb6 <find_volume+0x26>
 8008bb2:	230b      	movs	r3, #11
 8008bb4:	e22d      	b.n	8009012 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008bb6:	4aa1      	ldr	r2, [pc, #644]	; (8008e3c <find_volume+0x2ac>)
 8008bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bbe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d101      	bne.n	8008bca <find_volume+0x3a>
 8008bc6:	230c      	movs	r3, #12
 8008bc8:	e223      	b.n	8009012 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bce:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008bd0:	79fb      	ldrb	r3, [r7, #7]
 8008bd2:	f023 0301 	bic.w	r3, r3, #1
 8008bd6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d01a      	beq.n	8008c16 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be2:	785b      	ldrb	r3, [r3, #1]
 8008be4:	4618      	mov	r0, r3
 8008be6:	f7fe fc5b 	bl	80074a0 <disk_status>
 8008bea:	4603      	mov	r3, r0
 8008bec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008bf0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008bf4:	f003 0301 	and.w	r3, r3, #1
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d10c      	bne.n	8008c16 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008bfc:	79fb      	ldrb	r3, [r7, #7]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d007      	beq.n	8008c12 <find_volume+0x82>
 8008c02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c06:	f003 0304 	and.w	r3, r3, #4
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d001      	beq.n	8008c12 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008c0e:	230a      	movs	r3, #10
 8008c10:	e1ff      	b.n	8009012 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008c12:	2300      	movs	r3, #0
 8008c14:	e1fd      	b.n	8009012 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c18:	2200      	movs	r2, #0
 8008c1a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c22:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c26:	785b      	ldrb	r3, [r3, #1]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7fe fc53 	bl	80074d4 <disk_initialize>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008c34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c38:	f003 0301 	and.w	r3, r3, #1
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d001      	beq.n	8008c44 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008c40:	2303      	movs	r3, #3
 8008c42:	e1e6      	b.n	8009012 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008c44:	79fb      	ldrb	r3, [r7, #7]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d007      	beq.n	8008c5a <find_volume+0xca>
 8008c4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c4e:	f003 0304 	and.w	r3, r3, #4
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008c56:	230a      	movs	r3, #10
 8008c58:	e1db      	b.n	8009012 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008c5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c62:	f7ff ff3f 	bl	8008ae4 <check_fs>
 8008c66:	4603      	mov	r3, r0
 8008c68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008c6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d149      	bne.n	8008d08 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008c74:	2300      	movs	r3, #0
 8008c76:	643b      	str	r3, [r7, #64]	; 0x40
 8008c78:	e01e      	b.n	8008cb8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c82:	011b      	lsls	r3, r3, #4
 8008c84:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008c88:	4413      	add	r3, r2
 8008c8a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8e:	3304      	adds	r3, #4
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d006      	beq.n	8008ca4 <find_volume+0x114>
 8008c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c98:	3308      	adds	r3, #8
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fe fcb6 	bl	800760c <ld_dword>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	e000      	b.n	8008ca6 <find_volume+0x116>
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	3358      	adds	r3, #88	; 0x58
 8008cac:	443b      	add	r3, r7
 8008cae:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	643b      	str	r3, [r7, #64]	; 0x40
 8008cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	d9dd      	bls.n	8008c7a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d002      	beq.n	8008cce <find_volume+0x13e>
 8008cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	3358      	adds	r3, #88	; 0x58
 8008cd4:	443b      	add	r3, r7
 8008cd6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008cda:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008cdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d005      	beq.n	8008cee <find_volume+0x15e>
 8008ce2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ce4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008ce6:	f7ff fefd 	bl	8008ae4 <check_fs>
 8008cea:	4603      	mov	r3, r0
 8008cec:	e000      	b.n	8008cf0 <find_volume+0x160>
 8008cee:	2303      	movs	r3, #3
 8008cf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008cf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d905      	bls.n	8008d08 <find_volume+0x178>
 8008cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cfe:	3301      	adds	r3, #1
 8008d00:	643b      	str	r3, [r7, #64]	; 0x40
 8008d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d04:	2b03      	cmp	r3, #3
 8008d06:	d9e2      	bls.n	8008cce <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008d08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d0c:	2b04      	cmp	r3, #4
 8008d0e:	d101      	bne.n	8008d14 <find_volume+0x184>
 8008d10:	2301      	movs	r3, #1
 8008d12:	e17e      	b.n	8009012 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008d14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d901      	bls.n	8008d20 <find_volume+0x190>
 8008d1c:	230d      	movs	r3, #13
 8008d1e:	e178      	b.n	8009012 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d22:	3330      	adds	r3, #48	; 0x30
 8008d24:	330b      	adds	r3, #11
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fe fc58 	bl	80075dc <ld_word>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d32:	d001      	beq.n	8008d38 <find_volume+0x1a8>
 8008d34:	230d      	movs	r3, #13
 8008d36:	e16c      	b.n	8009012 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3a:	3330      	adds	r3, #48	; 0x30
 8008d3c:	3316      	adds	r3, #22
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fe fc4c 	bl	80075dc <ld_word>
 8008d44:	4603      	mov	r3, r0
 8008d46:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d106      	bne.n	8008d5c <find_volume+0x1cc>
 8008d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d50:	3330      	adds	r3, #48	; 0x30
 8008d52:	3324      	adds	r3, #36	; 0x24
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7fe fc59 	bl	800760c <ld_dword>
 8008d5a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d60:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d64:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6e:	789b      	ldrb	r3, [r3, #2]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d005      	beq.n	8008d80 <find_volume+0x1f0>
 8008d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d76:	789b      	ldrb	r3, [r3, #2]
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	d001      	beq.n	8008d80 <find_volume+0x1f0>
 8008d7c:	230d      	movs	r3, #13
 8008d7e:	e148      	b.n	8009012 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d82:	789b      	ldrb	r3, [r3, #2]
 8008d84:	461a      	mov	r2, r3
 8008d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d88:	fb02 f303 	mul.w	r3, r2, r3
 8008d8c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d94:	b29a      	uxth	r2, r3
 8008d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d98:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9c:	895b      	ldrh	r3, [r3, #10]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d008      	beq.n	8008db4 <find_volume+0x224>
 8008da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da4:	895b      	ldrh	r3, [r3, #10]
 8008da6:	461a      	mov	r2, r3
 8008da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008daa:	895b      	ldrh	r3, [r3, #10]
 8008dac:	3b01      	subs	r3, #1
 8008dae:	4013      	ands	r3, r2
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d001      	beq.n	8008db8 <find_volume+0x228>
 8008db4:	230d      	movs	r3, #13
 8008db6:	e12c      	b.n	8009012 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dba:	3330      	adds	r3, #48	; 0x30
 8008dbc:	3311      	adds	r3, #17
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fe fc0c 	bl	80075dc <ld_word>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dce:	891b      	ldrh	r3, [r3, #8]
 8008dd0:	f003 030f 	and.w	r3, r3, #15
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d001      	beq.n	8008dde <find_volume+0x24e>
 8008dda:	230d      	movs	r3, #13
 8008ddc:	e119      	b.n	8009012 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de0:	3330      	adds	r3, #48	; 0x30
 8008de2:	3313      	adds	r3, #19
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7fe fbf9 	bl	80075dc <ld_word>
 8008dea:	4603      	mov	r3, r0
 8008dec:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d106      	bne.n	8008e02 <find_volume+0x272>
 8008df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df6:	3330      	adds	r3, #48	; 0x30
 8008df8:	3320      	adds	r3, #32
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fe fc06 	bl	800760c <ld_dword>
 8008e00:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e04:	3330      	adds	r3, #48	; 0x30
 8008e06:	330e      	adds	r3, #14
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7fe fbe7 	bl	80075dc <ld_word>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008e12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d101      	bne.n	8008e1c <find_volume+0x28c>
 8008e18:	230d      	movs	r3, #13
 8008e1a:	e0fa      	b.n	8009012 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008e1c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e20:	4413      	add	r3, r2
 8008e22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e24:	8912      	ldrh	r2, [r2, #8]
 8008e26:	0912      	lsrs	r2, r2, #4
 8008e28:	b292      	uxth	r2, r2
 8008e2a:	4413      	add	r3, r2
 8008e2c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008e2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d204      	bcs.n	8008e40 <find_volume+0x2b0>
 8008e36:	230d      	movs	r3, #13
 8008e38:	e0eb      	b.n	8009012 <find_volume+0x482>
 8008e3a:	bf00      	nop
 8008e3c:	20001d78 	.word	0x20001d78
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008e40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e48:	8952      	ldrh	r2, [r2, #10]
 8008e4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e4e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d101      	bne.n	8008e5a <find_volume+0x2ca>
 8008e56:	230d      	movs	r3, #13
 8008e58:	e0db      	b.n	8009012 <find_volume+0x482>
		fmt = FS_FAT32;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e62:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d802      	bhi.n	8008e70 <find_volume+0x2e0>
 8008e6a:	2302      	movs	r3, #2
 8008e6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e72:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d802      	bhi.n	8008e80 <find_volume+0x2f0>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e82:	1c9a      	adds	r2, r3, #2
 8008e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e86:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e8c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008e8e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008e90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e92:	441a      	add	r2, r3
 8008e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e96:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008e98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9c:	441a      	add	r2, r3
 8008e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008ea2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ea6:	2b03      	cmp	r3, #3
 8008ea8:	d11e      	bne.n	8008ee8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eac:	3330      	adds	r3, #48	; 0x30
 8008eae:	332a      	adds	r3, #42	; 0x2a
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7fe fb93 	bl	80075dc <ld_word>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d001      	beq.n	8008ec0 <find_volume+0x330>
 8008ebc:	230d      	movs	r3, #13
 8008ebe:	e0a8      	b.n	8009012 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec2:	891b      	ldrh	r3, [r3, #8]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <find_volume+0x33c>
 8008ec8:	230d      	movs	r3, #13
 8008eca:	e0a2      	b.n	8009012 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ece:	3330      	adds	r3, #48	; 0x30
 8008ed0:	332c      	adds	r3, #44	; 0x2c
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fe fb9a 	bl	800760c <ld_dword>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008edc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee0:	695b      	ldr	r3, [r3, #20]
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	647b      	str	r3, [r7, #68]	; 0x44
 8008ee6:	e01f      	b.n	8008f28 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eea:	891b      	ldrh	r3, [r3, #8]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d101      	bne.n	8008ef4 <find_volume+0x364>
 8008ef0:	230d      	movs	r3, #13
 8008ef2:	e08e      	b.n	8009012 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef6:	6a1a      	ldr	r2, [r3, #32]
 8008ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008efa:	441a      	add	r2, r3
 8008efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efe:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008f00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d103      	bne.n	8008f10 <find_volume+0x380>
 8008f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0a:	695b      	ldr	r3, [r3, #20]
 8008f0c:	005b      	lsls	r3, r3, #1
 8008f0e:	e00a      	b.n	8008f26 <find_volume+0x396>
 8008f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f12:	695a      	ldr	r2, [r3, #20]
 8008f14:	4613      	mov	r3, r2
 8008f16:	005b      	lsls	r3, r3, #1
 8008f18:	4413      	add	r3, r2
 8008f1a:	085a      	lsrs	r2, r3, #1
 8008f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1e:	695b      	ldr	r3, [r3, #20]
 8008f20:	f003 0301 	and.w	r3, r3, #1
 8008f24:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008f26:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2a:	699a      	ldr	r2, [r3, #24]
 8008f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f2e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008f32:	0a5b      	lsrs	r3, r3, #9
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d201      	bcs.n	8008f3c <find_volume+0x3ac>
 8008f38:	230d      	movs	r3, #13
 8008f3a:	e06a      	b.n	8009012 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f42:	611a      	str	r2, [r3, #16]
 8008f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f46:	691a      	ldr	r2, [r3, #16]
 8008f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4e:	2280      	movs	r2, #128	; 0x80
 8008f50:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008f52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f56:	2b03      	cmp	r3, #3
 8008f58:	d149      	bne.n	8008fee <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5c:	3330      	adds	r3, #48	; 0x30
 8008f5e:	3330      	adds	r3, #48	; 0x30
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fe fb3b 	bl	80075dc <ld_word>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d140      	bne.n	8008fee <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f6e:	3301      	adds	r3, #1
 8008f70:	4619      	mov	r1, r3
 8008f72:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008f74:	f7fe fde2 	bl	8007b3c <move_window>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d137      	bne.n	8008fee <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f80:	2200      	movs	r2, #0
 8008f82:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f86:	3330      	adds	r3, #48	; 0x30
 8008f88:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7fe fb25 	bl	80075dc <ld_word>
 8008f92:	4603      	mov	r3, r0
 8008f94:	461a      	mov	r2, r3
 8008f96:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d127      	bne.n	8008fee <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa0:	3330      	adds	r3, #48	; 0x30
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7fe fb32 	bl	800760c <ld_dword>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	4a1c      	ldr	r2, [pc, #112]	; (800901c <find_volume+0x48c>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d11e      	bne.n	8008fee <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb2:	3330      	adds	r3, #48	; 0x30
 8008fb4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fe fb27 	bl	800760c <ld_dword>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	4a17      	ldr	r2, [pc, #92]	; (8009020 <find_volume+0x490>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d113      	bne.n	8008fee <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc8:	3330      	adds	r3, #48	; 0x30
 8008fca:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7fe fb1c 	bl	800760c <ld_dword>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fdc:	3330      	adds	r3, #48	; 0x30
 8008fde:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fe fb12 	bl	800760c <ld_dword>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fec:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008ff4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008ff6:	4b0b      	ldr	r3, [pc, #44]	; (8009024 <find_volume+0x494>)
 8008ff8:	881b      	ldrh	r3, [r3, #0]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	4b09      	ldr	r3, [pc, #36]	; (8009024 <find_volume+0x494>)
 8009000:	801a      	strh	r2, [r3, #0]
 8009002:	4b08      	ldr	r3, [pc, #32]	; (8009024 <find_volume+0x494>)
 8009004:	881a      	ldrh	r2, [r3, #0]
 8009006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009008:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800900a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800900c:	f7fe fd2e 	bl	8007a6c <clear_lock>
#endif
	return FR_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3758      	adds	r7, #88	; 0x58
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	41615252 	.word	0x41615252
 8009020:	61417272 	.word	0x61417272
 8009024:	20001d7c 	.word	0x20001d7c

08009028 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009032:	2309      	movs	r3, #9
 8009034:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d01c      	beq.n	8009076 <validate+0x4e>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d018      	beq.n	8009076 <validate+0x4e>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d013      	beq.n	8009076 <validate+0x4e>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	889a      	ldrh	r2, [r3, #4]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	88db      	ldrh	r3, [r3, #6]
 8009058:	429a      	cmp	r2, r3
 800905a:	d10c      	bne.n	8009076 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	785b      	ldrb	r3, [r3, #1]
 8009062:	4618      	mov	r0, r3
 8009064:	f7fe fa1c 	bl	80074a0 <disk_status>
 8009068:	4603      	mov	r3, r0
 800906a:	f003 0301 	and.w	r3, r3, #1
 800906e:	2b00      	cmp	r3, #0
 8009070:	d101      	bne.n	8009076 <validate+0x4e>
			res = FR_OK;
 8009072:	2300      	movs	r3, #0
 8009074:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009076:	7bfb      	ldrb	r3, [r7, #15]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d102      	bne.n	8009082 <validate+0x5a>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	e000      	b.n	8009084 <validate+0x5c>
 8009082:	2300      	movs	r3, #0
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	6013      	str	r3, [r2, #0]
	return res;
 8009088:	7bfb      	ldrb	r3, [r7, #15]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
	...

08009094 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b088      	sub	sp, #32
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	4613      	mov	r3, r2
 80090a0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80090a6:	f107 0310 	add.w	r3, r7, #16
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7ff fcd5 	bl	8008a5a <get_ldnumber>
 80090b0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	da01      	bge.n	80090bc <f_mount+0x28>
 80090b8:	230b      	movs	r3, #11
 80090ba:	e02b      	b.n	8009114 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80090bc:	4a17      	ldr	r2, [pc, #92]	; (800911c <f_mount+0x88>)
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090c4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d005      	beq.n	80090d8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80090cc:	69b8      	ldr	r0, [r7, #24]
 80090ce:	f7fe fccd 	bl	8007a6c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	2200      	movs	r2, #0
 80090d6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d002      	beq.n	80090e4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	490d      	ldr	r1, [pc, #52]	; (800911c <f_mount+0x88>)
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d002      	beq.n	80090fa <f_mount+0x66>
 80090f4:	79fb      	ldrb	r3, [r7, #7]
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d001      	beq.n	80090fe <f_mount+0x6a>
 80090fa:	2300      	movs	r3, #0
 80090fc:	e00a      	b.n	8009114 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80090fe:	f107 010c 	add.w	r1, r7, #12
 8009102:	f107 0308 	add.w	r3, r7, #8
 8009106:	2200      	movs	r2, #0
 8009108:	4618      	mov	r0, r3
 800910a:	f7ff fd41 	bl	8008b90 <find_volume>
 800910e:	4603      	mov	r3, r0
 8009110:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009112:	7dfb      	ldrb	r3, [r7, #23]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3720      	adds	r7, #32
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	20001d78 	.word	0x20001d78

08009120 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b098      	sub	sp, #96	; 0x60
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	4613      	mov	r3, r2
 800912c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d101      	bne.n	8009138 <f_open+0x18>
 8009134:	2309      	movs	r3, #9
 8009136:	e1ad      	b.n	8009494 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009138:	79fb      	ldrb	r3, [r7, #7]
 800913a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800913e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009140:	79fa      	ldrb	r2, [r7, #7]
 8009142:	f107 0110 	add.w	r1, r7, #16
 8009146:	f107 0308 	add.w	r3, r7, #8
 800914a:	4618      	mov	r0, r3
 800914c:	f7ff fd20 	bl	8008b90 <find_volume>
 8009150:	4603      	mov	r3, r0
 8009152:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009156:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800915a:	2b00      	cmp	r3, #0
 800915c:	f040 8191 	bne.w	8009482 <f_open+0x362>
		dj.obj.fs = fs;
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009164:	68ba      	ldr	r2, [r7, #8]
 8009166:	f107 0314 	add.w	r3, r7, #20
 800916a:	4611      	mov	r1, r2
 800916c:	4618      	mov	r0, r3
 800916e:	f7ff fc03 	bl	8008978 <follow_path>
 8009172:	4603      	mov	r3, r0
 8009174:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009178:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800917c:	2b00      	cmp	r3, #0
 800917e:	d11a      	bne.n	80091b6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009180:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009184:	b25b      	sxtb	r3, r3
 8009186:	2b00      	cmp	r3, #0
 8009188:	da03      	bge.n	8009192 <f_open+0x72>
				res = FR_INVALID_NAME;
 800918a:	2306      	movs	r3, #6
 800918c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009190:	e011      	b.n	80091b6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009192:	79fb      	ldrb	r3, [r7, #7]
 8009194:	f023 0301 	bic.w	r3, r3, #1
 8009198:	2b00      	cmp	r3, #0
 800919a:	bf14      	ite	ne
 800919c:	2301      	movne	r3, #1
 800919e:	2300      	moveq	r3, #0
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	461a      	mov	r2, r3
 80091a4:	f107 0314 	add.w	r3, r7, #20
 80091a8:	4611      	mov	r1, r2
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fe fb16 	bl	80077dc <chk_lock>
 80091b0:	4603      	mov	r3, r0
 80091b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80091b6:	79fb      	ldrb	r3, [r7, #7]
 80091b8:	f003 031c 	and.w	r3, r3, #28
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d07f      	beq.n	80092c0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80091c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d017      	beq.n	80091f8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80091c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091cc:	2b04      	cmp	r3, #4
 80091ce:	d10e      	bne.n	80091ee <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80091d0:	f7fe fb60 	bl	8007894 <enq_lock>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d006      	beq.n	80091e8 <f_open+0xc8>
 80091da:	f107 0314 	add.w	r3, r7, #20
 80091de:	4618      	mov	r0, r3
 80091e0:	f7ff faa4 	bl	800872c <dir_register>
 80091e4:	4603      	mov	r3, r0
 80091e6:	e000      	b.n	80091ea <f_open+0xca>
 80091e8:	2312      	movs	r3, #18
 80091ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80091ee:	79fb      	ldrb	r3, [r7, #7]
 80091f0:	f043 0308 	orr.w	r3, r3, #8
 80091f4:	71fb      	strb	r3, [r7, #7]
 80091f6:	e010      	b.n	800921a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80091f8:	7ebb      	ldrb	r3, [r7, #26]
 80091fa:	f003 0311 	and.w	r3, r3, #17
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d003      	beq.n	800920a <f_open+0xea>
					res = FR_DENIED;
 8009202:	2307      	movs	r3, #7
 8009204:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009208:	e007      	b.n	800921a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800920a:	79fb      	ldrb	r3, [r7, #7]
 800920c:	f003 0304 	and.w	r3, r3, #4
 8009210:	2b00      	cmp	r3, #0
 8009212:	d002      	beq.n	800921a <f_open+0xfa>
 8009214:	2308      	movs	r3, #8
 8009216:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800921a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800921e:	2b00      	cmp	r3, #0
 8009220:	d168      	bne.n	80092f4 <f_open+0x1d4>
 8009222:	79fb      	ldrb	r3, [r7, #7]
 8009224:	f003 0308 	and.w	r3, r3, #8
 8009228:	2b00      	cmp	r3, #0
 800922a:	d063      	beq.n	80092f4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800922c:	f7fd fbf8 	bl	8006a20 <get_fattime>
 8009230:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009234:	330e      	adds	r3, #14
 8009236:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009238:	4618      	mov	r0, r3
 800923a:	f7fe fa25 	bl	8007688 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800923e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009240:	3316      	adds	r3, #22
 8009242:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009244:	4618      	mov	r0, r3
 8009246:	f7fe fa1f 	bl	8007688 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800924a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800924c:	330b      	adds	r3, #11
 800924e:	2220      	movs	r2, #32
 8009250:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009256:	4611      	mov	r1, r2
 8009258:	4618      	mov	r0, r3
 800925a:	f7ff f976 	bl	800854a <ld_clust>
 800925e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009264:	2200      	movs	r2, #0
 8009266:	4618      	mov	r0, r3
 8009268:	f7ff f98e 	bl	8008588 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800926c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800926e:	331c      	adds	r3, #28
 8009270:	2100      	movs	r1, #0
 8009272:	4618      	mov	r0, r3
 8009274:	f7fe fa08 	bl	8007688 <st_dword>
					fs->wflag = 1;
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	2201      	movs	r2, #1
 800927c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800927e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009280:	2b00      	cmp	r3, #0
 8009282:	d037      	beq.n	80092f4 <f_open+0x1d4>
						dw = fs->winsect;
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009288:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800928a:	f107 0314 	add.w	r3, r7, #20
 800928e:	2200      	movs	r2, #0
 8009290:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009292:	4618      	mov	r0, r3
 8009294:	f7fe fea1 	bl	8007fda <remove_chain>
 8009298:	4603      	mov	r3, r0
 800929a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800929e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d126      	bne.n	80092f4 <f_open+0x1d4>
							res = move_window(fs, dw);
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fe fc46 	bl	8007b3c <move_window>
 80092b0:	4603      	mov	r3, r0
 80092b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092ba:	3a01      	subs	r2, #1
 80092bc:	60da      	str	r2, [r3, #12]
 80092be:	e019      	b.n	80092f4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80092c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d115      	bne.n	80092f4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80092c8:	7ebb      	ldrb	r3, [r7, #26]
 80092ca:	f003 0310 	and.w	r3, r3, #16
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d003      	beq.n	80092da <f_open+0x1ba>
					res = FR_NO_FILE;
 80092d2:	2304      	movs	r3, #4
 80092d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80092d8:	e00c      	b.n	80092f4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80092da:	79fb      	ldrb	r3, [r7, #7]
 80092dc:	f003 0302 	and.w	r3, r3, #2
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d007      	beq.n	80092f4 <f_open+0x1d4>
 80092e4:	7ebb      	ldrb	r3, [r7, #26]
 80092e6:	f003 0301 	and.w	r3, r3, #1
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d002      	beq.n	80092f4 <f_open+0x1d4>
						res = FR_DENIED;
 80092ee:	2307      	movs	r3, #7
 80092f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80092f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d128      	bne.n	800934e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80092fc:	79fb      	ldrb	r3, [r7, #7]
 80092fe:	f003 0308 	and.w	r3, r3, #8
 8009302:	2b00      	cmp	r3, #0
 8009304:	d003      	beq.n	800930e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009306:	79fb      	ldrb	r3, [r7, #7]
 8009308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800930c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800931c:	79fb      	ldrb	r3, [r7, #7]
 800931e:	f023 0301 	bic.w	r3, r3, #1
 8009322:	2b00      	cmp	r3, #0
 8009324:	bf14      	ite	ne
 8009326:	2301      	movne	r3, #1
 8009328:	2300      	moveq	r3, #0
 800932a:	b2db      	uxtb	r3, r3
 800932c:	461a      	mov	r2, r3
 800932e:	f107 0314 	add.w	r3, r7, #20
 8009332:	4611      	mov	r1, r2
 8009334:	4618      	mov	r0, r3
 8009336:	f7fe facf 	bl	80078d8 <inc_lock>
 800933a:	4602      	mov	r2, r0
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d102      	bne.n	800934e <f_open+0x22e>
 8009348:	2302      	movs	r3, #2
 800934a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800934e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009352:	2b00      	cmp	r3, #0
 8009354:	f040 8095 	bne.w	8009482 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800935c:	4611      	mov	r1, r2
 800935e:	4618      	mov	r0, r3
 8009360:	f7ff f8f3 	bl	800854a <ld_clust>
 8009364:	4602      	mov	r2, r0
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800936a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800936c:	331c      	adds	r3, #28
 800936e:	4618      	mov	r0, r3
 8009370:	f7fe f94c 	bl	800760c <ld_dword>
 8009374:	4602      	mov	r2, r0
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2200      	movs	r2, #0
 800937e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009380:	693a      	ldr	r2, [r7, #16]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	88da      	ldrh	r2, [r3, #6]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	79fa      	ldrb	r2, [r7, #7]
 8009392:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2200      	movs	r2, #0
 8009398:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2200      	movs	r2, #0
 80093a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	3330      	adds	r3, #48	; 0x30
 80093aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093ae:	2100      	movs	r1, #0
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7fe f9b6 	bl	8007722 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80093b6:	79fb      	ldrb	r3, [r7, #7]
 80093b8:	f003 0320 	and.w	r3, r3, #32
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d060      	beq.n	8009482 <f_open+0x362>
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d05c      	beq.n	8009482 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	68da      	ldr	r2, [r3, #12]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	895b      	ldrh	r3, [r3, #10]
 80093d4:	025b      	lsls	r3, r3, #9
 80093d6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	657b      	str	r3, [r7, #84]	; 0x54
 80093e4:	e016      	b.n	8009414 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fe fc61 	bl	8007cb2 <get_fat>
 80093f0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80093f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d802      	bhi.n	80093fe <f_open+0x2de>
 80093f8:	2302      	movs	r3, #2
 80093fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80093fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009404:	d102      	bne.n	800940c <f_open+0x2ec>
 8009406:	2301      	movs	r3, #1
 8009408:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800940c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800940e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	657b      	str	r3, [r7, #84]	; 0x54
 8009414:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009418:	2b00      	cmp	r3, #0
 800941a:	d103      	bne.n	8009424 <f_open+0x304>
 800941c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800941e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009420:	429a      	cmp	r2, r3
 8009422:	d8e0      	bhi.n	80093e6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009428:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800942a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800942e:	2b00      	cmp	r3, #0
 8009430:	d127      	bne.n	8009482 <f_open+0x362>
 8009432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009438:	2b00      	cmp	r3, #0
 800943a:	d022      	beq.n	8009482 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009440:	4618      	mov	r0, r3
 8009442:	f7fe fc17 	bl	8007c74 <clust2sect>
 8009446:	6478      	str	r0, [r7, #68]	; 0x44
 8009448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800944a:	2b00      	cmp	r3, #0
 800944c:	d103      	bne.n	8009456 <f_open+0x336>
						res = FR_INT_ERR;
 800944e:	2302      	movs	r3, #2
 8009450:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009454:	e015      	b.n	8009482 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009458:	0a5a      	lsrs	r2, r3, #9
 800945a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800945c:	441a      	add	r2, r3
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	7858      	ldrb	r0, [r3, #1]
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6a1a      	ldr	r2, [r3, #32]
 8009470:	2301      	movs	r3, #1
 8009472:	f7fe f855 	bl	8007520 <disk_read>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d002      	beq.n	8009482 <f_open+0x362>
 800947c:	2301      	movs	r3, #1
 800947e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009482:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009486:	2b00      	cmp	r3, #0
 8009488:	d002      	beq.n	8009490 <f_open+0x370>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009490:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009494:	4618      	mov	r0, r3
 8009496:	3760      	adds	r7, #96	; 0x60
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b08e      	sub	sp, #56	; 0x38
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
 80094a8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	2200      	movs	r2, #0
 80094b2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f107 0214 	add.w	r2, r7, #20
 80094ba:	4611      	mov	r1, r2
 80094bc:	4618      	mov	r0, r3
 80094be:	f7ff fdb3 	bl	8009028 <validate>
 80094c2:	4603      	mov	r3, r0
 80094c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80094c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d107      	bne.n	80094e0 <f_read+0x44>
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	7d5b      	ldrb	r3, [r3, #21]
 80094d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80094d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d002      	beq.n	80094e6 <f_read+0x4a>
 80094e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80094e4:	e115      	b.n	8009712 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	7d1b      	ldrb	r3, [r3, #20]
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d101      	bne.n	80094f6 <f_read+0x5a>
 80094f2:	2307      	movs	r3, #7
 80094f4:	e10d      	b.n	8009712 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	68da      	ldr	r2, [r3, #12]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	699b      	ldr	r3, [r3, #24]
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	6a3b      	ldr	r3, [r7, #32]
 8009506:	429a      	cmp	r2, r3
 8009508:	f240 80fe 	bls.w	8009708 <f_read+0x26c>
 800950c:	6a3b      	ldr	r3, [r7, #32]
 800950e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009510:	e0fa      	b.n	8009708 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	699b      	ldr	r3, [r3, #24]
 8009516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800951a:	2b00      	cmp	r3, #0
 800951c:	f040 80c6 	bne.w	80096ac <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	699b      	ldr	r3, [r3, #24]
 8009524:	0a5b      	lsrs	r3, r3, #9
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	8952      	ldrh	r2, [r2, #10]
 800952a:	3a01      	subs	r2, #1
 800952c:	4013      	ands	r3, r2
 800952e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d12f      	bne.n	8009596 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d103      	bne.n	8009546 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	633b      	str	r3, [r7, #48]	; 0x30
 8009544:	e013      	b.n	800956e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800954a:	2b00      	cmp	r3, #0
 800954c:	d007      	beq.n	800955e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	4619      	mov	r1, r3
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f7fe fe3d 	bl	80081d4 <clmt_clust>
 800955a:	6338      	str	r0, [r7, #48]	; 0x30
 800955c:	e007      	b.n	800956e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800955e:	68fa      	ldr	r2, [r7, #12]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	69db      	ldr	r3, [r3, #28]
 8009564:	4619      	mov	r1, r3
 8009566:	4610      	mov	r0, r2
 8009568:	f7fe fba3 	bl	8007cb2 <get_fat>
 800956c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800956e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009570:	2b01      	cmp	r3, #1
 8009572:	d804      	bhi.n	800957e <f_read+0xe2>
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2202      	movs	r2, #2
 8009578:	755a      	strb	r2, [r3, #21]
 800957a:	2302      	movs	r3, #2
 800957c:	e0c9      	b.n	8009712 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800957e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009584:	d104      	bne.n	8009590 <f_read+0xf4>
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2201      	movs	r2, #1
 800958a:	755a      	strb	r2, [r3, #21]
 800958c:	2301      	movs	r3, #1
 800958e:	e0c0      	b.n	8009712 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009594:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009596:	697a      	ldr	r2, [r7, #20]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	69db      	ldr	r3, [r3, #28]
 800959c:	4619      	mov	r1, r3
 800959e:	4610      	mov	r0, r2
 80095a0:	f7fe fb68 	bl	8007c74 <clust2sect>
 80095a4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d104      	bne.n	80095b6 <f_read+0x11a>
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2202      	movs	r2, #2
 80095b0:	755a      	strb	r2, [r3, #21]
 80095b2:	2302      	movs	r3, #2
 80095b4:	e0ad      	b.n	8009712 <f_read+0x276>
			sect += csect;
 80095b6:	69ba      	ldr	r2, [r7, #24]
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	4413      	add	r3, r2
 80095bc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	0a5b      	lsrs	r3, r3, #9
 80095c2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80095c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d039      	beq.n	800963e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80095ca:	69fa      	ldr	r2, [r7, #28]
 80095cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ce:	4413      	add	r3, r2
 80095d0:	697a      	ldr	r2, [r7, #20]
 80095d2:	8952      	ldrh	r2, [r2, #10]
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d905      	bls.n	80095e4 <f_read+0x148>
					cc = fs->csize - csect;
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	895b      	ldrh	r3, [r3, #10]
 80095dc:	461a      	mov	r2, r3
 80095de:	69fb      	ldr	r3, [r7, #28]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	7858      	ldrb	r0, [r3, #1]
 80095e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ea:	69ba      	ldr	r2, [r7, #24]
 80095ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80095ee:	f7fd ff97 	bl	8007520 <disk_read>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d004      	beq.n	8009602 <f_read+0x166>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2201      	movs	r2, #1
 80095fc:	755a      	strb	r2, [r3, #21]
 80095fe:	2301      	movs	r3, #1
 8009600:	e087      	b.n	8009712 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	7d1b      	ldrb	r3, [r3, #20]
 8009606:	b25b      	sxtb	r3, r3
 8009608:	2b00      	cmp	r3, #0
 800960a:	da14      	bge.n	8009636 <f_read+0x19a>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6a1a      	ldr	r2, [r3, #32]
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	1ad3      	subs	r3, r2, r3
 8009614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009616:	429a      	cmp	r2, r3
 8009618:	d90d      	bls.n	8009636 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6a1a      	ldr	r2, [r3, #32]
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	025b      	lsls	r3, r3, #9
 8009624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009626:	18d0      	adds	r0, r2, r3
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	3330      	adds	r3, #48	; 0x30
 800962c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009630:	4619      	mov	r1, r3
 8009632:	f7fe f855 	bl	80076e0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009638:	025b      	lsls	r3, r3, #9
 800963a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800963c:	e050      	b.n	80096e0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6a1b      	ldr	r3, [r3, #32]
 8009642:	69ba      	ldr	r2, [r7, #24]
 8009644:	429a      	cmp	r2, r3
 8009646:	d02e      	beq.n	80096a6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	7d1b      	ldrb	r3, [r3, #20]
 800964c:	b25b      	sxtb	r3, r3
 800964e:	2b00      	cmp	r3, #0
 8009650:	da18      	bge.n	8009684 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	7858      	ldrb	r0, [r3, #1]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6a1a      	ldr	r2, [r3, #32]
 8009660:	2301      	movs	r3, #1
 8009662:	f7fd ff7d 	bl	8007560 <disk_write>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d004      	beq.n	8009676 <f_read+0x1da>
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2201      	movs	r2, #1
 8009670:	755a      	strb	r2, [r3, #21]
 8009672:	2301      	movs	r3, #1
 8009674:	e04d      	b.n	8009712 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	7d1b      	ldrb	r3, [r3, #20]
 800967a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800967e:	b2da      	uxtb	r2, r3
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	7858      	ldrb	r0, [r3, #1]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800968e:	2301      	movs	r3, #1
 8009690:	69ba      	ldr	r2, [r7, #24]
 8009692:	f7fd ff45 	bl	8007520 <disk_read>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d004      	beq.n	80096a6 <f_read+0x20a>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2201      	movs	r2, #1
 80096a0:	755a      	strb	r2, [r3, #21]
 80096a2:	2301      	movs	r3, #1
 80096a4:	e035      	b.n	8009712 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	69ba      	ldr	r2, [r7, #24]
 80096aa:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	699b      	ldr	r3, [r3, #24]
 80096b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096b4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80096b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80096ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d901      	bls.n	80096c6 <f_read+0x22a>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096d4:	4413      	add	r3, r2
 80096d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096d8:	4619      	mov	r1, r3
 80096da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80096dc:	f7fe f800 	bl	80076e0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80096e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e4:	4413      	add	r3, r2
 80096e6:	627b      	str	r3, [r7, #36]	; 0x24
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	699a      	ldr	r2, [r3, #24]
 80096ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ee:	441a      	add	r2, r3
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	619a      	str	r2, [r3, #24]
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fa:	441a      	add	r2, r3
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	601a      	str	r2, [r3, #0]
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009704:	1ad3      	subs	r3, r2, r3
 8009706:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	f47f af01 	bne.w	8009512 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009710:	2300      	movs	r3, #0
}
 8009712:	4618      	mov	r0, r3
 8009714:	3738      	adds	r7, #56	; 0x38
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b086      	sub	sp, #24
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f107 0208 	add.w	r2, r7, #8
 8009728:	4611      	mov	r1, r2
 800972a:	4618      	mov	r0, r3
 800972c:	f7ff fc7c 	bl	8009028 <validate>
 8009730:	4603      	mov	r3, r0
 8009732:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009734:	7dfb      	ldrb	r3, [r7, #23]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d168      	bne.n	800980c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	7d1b      	ldrb	r3, [r3, #20]
 800973e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009742:	2b00      	cmp	r3, #0
 8009744:	d062      	beq.n	800980c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	7d1b      	ldrb	r3, [r3, #20]
 800974a:	b25b      	sxtb	r3, r3
 800974c:	2b00      	cmp	r3, #0
 800974e:	da15      	bge.n	800977c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	7858      	ldrb	r0, [r3, #1]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a1a      	ldr	r2, [r3, #32]
 800975e:	2301      	movs	r3, #1
 8009760:	f7fd fefe 	bl	8007560 <disk_write>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <f_sync+0x54>
 800976a:	2301      	movs	r3, #1
 800976c:	e04f      	b.n	800980e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	7d1b      	ldrb	r3, [r3, #20]
 8009772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009776:	b2da      	uxtb	r2, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800977c:	f7fd f950 	bl	8006a20 <get_fattime>
 8009780:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009788:	4619      	mov	r1, r3
 800978a:	4610      	mov	r0, r2
 800978c:	f7fe f9d6 	bl	8007b3c <move_window>
 8009790:	4603      	mov	r3, r0
 8009792:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009794:	7dfb      	ldrb	r3, [r7, #23]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d138      	bne.n	800980c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800979e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	330b      	adds	r3, #11
 80097a4:	781a      	ldrb	r2, [r3, #0]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	330b      	adds	r3, #11
 80097aa:	f042 0220 	orr.w	r2, r2, #32
 80097ae:	b2d2      	uxtb	r2, r2
 80097b0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6818      	ldr	r0, [r3, #0]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	461a      	mov	r2, r3
 80097bc:	68f9      	ldr	r1, [r7, #12]
 80097be:	f7fe fee3 	bl	8008588 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f103 021c 	add.w	r2, r3, #28
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	4619      	mov	r1, r3
 80097ce:	4610      	mov	r0, r2
 80097d0:	f7fd ff5a 	bl	8007688 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	3316      	adds	r3, #22
 80097d8:	6939      	ldr	r1, [r7, #16]
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fd ff54 	bl	8007688 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	3312      	adds	r3, #18
 80097e4:	2100      	movs	r1, #0
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7fd ff33 	bl	8007652 <st_word>
					fs->wflag = 1;
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	2201      	movs	r2, #1
 80097f0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7fe f9cf 	bl	8007b98 <sync_fs>
 80097fa:	4603      	mov	r3, r0
 80097fc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	7d1b      	ldrb	r3, [r3, #20]
 8009802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009806:	b2da      	uxtb	r2, r3
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800980c:	7dfb      	ldrb	r3, [r7, #23]
}
 800980e:	4618      	mov	r0, r3
 8009810:	3718      	adds	r7, #24
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b084      	sub	sp, #16
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f7ff ff7b 	bl	800971a <f_sync>
 8009824:	4603      	mov	r3, r0
 8009826:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009828:	7bfb      	ldrb	r3, [r7, #15]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d118      	bne.n	8009860 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f107 0208 	add.w	r2, r7, #8
 8009834:	4611      	mov	r1, r2
 8009836:	4618      	mov	r0, r3
 8009838:	f7ff fbf6 	bl	8009028 <validate>
 800983c:	4603      	mov	r3, r0
 800983e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009840:	7bfb      	ldrb	r3, [r7, #15]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d10c      	bne.n	8009860 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	691b      	ldr	r3, [r3, #16]
 800984a:	4618      	mov	r0, r3
 800984c:	f7fe f8d2 	bl	80079f4 <dec_lock>
 8009850:	4603      	mov	r3, r0
 8009852:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009854:	7bfb      	ldrb	r3, [r7, #15]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d102      	bne.n	8009860 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009860:	7bfb      	ldrb	r3, [r7, #15]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b090      	sub	sp, #64	; 0x40
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
 8009872:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f107 0208 	add.w	r2, r7, #8
 800987a:	4611      	mov	r1, r2
 800987c:	4618      	mov	r0, r3
 800987e:	f7ff fbd3 	bl	8009028 <validate>
 8009882:	4603      	mov	r3, r0
 8009884:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009888:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800988c:	2b00      	cmp	r3, #0
 800988e:	d103      	bne.n	8009898 <f_lseek+0x2e>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	7d5b      	ldrb	r3, [r3, #21]
 8009894:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009898:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800989c:	2b00      	cmp	r3, #0
 800989e:	d002      	beq.n	80098a6 <f_lseek+0x3c>
 80098a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80098a4:	e1e6      	b.n	8009c74 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	f000 80d1 	beq.w	8009a52 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098b6:	d15a      	bne.n	800996e <f_lseek+0x104>
			tbl = fp->cltbl;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098bc:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80098be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c0:	1d1a      	adds	r2, r3, #4
 80098c2:	627a      	str	r2, [r7, #36]	; 0x24
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	617b      	str	r3, [r7, #20]
 80098c8:	2302      	movs	r3, #2
 80098ca:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80098d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d03a      	beq.n	800994e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80098d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098da:	613b      	str	r3, [r7, #16]
 80098dc:	2300      	movs	r3, #0
 80098de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e2:	3302      	adds	r3, #2
 80098e4:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80098e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e8:	60fb      	str	r3, [r7, #12]
 80098ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ec:	3301      	adds	r3, #1
 80098ee:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7fe f9dc 	bl	8007cb2 <get_fat>
 80098fa:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80098fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d804      	bhi.n	800990c <f_lseek+0xa2>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2202      	movs	r2, #2
 8009906:	755a      	strb	r2, [r3, #21]
 8009908:	2302      	movs	r3, #2
 800990a:	e1b3      	b.n	8009c74 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800990c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009912:	d104      	bne.n	800991e <f_lseek+0xb4>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	755a      	strb	r2, [r3, #21]
 800991a:	2301      	movs	r3, #1
 800991c:	e1aa      	b.n	8009c74 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3301      	adds	r3, #1
 8009922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009924:	429a      	cmp	r2, r3
 8009926:	d0de      	beq.n	80098e6 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	429a      	cmp	r2, r3
 800992e:	d809      	bhi.n	8009944 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009932:	1d1a      	adds	r2, r3, #4
 8009934:	627a      	str	r2, [r7, #36]	; 0x24
 8009936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009938:	601a      	str	r2, [r3, #0]
 800993a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993c:	1d1a      	adds	r2, r3, #4
 800993e:	627a      	str	r2, [r7, #36]	; 0x24
 8009940:	693a      	ldr	r2, [r7, #16]
 8009942:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	695b      	ldr	r3, [r3, #20]
 8009948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800994a:	429a      	cmp	r2, r3
 800994c:	d3c4      	bcc.n	80098d8 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009952:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009954:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	429a      	cmp	r2, r3
 800995c:	d803      	bhi.n	8009966 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800995e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009960:	2200      	movs	r2, #0
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	e184      	b.n	8009c70 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009966:	2311      	movs	r3, #17
 8009968:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800996c:	e180      	b.n	8009c70 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	683a      	ldr	r2, [r7, #0]
 8009974:	429a      	cmp	r2, r3
 8009976:	d902      	bls.n	800997e <f_lseek+0x114>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	683a      	ldr	r2, [r7, #0]
 8009982:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	f000 8172 	beq.w	8009c70 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	3b01      	subs	r3, #1
 8009990:	4619      	mov	r1, r3
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f7fe fc1e 	bl	80081d4 <clmt_clust>
 8009998:	4602      	mov	r2, r0
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800999e:	68ba      	ldr	r2, [r7, #8]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	69db      	ldr	r3, [r3, #28]
 80099a4:	4619      	mov	r1, r3
 80099a6:	4610      	mov	r0, r2
 80099a8:	f7fe f964 	bl	8007c74 <clust2sect>
 80099ac:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d104      	bne.n	80099be <f_lseek+0x154>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2202      	movs	r2, #2
 80099b8:	755a      	strb	r2, [r3, #21]
 80099ba:	2302      	movs	r3, #2
 80099bc:	e15a      	b.n	8009c74 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	3b01      	subs	r3, #1
 80099c2:	0a5b      	lsrs	r3, r3, #9
 80099c4:	68ba      	ldr	r2, [r7, #8]
 80099c6:	8952      	ldrh	r2, [r2, #10]
 80099c8:	3a01      	subs	r2, #1
 80099ca:	4013      	ands	r3, r2
 80099cc:	69ba      	ldr	r2, [r7, #24]
 80099ce:	4413      	add	r3, r2
 80099d0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	699b      	ldr	r3, [r3, #24]
 80099d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099da:	2b00      	cmp	r3, #0
 80099dc:	f000 8148 	beq.w	8009c70 <f_lseek+0x406>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6a1b      	ldr	r3, [r3, #32]
 80099e4:	69ba      	ldr	r2, [r7, #24]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	f000 8142 	beq.w	8009c70 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	7d1b      	ldrb	r3, [r3, #20]
 80099f0:	b25b      	sxtb	r3, r3
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	da18      	bge.n	8009a28 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	7858      	ldrb	r0, [r3, #1]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a1a      	ldr	r2, [r3, #32]
 8009a04:	2301      	movs	r3, #1
 8009a06:	f7fd fdab 	bl	8007560 <disk_write>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d004      	beq.n	8009a1a <f_lseek+0x1b0>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2201      	movs	r2, #1
 8009a14:	755a      	strb	r2, [r3, #21]
 8009a16:	2301      	movs	r3, #1
 8009a18:	e12c      	b.n	8009c74 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	7d1b      	ldrb	r3, [r3, #20]
 8009a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a22:	b2da      	uxtb	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	7858      	ldrb	r0, [r3, #1]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009a32:	2301      	movs	r3, #1
 8009a34:	69ba      	ldr	r2, [r7, #24]
 8009a36:	f7fd fd73 	bl	8007520 <disk_read>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d004      	beq.n	8009a4a <f_lseek+0x1e0>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2201      	movs	r2, #1
 8009a44:	755a      	strb	r2, [r3, #21]
 8009a46:	2301      	movs	r3, #1
 8009a48:	e114      	b.n	8009c74 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	69ba      	ldr	r2, [r7, #24]
 8009a4e:	621a      	str	r2, [r3, #32]
 8009a50:	e10e      	b.n	8009c70 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	683a      	ldr	r2, [r7, #0]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d908      	bls.n	8009a6e <f_lseek+0x204>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	7d1b      	ldrb	r3, [r3, #20]
 8009a60:	f003 0302 	and.w	r3, r3, #2
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d102      	bne.n	8009a6e <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	699b      	ldr	r3, [r3, #24]
 8009a72:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009a74:	2300      	movs	r3, #0
 8009a76:	637b      	str	r3, [r7, #52]	; 0x34
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a7c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f000 80a7 	beq.w	8009bd4 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	895b      	ldrh	r3, [r3, #10]
 8009a8a:	025b      	lsls	r3, r3, #9
 8009a8c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009a8e:	6a3b      	ldr	r3, [r7, #32]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d01b      	beq.n	8009acc <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	1e5a      	subs	r2, r3, #1
 8009a98:	69fb      	ldr	r3, [r7, #28]
 8009a9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8009a9e:	6a3b      	ldr	r3, [r7, #32]
 8009aa0:	1e59      	subs	r1, r3, #1
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d30f      	bcc.n	8009acc <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009aac:	6a3b      	ldr	r3, [r7, #32]
 8009aae:	1e5a      	subs	r2, r3, #1
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	425b      	negs	r3, r3
 8009ab4:	401a      	ands	r2, r3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	699b      	ldr	r3, [r3, #24]
 8009abe:	683a      	ldr	r2, [r7, #0]
 8009ac0:	1ad3      	subs	r3, r2, r3
 8009ac2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	69db      	ldr	r3, [r3, #28]
 8009ac8:	63bb      	str	r3, [r7, #56]	; 0x38
 8009aca:	e022      	b.n	8009b12 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d119      	bne.n	8009b0c <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2100      	movs	r1, #0
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7fe fae1 	bl	80080a4 <create_chain>
 8009ae2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d104      	bne.n	8009af4 <f_lseek+0x28a>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2202      	movs	r2, #2
 8009aee:	755a      	strb	r2, [r3, #21]
 8009af0:	2302      	movs	r3, #2
 8009af2:	e0bf      	b.n	8009c74 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009afa:	d104      	bne.n	8009b06 <f_lseek+0x29c>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	755a      	strb	r2, [r3, #21]
 8009b02:	2301      	movs	r3, #1
 8009b04:	e0b6      	b.n	8009c74 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b0a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b10:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8009b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d05d      	beq.n	8009bd4 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8009b18:	e03a      	b.n	8009b90 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8009b1a:	683a      	ldr	r2, [r7, #0]
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	1ad3      	subs	r3, r2, r3
 8009b20:	603b      	str	r3, [r7, #0]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	699a      	ldr	r2, [r3, #24]
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	441a      	add	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	7d1b      	ldrb	r3, [r3, #20]
 8009b32:	f003 0302 	and.w	r3, r3, #2
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00b      	beq.n	8009b52 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7fe fab0 	bl	80080a4 <create_chain>
 8009b44:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8009b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d108      	bne.n	8009b5e <f_lseek+0x2f4>
							ofs = 0; break;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	603b      	str	r3, [r7, #0]
 8009b50:	e022      	b.n	8009b98 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fe f8ab 	bl	8007cb2 <get_fat>
 8009b5c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b64:	d104      	bne.n	8009b70 <f_lseek+0x306>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	755a      	strb	r2, [r3, #21]
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	e081      	b.n	8009c74 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8009b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d904      	bls.n	8009b80 <f_lseek+0x316>
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	695b      	ldr	r3, [r3, #20]
 8009b7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d304      	bcc.n	8009b8a <f_lseek+0x320>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2202      	movs	r2, #2
 8009b84:	755a      	strb	r2, [r3, #21]
 8009b86:	2302      	movs	r3, #2
 8009b88:	e074      	b.n	8009c74 <f_lseek+0x40a>
					fp->clust = clst;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b8e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8009b90:	683a      	ldr	r2, [r7, #0]
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d8c0      	bhi.n	8009b1a <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	699a      	ldr	r2, [r3, #24]
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	441a      	add	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d012      	beq.n	8009bd4 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7fe f85e 	bl	8007c74 <clust2sect>
 8009bb8:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d104      	bne.n	8009bca <f_lseek+0x360>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2202      	movs	r2, #2
 8009bc4:	755a      	strb	r2, [r3, #21]
 8009bc6:	2302      	movs	r3, #2
 8009bc8:	e054      	b.n	8009c74 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	0a5b      	lsrs	r3, r3, #9
 8009bce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bd0:	4413      	add	r3, r2
 8009bd2:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	699a      	ldr	r2, [r3, #24]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d90a      	bls.n	8009bf6 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	699a      	ldr	r2, [r3, #24]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	7d1b      	ldrb	r3, [r3, #20]
 8009bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bf0:	b2da      	uxtb	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	699b      	ldr	r3, [r3, #24]
 8009bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d036      	beq.n	8009c70 <f_lseek+0x406>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6a1b      	ldr	r3, [r3, #32]
 8009c06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d031      	beq.n	8009c70 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	7d1b      	ldrb	r3, [r3, #20]
 8009c10:	b25b      	sxtb	r3, r3
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	da18      	bge.n	8009c48 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	7858      	ldrb	r0, [r3, #1]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a1a      	ldr	r2, [r3, #32]
 8009c24:	2301      	movs	r3, #1
 8009c26:	f7fd fc9b 	bl	8007560 <disk_write>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d004      	beq.n	8009c3a <f_lseek+0x3d0>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	755a      	strb	r2, [r3, #21]
 8009c36:	2301      	movs	r3, #1
 8009c38:	e01c      	b.n	8009c74 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	7d1b      	ldrb	r3, [r3, #20]
 8009c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c42:	b2da      	uxtb	r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	7858      	ldrb	r0, [r3, #1]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c52:	2301      	movs	r3, #1
 8009c54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c56:	f7fd fc63 	bl	8007520 <disk_read>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d004      	beq.n	8009c6a <f_lseek+0x400>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	755a      	strb	r2, [r3, #21]
 8009c66:	2301      	movs	r3, #1
 8009c68:	e004      	b.n	8009c74 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c6e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009c70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3740      	adds	r7, #64	; 0x40
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b086      	sub	sp, #24
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d101      	bne.n	8009c90 <f_opendir+0x14>
 8009c8c:	2309      	movs	r3, #9
 8009c8e:	e064      	b.n	8009d5a <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8009c94:	f107 010c 	add.w	r1, r7, #12
 8009c98:	463b      	mov	r3, r7
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7fe ff77 	bl	8008b90 <find_volume>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009ca6:	7dfb      	ldrb	r3, [r7, #23]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d14f      	bne.n	8009d4c <f_opendir+0xd0>
		obj->fs = fs;
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f7fe fe5e 	bl	8008978 <follow_path>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8009cc0:	7dfb      	ldrb	r3, [r7, #23]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d13d      	bne.n	8009d42 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009ccc:	b25b      	sxtb	r3, r3
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	db12      	blt.n	8009cf8 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	799b      	ldrb	r3, [r3, #6]
 8009cd6:	f003 0310 	and.w	r3, r3, #16
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00a      	beq.n	8009cf4 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6a1b      	ldr	r3, [r3, #32]
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	4610      	mov	r0, r2
 8009ce8:	f7fe fc2f 	bl	800854a <ld_clust>
 8009cec:	4602      	mov	r2, r0
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	609a      	str	r2, [r3, #8]
 8009cf2:	e001      	b.n	8009cf8 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8009cf4:	2305      	movs	r3, #5
 8009cf6:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8009cf8:	7dfb      	ldrb	r3, [r7, #23]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d121      	bne.n	8009d42 <f_opendir+0xc6>
				obj->id = fs->id;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	88da      	ldrh	r2, [r3, #6]
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8009d06:	2100      	movs	r1, #0
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f7fe fa97 	bl	800823c <dir_sdi>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8009d12:	7dfb      	ldrb	r3, [r7, #23]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d114      	bne.n	8009d42 <f_opendir+0xc6>
					if (obj->sclust) {
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d00d      	beq.n	8009d3c <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8009d20:	2100      	movs	r1, #0
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f7fd fdd8 	bl	80078d8 <inc_lock>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	691b      	ldr	r3, [r3, #16]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d105      	bne.n	8009d42 <f_opendir+0xc6>
 8009d36:	2312      	movs	r3, #18
 8009d38:	75fb      	strb	r3, [r7, #23]
 8009d3a:	e002      	b.n	8009d42 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8009d42:	7dfb      	ldrb	r3, [r7, #23]
 8009d44:	2b04      	cmp	r3, #4
 8009d46:	d101      	bne.n	8009d4c <f_opendir+0xd0>
 8009d48:	2305      	movs	r3, #5
 8009d4a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8009d4c:	7dfb      	ldrb	r3, [r7, #23]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d002      	beq.n	8009d58 <f_opendir+0xdc>
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	2200      	movs	r2, #0
 8009d56:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3718      	adds	r7, #24
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b084      	sub	sp, #16
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f107 0208 	add.w	r2, r7, #8
 8009d70:	4611      	mov	r1, r2
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7ff f958 	bl	8009028 <validate>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009d7c:	7bfb      	ldrb	r3, [r7, #15]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d110      	bne.n	8009da4 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	691b      	ldr	r3, [r3, #16]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d006      	beq.n	8009d98 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	691b      	ldr	r3, [r3, #16]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7fd fe30 	bl	80079f4 <dec_lock>
 8009d94:	4603      	mov	r3, r0
 8009d96:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8009d98:	7bfb      	ldrb	r3, [r7, #15]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d102      	bne.n	8009da4 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8009da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b084      	sub	sp, #16
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f107 0208 	add.w	r2, r7, #8
 8009dbe:	4611      	mov	r1, r2
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7ff f931 	bl	8009028 <validate>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009dca:	7bfb      	ldrb	r3, [r7, #15]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d126      	bne.n	8009e1e <f_readdir+0x70>
		if (!fno) {
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d106      	bne.n	8009de4 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f7fe fa2f 	bl	800823c <dir_sdi>
 8009dde:	4603      	mov	r3, r0
 8009de0:	73fb      	strb	r3, [r7, #15]
 8009de2:	e01c      	b.n	8009e1e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8009de4:	2100      	movs	r1, #0
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f7fe fbee 	bl	80085c8 <dir_read>
 8009dec:	4603      	mov	r3, r0
 8009dee:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8009df0:	7bfb      	ldrb	r3, [r7, #15]
 8009df2:	2b04      	cmp	r3, #4
 8009df4:	d101      	bne.n	8009dfa <f_readdir+0x4c>
 8009df6:	2300      	movs	r3, #0
 8009df8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8009dfa:	7bfb      	ldrb	r3, [r7, #15]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d10e      	bne.n	8009e1e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8009e00:	6839      	ldr	r1, [r7, #0]
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7fe fcc4 	bl	8008790 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8009e08:	2100      	movs	r1, #0
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f7fe fa91 	bl	8008332 <dir_next>
 8009e10:	4603      	mov	r3, r0
 8009e12:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
 8009e16:	2b04      	cmp	r3, #4
 8009e18:	d101      	bne.n	8009e1e <f_readdir+0x70>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8009e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b092      	sub	sp, #72	; 0x48
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8009e34:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009e38:	f107 030c 	add.w	r3, r7, #12
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7fe fea6 	bl	8008b90 <find_volume>
 8009e44:	4603      	mov	r3, r0
 8009e46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8009e4a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	f040 8099 	bne.w	8009f86 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8009e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5c:	691a      	ldr	r2, [r3, #16]
 8009e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e60:	695b      	ldr	r3, [r3, #20]
 8009e62:	3b02      	subs	r3, #2
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d804      	bhi.n	8009e72 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6a:	691a      	ldr	r2, [r3, #16]
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	601a      	str	r2, [r3, #0]
 8009e70:	e089      	b.n	8009f86 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009e72:	2300      	movs	r3, #0
 8009e74:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d128      	bne.n	8009ed0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8009e7e:	2302      	movs	r3, #2
 8009e80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e84:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8009e86:	f107 0314 	add.w	r3, r7, #20
 8009e8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7fd ff10 	bl	8007cb2 <get_fat>
 8009e92:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e9a:	d103      	bne.n	8009ea4 <f_getfree+0x7c>
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009ea2:	e063      	b.n	8009f6c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d103      	bne.n	8009eb2 <f_getfree+0x8a>
 8009eaa:	2302      	movs	r3, #2
 8009eac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009eb0:	e05c      	b.n	8009f6c <f_getfree+0x144>
					if (stat == 0) nfree++;
 8009eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d102      	bne.n	8009ebe <f_getfree+0x96>
 8009eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eba:	3301      	adds	r3, #1
 8009ebc:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8009ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec6:	695b      	ldr	r3, [r3, #20]
 8009ec8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d3db      	bcc.n	8009e86 <f_getfree+0x5e>
 8009ece:	e04d      	b.n	8009f6c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8009ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed2:	695b      	ldr	r3, [r3, #20]
 8009ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8009edc:	2300      	movs	r3, #0
 8009ede:	637b      	str	r3, [r7, #52]	; 0x34
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8009ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d113      	bne.n	8009f12 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009eea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eee:	1c5a      	adds	r2, r3, #1
 8009ef0:	63ba      	str	r2, [r7, #56]	; 0x38
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	f7fd fe22 	bl	8007b3c <move_window>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8009efe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d131      	bne.n	8009f6a <f_getfree+0x142>
							p = fs->win;
 8009f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f08:	3330      	adds	r3, #48	; 0x30
 8009f0a:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8009f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f10:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d10f      	bne.n	8009f3a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009f1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f1c:	f7fd fb5e 	bl	80075dc <ld_word>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d102      	bne.n	8009f2c <f_getfree+0x104>
 8009f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f28:	3301      	adds	r3, #1
 8009f2a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8009f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2e:	3302      	adds	r3, #2
 8009f30:	633b      	str	r3, [r7, #48]	; 0x30
 8009f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f34:	3b02      	subs	r3, #2
 8009f36:	637b      	str	r3, [r7, #52]	; 0x34
 8009f38:	e010      	b.n	8009f5c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009f3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f3c:	f7fd fb66 	bl	800760c <ld_dword>
 8009f40:	4603      	mov	r3, r0
 8009f42:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d102      	bne.n	8009f50 <f_getfree+0x128>
 8009f4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8009f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f52:	3304      	adds	r3, #4
 8009f54:	633b      	str	r3, [r7, #48]	; 0x30
 8009f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f58:	3b04      	subs	r3, #4
 8009f5a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8009f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d1bd      	bne.n	8009ee4 <f_getfree+0xbc>
 8009f68:	e000      	b.n	8009f6c <f_getfree+0x144>
							if (res != FR_OK) break;
 8009f6a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f70:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f76:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7a:	791a      	ldrb	r2, [r3, #4]
 8009f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7e:	f042 0201 	orr.w	r2, r2, #1
 8009f82:	b2d2      	uxtb	r2, r2
 8009f84:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009f86:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3748      	adds	r7, #72	; 0x48
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
	...

08009f94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b087      	sub	sp, #28
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009faa:	4b1f      	ldr	r3, [pc, #124]	; (800a028 <FATFS_LinkDriverEx+0x94>)
 8009fac:	7a5b      	ldrb	r3, [r3, #9]
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d131      	bne.n	800a018 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009fb4:	4b1c      	ldr	r3, [pc, #112]	; (800a028 <FATFS_LinkDriverEx+0x94>)
 8009fb6:	7a5b      	ldrb	r3, [r3, #9]
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	461a      	mov	r2, r3
 8009fbc:	4b1a      	ldr	r3, [pc, #104]	; (800a028 <FATFS_LinkDriverEx+0x94>)
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009fc2:	4b19      	ldr	r3, [pc, #100]	; (800a028 <FATFS_LinkDriverEx+0x94>)
 8009fc4:	7a5b      	ldrb	r3, [r3, #9]
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	4a17      	ldr	r2, [pc, #92]	; (800a028 <FATFS_LinkDriverEx+0x94>)
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	4413      	add	r3, r2
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009fd2:	4b15      	ldr	r3, [pc, #84]	; (800a028 <FATFS_LinkDriverEx+0x94>)
 8009fd4:	7a5b      	ldrb	r3, [r3, #9]
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	461a      	mov	r2, r3
 8009fda:	4b13      	ldr	r3, [pc, #76]	; (800a028 <FATFS_LinkDriverEx+0x94>)
 8009fdc:	4413      	add	r3, r2
 8009fde:	79fa      	ldrb	r2, [r7, #7]
 8009fe0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009fe2:	4b11      	ldr	r3, [pc, #68]	; (800a028 <FATFS_LinkDriverEx+0x94>)
 8009fe4:	7a5b      	ldrb	r3, [r3, #9]
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	1c5a      	adds	r2, r3, #1
 8009fea:	b2d1      	uxtb	r1, r2
 8009fec:	4a0e      	ldr	r2, [pc, #56]	; (800a028 <FATFS_LinkDriverEx+0x94>)
 8009fee:	7251      	strb	r1, [r2, #9]
 8009ff0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009ff2:	7dbb      	ldrb	r3, [r7, #22]
 8009ff4:	3330      	adds	r3, #48	; 0x30
 8009ff6:	b2da      	uxtb	r2, r3
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	3301      	adds	r3, #1
 800a000:	223a      	movs	r2, #58	; 0x3a
 800a002:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	3302      	adds	r3, #2
 800a008:	222f      	movs	r2, #47	; 0x2f
 800a00a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	3303      	adds	r3, #3
 800a010:	2200      	movs	r2, #0
 800a012:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a014:	2300      	movs	r3, #0
 800a016:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a018:	7dfb      	ldrb	r3, [r7, #23]
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	371c      	adds	r7, #28
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr
 800a026:	bf00      	nop
 800a028:	20001da0 	.word	0x20001da0

0800a02c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a036:	2200      	movs	r2, #0
 800a038:	6839      	ldr	r1, [r7, #0]
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f7ff ffaa 	bl	8009f94 <FATFS_LinkDriverEx>
 800a040:	4603      	mov	r3, r0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <atoi>:
 800a04a:	220a      	movs	r2, #10
 800a04c:	2100      	movs	r1, #0
 800a04e:	f000 b8f7 	b.w	800a240 <strtol>
	...

0800a054 <__errno>:
 800a054:	4b01      	ldr	r3, [pc, #4]	; (800a05c <__errno+0x8>)
 800a056:	6818      	ldr	r0, [r3, #0]
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	20000024 	.word	0x20000024

0800a060 <__libc_init_array>:
 800a060:	b570      	push	{r4, r5, r6, lr}
 800a062:	4d0d      	ldr	r5, [pc, #52]	; (800a098 <__libc_init_array+0x38>)
 800a064:	4c0d      	ldr	r4, [pc, #52]	; (800a09c <__libc_init_array+0x3c>)
 800a066:	1b64      	subs	r4, r4, r5
 800a068:	10a4      	asrs	r4, r4, #2
 800a06a:	2600      	movs	r6, #0
 800a06c:	42a6      	cmp	r6, r4
 800a06e:	d109      	bne.n	800a084 <__libc_init_array+0x24>
 800a070:	4d0b      	ldr	r5, [pc, #44]	; (800a0a0 <__libc_init_array+0x40>)
 800a072:	4c0c      	ldr	r4, [pc, #48]	; (800a0a4 <__libc_init_array+0x44>)
 800a074:	f000 fd68 	bl	800ab48 <_init>
 800a078:	1b64      	subs	r4, r4, r5
 800a07a:	10a4      	asrs	r4, r4, #2
 800a07c:	2600      	movs	r6, #0
 800a07e:	42a6      	cmp	r6, r4
 800a080:	d105      	bne.n	800a08e <__libc_init_array+0x2e>
 800a082:	bd70      	pop	{r4, r5, r6, pc}
 800a084:	f855 3b04 	ldr.w	r3, [r5], #4
 800a088:	4798      	blx	r3
 800a08a:	3601      	adds	r6, #1
 800a08c:	e7ee      	b.n	800a06c <__libc_init_array+0xc>
 800a08e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a092:	4798      	blx	r3
 800a094:	3601      	adds	r6, #1
 800a096:	e7f2      	b.n	800a07e <__libc_init_array+0x1e>
 800a098:	0800b384 	.word	0x0800b384
 800a09c:	0800b384 	.word	0x0800b384
 800a0a0:	0800b384 	.word	0x0800b384
 800a0a4:	0800b388 	.word	0x0800b388

0800a0a8 <memcpy>:
 800a0a8:	440a      	add	r2, r1
 800a0aa:	4291      	cmp	r1, r2
 800a0ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0b0:	d100      	bne.n	800a0b4 <memcpy+0xc>
 800a0b2:	4770      	bx	lr
 800a0b4:	b510      	push	{r4, lr}
 800a0b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0be:	4291      	cmp	r1, r2
 800a0c0:	d1f9      	bne.n	800a0b6 <memcpy+0xe>
 800a0c2:	bd10      	pop	{r4, pc}

0800a0c4 <memset>:
 800a0c4:	4402      	add	r2, r0
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d100      	bne.n	800a0ce <memset+0xa>
 800a0cc:	4770      	bx	lr
 800a0ce:	f803 1b01 	strb.w	r1, [r3], #1
 800a0d2:	e7f9      	b.n	800a0c8 <memset+0x4>

0800a0d4 <siprintf>:
 800a0d4:	b40e      	push	{r1, r2, r3}
 800a0d6:	b500      	push	{lr}
 800a0d8:	b09c      	sub	sp, #112	; 0x70
 800a0da:	ab1d      	add	r3, sp, #116	; 0x74
 800a0dc:	9002      	str	r0, [sp, #8]
 800a0de:	9006      	str	r0, [sp, #24]
 800a0e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a0e4:	4809      	ldr	r0, [pc, #36]	; (800a10c <siprintf+0x38>)
 800a0e6:	9107      	str	r1, [sp, #28]
 800a0e8:	9104      	str	r1, [sp, #16]
 800a0ea:	4909      	ldr	r1, [pc, #36]	; (800a110 <siprintf+0x3c>)
 800a0ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0f0:	9105      	str	r1, [sp, #20]
 800a0f2:	6800      	ldr	r0, [r0, #0]
 800a0f4:	9301      	str	r3, [sp, #4]
 800a0f6:	a902      	add	r1, sp, #8
 800a0f8:	f000 f942 	bl	800a380 <_svfiprintf_r>
 800a0fc:	9b02      	ldr	r3, [sp, #8]
 800a0fe:	2200      	movs	r2, #0
 800a100:	701a      	strb	r2, [r3, #0]
 800a102:	b01c      	add	sp, #112	; 0x70
 800a104:	f85d eb04 	ldr.w	lr, [sp], #4
 800a108:	b003      	add	sp, #12
 800a10a:	4770      	bx	lr
 800a10c:	20000024 	.word	0x20000024
 800a110:	ffff0208 	.word	0xffff0208

0800a114 <strncpy>:
 800a114:	b510      	push	{r4, lr}
 800a116:	3901      	subs	r1, #1
 800a118:	4603      	mov	r3, r0
 800a11a:	b132      	cbz	r2, 800a12a <strncpy+0x16>
 800a11c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a120:	f803 4b01 	strb.w	r4, [r3], #1
 800a124:	3a01      	subs	r2, #1
 800a126:	2c00      	cmp	r4, #0
 800a128:	d1f7      	bne.n	800a11a <strncpy+0x6>
 800a12a:	441a      	add	r2, r3
 800a12c:	2100      	movs	r1, #0
 800a12e:	4293      	cmp	r3, r2
 800a130:	d100      	bne.n	800a134 <strncpy+0x20>
 800a132:	bd10      	pop	{r4, pc}
 800a134:	f803 1b01 	strb.w	r1, [r3], #1
 800a138:	e7f9      	b.n	800a12e <strncpy+0x1a>
	...

0800a13c <_strtol_l.constprop.0>:
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a142:	d001      	beq.n	800a148 <_strtol_l.constprop.0+0xc>
 800a144:	2b24      	cmp	r3, #36	; 0x24
 800a146:	d906      	bls.n	800a156 <_strtol_l.constprop.0+0x1a>
 800a148:	f7ff ff84 	bl	800a054 <__errno>
 800a14c:	2316      	movs	r3, #22
 800a14e:	6003      	str	r3, [r0, #0]
 800a150:	2000      	movs	r0, #0
 800a152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a156:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a23c <_strtol_l.constprop.0+0x100>
 800a15a:	460d      	mov	r5, r1
 800a15c:	462e      	mov	r6, r5
 800a15e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a162:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a166:	f017 0708 	ands.w	r7, r7, #8
 800a16a:	d1f7      	bne.n	800a15c <_strtol_l.constprop.0+0x20>
 800a16c:	2c2d      	cmp	r4, #45	; 0x2d
 800a16e:	d132      	bne.n	800a1d6 <_strtol_l.constprop.0+0x9a>
 800a170:	782c      	ldrb	r4, [r5, #0]
 800a172:	2701      	movs	r7, #1
 800a174:	1cb5      	adds	r5, r6, #2
 800a176:	2b00      	cmp	r3, #0
 800a178:	d05b      	beq.n	800a232 <_strtol_l.constprop.0+0xf6>
 800a17a:	2b10      	cmp	r3, #16
 800a17c:	d109      	bne.n	800a192 <_strtol_l.constprop.0+0x56>
 800a17e:	2c30      	cmp	r4, #48	; 0x30
 800a180:	d107      	bne.n	800a192 <_strtol_l.constprop.0+0x56>
 800a182:	782c      	ldrb	r4, [r5, #0]
 800a184:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a188:	2c58      	cmp	r4, #88	; 0x58
 800a18a:	d14d      	bne.n	800a228 <_strtol_l.constprop.0+0xec>
 800a18c:	786c      	ldrb	r4, [r5, #1]
 800a18e:	2310      	movs	r3, #16
 800a190:	3502      	adds	r5, #2
 800a192:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a196:	f108 38ff 	add.w	r8, r8, #4294967295
 800a19a:	f04f 0c00 	mov.w	ip, #0
 800a19e:	fbb8 f9f3 	udiv	r9, r8, r3
 800a1a2:	4666      	mov	r6, ip
 800a1a4:	fb03 8a19 	mls	sl, r3, r9, r8
 800a1a8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a1ac:	f1be 0f09 	cmp.w	lr, #9
 800a1b0:	d816      	bhi.n	800a1e0 <_strtol_l.constprop.0+0xa4>
 800a1b2:	4674      	mov	r4, lr
 800a1b4:	42a3      	cmp	r3, r4
 800a1b6:	dd24      	ble.n	800a202 <_strtol_l.constprop.0+0xc6>
 800a1b8:	f1bc 0f00 	cmp.w	ip, #0
 800a1bc:	db1e      	blt.n	800a1fc <_strtol_l.constprop.0+0xc0>
 800a1be:	45b1      	cmp	r9, r6
 800a1c0:	d31c      	bcc.n	800a1fc <_strtol_l.constprop.0+0xc0>
 800a1c2:	d101      	bne.n	800a1c8 <_strtol_l.constprop.0+0x8c>
 800a1c4:	45a2      	cmp	sl, r4
 800a1c6:	db19      	blt.n	800a1fc <_strtol_l.constprop.0+0xc0>
 800a1c8:	fb06 4603 	mla	r6, r6, r3, r4
 800a1cc:	f04f 0c01 	mov.w	ip, #1
 800a1d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a1d4:	e7e8      	b.n	800a1a8 <_strtol_l.constprop.0+0x6c>
 800a1d6:	2c2b      	cmp	r4, #43	; 0x2b
 800a1d8:	bf04      	itt	eq
 800a1da:	782c      	ldrbeq	r4, [r5, #0]
 800a1dc:	1cb5      	addeq	r5, r6, #2
 800a1de:	e7ca      	b.n	800a176 <_strtol_l.constprop.0+0x3a>
 800a1e0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a1e4:	f1be 0f19 	cmp.w	lr, #25
 800a1e8:	d801      	bhi.n	800a1ee <_strtol_l.constprop.0+0xb2>
 800a1ea:	3c37      	subs	r4, #55	; 0x37
 800a1ec:	e7e2      	b.n	800a1b4 <_strtol_l.constprop.0+0x78>
 800a1ee:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a1f2:	f1be 0f19 	cmp.w	lr, #25
 800a1f6:	d804      	bhi.n	800a202 <_strtol_l.constprop.0+0xc6>
 800a1f8:	3c57      	subs	r4, #87	; 0x57
 800a1fa:	e7db      	b.n	800a1b4 <_strtol_l.constprop.0+0x78>
 800a1fc:	f04f 3cff 	mov.w	ip, #4294967295
 800a200:	e7e6      	b.n	800a1d0 <_strtol_l.constprop.0+0x94>
 800a202:	f1bc 0f00 	cmp.w	ip, #0
 800a206:	da05      	bge.n	800a214 <_strtol_l.constprop.0+0xd8>
 800a208:	2322      	movs	r3, #34	; 0x22
 800a20a:	6003      	str	r3, [r0, #0]
 800a20c:	4646      	mov	r6, r8
 800a20e:	b942      	cbnz	r2, 800a222 <_strtol_l.constprop.0+0xe6>
 800a210:	4630      	mov	r0, r6
 800a212:	e79e      	b.n	800a152 <_strtol_l.constprop.0+0x16>
 800a214:	b107      	cbz	r7, 800a218 <_strtol_l.constprop.0+0xdc>
 800a216:	4276      	negs	r6, r6
 800a218:	2a00      	cmp	r2, #0
 800a21a:	d0f9      	beq.n	800a210 <_strtol_l.constprop.0+0xd4>
 800a21c:	f1bc 0f00 	cmp.w	ip, #0
 800a220:	d000      	beq.n	800a224 <_strtol_l.constprop.0+0xe8>
 800a222:	1e69      	subs	r1, r5, #1
 800a224:	6011      	str	r1, [r2, #0]
 800a226:	e7f3      	b.n	800a210 <_strtol_l.constprop.0+0xd4>
 800a228:	2430      	movs	r4, #48	; 0x30
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1b1      	bne.n	800a192 <_strtol_l.constprop.0+0x56>
 800a22e:	2308      	movs	r3, #8
 800a230:	e7af      	b.n	800a192 <_strtol_l.constprop.0+0x56>
 800a232:	2c30      	cmp	r4, #48	; 0x30
 800a234:	d0a5      	beq.n	800a182 <_strtol_l.constprop.0+0x46>
 800a236:	230a      	movs	r3, #10
 800a238:	e7ab      	b.n	800a192 <_strtol_l.constprop.0+0x56>
 800a23a:	bf00      	nop
 800a23c:	0800b249 	.word	0x0800b249

0800a240 <strtol>:
 800a240:	4613      	mov	r3, r2
 800a242:	460a      	mov	r2, r1
 800a244:	4601      	mov	r1, r0
 800a246:	4802      	ldr	r0, [pc, #8]	; (800a250 <strtol+0x10>)
 800a248:	6800      	ldr	r0, [r0, #0]
 800a24a:	f7ff bf77 	b.w	800a13c <_strtol_l.constprop.0>
 800a24e:	bf00      	nop
 800a250:	20000024 	.word	0x20000024

0800a254 <_vsniprintf_r>:
 800a254:	b530      	push	{r4, r5, lr}
 800a256:	4614      	mov	r4, r2
 800a258:	2c00      	cmp	r4, #0
 800a25a:	b09b      	sub	sp, #108	; 0x6c
 800a25c:	4605      	mov	r5, r0
 800a25e:	461a      	mov	r2, r3
 800a260:	da05      	bge.n	800a26e <_vsniprintf_r+0x1a>
 800a262:	238b      	movs	r3, #139	; 0x8b
 800a264:	6003      	str	r3, [r0, #0]
 800a266:	f04f 30ff 	mov.w	r0, #4294967295
 800a26a:	b01b      	add	sp, #108	; 0x6c
 800a26c:	bd30      	pop	{r4, r5, pc}
 800a26e:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a272:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a276:	bf14      	ite	ne
 800a278:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a27c:	4623      	moveq	r3, r4
 800a27e:	9302      	str	r3, [sp, #8]
 800a280:	9305      	str	r3, [sp, #20]
 800a282:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a286:	9100      	str	r1, [sp, #0]
 800a288:	9104      	str	r1, [sp, #16]
 800a28a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a28e:	4669      	mov	r1, sp
 800a290:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a292:	f000 f875 	bl	800a380 <_svfiprintf_r>
 800a296:	1c43      	adds	r3, r0, #1
 800a298:	bfbc      	itt	lt
 800a29a:	238b      	movlt	r3, #139	; 0x8b
 800a29c:	602b      	strlt	r3, [r5, #0]
 800a29e:	2c00      	cmp	r4, #0
 800a2a0:	d0e3      	beq.n	800a26a <_vsniprintf_r+0x16>
 800a2a2:	9b00      	ldr	r3, [sp, #0]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	701a      	strb	r2, [r3, #0]
 800a2a8:	e7df      	b.n	800a26a <_vsniprintf_r+0x16>
	...

0800a2ac <vsniprintf>:
 800a2ac:	b507      	push	{r0, r1, r2, lr}
 800a2ae:	9300      	str	r3, [sp, #0]
 800a2b0:	4613      	mov	r3, r2
 800a2b2:	460a      	mov	r2, r1
 800a2b4:	4601      	mov	r1, r0
 800a2b6:	4803      	ldr	r0, [pc, #12]	; (800a2c4 <vsniprintf+0x18>)
 800a2b8:	6800      	ldr	r0, [r0, #0]
 800a2ba:	f7ff ffcb 	bl	800a254 <_vsniprintf_r>
 800a2be:	b003      	add	sp, #12
 800a2c0:	f85d fb04 	ldr.w	pc, [sp], #4
 800a2c4:	20000024 	.word	0x20000024

0800a2c8 <__ssputs_r>:
 800a2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2cc:	688e      	ldr	r6, [r1, #8]
 800a2ce:	429e      	cmp	r6, r3
 800a2d0:	4682      	mov	sl, r0
 800a2d2:	460c      	mov	r4, r1
 800a2d4:	4690      	mov	r8, r2
 800a2d6:	461f      	mov	r7, r3
 800a2d8:	d838      	bhi.n	800a34c <__ssputs_r+0x84>
 800a2da:	898a      	ldrh	r2, [r1, #12]
 800a2dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2e0:	d032      	beq.n	800a348 <__ssputs_r+0x80>
 800a2e2:	6825      	ldr	r5, [r4, #0]
 800a2e4:	6909      	ldr	r1, [r1, #16]
 800a2e6:	eba5 0901 	sub.w	r9, r5, r1
 800a2ea:	6965      	ldr	r5, [r4, #20]
 800a2ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	444b      	add	r3, r9
 800a2f8:	106d      	asrs	r5, r5, #1
 800a2fa:	429d      	cmp	r5, r3
 800a2fc:	bf38      	it	cc
 800a2fe:	461d      	movcc	r5, r3
 800a300:	0553      	lsls	r3, r2, #21
 800a302:	d531      	bpl.n	800a368 <__ssputs_r+0xa0>
 800a304:	4629      	mov	r1, r5
 800a306:	f000 fb55 	bl	800a9b4 <_malloc_r>
 800a30a:	4606      	mov	r6, r0
 800a30c:	b950      	cbnz	r0, 800a324 <__ssputs_r+0x5c>
 800a30e:	230c      	movs	r3, #12
 800a310:	f8ca 3000 	str.w	r3, [sl]
 800a314:	89a3      	ldrh	r3, [r4, #12]
 800a316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a31a:	81a3      	strh	r3, [r4, #12]
 800a31c:	f04f 30ff 	mov.w	r0, #4294967295
 800a320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a324:	6921      	ldr	r1, [r4, #16]
 800a326:	464a      	mov	r2, r9
 800a328:	f7ff febe 	bl	800a0a8 <memcpy>
 800a32c:	89a3      	ldrh	r3, [r4, #12]
 800a32e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a336:	81a3      	strh	r3, [r4, #12]
 800a338:	6126      	str	r6, [r4, #16]
 800a33a:	6165      	str	r5, [r4, #20]
 800a33c:	444e      	add	r6, r9
 800a33e:	eba5 0509 	sub.w	r5, r5, r9
 800a342:	6026      	str	r6, [r4, #0]
 800a344:	60a5      	str	r5, [r4, #8]
 800a346:	463e      	mov	r6, r7
 800a348:	42be      	cmp	r6, r7
 800a34a:	d900      	bls.n	800a34e <__ssputs_r+0x86>
 800a34c:	463e      	mov	r6, r7
 800a34e:	6820      	ldr	r0, [r4, #0]
 800a350:	4632      	mov	r2, r6
 800a352:	4641      	mov	r1, r8
 800a354:	f000 faa8 	bl	800a8a8 <memmove>
 800a358:	68a3      	ldr	r3, [r4, #8]
 800a35a:	1b9b      	subs	r3, r3, r6
 800a35c:	60a3      	str	r3, [r4, #8]
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	4433      	add	r3, r6
 800a362:	6023      	str	r3, [r4, #0]
 800a364:	2000      	movs	r0, #0
 800a366:	e7db      	b.n	800a320 <__ssputs_r+0x58>
 800a368:	462a      	mov	r2, r5
 800a36a:	f000 fb97 	bl	800aa9c <_realloc_r>
 800a36e:	4606      	mov	r6, r0
 800a370:	2800      	cmp	r0, #0
 800a372:	d1e1      	bne.n	800a338 <__ssputs_r+0x70>
 800a374:	6921      	ldr	r1, [r4, #16]
 800a376:	4650      	mov	r0, sl
 800a378:	f000 fab0 	bl	800a8dc <_free_r>
 800a37c:	e7c7      	b.n	800a30e <__ssputs_r+0x46>
	...

0800a380 <_svfiprintf_r>:
 800a380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a384:	4698      	mov	r8, r3
 800a386:	898b      	ldrh	r3, [r1, #12]
 800a388:	061b      	lsls	r3, r3, #24
 800a38a:	b09d      	sub	sp, #116	; 0x74
 800a38c:	4607      	mov	r7, r0
 800a38e:	460d      	mov	r5, r1
 800a390:	4614      	mov	r4, r2
 800a392:	d50e      	bpl.n	800a3b2 <_svfiprintf_r+0x32>
 800a394:	690b      	ldr	r3, [r1, #16]
 800a396:	b963      	cbnz	r3, 800a3b2 <_svfiprintf_r+0x32>
 800a398:	2140      	movs	r1, #64	; 0x40
 800a39a:	f000 fb0b 	bl	800a9b4 <_malloc_r>
 800a39e:	6028      	str	r0, [r5, #0]
 800a3a0:	6128      	str	r0, [r5, #16]
 800a3a2:	b920      	cbnz	r0, 800a3ae <_svfiprintf_r+0x2e>
 800a3a4:	230c      	movs	r3, #12
 800a3a6:	603b      	str	r3, [r7, #0]
 800a3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ac:	e0d1      	b.n	800a552 <_svfiprintf_r+0x1d2>
 800a3ae:	2340      	movs	r3, #64	; 0x40
 800a3b0:	616b      	str	r3, [r5, #20]
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a3b6:	2320      	movs	r3, #32
 800a3b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3c0:	2330      	movs	r3, #48	; 0x30
 800a3c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a56c <_svfiprintf_r+0x1ec>
 800a3c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3ca:	f04f 0901 	mov.w	r9, #1
 800a3ce:	4623      	mov	r3, r4
 800a3d0:	469a      	mov	sl, r3
 800a3d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3d6:	b10a      	cbz	r2, 800a3dc <_svfiprintf_r+0x5c>
 800a3d8:	2a25      	cmp	r2, #37	; 0x25
 800a3da:	d1f9      	bne.n	800a3d0 <_svfiprintf_r+0x50>
 800a3dc:	ebba 0b04 	subs.w	fp, sl, r4
 800a3e0:	d00b      	beq.n	800a3fa <_svfiprintf_r+0x7a>
 800a3e2:	465b      	mov	r3, fp
 800a3e4:	4622      	mov	r2, r4
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	4638      	mov	r0, r7
 800a3ea:	f7ff ff6d 	bl	800a2c8 <__ssputs_r>
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	f000 80aa 	beq.w	800a548 <_svfiprintf_r+0x1c8>
 800a3f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3f6:	445a      	add	r2, fp
 800a3f8:	9209      	str	r2, [sp, #36]	; 0x24
 800a3fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f000 80a2 	beq.w	800a548 <_svfiprintf_r+0x1c8>
 800a404:	2300      	movs	r3, #0
 800a406:	f04f 32ff 	mov.w	r2, #4294967295
 800a40a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a40e:	f10a 0a01 	add.w	sl, sl, #1
 800a412:	9304      	str	r3, [sp, #16]
 800a414:	9307      	str	r3, [sp, #28]
 800a416:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a41a:	931a      	str	r3, [sp, #104]	; 0x68
 800a41c:	4654      	mov	r4, sl
 800a41e:	2205      	movs	r2, #5
 800a420:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a424:	4851      	ldr	r0, [pc, #324]	; (800a56c <_svfiprintf_r+0x1ec>)
 800a426:	f7f5 fee3 	bl	80001f0 <memchr>
 800a42a:	9a04      	ldr	r2, [sp, #16]
 800a42c:	b9d8      	cbnz	r0, 800a466 <_svfiprintf_r+0xe6>
 800a42e:	06d0      	lsls	r0, r2, #27
 800a430:	bf44      	itt	mi
 800a432:	2320      	movmi	r3, #32
 800a434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a438:	0711      	lsls	r1, r2, #28
 800a43a:	bf44      	itt	mi
 800a43c:	232b      	movmi	r3, #43	; 0x2b
 800a43e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a442:	f89a 3000 	ldrb.w	r3, [sl]
 800a446:	2b2a      	cmp	r3, #42	; 0x2a
 800a448:	d015      	beq.n	800a476 <_svfiprintf_r+0xf6>
 800a44a:	9a07      	ldr	r2, [sp, #28]
 800a44c:	4654      	mov	r4, sl
 800a44e:	2000      	movs	r0, #0
 800a450:	f04f 0c0a 	mov.w	ip, #10
 800a454:	4621      	mov	r1, r4
 800a456:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a45a:	3b30      	subs	r3, #48	; 0x30
 800a45c:	2b09      	cmp	r3, #9
 800a45e:	d94e      	bls.n	800a4fe <_svfiprintf_r+0x17e>
 800a460:	b1b0      	cbz	r0, 800a490 <_svfiprintf_r+0x110>
 800a462:	9207      	str	r2, [sp, #28]
 800a464:	e014      	b.n	800a490 <_svfiprintf_r+0x110>
 800a466:	eba0 0308 	sub.w	r3, r0, r8
 800a46a:	fa09 f303 	lsl.w	r3, r9, r3
 800a46e:	4313      	orrs	r3, r2
 800a470:	9304      	str	r3, [sp, #16]
 800a472:	46a2      	mov	sl, r4
 800a474:	e7d2      	b.n	800a41c <_svfiprintf_r+0x9c>
 800a476:	9b03      	ldr	r3, [sp, #12]
 800a478:	1d19      	adds	r1, r3, #4
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	9103      	str	r1, [sp, #12]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	bfbb      	ittet	lt
 800a482:	425b      	neglt	r3, r3
 800a484:	f042 0202 	orrlt.w	r2, r2, #2
 800a488:	9307      	strge	r3, [sp, #28]
 800a48a:	9307      	strlt	r3, [sp, #28]
 800a48c:	bfb8      	it	lt
 800a48e:	9204      	strlt	r2, [sp, #16]
 800a490:	7823      	ldrb	r3, [r4, #0]
 800a492:	2b2e      	cmp	r3, #46	; 0x2e
 800a494:	d10c      	bne.n	800a4b0 <_svfiprintf_r+0x130>
 800a496:	7863      	ldrb	r3, [r4, #1]
 800a498:	2b2a      	cmp	r3, #42	; 0x2a
 800a49a:	d135      	bne.n	800a508 <_svfiprintf_r+0x188>
 800a49c:	9b03      	ldr	r3, [sp, #12]
 800a49e:	1d1a      	adds	r2, r3, #4
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	9203      	str	r2, [sp, #12]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	bfb8      	it	lt
 800a4a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4ac:	3402      	adds	r4, #2
 800a4ae:	9305      	str	r3, [sp, #20]
 800a4b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a57c <_svfiprintf_r+0x1fc>
 800a4b4:	7821      	ldrb	r1, [r4, #0]
 800a4b6:	2203      	movs	r2, #3
 800a4b8:	4650      	mov	r0, sl
 800a4ba:	f7f5 fe99 	bl	80001f0 <memchr>
 800a4be:	b140      	cbz	r0, 800a4d2 <_svfiprintf_r+0x152>
 800a4c0:	2340      	movs	r3, #64	; 0x40
 800a4c2:	eba0 000a 	sub.w	r0, r0, sl
 800a4c6:	fa03 f000 	lsl.w	r0, r3, r0
 800a4ca:	9b04      	ldr	r3, [sp, #16]
 800a4cc:	4303      	orrs	r3, r0
 800a4ce:	3401      	adds	r4, #1
 800a4d0:	9304      	str	r3, [sp, #16]
 800a4d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4d6:	4826      	ldr	r0, [pc, #152]	; (800a570 <_svfiprintf_r+0x1f0>)
 800a4d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4dc:	2206      	movs	r2, #6
 800a4de:	f7f5 fe87 	bl	80001f0 <memchr>
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	d038      	beq.n	800a558 <_svfiprintf_r+0x1d8>
 800a4e6:	4b23      	ldr	r3, [pc, #140]	; (800a574 <_svfiprintf_r+0x1f4>)
 800a4e8:	bb1b      	cbnz	r3, 800a532 <_svfiprintf_r+0x1b2>
 800a4ea:	9b03      	ldr	r3, [sp, #12]
 800a4ec:	3307      	adds	r3, #7
 800a4ee:	f023 0307 	bic.w	r3, r3, #7
 800a4f2:	3308      	adds	r3, #8
 800a4f4:	9303      	str	r3, [sp, #12]
 800a4f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f8:	4433      	add	r3, r6
 800a4fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a4fc:	e767      	b.n	800a3ce <_svfiprintf_r+0x4e>
 800a4fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800a502:	460c      	mov	r4, r1
 800a504:	2001      	movs	r0, #1
 800a506:	e7a5      	b.n	800a454 <_svfiprintf_r+0xd4>
 800a508:	2300      	movs	r3, #0
 800a50a:	3401      	adds	r4, #1
 800a50c:	9305      	str	r3, [sp, #20]
 800a50e:	4619      	mov	r1, r3
 800a510:	f04f 0c0a 	mov.w	ip, #10
 800a514:	4620      	mov	r0, r4
 800a516:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a51a:	3a30      	subs	r2, #48	; 0x30
 800a51c:	2a09      	cmp	r2, #9
 800a51e:	d903      	bls.n	800a528 <_svfiprintf_r+0x1a8>
 800a520:	2b00      	cmp	r3, #0
 800a522:	d0c5      	beq.n	800a4b0 <_svfiprintf_r+0x130>
 800a524:	9105      	str	r1, [sp, #20]
 800a526:	e7c3      	b.n	800a4b0 <_svfiprintf_r+0x130>
 800a528:	fb0c 2101 	mla	r1, ip, r1, r2
 800a52c:	4604      	mov	r4, r0
 800a52e:	2301      	movs	r3, #1
 800a530:	e7f0      	b.n	800a514 <_svfiprintf_r+0x194>
 800a532:	ab03      	add	r3, sp, #12
 800a534:	9300      	str	r3, [sp, #0]
 800a536:	462a      	mov	r2, r5
 800a538:	4b0f      	ldr	r3, [pc, #60]	; (800a578 <_svfiprintf_r+0x1f8>)
 800a53a:	a904      	add	r1, sp, #16
 800a53c:	4638      	mov	r0, r7
 800a53e:	f3af 8000 	nop.w
 800a542:	1c42      	adds	r2, r0, #1
 800a544:	4606      	mov	r6, r0
 800a546:	d1d6      	bne.n	800a4f6 <_svfiprintf_r+0x176>
 800a548:	89ab      	ldrh	r3, [r5, #12]
 800a54a:	065b      	lsls	r3, r3, #25
 800a54c:	f53f af2c 	bmi.w	800a3a8 <_svfiprintf_r+0x28>
 800a550:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a552:	b01d      	add	sp, #116	; 0x74
 800a554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a558:	ab03      	add	r3, sp, #12
 800a55a:	9300      	str	r3, [sp, #0]
 800a55c:	462a      	mov	r2, r5
 800a55e:	4b06      	ldr	r3, [pc, #24]	; (800a578 <_svfiprintf_r+0x1f8>)
 800a560:	a904      	add	r1, sp, #16
 800a562:	4638      	mov	r0, r7
 800a564:	f000 f87a 	bl	800a65c <_printf_i>
 800a568:	e7eb      	b.n	800a542 <_svfiprintf_r+0x1c2>
 800a56a:	bf00      	nop
 800a56c:	0800b349 	.word	0x0800b349
 800a570:	0800b353 	.word	0x0800b353
 800a574:	00000000 	.word	0x00000000
 800a578:	0800a2c9 	.word	0x0800a2c9
 800a57c:	0800b34f 	.word	0x0800b34f

0800a580 <_printf_common>:
 800a580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a584:	4616      	mov	r6, r2
 800a586:	4699      	mov	r9, r3
 800a588:	688a      	ldr	r2, [r1, #8]
 800a58a:	690b      	ldr	r3, [r1, #16]
 800a58c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a590:	4293      	cmp	r3, r2
 800a592:	bfb8      	it	lt
 800a594:	4613      	movlt	r3, r2
 800a596:	6033      	str	r3, [r6, #0]
 800a598:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a59c:	4607      	mov	r7, r0
 800a59e:	460c      	mov	r4, r1
 800a5a0:	b10a      	cbz	r2, 800a5a6 <_printf_common+0x26>
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	6033      	str	r3, [r6, #0]
 800a5a6:	6823      	ldr	r3, [r4, #0]
 800a5a8:	0699      	lsls	r1, r3, #26
 800a5aa:	bf42      	ittt	mi
 800a5ac:	6833      	ldrmi	r3, [r6, #0]
 800a5ae:	3302      	addmi	r3, #2
 800a5b0:	6033      	strmi	r3, [r6, #0]
 800a5b2:	6825      	ldr	r5, [r4, #0]
 800a5b4:	f015 0506 	ands.w	r5, r5, #6
 800a5b8:	d106      	bne.n	800a5c8 <_printf_common+0x48>
 800a5ba:	f104 0a19 	add.w	sl, r4, #25
 800a5be:	68e3      	ldr	r3, [r4, #12]
 800a5c0:	6832      	ldr	r2, [r6, #0]
 800a5c2:	1a9b      	subs	r3, r3, r2
 800a5c4:	42ab      	cmp	r3, r5
 800a5c6:	dc26      	bgt.n	800a616 <_printf_common+0x96>
 800a5c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5cc:	1e13      	subs	r3, r2, #0
 800a5ce:	6822      	ldr	r2, [r4, #0]
 800a5d0:	bf18      	it	ne
 800a5d2:	2301      	movne	r3, #1
 800a5d4:	0692      	lsls	r2, r2, #26
 800a5d6:	d42b      	bmi.n	800a630 <_printf_common+0xb0>
 800a5d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5dc:	4649      	mov	r1, r9
 800a5de:	4638      	mov	r0, r7
 800a5e0:	47c0      	blx	r8
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	d01e      	beq.n	800a624 <_printf_common+0xa4>
 800a5e6:	6823      	ldr	r3, [r4, #0]
 800a5e8:	68e5      	ldr	r5, [r4, #12]
 800a5ea:	6832      	ldr	r2, [r6, #0]
 800a5ec:	f003 0306 	and.w	r3, r3, #6
 800a5f0:	2b04      	cmp	r3, #4
 800a5f2:	bf08      	it	eq
 800a5f4:	1aad      	subeq	r5, r5, r2
 800a5f6:	68a3      	ldr	r3, [r4, #8]
 800a5f8:	6922      	ldr	r2, [r4, #16]
 800a5fa:	bf0c      	ite	eq
 800a5fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a600:	2500      	movne	r5, #0
 800a602:	4293      	cmp	r3, r2
 800a604:	bfc4      	itt	gt
 800a606:	1a9b      	subgt	r3, r3, r2
 800a608:	18ed      	addgt	r5, r5, r3
 800a60a:	2600      	movs	r6, #0
 800a60c:	341a      	adds	r4, #26
 800a60e:	42b5      	cmp	r5, r6
 800a610:	d11a      	bne.n	800a648 <_printf_common+0xc8>
 800a612:	2000      	movs	r0, #0
 800a614:	e008      	b.n	800a628 <_printf_common+0xa8>
 800a616:	2301      	movs	r3, #1
 800a618:	4652      	mov	r2, sl
 800a61a:	4649      	mov	r1, r9
 800a61c:	4638      	mov	r0, r7
 800a61e:	47c0      	blx	r8
 800a620:	3001      	adds	r0, #1
 800a622:	d103      	bne.n	800a62c <_printf_common+0xac>
 800a624:	f04f 30ff 	mov.w	r0, #4294967295
 800a628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a62c:	3501      	adds	r5, #1
 800a62e:	e7c6      	b.n	800a5be <_printf_common+0x3e>
 800a630:	18e1      	adds	r1, r4, r3
 800a632:	1c5a      	adds	r2, r3, #1
 800a634:	2030      	movs	r0, #48	; 0x30
 800a636:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a63a:	4422      	add	r2, r4
 800a63c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a640:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a644:	3302      	adds	r3, #2
 800a646:	e7c7      	b.n	800a5d8 <_printf_common+0x58>
 800a648:	2301      	movs	r3, #1
 800a64a:	4622      	mov	r2, r4
 800a64c:	4649      	mov	r1, r9
 800a64e:	4638      	mov	r0, r7
 800a650:	47c0      	blx	r8
 800a652:	3001      	adds	r0, #1
 800a654:	d0e6      	beq.n	800a624 <_printf_common+0xa4>
 800a656:	3601      	adds	r6, #1
 800a658:	e7d9      	b.n	800a60e <_printf_common+0x8e>
	...

0800a65c <_printf_i>:
 800a65c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a660:	7e0f      	ldrb	r7, [r1, #24]
 800a662:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a664:	2f78      	cmp	r7, #120	; 0x78
 800a666:	4691      	mov	r9, r2
 800a668:	4680      	mov	r8, r0
 800a66a:	460c      	mov	r4, r1
 800a66c:	469a      	mov	sl, r3
 800a66e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a672:	d807      	bhi.n	800a684 <_printf_i+0x28>
 800a674:	2f62      	cmp	r7, #98	; 0x62
 800a676:	d80a      	bhi.n	800a68e <_printf_i+0x32>
 800a678:	2f00      	cmp	r7, #0
 800a67a:	f000 80d8 	beq.w	800a82e <_printf_i+0x1d2>
 800a67e:	2f58      	cmp	r7, #88	; 0x58
 800a680:	f000 80a3 	beq.w	800a7ca <_printf_i+0x16e>
 800a684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a688:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a68c:	e03a      	b.n	800a704 <_printf_i+0xa8>
 800a68e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a692:	2b15      	cmp	r3, #21
 800a694:	d8f6      	bhi.n	800a684 <_printf_i+0x28>
 800a696:	a101      	add	r1, pc, #4	; (adr r1, 800a69c <_printf_i+0x40>)
 800a698:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a69c:	0800a6f5 	.word	0x0800a6f5
 800a6a0:	0800a709 	.word	0x0800a709
 800a6a4:	0800a685 	.word	0x0800a685
 800a6a8:	0800a685 	.word	0x0800a685
 800a6ac:	0800a685 	.word	0x0800a685
 800a6b0:	0800a685 	.word	0x0800a685
 800a6b4:	0800a709 	.word	0x0800a709
 800a6b8:	0800a685 	.word	0x0800a685
 800a6bc:	0800a685 	.word	0x0800a685
 800a6c0:	0800a685 	.word	0x0800a685
 800a6c4:	0800a685 	.word	0x0800a685
 800a6c8:	0800a815 	.word	0x0800a815
 800a6cc:	0800a739 	.word	0x0800a739
 800a6d0:	0800a7f7 	.word	0x0800a7f7
 800a6d4:	0800a685 	.word	0x0800a685
 800a6d8:	0800a685 	.word	0x0800a685
 800a6dc:	0800a837 	.word	0x0800a837
 800a6e0:	0800a685 	.word	0x0800a685
 800a6e4:	0800a739 	.word	0x0800a739
 800a6e8:	0800a685 	.word	0x0800a685
 800a6ec:	0800a685 	.word	0x0800a685
 800a6f0:	0800a7ff 	.word	0x0800a7ff
 800a6f4:	682b      	ldr	r3, [r5, #0]
 800a6f6:	1d1a      	adds	r2, r3, #4
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	602a      	str	r2, [r5, #0]
 800a6fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a700:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a704:	2301      	movs	r3, #1
 800a706:	e0a3      	b.n	800a850 <_printf_i+0x1f4>
 800a708:	6820      	ldr	r0, [r4, #0]
 800a70a:	6829      	ldr	r1, [r5, #0]
 800a70c:	0606      	lsls	r6, r0, #24
 800a70e:	f101 0304 	add.w	r3, r1, #4
 800a712:	d50a      	bpl.n	800a72a <_printf_i+0xce>
 800a714:	680e      	ldr	r6, [r1, #0]
 800a716:	602b      	str	r3, [r5, #0]
 800a718:	2e00      	cmp	r6, #0
 800a71a:	da03      	bge.n	800a724 <_printf_i+0xc8>
 800a71c:	232d      	movs	r3, #45	; 0x2d
 800a71e:	4276      	negs	r6, r6
 800a720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a724:	485e      	ldr	r0, [pc, #376]	; (800a8a0 <_printf_i+0x244>)
 800a726:	230a      	movs	r3, #10
 800a728:	e019      	b.n	800a75e <_printf_i+0x102>
 800a72a:	680e      	ldr	r6, [r1, #0]
 800a72c:	602b      	str	r3, [r5, #0]
 800a72e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a732:	bf18      	it	ne
 800a734:	b236      	sxthne	r6, r6
 800a736:	e7ef      	b.n	800a718 <_printf_i+0xbc>
 800a738:	682b      	ldr	r3, [r5, #0]
 800a73a:	6820      	ldr	r0, [r4, #0]
 800a73c:	1d19      	adds	r1, r3, #4
 800a73e:	6029      	str	r1, [r5, #0]
 800a740:	0601      	lsls	r1, r0, #24
 800a742:	d501      	bpl.n	800a748 <_printf_i+0xec>
 800a744:	681e      	ldr	r6, [r3, #0]
 800a746:	e002      	b.n	800a74e <_printf_i+0xf2>
 800a748:	0646      	lsls	r6, r0, #25
 800a74a:	d5fb      	bpl.n	800a744 <_printf_i+0xe8>
 800a74c:	881e      	ldrh	r6, [r3, #0]
 800a74e:	4854      	ldr	r0, [pc, #336]	; (800a8a0 <_printf_i+0x244>)
 800a750:	2f6f      	cmp	r7, #111	; 0x6f
 800a752:	bf0c      	ite	eq
 800a754:	2308      	moveq	r3, #8
 800a756:	230a      	movne	r3, #10
 800a758:	2100      	movs	r1, #0
 800a75a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a75e:	6865      	ldr	r5, [r4, #4]
 800a760:	60a5      	str	r5, [r4, #8]
 800a762:	2d00      	cmp	r5, #0
 800a764:	bfa2      	ittt	ge
 800a766:	6821      	ldrge	r1, [r4, #0]
 800a768:	f021 0104 	bicge.w	r1, r1, #4
 800a76c:	6021      	strge	r1, [r4, #0]
 800a76e:	b90e      	cbnz	r6, 800a774 <_printf_i+0x118>
 800a770:	2d00      	cmp	r5, #0
 800a772:	d04d      	beq.n	800a810 <_printf_i+0x1b4>
 800a774:	4615      	mov	r5, r2
 800a776:	fbb6 f1f3 	udiv	r1, r6, r3
 800a77a:	fb03 6711 	mls	r7, r3, r1, r6
 800a77e:	5dc7      	ldrb	r7, [r0, r7]
 800a780:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a784:	4637      	mov	r7, r6
 800a786:	42bb      	cmp	r3, r7
 800a788:	460e      	mov	r6, r1
 800a78a:	d9f4      	bls.n	800a776 <_printf_i+0x11a>
 800a78c:	2b08      	cmp	r3, #8
 800a78e:	d10b      	bne.n	800a7a8 <_printf_i+0x14c>
 800a790:	6823      	ldr	r3, [r4, #0]
 800a792:	07de      	lsls	r6, r3, #31
 800a794:	d508      	bpl.n	800a7a8 <_printf_i+0x14c>
 800a796:	6923      	ldr	r3, [r4, #16]
 800a798:	6861      	ldr	r1, [r4, #4]
 800a79a:	4299      	cmp	r1, r3
 800a79c:	bfde      	ittt	le
 800a79e:	2330      	movle	r3, #48	; 0x30
 800a7a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a7a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a7a8:	1b52      	subs	r2, r2, r5
 800a7aa:	6122      	str	r2, [r4, #16]
 800a7ac:	f8cd a000 	str.w	sl, [sp]
 800a7b0:	464b      	mov	r3, r9
 800a7b2:	aa03      	add	r2, sp, #12
 800a7b4:	4621      	mov	r1, r4
 800a7b6:	4640      	mov	r0, r8
 800a7b8:	f7ff fee2 	bl	800a580 <_printf_common>
 800a7bc:	3001      	adds	r0, #1
 800a7be:	d14c      	bne.n	800a85a <_printf_i+0x1fe>
 800a7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7c4:	b004      	add	sp, #16
 800a7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ca:	4835      	ldr	r0, [pc, #212]	; (800a8a0 <_printf_i+0x244>)
 800a7cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a7d0:	6829      	ldr	r1, [r5, #0]
 800a7d2:	6823      	ldr	r3, [r4, #0]
 800a7d4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a7d8:	6029      	str	r1, [r5, #0]
 800a7da:	061d      	lsls	r5, r3, #24
 800a7dc:	d514      	bpl.n	800a808 <_printf_i+0x1ac>
 800a7de:	07df      	lsls	r7, r3, #31
 800a7e0:	bf44      	itt	mi
 800a7e2:	f043 0320 	orrmi.w	r3, r3, #32
 800a7e6:	6023      	strmi	r3, [r4, #0]
 800a7e8:	b91e      	cbnz	r6, 800a7f2 <_printf_i+0x196>
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	f023 0320 	bic.w	r3, r3, #32
 800a7f0:	6023      	str	r3, [r4, #0]
 800a7f2:	2310      	movs	r3, #16
 800a7f4:	e7b0      	b.n	800a758 <_printf_i+0xfc>
 800a7f6:	6823      	ldr	r3, [r4, #0]
 800a7f8:	f043 0320 	orr.w	r3, r3, #32
 800a7fc:	6023      	str	r3, [r4, #0]
 800a7fe:	2378      	movs	r3, #120	; 0x78
 800a800:	4828      	ldr	r0, [pc, #160]	; (800a8a4 <_printf_i+0x248>)
 800a802:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a806:	e7e3      	b.n	800a7d0 <_printf_i+0x174>
 800a808:	0659      	lsls	r1, r3, #25
 800a80a:	bf48      	it	mi
 800a80c:	b2b6      	uxthmi	r6, r6
 800a80e:	e7e6      	b.n	800a7de <_printf_i+0x182>
 800a810:	4615      	mov	r5, r2
 800a812:	e7bb      	b.n	800a78c <_printf_i+0x130>
 800a814:	682b      	ldr	r3, [r5, #0]
 800a816:	6826      	ldr	r6, [r4, #0]
 800a818:	6961      	ldr	r1, [r4, #20]
 800a81a:	1d18      	adds	r0, r3, #4
 800a81c:	6028      	str	r0, [r5, #0]
 800a81e:	0635      	lsls	r5, r6, #24
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	d501      	bpl.n	800a828 <_printf_i+0x1cc>
 800a824:	6019      	str	r1, [r3, #0]
 800a826:	e002      	b.n	800a82e <_printf_i+0x1d2>
 800a828:	0670      	lsls	r0, r6, #25
 800a82a:	d5fb      	bpl.n	800a824 <_printf_i+0x1c8>
 800a82c:	8019      	strh	r1, [r3, #0]
 800a82e:	2300      	movs	r3, #0
 800a830:	6123      	str	r3, [r4, #16]
 800a832:	4615      	mov	r5, r2
 800a834:	e7ba      	b.n	800a7ac <_printf_i+0x150>
 800a836:	682b      	ldr	r3, [r5, #0]
 800a838:	1d1a      	adds	r2, r3, #4
 800a83a:	602a      	str	r2, [r5, #0]
 800a83c:	681d      	ldr	r5, [r3, #0]
 800a83e:	6862      	ldr	r2, [r4, #4]
 800a840:	2100      	movs	r1, #0
 800a842:	4628      	mov	r0, r5
 800a844:	f7f5 fcd4 	bl	80001f0 <memchr>
 800a848:	b108      	cbz	r0, 800a84e <_printf_i+0x1f2>
 800a84a:	1b40      	subs	r0, r0, r5
 800a84c:	6060      	str	r0, [r4, #4]
 800a84e:	6863      	ldr	r3, [r4, #4]
 800a850:	6123      	str	r3, [r4, #16]
 800a852:	2300      	movs	r3, #0
 800a854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a858:	e7a8      	b.n	800a7ac <_printf_i+0x150>
 800a85a:	6923      	ldr	r3, [r4, #16]
 800a85c:	462a      	mov	r2, r5
 800a85e:	4649      	mov	r1, r9
 800a860:	4640      	mov	r0, r8
 800a862:	47d0      	blx	sl
 800a864:	3001      	adds	r0, #1
 800a866:	d0ab      	beq.n	800a7c0 <_printf_i+0x164>
 800a868:	6823      	ldr	r3, [r4, #0]
 800a86a:	079b      	lsls	r3, r3, #30
 800a86c:	d413      	bmi.n	800a896 <_printf_i+0x23a>
 800a86e:	68e0      	ldr	r0, [r4, #12]
 800a870:	9b03      	ldr	r3, [sp, #12]
 800a872:	4298      	cmp	r0, r3
 800a874:	bfb8      	it	lt
 800a876:	4618      	movlt	r0, r3
 800a878:	e7a4      	b.n	800a7c4 <_printf_i+0x168>
 800a87a:	2301      	movs	r3, #1
 800a87c:	4632      	mov	r2, r6
 800a87e:	4649      	mov	r1, r9
 800a880:	4640      	mov	r0, r8
 800a882:	47d0      	blx	sl
 800a884:	3001      	adds	r0, #1
 800a886:	d09b      	beq.n	800a7c0 <_printf_i+0x164>
 800a888:	3501      	adds	r5, #1
 800a88a:	68e3      	ldr	r3, [r4, #12]
 800a88c:	9903      	ldr	r1, [sp, #12]
 800a88e:	1a5b      	subs	r3, r3, r1
 800a890:	42ab      	cmp	r3, r5
 800a892:	dcf2      	bgt.n	800a87a <_printf_i+0x21e>
 800a894:	e7eb      	b.n	800a86e <_printf_i+0x212>
 800a896:	2500      	movs	r5, #0
 800a898:	f104 0619 	add.w	r6, r4, #25
 800a89c:	e7f5      	b.n	800a88a <_printf_i+0x22e>
 800a89e:	bf00      	nop
 800a8a0:	0800b35a 	.word	0x0800b35a
 800a8a4:	0800b36b 	.word	0x0800b36b

0800a8a8 <memmove>:
 800a8a8:	4288      	cmp	r0, r1
 800a8aa:	b510      	push	{r4, lr}
 800a8ac:	eb01 0402 	add.w	r4, r1, r2
 800a8b0:	d902      	bls.n	800a8b8 <memmove+0x10>
 800a8b2:	4284      	cmp	r4, r0
 800a8b4:	4623      	mov	r3, r4
 800a8b6:	d807      	bhi.n	800a8c8 <memmove+0x20>
 800a8b8:	1e43      	subs	r3, r0, #1
 800a8ba:	42a1      	cmp	r1, r4
 800a8bc:	d008      	beq.n	800a8d0 <memmove+0x28>
 800a8be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8c6:	e7f8      	b.n	800a8ba <memmove+0x12>
 800a8c8:	4402      	add	r2, r0
 800a8ca:	4601      	mov	r1, r0
 800a8cc:	428a      	cmp	r2, r1
 800a8ce:	d100      	bne.n	800a8d2 <memmove+0x2a>
 800a8d0:	bd10      	pop	{r4, pc}
 800a8d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8da:	e7f7      	b.n	800a8cc <memmove+0x24>

0800a8dc <_free_r>:
 800a8dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8de:	2900      	cmp	r1, #0
 800a8e0:	d044      	beq.n	800a96c <_free_r+0x90>
 800a8e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8e6:	9001      	str	r0, [sp, #4]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f1a1 0404 	sub.w	r4, r1, #4
 800a8ee:	bfb8      	it	lt
 800a8f0:	18e4      	addlt	r4, r4, r3
 800a8f2:	f000 f913 	bl	800ab1c <__malloc_lock>
 800a8f6:	4a1e      	ldr	r2, [pc, #120]	; (800a970 <_free_r+0x94>)
 800a8f8:	9801      	ldr	r0, [sp, #4]
 800a8fa:	6813      	ldr	r3, [r2, #0]
 800a8fc:	b933      	cbnz	r3, 800a90c <_free_r+0x30>
 800a8fe:	6063      	str	r3, [r4, #4]
 800a900:	6014      	str	r4, [r2, #0]
 800a902:	b003      	add	sp, #12
 800a904:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a908:	f000 b90e 	b.w	800ab28 <__malloc_unlock>
 800a90c:	42a3      	cmp	r3, r4
 800a90e:	d908      	bls.n	800a922 <_free_r+0x46>
 800a910:	6825      	ldr	r5, [r4, #0]
 800a912:	1961      	adds	r1, r4, r5
 800a914:	428b      	cmp	r3, r1
 800a916:	bf01      	itttt	eq
 800a918:	6819      	ldreq	r1, [r3, #0]
 800a91a:	685b      	ldreq	r3, [r3, #4]
 800a91c:	1949      	addeq	r1, r1, r5
 800a91e:	6021      	streq	r1, [r4, #0]
 800a920:	e7ed      	b.n	800a8fe <_free_r+0x22>
 800a922:	461a      	mov	r2, r3
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	b10b      	cbz	r3, 800a92c <_free_r+0x50>
 800a928:	42a3      	cmp	r3, r4
 800a92a:	d9fa      	bls.n	800a922 <_free_r+0x46>
 800a92c:	6811      	ldr	r1, [r2, #0]
 800a92e:	1855      	adds	r5, r2, r1
 800a930:	42a5      	cmp	r5, r4
 800a932:	d10b      	bne.n	800a94c <_free_r+0x70>
 800a934:	6824      	ldr	r4, [r4, #0]
 800a936:	4421      	add	r1, r4
 800a938:	1854      	adds	r4, r2, r1
 800a93a:	42a3      	cmp	r3, r4
 800a93c:	6011      	str	r1, [r2, #0]
 800a93e:	d1e0      	bne.n	800a902 <_free_r+0x26>
 800a940:	681c      	ldr	r4, [r3, #0]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	6053      	str	r3, [r2, #4]
 800a946:	4421      	add	r1, r4
 800a948:	6011      	str	r1, [r2, #0]
 800a94a:	e7da      	b.n	800a902 <_free_r+0x26>
 800a94c:	d902      	bls.n	800a954 <_free_r+0x78>
 800a94e:	230c      	movs	r3, #12
 800a950:	6003      	str	r3, [r0, #0]
 800a952:	e7d6      	b.n	800a902 <_free_r+0x26>
 800a954:	6825      	ldr	r5, [r4, #0]
 800a956:	1961      	adds	r1, r4, r5
 800a958:	428b      	cmp	r3, r1
 800a95a:	bf04      	itt	eq
 800a95c:	6819      	ldreq	r1, [r3, #0]
 800a95e:	685b      	ldreq	r3, [r3, #4]
 800a960:	6063      	str	r3, [r4, #4]
 800a962:	bf04      	itt	eq
 800a964:	1949      	addeq	r1, r1, r5
 800a966:	6021      	streq	r1, [r4, #0]
 800a968:	6054      	str	r4, [r2, #4]
 800a96a:	e7ca      	b.n	800a902 <_free_r+0x26>
 800a96c:	b003      	add	sp, #12
 800a96e:	bd30      	pop	{r4, r5, pc}
 800a970:	20001dac 	.word	0x20001dac

0800a974 <sbrk_aligned>:
 800a974:	b570      	push	{r4, r5, r6, lr}
 800a976:	4e0e      	ldr	r6, [pc, #56]	; (800a9b0 <sbrk_aligned+0x3c>)
 800a978:	460c      	mov	r4, r1
 800a97a:	6831      	ldr	r1, [r6, #0]
 800a97c:	4605      	mov	r5, r0
 800a97e:	b911      	cbnz	r1, 800a986 <sbrk_aligned+0x12>
 800a980:	f000 f8bc 	bl	800aafc <_sbrk_r>
 800a984:	6030      	str	r0, [r6, #0]
 800a986:	4621      	mov	r1, r4
 800a988:	4628      	mov	r0, r5
 800a98a:	f000 f8b7 	bl	800aafc <_sbrk_r>
 800a98e:	1c43      	adds	r3, r0, #1
 800a990:	d00a      	beq.n	800a9a8 <sbrk_aligned+0x34>
 800a992:	1cc4      	adds	r4, r0, #3
 800a994:	f024 0403 	bic.w	r4, r4, #3
 800a998:	42a0      	cmp	r0, r4
 800a99a:	d007      	beq.n	800a9ac <sbrk_aligned+0x38>
 800a99c:	1a21      	subs	r1, r4, r0
 800a99e:	4628      	mov	r0, r5
 800a9a0:	f000 f8ac 	bl	800aafc <_sbrk_r>
 800a9a4:	3001      	adds	r0, #1
 800a9a6:	d101      	bne.n	800a9ac <sbrk_aligned+0x38>
 800a9a8:	f04f 34ff 	mov.w	r4, #4294967295
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	bd70      	pop	{r4, r5, r6, pc}
 800a9b0:	20001db0 	.word	0x20001db0

0800a9b4 <_malloc_r>:
 800a9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b8:	1ccd      	adds	r5, r1, #3
 800a9ba:	f025 0503 	bic.w	r5, r5, #3
 800a9be:	3508      	adds	r5, #8
 800a9c0:	2d0c      	cmp	r5, #12
 800a9c2:	bf38      	it	cc
 800a9c4:	250c      	movcc	r5, #12
 800a9c6:	2d00      	cmp	r5, #0
 800a9c8:	4607      	mov	r7, r0
 800a9ca:	db01      	blt.n	800a9d0 <_malloc_r+0x1c>
 800a9cc:	42a9      	cmp	r1, r5
 800a9ce:	d905      	bls.n	800a9dc <_malloc_r+0x28>
 800a9d0:	230c      	movs	r3, #12
 800a9d2:	603b      	str	r3, [r7, #0]
 800a9d4:	2600      	movs	r6, #0
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9dc:	4e2e      	ldr	r6, [pc, #184]	; (800aa98 <_malloc_r+0xe4>)
 800a9de:	f000 f89d 	bl	800ab1c <__malloc_lock>
 800a9e2:	6833      	ldr	r3, [r6, #0]
 800a9e4:	461c      	mov	r4, r3
 800a9e6:	bb34      	cbnz	r4, 800aa36 <_malloc_r+0x82>
 800a9e8:	4629      	mov	r1, r5
 800a9ea:	4638      	mov	r0, r7
 800a9ec:	f7ff ffc2 	bl	800a974 <sbrk_aligned>
 800a9f0:	1c43      	adds	r3, r0, #1
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	d14d      	bne.n	800aa92 <_malloc_r+0xde>
 800a9f6:	6834      	ldr	r4, [r6, #0]
 800a9f8:	4626      	mov	r6, r4
 800a9fa:	2e00      	cmp	r6, #0
 800a9fc:	d140      	bne.n	800aa80 <_malloc_r+0xcc>
 800a9fe:	6823      	ldr	r3, [r4, #0]
 800aa00:	4631      	mov	r1, r6
 800aa02:	4638      	mov	r0, r7
 800aa04:	eb04 0803 	add.w	r8, r4, r3
 800aa08:	f000 f878 	bl	800aafc <_sbrk_r>
 800aa0c:	4580      	cmp	r8, r0
 800aa0e:	d13a      	bne.n	800aa86 <_malloc_r+0xd2>
 800aa10:	6821      	ldr	r1, [r4, #0]
 800aa12:	3503      	adds	r5, #3
 800aa14:	1a6d      	subs	r5, r5, r1
 800aa16:	f025 0503 	bic.w	r5, r5, #3
 800aa1a:	3508      	adds	r5, #8
 800aa1c:	2d0c      	cmp	r5, #12
 800aa1e:	bf38      	it	cc
 800aa20:	250c      	movcc	r5, #12
 800aa22:	4629      	mov	r1, r5
 800aa24:	4638      	mov	r0, r7
 800aa26:	f7ff ffa5 	bl	800a974 <sbrk_aligned>
 800aa2a:	3001      	adds	r0, #1
 800aa2c:	d02b      	beq.n	800aa86 <_malloc_r+0xd2>
 800aa2e:	6823      	ldr	r3, [r4, #0]
 800aa30:	442b      	add	r3, r5
 800aa32:	6023      	str	r3, [r4, #0]
 800aa34:	e00e      	b.n	800aa54 <_malloc_r+0xa0>
 800aa36:	6822      	ldr	r2, [r4, #0]
 800aa38:	1b52      	subs	r2, r2, r5
 800aa3a:	d41e      	bmi.n	800aa7a <_malloc_r+0xc6>
 800aa3c:	2a0b      	cmp	r2, #11
 800aa3e:	d916      	bls.n	800aa6e <_malloc_r+0xba>
 800aa40:	1961      	adds	r1, r4, r5
 800aa42:	42a3      	cmp	r3, r4
 800aa44:	6025      	str	r5, [r4, #0]
 800aa46:	bf18      	it	ne
 800aa48:	6059      	strne	r1, [r3, #4]
 800aa4a:	6863      	ldr	r3, [r4, #4]
 800aa4c:	bf08      	it	eq
 800aa4e:	6031      	streq	r1, [r6, #0]
 800aa50:	5162      	str	r2, [r4, r5]
 800aa52:	604b      	str	r3, [r1, #4]
 800aa54:	4638      	mov	r0, r7
 800aa56:	f104 060b 	add.w	r6, r4, #11
 800aa5a:	f000 f865 	bl	800ab28 <__malloc_unlock>
 800aa5e:	f026 0607 	bic.w	r6, r6, #7
 800aa62:	1d23      	adds	r3, r4, #4
 800aa64:	1af2      	subs	r2, r6, r3
 800aa66:	d0b6      	beq.n	800a9d6 <_malloc_r+0x22>
 800aa68:	1b9b      	subs	r3, r3, r6
 800aa6a:	50a3      	str	r3, [r4, r2]
 800aa6c:	e7b3      	b.n	800a9d6 <_malloc_r+0x22>
 800aa6e:	6862      	ldr	r2, [r4, #4]
 800aa70:	42a3      	cmp	r3, r4
 800aa72:	bf0c      	ite	eq
 800aa74:	6032      	streq	r2, [r6, #0]
 800aa76:	605a      	strne	r2, [r3, #4]
 800aa78:	e7ec      	b.n	800aa54 <_malloc_r+0xa0>
 800aa7a:	4623      	mov	r3, r4
 800aa7c:	6864      	ldr	r4, [r4, #4]
 800aa7e:	e7b2      	b.n	800a9e6 <_malloc_r+0x32>
 800aa80:	4634      	mov	r4, r6
 800aa82:	6876      	ldr	r6, [r6, #4]
 800aa84:	e7b9      	b.n	800a9fa <_malloc_r+0x46>
 800aa86:	230c      	movs	r3, #12
 800aa88:	603b      	str	r3, [r7, #0]
 800aa8a:	4638      	mov	r0, r7
 800aa8c:	f000 f84c 	bl	800ab28 <__malloc_unlock>
 800aa90:	e7a1      	b.n	800a9d6 <_malloc_r+0x22>
 800aa92:	6025      	str	r5, [r4, #0]
 800aa94:	e7de      	b.n	800aa54 <_malloc_r+0xa0>
 800aa96:	bf00      	nop
 800aa98:	20001dac 	.word	0x20001dac

0800aa9c <_realloc_r>:
 800aa9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa0:	4680      	mov	r8, r0
 800aaa2:	4614      	mov	r4, r2
 800aaa4:	460e      	mov	r6, r1
 800aaa6:	b921      	cbnz	r1, 800aab2 <_realloc_r+0x16>
 800aaa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaac:	4611      	mov	r1, r2
 800aaae:	f7ff bf81 	b.w	800a9b4 <_malloc_r>
 800aab2:	b92a      	cbnz	r2, 800aac0 <_realloc_r+0x24>
 800aab4:	f7ff ff12 	bl	800a8dc <_free_r>
 800aab8:	4625      	mov	r5, r4
 800aaba:	4628      	mov	r0, r5
 800aabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aac0:	f000 f838 	bl	800ab34 <_malloc_usable_size_r>
 800aac4:	4284      	cmp	r4, r0
 800aac6:	4607      	mov	r7, r0
 800aac8:	d802      	bhi.n	800aad0 <_realloc_r+0x34>
 800aaca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aace:	d812      	bhi.n	800aaf6 <_realloc_r+0x5a>
 800aad0:	4621      	mov	r1, r4
 800aad2:	4640      	mov	r0, r8
 800aad4:	f7ff ff6e 	bl	800a9b4 <_malloc_r>
 800aad8:	4605      	mov	r5, r0
 800aada:	2800      	cmp	r0, #0
 800aadc:	d0ed      	beq.n	800aaba <_realloc_r+0x1e>
 800aade:	42bc      	cmp	r4, r7
 800aae0:	4622      	mov	r2, r4
 800aae2:	4631      	mov	r1, r6
 800aae4:	bf28      	it	cs
 800aae6:	463a      	movcs	r2, r7
 800aae8:	f7ff fade 	bl	800a0a8 <memcpy>
 800aaec:	4631      	mov	r1, r6
 800aaee:	4640      	mov	r0, r8
 800aaf0:	f7ff fef4 	bl	800a8dc <_free_r>
 800aaf4:	e7e1      	b.n	800aaba <_realloc_r+0x1e>
 800aaf6:	4635      	mov	r5, r6
 800aaf8:	e7df      	b.n	800aaba <_realloc_r+0x1e>
	...

0800aafc <_sbrk_r>:
 800aafc:	b538      	push	{r3, r4, r5, lr}
 800aafe:	4d06      	ldr	r5, [pc, #24]	; (800ab18 <_sbrk_r+0x1c>)
 800ab00:	2300      	movs	r3, #0
 800ab02:	4604      	mov	r4, r0
 800ab04:	4608      	mov	r0, r1
 800ab06:	602b      	str	r3, [r5, #0]
 800ab08:	f7f7 fd7c 	bl	8002604 <_sbrk>
 800ab0c:	1c43      	adds	r3, r0, #1
 800ab0e:	d102      	bne.n	800ab16 <_sbrk_r+0x1a>
 800ab10:	682b      	ldr	r3, [r5, #0]
 800ab12:	b103      	cbz	r3, 800ab16 <_sbrk_r+0x1a>
 800ab14:	6023      	str	r3, [r4, #0]
 800ab16:	bd38      	pop	{r3, r4, r5, pc}
 800ab18:	20001db4 	.word	0x20001db4

0800ab1c <__malloc_lock>:
 800ab1c:	4801      	ldr	r0, [pc, #4]	; (800ab24 <__malloc_lock+0x8>)
 800ab1e:	f000 b811 	b.w	800ab44 <__retarget_lock_acquire_recursive>
 800ab22:	bf00      	nop
 800ab24:	20001db8 	.word	0x20001db8

0800ab28 <__malloc_unlock>:
 800ab28:	4801      	ldr	r0, [pc, #4]	; (800ab30 <__malloc_unlock+0x8>)
 800ab2a:	f000 b80c 	b.w	800ab46 <__retarget_lock_release_recursive>
 800ab2e:	bf00      	nop
 800ab30:	20001db8 	.word	0x20001db8

0800ab34 <_malloc_usable_size_r>:
 800ab34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab38:	1f18      	subs	r0, r3, #4
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	bfbc      	itt	lt
 800ab3e:	580b      	ldrlt	r3, [r1, r0]
 800ab40:	18c0      	addlt	r0, r0, r3
 800ab42:	4770      	bx	lr

0800ab44 <__retarget_lock_acquire_recursive>:
 800ab44:	4770      	bx	lr

0800ab46 <__retarget_lock_release_recursive>:
 800ab46:	4770      	bx	lr

0800ab48 <_init>:
 800ab48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab4a:	bf00      	nop
 800ab4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab4e:	bc08      	pop	{r3}
 800ab50:	469e      	mov	lr, r3
 800ab52:	4770      	bx	lr

0800ab54 <_fini>:
 800ab54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab56:	bf00      	nop
 800ab58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab5a:	bc08      	pop	{r3}
 800ab5c:	469e      	mov	lr, r3
 800ab5e:	4770      	bx	lr


3DLED_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ebc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004050  08004050  00014050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004068  08004068  0002780c  2**0
                  CONTENTS
  4 .ARM          00000008  08004068  08004068  00014068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004070  08004070  0002780c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004070  08004070  00014070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004074  08004074  00014074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000780c  20000000  08004078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001080  2000780c  0800b884  0002780c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000888c  0800b884  0002888c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002780c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b276  00000000  00000000  0002783c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa0  00000000  00000000  00032ab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  00034558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  00034fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ae7  00000000  00000000  00035960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba60  00000000  00000000  0004b447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a221  00000000  00000000  00056ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e10c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b14  00000000  00000000  000e111c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000780c 	.word	0x2000780c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004038 	.word	0x08004038

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20007810 	.word	0x20007810
 80001d0:	08004038 	.word	0x08004038

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	Layer1.timer = &htim1;
 80004d2:	4b99      	ldr	r3, [pc, #612]	; (8000738 <main+0x26c>)
 80004d4:	4a99      	ldr	r2, [pc, #612]	; (800073c <main+0x270>)
 80004d6:	601a      	str	r2, [r3, #0]
	Layer1.dma = &hdma_tim1_ch1;
 80004d8:	4b97      	ldr	r3, [pc, #604]	; (8000738 <main+0x26c>)
 80004da:	4a99      	ldr	r2, [pc, #612]	; (8000740 <main+0x274>)
 80004dc:	605a      	str	r2, [r3, #4]
	Layer1.channel = TIM_CHANNEL_1;
 80004de:	4b96      	ldr	r3, [pc, #600]	; (8000738 <main+0x26c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	721a      	strb	r2, [r3, #8]

	Layer2.timer = &htim5;
 80004e4:	4b97      	ldr	r3, [pc, #604]	; (8000744 <main+0x278>)
 80004e6:	4a98      	ldr	r2, [pc, #608]	; (8000748 <main+0x27c>)
 80004e8:	601a      	str	r2, [r3, #0]
	Layer2.dma = &hdma_tim5_ch4_trig;
 80004ea:	4b96      	ldr	r3, [pc, #600]	; (8000744 <main+0x278>)
 80004ec:	4a97      	ldr	r2, [pc, #604]	; (800074c <main+0x280>)
 80004ee:	605a      	str	r2, [r3, #4]
	Layer2.channel = TIM_CHANNEL_4;
 80004f0:	4b94      	ldr	r3, [pc, #592]	; (8000744 <main+0x278>)
 80004f2:	220c      	movs	r2, #12
 80004f4:	721a      	strb	r2, [r3, #8]

	Layer3.timer = &htim3;
 80004f6:	4b96      	ldr	r3, [pc, #600]	; (8000750 <main+0x284>)
 80004f8:	4a96      	ldr	r2, [pc, #600]	; (8000754 <main+0x288>)
 80004fa:	601a      	str	r2, [r3, #0]
	Layer3.dma = &hdma_tim3_ch2;
 80004fc:	4b94      	ldr	r3, [pc, #592]	; (8000750 <main+0x284>)
 80004fe:	4a96      	ldr	r2, [pc, #600]	; (8000758 <main+0x28c>)
 8000500:	605a      	str	r2, [r3, #4]
	Layer3.channel = TIM_CHANNEL_2;
 8000502:	4b93      	ldr	r3, [pc, #588]	; (8000750 <main+0x284>)
 8000504:	2204      	movs	r2, #4
 8000506:	721a      	strb	r2, [r3, #8]

	Layer4.timer = &htim4;
 8000508:	4b94      	ldr	r3, [pc, #592]	; (800075c <main+0x290>)
 800050a:	4a95      	ldr	r2, [pc, #596]	; (8000760 <main+0x294>)
 800050c:	601a      	str	r2, [r3, #0]
	Layer4.dma = &hdma_tim4_ch1;
 800050e:	4b93      	ldr	r3, [pc, #588]	; (800075c <main+0x290>)
 8000510:	4a94      	ldr	r2, [pc, #592]	; (8000764 <main+0x298>)
 8000512:	605a      	str	r2, [r3, #4]
	Layer4.channel = TIM_CHANNEL_1;
 8000514:	4b91      	ldr	r3, [pc, #580]	; (800075c <main+0x290>)
 8000516:	2200      	movs	r2, #0
 8000518:	721a      	strb	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f001 f955 	bl	80017c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f925 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 fbd7 	bl	8000cd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000526:	f000 fb8f 	bl	8000c48 <MX_DMA_Init>
  MX_TIM1_Init();
 800052a:	f000 f98b 	bl	8000844 <MX_TIM1_Init>
  MX_TIM4_Init();
 800052e:	f000 fa9f 	bl	8000a70 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000532:	f000 fa27 	bl	8000984 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000536:	f000 fb11 	bl	8000b5c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  uint8_t odd = 1;
 800053a:	2301      	movs	r3, #1
 800053c:	71fb      	strb	r3, [r7, #7]
  uint8_t index = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	71bb      	strb	r3, [r7, #6]
  uint8_t counter = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	717b      	strb	r3, [r7, #5]
  uint8_t number_of_animation = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	713b      	strb	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	for(uint16_t i = 0; i < 256; i++) {
 800054a:	2300      	movs	r3, #0
 800054c:	807b      	strh	r3, [r7, #2]
 800054e:	e0d2      	b.n	80006f6 <main+0x22a>
		if(i % 16 == 0)
 8000550:	887b      	ldrh	r3, [r7, #2]
 8000552:	f003 030f 	and.w	r3, r3, #15
 8000556:	b29b      	uxth	r3, r3
 8000558:	2b00      	cmp	r3, #0
 800055a:	d106      	bne.n	800056a <main+0x9e>
		{
			odd ^= 1;
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	f083 0301 	eor.w	r3, r3, #1
 8000562:	71fb      	strb	r3, [r7, #7]
			counter++;
 8000564:	797b      	ldrb	r3, [r7, #5]
 8000566:	3301      	adds	r3, #1
 8000568:	717b      	strb	r3, [r7, #5]
		}
		if (odd){
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d00c      	beq.n	800058a <main+0xbe>
			index = (counter * 16 - 1) - (i % 16);
 8000570:	797b      	ldrb	r3, [r7, #5]
 8000572:	011b      	lsls	r3, r3, #4
 8000574:	b2da      	uxtb	r2, r3
 8000576:	887b      	ldrh	r3, [r7, #2]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	f003 030f 	and.w	r3, r3, #15
 800057e:	b2db      	uxtb	r3, r3
 8000580:	1ad3      	subs	r3, r2, r3
 8000582:	b2db      	uxtb	r3, r3
 8000584:	3b01      	subs	r3, #1
 8000586:	71bb      	strb	r3, [r7, #6]
 8000588:	e001      	b.n	800058e <main+0xc2>
		}
		else{
			index = i;
 800058a:	887b      	ldrh	r3, [r7, #2]
 800058c:	71bb      	strb	r3, [r7, #6]
		}

		led_set_RGB(&Layer1, i,
 800058e:	887b      	ldrh	r3, [r7, #2]
 8000590:	b2d8      	uxtb	r0, r3
					walk_array[number_of_animation][index][0],
 8000592:	7939      	ldrb	r1, [r7, #4]
 8000594:	79bb      	ldrb	r3, [r7, #6]
 8000596:	4c74      	ldr	r4, [pc, #464]	; (8000768 <main+0x29c>)
 8000598:	461a      	mov	r2, r3
 800059a:	0052      	lsls	r2, r2, #1
 800059c:	441a      	add	r2, r3
 800059e:	0093      	lsls	r3, r2, #2
 80005a0:	461a      	mov	r2, r3
 80005a2:	460b      	mov	r3, r1
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	440b      	add	r3, r1
 80005a8:	029b      	lsls	r3, r3, #10
 80005aa:	4413      	add	r3, r2
 80005ac:	4423      	add	r3, r4
 80005ae:	681b      	ldr	r3, [r3, #0]
		led_set_RGB(&Layer1, i,
 80005b0:	b2dc      	uxtb	r4, r3
                    walk_array[number_of_animation][index][1],
 80005b2:	7939      	ldrb	r1, [r7, #4]
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	4d6c      	ldr	r5, [pc, #432]	; (8000768 <main+0x29c>)
 80005b8:	461a      	mov	r2, r3
 80005ba:	0052      	lsls	r2, r2, #1
 80005bc:	441a      	add	r2, r3
 80005be:	0093      	lsls	r3, r2, #2
 80005c0:	461a      	mov	r2, r3
 80005c2:	460b      	mov	r3, r1
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	440b      	add	r3, r1
 80005c8:	029b      	lsls	r3, r3, #10
 80005ca:	4413      	add	r3, r2
 80005cc:	442b      	add	r3, r5
 80005ce:	3304      	adds	r3, #4
 80005d0:	681b      	ldr	r3, [r3, #0]
		led_set_RGB(&Layer1, i,
 80005d2:	b2dd      	uxtb	r5, r3
                    walk_array[number_of_animation][index][2]);
 80005d4:	7939      	ldrb	r1, [r7, #4]
 80005d6:	79bb      	ldrb	r3, [r7, #6]
 80005d8:	4e63      	ldr	r6, [pc, #396]	; (8000768 <main+0x29c>)
 80005da:	461a      	mov	r2, r3
 80005dc:	0052      	lsls	r2, r2, #1
 80005de:	441a      	add	r2, r3
 80005e0:	0093      	lsls	r3, r2, #2
 80005e2:	461a      	mov	r2, r3
 80005e4:	460b      	mov	r3, r1
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	440b      	add	r3, r1
 80005ea:	029b      	lsls	r3, r3, #10
 80005ec:	4413      	add	r3, r2
 80005ee:	4433      	add	r3, r6
 80005f0:	3308      	adds	r3, #8
 80005f2:	681b      	ldr	r3, [r3, #0]
		led_set_RGB(&Layer1, i,
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	462b      	mov	r3, r5
 80005fa:	4622      	mov	r2, r4
 80005fc:	4601      	mov	r1, r0
 80005fe:	484e      	ldr	r0, [pc, #312]	; (8000738 <main+0x26c>)
 8000600:	f000 ffb4 	bl	800156c <led_set_RGB>
//		led_set_RGB(&Layer2, i,
//					walk_array[number_of_animation][index][0],
//					walk_array[number_of_animation][index][1],
//					walk_array[number_of_animation][index][2]);
		led_set_RGB(&Layer3, i,
 8000604:	887b      	ldrh	r3, [r7, #2]
 8000606:	b2d8      	uxtb	r0, r3
					walk_array[number_of_animation][index][0],
 8000608:	7939      	ldrb	r1, [r7, #4]
 800060a:	79bb      	ldrb	r3, [r7, #6]
 800060c:	4c56      	ldr	r4, [pc, #344]	; (8000768 <main+0x29c>)
 800060e:	461a      	mov	r2, r3
 8000610:	0052      	lsls	r2, r2, #1
 8000612:	441a      	add	r2, r3
 8000614:	0093      	lsls	r3, r2, #2
 8000616:	461a      	mov	r2, r3
 8000618:	460b      	mov	r3, r1
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	440b      	add	r3, r1
 800061e:	029b      	lsls	r3, r3, #10
 8000620:	4413      	add	r3, r2
 8000622:	4423      	add	r3, r4
 8000624:	681b      	ldr	r3, [r3, #0]
		led_set_RGB(&Layer3, i,
 8000626:	b2dc      	uxtb	r4, r3
					walk_array[number_of_animation][index][1],
 8000628:	7939      	ldrb	r1, [r7, #4]
 800062a:	79bb      	ldrb	r3, [r7, #6]
 800062c:	4d4e      	ldr	r5, [pc, #312]	; (8000768 <main+0x29c>)
 800062e:	461a      	mov	r2, r3
 8000630:	0052      	lsls	r2, r2, #1
 8000632:	441a      	add	r2, r3
 8000634:	0093      	lsls	r3, r2, #2
 8000636:	461a      	mov	r2, r3
 8000638:	460b      	mov	r3, r1
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	440b      	add	r3, r1
 800063e:	029b      	lsls	r3, r3, #10
 8000640:	4413      	add	r3, r2
 8000642:	442b      	add	r3, r5
 8000644:	3304      	adds	r3, #4
 8000646:	681b      	ldr	r3, [r3, #0]
		led_set_RGB(&Layer3, i,
 8000648:	b2dd      	uxtb	r5, r3
					walk_array[number_of_animation][index][2]);
 800064a:	7939      	ldrb	r1, [r7, #4]
 800064c:	79bb      	ldrb	r3, [r7, #6]
 800064e:	4e46      	ldr	r6, [pc, #280]	; (8000768 <main+0x29c>)
 8000650:	461a      	mov	r2, r3
 8000652:	0052      	lsls	r2, r2, #1
 8000654:	441a      	add	r2, r3
 8000656:	0093      	lsls	r3, r2, #2
 8000658:	461a      	mov	r2, r3
 800065a:	460b      	mov	r3, r1
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	440b      	add	r3, r1
 8000660:	029b      	lsls	r3, r3, #10
 8000662:	4413      	add	r3, r2
 8000664:	4433      	add	r3, r6
 8000666:	3308      	adds	r3, #8
 8000668:	681b      	ldr	r3, [r3, #0]
		led_set_RGB(&Layer3, i,
 800066a:	b2db      	uxtb	r3, r3
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	462b      	mov	r3, r5
 8000670:	4622      	mov	r2, r4
 8000672:	4601      	mov	r1, r0
 8000674:	4836      	ldr	r0, [pc, #216]	; (8000750 <main+0x284>)
 8000676:	f000 ff79 	bl	800156c <led_set_RGB>
		led_set_RGB(&Layer4, i,
 800067a:	887b      	ldrh	r3, [r7, #2]
 800067c:	b2d8      	uxtb	r0, r3
					walk_array[number_of_animation][index][0],
 800067e:	7939      	ldrb	r1, [r7, #4]
 8000680:	79bb      	ldrb	r3, [r7, #6]
 8000682:	4c39      	ldr	r4, [pc, #228]	; (8000768 <main+0x29c>)
 8000684:	461a      	mov	r2, r3
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	441a      	add	r2, r3
 800068a:	0093      	lsls	r3, r2, #2
 800068c:	461a      	mov	r2, r3
 800068e:	460b      	mov	r3, r1
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	440b      	add	r3, r1
 8000694:	029b      	lsls	r3, r3, #10
 8000696:	4413      	add	r3, r2
 8000698:	4423      	add	r3, r4
 800069a:	681b      	ldr	r3, [r3, #0]
		led_set_RGB(&Layer4, i,
 800069c:	b2dc      	uxtb	r4, r3
					walk_array[number_of_animation][index][1],
 800069e:	7939      	ldrb	r1, [r7, #4]
 80006a0:	79bb      	ldrb	r3, [r7, #6]
 80006a2:	4d31      	ldr	r5, [pc, #196]	; (8000768 <main+0x29c>)
 80006a4:	461a      	mov	r2, r3
 80006a6:	0052      	lsls	r2, r2, #1
 80006a8:	441a      	add	r2, r3
 80006aa:	0093      	lsls	r3, r2, #2
 80006ac:	461a      	mov	r2, r3
 80006ae:	460b      	mov	r3, r1
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	440b      	add	r3, r1
 80006b4:	029b      	lsls	r3, r3, #10
 80006b6:	4413      	add	r3, r2
 80006b8:	442b      	add	r3, r5
 80006ba:	3304      	adds	r3, #4
 80006bc:	681b      	ldr	r3, [r3, #0]
		led_set_RGB(&Layer4, i,
 80006be:	b2dd      	uxtb	r5, r3
					walk_array[number_of_animation][index][2]);
 80006c0:	7939      	ldrb	r1, [r7, #4]
 80006c2:	79bb      	ldrb	r3, [r7, #6]
 80006c4:	4e28      	ldr	r6, [pc, #160]	; (8000768 <main+0x29c>)
 80006c6:	461a      	mov	r2, r3
 80006c8:	0052      	lsls	r2, r2, #1
 80006ca:	441a      	add	r2, r3
 80006cc:	0093      	lsls	r3, r2, #2
 80006ce:	461a      	mov	r2, r3
 80006d0:	460b      	mov	r3, r1
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	440b      	add	r3, r1
 80006d6:	029b      	lsls	r3, r3, #10
 80006d8:	4413      	add	r3, r2
 80006da:	4433      	add	r3, r6
 80006dc:	3308      	adds	r3, #8
 80006de:	681b      	ldr	r3, [r3, #0]
		led_set_RGB(&Layer4, i,
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	462b      	mov	r3, r5
 80006e6:	4622      	mov	r2, r4
 80006e8:	4601      	mov	r1, r0
 80006ea:	481c      	ldr	r0, [pc, #112]	; (800075c <main+0x290>)
 80006ec:	f000 ff3e 	bl	800156c <led_set_RGB>
	for(uint16_t i = 0; i < 256; i++) {
 80006f0:	887b      	ldrh	r3, [r7, #2]
 80006f2:	3301      	adds	r3, #1
 80006f4:	807b      	strh	r3, [r7, #2]
 80006f6:	887b      	ldrh	r3, [r7, #2]
 80006f8:	2bff      	cmp	r3, #255	; 0xff
 80006fa:	f67f af29 	bls.w	8000550 <main+0x84>

	}
	if(++number_of_animation == sizeof(walk_array)/sizeof(walk_array[0]))
 80006fe:	793b      	ldrb	r3, [r7, #4]
 8000700:	3301      	adds	r3, #1
 8000702:	713b      	strb	r3, [r7, #4]
 8000704:	793b      	ldrb	r3, [r7, #4]
 8000706:	2b0a      	cmp	r3, #10
 8000708:	d101      	bne.n	800070e <main+0x242>
		number_of_animation = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	713b      	strb	r3, [r7, #4]
    
	led_render(&Layer1);
 800070e:	480a      	ldr	r0, [pc, #40]	; (8000738 <main+0x26c>)
 8000710:	f000 ff63 	bl	80015da <led_render>
	HAL_Delay(10);
 8000714:	200a      	movs	r0, #10
 8000716:	f001 f8c9 	bl	80018ac <HAL_Delay>
//	led_render(&Layer2);
//	HAL_Delay(10);
	led_render(&Layer3);
 800071a:	480d      	ldr	r0, [pc, #52]	; (8000750 <main+0x284>)
 800071c:	f000 ff5d 	bl	80015da <led_render>
	HAL_Delay(10);
 8000720:	200a      	movs	r0, #10
 8000722:	f001 f8c3 	bl	80018ac <HAL_Delay>
	led_render(&Layer4);
 8000726:	480d      	ldr	r0, [pc, #52]	; (800075c <main+0x290>)
 8000728:	f000 ff57 	bl	80015da <led_render>
	HAL_Delay(500);
 800072c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000730:	f001 f8bc 	bl	80018ac <HAL_Delay>
	for(uint16_t i = 0; i < 256; i++) {
 8000734:	e709      	b.n	800054a <main+0x7e>
 8000736:	bf00      	nop
 8000738:	20007dd8 	.word	0x20007dd8
 800073c:	20007d90 	.word	0x20007d90
 8000740:	20007828 	.word	0x20007828
 8000744:	200079c0 	.word	0x200079c0
 8000748:	20007930 	.word	0x20007930
 800074c:	200078d0 	.word	0x200078d0
 8000750:	200081a8 	.word	0x200081a8
 8000754:	20007978 	.word	0x20007978
 8000758:	20007d30 	.word	0x20007d30
 800075c:	20008518 	.word	0x20008518
 8000760:	20007888 	.word	0x20007888
 8000764:	20008148 	.word	0x20008148
 8000768:	20000000 	.word	0x20000000

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b094      	sub	sp, #80	; 0x50
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	2230      	movs	r2, #48	; 0x30
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f003 fc54 	bl	8004028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	4b29      	ldr	r3, [pc, #164]	; (800083c <SystemClock_Config+0xd0>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	4a28      	ldr	r2, [pc, #160]	; (800083c <SystemClock_Config+0xd0>)
 800079a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079e:	6413      	str	r3, [r2, #64]	; 0x40
 80007a0:	4b26      	ldr	r3, [pc, #152]	; (800083c <SystemClock_Config+0xd0>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007ac:	2300      	movs	r3, #0
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	4b23      	ldr	r3, [pc, #140]	; (8000840 <SystemClock_Config+0xd4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007b8:	4a21      	ldr	r2, [pc, #132]	; (8000840 <SystemClock_Config+0xd4>)
 80007ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <SystemClock_Config+0xd4>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007cc:	2302      	movs	r3, #2
 80007ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d0:	2301      	movs	r3, #1
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d4:	2310      	movs	r3, #16
 80007d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d8:	2302      	movs	r3, #2
 80007da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007dc:	2300      	movs	r3, #0
 80007de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007e0:	2308      	movs	r3, #8
 80007e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80007e4:	2354      	movs	r3, #84	; 0x54
 80007e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007ec:	2303      	movs	r3, #3
 80007ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f0:	f107 0320 	add.w	r3, r7, #32
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 fea5 	bl	8002544 <HAL_RCC_OscConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000800:	f000 fc24 	bl	800104c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000804:	230f      	movs	r3, #15
 8000806:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000808:	2302      	movs	r3, #2
 800080a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000814:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	2102      	movs	r1, #2
 8000822:	4618      	mov	r0, r3
 8000824:	f002 f906 	bl	8002a34 <HAL_RCC_ClockConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800082e:	f000 fc0d 	bl	800104c <Error_Handler>
  }
}
 8000832:	bf00      	nop
 8000834:	3750      	adds	r7, #80	; 0x50
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800
 8000840:	40007000 	.word	0x40007000

08000844 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b096      	sub	sp, #88	; 0x58
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800084a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000858:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
 8000872:	615a      	str	r2, [r3, #20]
 8000874:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2220      	movs	r2, #32
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f003 fbd3 	bl	8004028 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000882:	4b3e      	ldr	r3, [pc, #248]	; (800097c <MX_TIM1_Init+0x138>)
 8000884:	4a3e      	ldr	r2, [pc, #248]	; (8000980 <MX_TIM1_Init+0x13c>)
 8000886:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000888:	4b3c      	ldr	r3, [pc, #240]	; (800097c <MX_TIM1_Init+0x138>)
 800088a:	2200      	movs	r2, #0
 800088c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088e:	4b3b      	ldr	r3, [pc, #236]	; (800097c <MX_TIM1_Init+0x138>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 104;
 8000894:	4b39      	ldr	r3, [pc, #228]	; (800097c <MX_TIM1_Init+0x138>)
 8000896:	2268      	movs	r2, #104	; 0x68
 8000898:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089a:	4b38      	ldr	r3, [pc, #224]	; (800097c <MX_TIM1_Init+0x138>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008a0:	4b36      	ldr	r3, [pc, #216]	; (800097c <MX_TIM1_Init+0x138>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a6:	4b35      	ldr	r3, [pc, #212]	; (800097c <MX_TIM1_Init+0x138>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008ac:	4833      	ldr	r0, [pc, #204]	; (800097c <MX_TIM1_Init+0x138>)
 80008ae:	f002 fa89 	bl	8002dc4 <HAL_TIM_Base_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80008b8:	f000 fbc8 	bl	800104c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008c6:	4619      	mov	r1, r3
 80008c8:	482c      	ldr	r0, [pc, #176]	; (800097c <MX_TIM1_Init+0x138>)
 80008ca:	f002 fe5b 	bl	8003584 <HAL_TIM_ConfigClockSource>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80008d4:	f000 fbba 	bl	800104c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008d8:	4828      	ldr	r0, [pc, #160]	; (800097c <MX_TIM1_Init+0x138>)
 80008da:	f002 fac2 	bl	8002e62 <HAL_TIM_PWM_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80008e4:	f000 fbb2 	bl	800104c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e8:	2300      	movs	r3, #0
 80008ea:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008f4:	4619      	mov	r1, r3
 80008f6:	4821      	ldr	r0, [pc, #132]	; (800097c <MX_TIM1_Init+0x138>)
 80008f8:	f003 fab2 	bl	8003e60 <HAL_TIMEx_MasterConfigSynchronization>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000902:	f000 fba3 	bl	800104c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000906:	2360      	movs	r3, #96	; 0x60
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800090e:	2300      	movs	r3, #0
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000912:	2300      	movs	r3, #0
 8000914:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800091a:	2300      	movs	r3, #0
 800091c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800091e:	2300      	movs	r3, #0
 8000920:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000926:	2200      	movs	r2, #0
 8000928:	4619      	mov	r1, r3
 800092a:	4814      	ldr	r0, [pc, #80]	; (800097c <MX_TIM1_Init+0x138>)
 800092c:	f002 fd68 	bl	8003400 <HAL_TIM_PWM_ConfigChannel>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000936:	f000 fb89 	bl	800104c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800094e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000952:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4619      	mov	r1, r3
 800095c:	4807      	ldr	r0, [pc, #28]	; (800097c <MX_TIM1_Init+0x138>)
 800095e:	f003 faed 	bl	8003f3c <HAL_TIMEx_ConfigBreakDeadTime>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000968:	f000 fb70 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <MX_TIM1_Init+0x138>)
 800096e:	f000 fcd7 	bl	8001320 <HAL_TIM_MspPostInit>

}
 8000972:	bf00      	nop
 8000974:	3758      	adds	r7, #88	; 0x58
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20007d90 	.word	0x20007d90
 8000980:	40010000 	.word	0x40010000

08000984 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08e      	sub	sp, #56	; 0x38
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800098a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000998:	f107 0320 	add.w	r3, r7, #32
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
 80009b0:	615a      	str	r2, [r3, #20]
 80009b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009b4:	4b2c      	ldr	r3, [pc, #176]	; (8000a68 <MX_TIM3_Init+0xe4>)
 80009b6:	4a2d      	ldr	r2, [pc, #180]	; (8000a6c <MX_TIM3_Init+0xe8>)
 80009b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009ba:	4b2b      	ldr	r3, [pc, #172]	; (8000a68 <MX_TIM3_Init+0xe4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c0:	4b29      	ldr	r3, [pc, #164]	; (8000a68 <MX_TIM3_Init+0xe4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 104;
 80009c6:	4b28      	ldr	r3, [pc, #160]	; (8000a68 <MX_TIM3_Init+0xe4>)
 80009c8:	2268      	movs	r2, #104	; 0x68
 80009ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009cc:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <MX_TIM3_Init+0xe4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d2:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <MX_TIM3_Init+0xe4>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009d8:	4823      	ldr	r0, [pc, #140]	; (8000a68 <MX_TIM3_Init+0xe4>)
 80009da:	f002 f9f3 	bl	8002dc4 <HAL_TIM_Base_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80009e4:	f000 fb32 	bl	800104c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f2:	4619      	mov	r1, r3
 80009f4:	481c      	ldr	r0, [pc, #112]	; (8000a68 <MX_TIM3_Init+0xe4>)
 80009f6:	f002 fdc5 	bl	8003584 <HAL_TIM_ConfigClockSource>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000a00:	f000 fb24 	bl	800104c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a04:	4818      	ldr	r0, [pc, #96]	; (8000a68 <MX_TIM3_Init+0xe4>)
 8000a06:	f002 fa2c 	bl	8002e62 <HAL_TIM_PWM_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000a10:	f000 fb1c 	bl	800104c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a1c:	f107 0320 	add.w	r3, r7, #32
 8000a20:	4619      	mov	r1, r3
 8000a22:	4811      	ldr	r0, [pc, #68]	; (8000a68 <MX_TIM3_Init+0xe4>)
 8000a24:	f003 fa1c 	bl	8003e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000a2e:	f000 fb0d 	bl	800104c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a32:	2360      	movs	r3, #96	; 0x60
 8000a34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2204      	movs	r2, #4
 8000a46:	4619      	mov	r1, r3
 8000a48:	4807      	ldr	r0, [pc, #28]	; (8000a68 <MX_TIM3_Init+0xe4>)
 8000a4a:	f002 fcd9 	bl	8003400 <HAL_TIM_PWM_ConfigChannel>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000a54:	f000 fafa 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a58:	4803      	ldr	r0, [pc, #12]	; (8000a68 <MX_TIM3_Init+0xe4>)
 8000a5a:	f000 fc61 	bl	8001320 <HAL_TIM_MspPostInit>

}
 8000a5e:	bf00      	nop
 8000a60:	3738      	adds	r7, #56	; 0x38
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20007978 	.word	0x20007978
 8000a6c:	40000400 	.word	0x40000400

08000a70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08e      	sub	sp, #56	; 0x38
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a84:	f107 0320 	add.w	r3, r7, #32
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
 8000a9c:	615a      	str	r2, [r3, #20]
 8000a9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000aa0:	4b2c      	ldr	r3, [pc, #176]	; (8000b54 <MX_TIM4_Init+0xe4>)
 8000aa2:	4a2d      	ldr	r2, [pc, #180]	; (8000b58 <MX_TIM4_Init+0xe8>)
 8000aa4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000aa6:	4b2b      	ldr	r3, [pc, #172]	; (8000b54 <MX_TIM4_Init+0xe4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aac:	4b29      	ldr	r3, [pc, #164]	; (8000b54 <MX_TIM4_Init+0xe4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 104;
 8000ab2:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <MX_TIM4_Init+0xe4>)
 8000ab4:	2268      	movs	r2, #104	; 0x68
 8000ab6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab8:	4b26      	ldr	r3, [pc, #152]	; (8000b54 <MX_TIM4_Init+0xe4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000abe:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <MX_TIM4_Init+0xe4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ac4:	4823      	ldr	r0, [pc, #140]	; (8000b54 <MX_TIM4_Init+0xe4>)
 8000ac6:	f002 f97d 	bl	8002dc4 <HAL_TIM_Base_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000ad0:	f000 fabc 	bl	800104c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ada:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	481c      	ldr	r0, [pc, #112]	; (8000b54 <MX_TIM4_Init+0xe4>)
 8000ae2:	f002 fd4f 	bl	8003584 <HAL_TIM_ConfigClockSource>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000aec:	f000 faae 	bl	800104c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000af0:	4818      	ldr	r0, [pc, #96]	; (8000b54 <MX_TIM4_Init+0xe4>)
 8000af2:	f002 f9b6 	bl	8002e62 <HAL_TIM_PWM_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000afc:	f000 faa6 	bl	800104c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b08:	f107 0320 	add.w	r3, r7, #32
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4811      	ldr	r0, [pc, #68]	; (8000b54 <MX_TIM4_Init+0xe4>)
 8000b10:	f003 f9a6 	bl	8003e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000b1a:	f000 fa97 	bl	800104c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b1e:	2360      	movs	r3, #96	; 0x60
 8000b20:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2200      	movs	r2, #0
 8000b32:	4619      	mov	r1, r3
 8000b34:	4807      	ldr	r0, [pc, #28]	; (8000b54 <MX_TIM4_Init+0xe4>)
 8000b36:	f002 fc63 	bl	8003400 <HAL_TIM_PWM_ConfigChannel>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000b40:	f000 fa84 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b44:	4803      	ldr	r0, [pc, #12]	; (8000b54 <MX_TIM4_Init+0xe4>)
 8000b46:	f000 fbeb 	bl	8001320 <HAL_TIM_MspPostInit>

}
 8000b4a:	bf00      	nop
 8000b4c:	3738      	adds	r7, #56	; 0x38
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20007888 	.word	0x20007888
 8000b58:	40000800 	.word	0x40000800

08000b5c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08e      	sub	sp, #56	; 0x38
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b70:	f107 0320 	add.w	r3, r7, #32
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
 8000b88:	615a      	str	r2, [r3, #20]
 8000b8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b8c:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <MX_TIM5_Init+0xe4>)
 8000b8e:	4a2d      	ldr	r2, [pc, #180]	; (8000c44 <MX_TIM5_Init+0xe8>)
 8000b90:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000b92:	4b2b      	ldr	r3, [pc, #172]	; (8000c40 <MX_TIM5_Init+0xe4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b98:	4b29      	ldr	r3, [pc, #164]	; (8000c40 <MX_TIM5_Init+0xe4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 104;
 8000b9e:	4b28      	ldr	r3, [pc, #160]	; (8000c40 <MX_TIM5_Init+0xe4>)
 8000ba0:	2268      	movs	r2, #104	; 0x68
 8000ba2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba4:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <MX_TIM5_Init+0xe4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000baa:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <MX_TIM5_Init+0xe4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000bb0:	4823      	ldr	r0, [pc, #140]	; (8000c40 <MX_TIM5_Init+0xe4>)
 8000bb2:	f002 f907 	bl	8002dc4 <HAL_TIM_Base_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8000bbc:	f000 fa46 	bl	800104c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	481c      	ldr	r0, [pc, #112]	; (8000c40 <MX_TIM5_Init+0xe4>)
 8000bce:	f002 fcd9 	bl	8003584 <HAL_TIM_ConfigClockSource>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8000bd8:	f000 fa38 	bl	800104c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000bdc:	4818      	ldr	r0, [pc, #96]	; (8000c40 <MX_TIM5_Init+0xe4>)
 8000bde:	f002 f940 	bl	8002e62 <HAL_TIM_PWM_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000be8:	f000 fa30 	bl	800104c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000bf4:	f107 0320 	add.w	r3, r7, #32
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4811      	ldr	r0, [pc, #68]	; (8000c40 <MX_TIM5_Init+0xe4>)
 8000bfc:	f003 f930 	bl	8003e60 <HAL_TIMEx_MasterConfigSynchronization>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8000c06:	f000 fa21 	bl	800104c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c0a:	2360      	movs	r3, #96	; 0x60
 8000c0c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	220c      	movs	r2, #12
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4807      	ldr	r0, [pc, #28]	; (8000c40 <MX_TIM5_Init+0xe4>)
 8000c22:	f002 fbed 	bl	8003400 <HAL_TIM_PWM_ConfigChannel>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8000c2c:	f000 fa0e 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000c30:	4803      	ldr	r0, [pc, #12]	; (8000c40 <MX_TIM5_Init+0xe4>)
 8000c32:	f000 fb75 	bl	8001320 <HAL_TIM_MspPostInit>

}
 8000c36:	bf00      	nop
 8000c38:	3738      	adds	r7, #56	; 0x38
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20007930 	.word	0x20007930
 8000c44:	40000c00 	.word	0x40000c00

08000c48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <MX_DMA_Init+0x88>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a1e      	ldr	r2, [pc, #120]	; (8000cd0 <MX_DMA_Init+0x88>)
 8000c58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <MX_DMA_Init+0x88>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <MX_DMA_Init+0x88>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <MX_DMA_Init+0x88>)
 8000c74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_DMA_Init+0x88>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	200b      	movs	r0, #11
 8000c8c:	f000 ff0d 	bl	8001aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c90:	200b      	movs	r0, #11
 8000c92:	f000 ff26 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	200c      	movs	r0, #12
 8000c9c:	f000 ff05 	bl	8001aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ca0:	200c      	movs	r0, #12
 8000ca2:	f000 ff1e 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2010      	movs	r0, #16
 8000cac:	f000 fefd 	bl	8001aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000cb0:	2010      	movs	r0, #16
 8000cb2:	f000 ff16 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2039      	movs	r0, #57	; 0x39
 8000cbc:	f000 fef5 	bl	8001aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000cc0:	2039      	movs	r0, #57	; 0x39
 8000cc2:	f000 ff0e 	bl	8001ae2 <HAL_NVIC_EnableIRQ>

}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800

08000cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <MX_GPIO_Init+0x4c>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a0f      	ldr	r2, [pc, #60]	; (8000d20 <MX_GPIO_Init+0x4c>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <MX_GPIO_Init+0x4c>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	603b      	str	r3, [r7, #0]
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <MX_GPIO_Init+0x4c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <MX_GPIO_Init+0x4c>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <MX_GPIO_Init+0x4c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]

}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800

08000d24 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
}

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8000d24:	b480      	push	{r7}
 8000d26:	b087      	sub	sp, #28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]

	Layers *layer;

	if(htim == &htim1){
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a57      	ldr	r2, [pc, #348]	; (8000e8c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x168>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d102      	bne.n	8000d3a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
		layer = &Layer1;
 8000d34:	4b56      	ldr	r3, [pc, #344]	; (8000e90 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16c>)
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	e014      	b.n	8000d64 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x40>
	} else if(htim == &htim5){
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a55      	ldr	r2, [pc, #340]	; (8000e94 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x170>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d102      	bne.n	8000d48 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x24>
		layer = &Layer2;
 8000d42:	4b55      	ldr	r3, [pc, #340]	; (8000e98 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x174>)
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	e00d      	b.n	8000d64 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x40>
	}else if(htim == &htim3){
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a54      	ldr	r2, [pc, #336]	; (8000e9c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x178>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d102      	bne.n	8000d56 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x32>
		layer = &Layer3;
 8000d50:	4b53      	ldr	r3, [pc, #332]	; (8000ea0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x17c>)
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	e006      	b.n	8000d64 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x40>
	}else if(htim == &htim4){
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a52      	ldr	r2, [pc, #328]	; (8000ea4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x180>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	f040 808f 	bne.w	8000e7e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x15a>
		layer = &Layer4;
 8000d60:	4b51      	ldr	r3, [pc, #324]	; (8000ea8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x184>)
 8000d62:	617b      	str	r3, [r7, #20]
	}else
		return;

	// DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
	if(layer->wr_buf_p < NUM_PIXELS) {
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8000d6a:	2bff      	cmp	r3, #255	; 0xff
 8000d6c:	d868      	bhi.n	8000e40 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x11c>
	// We're in. Fill the even buffer
	for(uint_fast8_t i = 0; i < 8; ++i) {
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	e05a      	b.n	8000e2a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x106>
		layer->wr_buf[i     ] = PWM_LO << (((layer->rgb_arr[3 * layer->wr_buf_p    ] << i) & 0x80) > 0);
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	4413      	add	r3, r2
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	4413      	add	r3, r2
 8000d84:	7a5b      	ldrb	r3, [r3, #9]
 8000d86:	461a      	mov	r2, r3
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	dd01      	ble.n	8000d9a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x76>
 8000d96:	2142      	movs	r1, #66	; 0x42
 8000d98:	e000      	b.n	8000d9c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x78>
 8000d9a:	2121      	movs	r1, #33	; 0x21
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	4413      	add	r3, r2
 8000da8:	460a      	mov	r2, r1
 8000daa:	805a      	strh	r2, [r3, #2]
		layer->wr_buf[i +  8] = PWM_LO << (((layer->rgb_arr[3 * layer->wr_buf_p + 1] << i) & 0x80) > 0);
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 8000db2:	4613      	mov	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	4413      	add	r3, r2
 8000db8:	3301      	adds	r3, #1
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	7a5b      	ldrb	r3, [r3, #9]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	dd01      	ble.n	8000dd4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb0>
 8000dd0:	2142      	movs	r1, #66	; 0x42
 8000dd2:	e000      	b.n	8000dd6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb2>
 8000dd4:	2121      	movs	r1, #33	; 0x21
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	3308      	adds	r3, #8
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	4413      	add	r3, r2
 8000de4:	460a      	mov	r2, r1
 8000de6:	805a      	strh	r2, [r3, #2]
		layer->wr_buf[i + 16] = PWM_LO << (((layer->rgb_arr[3 * layer->wr_buf_p + 2] << i) & 0x80) > 0);
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 8000dee:	4613      	mov	r3, r2
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	4413      	add	r3, r2
 8000df4:	3302      	adds	r3, #2
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	4413      	add	r3, r2
 8000dfa:	7a5b      	ldrb	r3, [r3, #9]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	dd01      	ble.n	8000e10 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xec>
 8000e0c:	2142      	movs	r1, #66	; 0x42
 8000e0e:	e000      	b.n	8000e12 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xee>
 8000e10:	2121      	movs	r1, #33	; 0x21
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	3310      	adds	r3, #16
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	4413      	add	r3, r2
 8000e20:	460a      	mov	r2, r1
 8000e22:	805a      	strh	r2, [r3, #2]
	for(uint_fast8_t i = 0; i < 8; ++i) {
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	3301      	adds	r3, #1
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	2b07      	cmp	r3, #7
 8000e2e:	d9a1      	bls.n	8000d74 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x50>
	}
	layer->wr_buf_p++;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8000e36:	1c5a      	adds	r2, r3, #1
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 8000e3e:	e01f      	b.n	8000e80 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x15c>
	} else if (layer->wr_buf_p < NUM_PIXELS + 2) {
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8000e46:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8000e4a:	d219      	bcs.n	8000e80 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x15c>
		// Last two transfers are resets.
		//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
		// First half reset zero fill
		for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) layer->wr_buf[i] = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	73fb      	strb	r3, [r7, #15]
 8000e50:	e00a      	b.n	8000e68 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x144>
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	697a      	ldr	r2, [r7, #20]
 8000e56:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4413      	add	r3, r2
 8000e5e:	2200      	movs	r2, #0
 8000e60:	805a      	strh	r2, [r3, #2]
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	3301      	adds	r3, #1
 8000e66:	73fb      	strb	r3, [r7, #15]
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	2b17      	cmp	r3, #23
 8000e6c:	d9f1      	bls.n	8000e52 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x12e>
		layer->wr_buf_p++;
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8000e74:	1c5a      	adds	r2, r3, #1
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 8000e7c:	e000      	b.n	8000e80 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x15c>
		return;
 8000e7e:	bf00      	nop
	}
}
 8000e80:	371c      	adds	r7, #28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20007d90 	.word	0x20007d90
 8000e90:	20007dd8 	.word	0x20007dd8
 8000e94:	20007930 	.word	0x20007930
 8000e98:	200079c0 	.word	0x200079c0
 8000e9c:	20007978 	.word	0x20007978
 8000ea0:	200081a8 	.word	0x200081a8
 8000ea4:	20007888 	.word	0x20007888
 8000ea8:	20008518 	.word	0x20008518

08000eac <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

	Layers *layer;

	if(htim == &htim1){
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a5d      	ldr	r2, [pc, #372]	; (800102c <HAL_TIM_PWM_PulseFinishedCallback+0x180>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d102      	bne.n	8000ec2 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
		layer = &Layer1;
 8000ebc:	4b5c      	ldr	r3, [pc, #368]	; (8001030 <HAL_TIM_PWM_PulseFinishedCallback+0x184>)
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	e014      	b.n	8000eec <HAL_TIM_PWM_PulseFinishedCallback+0x40>
	}else if(htim == &htim5){
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a5b      	ldr	r2, [pc, #364]	; (8001034 <HAL_TIM_PWM_PulseFinishedCallback+0x188>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d102      	bne.n	8000ed0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>
		layer = &Layer2;
 8000eca:	4b5b      	ldr	r3, [pc, #364]	; (8001038 <HAL_TIM_PWM_PulseFinishedCallback+0x18c>)
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	e00d      	b.n	8000eec <HAL_TIM_PWM_PulseFinishedCallback+0x40>
	}else if(htim == &htim3){
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a5a      	ldr	r2, [pc, #360]	; (800103c <HAL_TIM_PWM_PulseFinishedCallback+0x190>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d102      	bne.n	8000ede <HAL_TIM_PWM_PulseFinishedCallback+0x32>
		layer = &Layer3;
 8000ed8:	4b59      	ldr	r3, [pc, #356]	; (8001040 <HAL_TIM_PWM_PulseFinishedCallback+0x194>)
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	e006      	b.n	8000eec <HAL_TIM_PWM_PulseFinishedCallback+0x40>
	}else if(htim == &htim4){
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a58      	ldr	r2, [pc, #352]	; (8001044 <HAL_TIM_PWM_PulseFinishedCallback+0x198>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	f040 809d 	bne.w	8001022 <HAL_TIM_PWM_PulseFinishedCallback+0x176>
		layer = &Layer4;
 8000ee8:	4b57      	ldr	r3, [pc, #348]	; (8001048 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 8000eea:	617b      	str	r3, [r7, #20]
	}else
		return;

	// DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
	if(layer->wr_buf_p < NUM_PIXELS) {
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8000ef2:	2bff      	cmp	r3, #255	; 0xff
 8000ef4:	d869      	bhi.n	8000fca <HAL_TIM_PWM_PulseFinishedCallback+0x11e>
		// We're in. Fill the odd buffer
		for(uint_fast8_t i = 0; i < 8; ++i) {
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	e05b      	b.n	8000fb4 <HAL_TIM_PWM_PulseFinishedCallback+0x108>
			layer->wr_buf[i + 24] = PWM_LO << (((layer->rgb_arr[3 * layer->wr_buf_p    ] << i) & 0x80) > 0);
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 8000f02:	4613      	mov	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	7a5b      	ldrb	r3, [r3, #9]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	dd01      	ble.n	8000f22 <HAL_TIM_PWM_PulseFinishedCallback+0x76>
 8000f1e:	2142      	movs	r1, #66	; 0x42
 8000f20:	e000      	b.n	8000f24 <HAL_TIM_PWM_PulseFinishedCallback+0x78>
 8000f22:	2121      	movs	r1, #33	; 0x21
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	3318      	adds	r3, #24
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	4413      	add	r3, r2
 8000f32:	460a      	mov	r2, r1
 8000f34:	805a      	strh	r2, [r3, #2]
			layer->wr_buf[i + 32] = PWM_LO << (((layer->rgb_arr[3 * layer->wr_buf_p + 1] << i) & 0x80) > 0);
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4413      	add	r3, r2
 8000f42:	3301      	adds	r3, #1
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	4413      	add	r3, r2
 8000f48:	7a5b      	ldrb	r3, [r3, #9]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	dd01      	ble.n	8000f5e <HAL_TIM_PWM_PulseFinishedCallback+0xb2>
 8000f5a:	2142      	movs	r1, #66	; 0x42
 8000f5c:	e000      	b.n	8000f60 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>
 8000f5e:	2121      	movs	r1, #33	; 0x21
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	3320      	adds	r3, #32
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	4413      	add	r3, r2
 8000f6e:	460a      	mov	r2, r1
 8000f70:	805a      	strh	r2, [r3, #2]
			layer->wr_buf[i + 40] = PWM_LO << (((layer->rgb_arr[3 * layer->wr_buf_p + 2] << i) & 0x80) > 0);
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	f8d3 236c 	ldr.w	r2, [r3, #876]	; 0x36c
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	3302      	adds	r3, #2
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	4413      	add	r3, r2
 8000f84:	7a5b      	ldrb	r3, [r3, #9]
 8000f86:	461a      	mov	r2, r3
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	dd01      	ble.n	8000f9a <HAL_TIM_PWM_PulseFinishedCallback+0xee>
 8000f96:	2142      	movs	r1, #66	; 0x42
 8000f98:	e000      	b.n	8000f9c <HAL_TIM_PWM_PulseFinishedCallback+0xf0>
 8000f9a:	2121      	movs	r1, #33	; 0x21
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	3328      	adds	r3, #40	; 0x28
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	4413      	add	r3, r2
 8000faa:	460a      	mov	r2, r1
 8000fac:	805a      	strh	r2, [r3, #2]
		for(uint_fast8_t i = 0; i < 8; ++i) {
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	2b07      	cmp	r3, #7
 8000fb8:	d9a0      	bls.n	8000efc <HAL_TIM_PWM_PulseFinishedCallback+0x50>
	}

	layer->wr_buf_p++;
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8000fc0:	1c5a      	adds	r2, r3, #1
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 8000fc8:	e02c      	b.n	8001024 <HAL_TIM_PWM_PulseFinishedCallback+0x178>

	} else if (layer->wr_buf_p < NUM_PIXELS + 2) {
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8000fd0:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8000fd4:	d218      	bcs.n	8001008 <HAL_TIM_PWM_PulseFinishedCallback+0x15c>
		// Second half reset zero fill
		for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) layer->wr_buf[i] = 0;
 8000fd6:	2318      	movs	r3, #24
 8000fd8:	73fb      	strb	r3, [r7, #15]
 8000fda:	e00a      	b.n	8000ff2 <HAL_TIM_PWM_PulseFinishedCallback+0x146>
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	2200      	movs	r2, #0
 8000fea:	805a      	strh	r2, [r3, #2]
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	2b2f      	cmp	r3, #47	; 0x2f
 8000ff6:	d9f1      	bls.n	8000fdc <HAL_TIM_PWM_PulseFinishedCallback+0x130>
		++layer->wr_buf_p;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 8001006:	e00d      	b.n	8001024 <HAL_TIM_PWM_PulseFinishedCallback+0x178>
	} else {
		// We're done. Lean back and until next time!
		layer->wr_buf_p = 0;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	2200      	movs	r2, #0
 800100c:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
		HAL_TIM_PWM_Stop_DMA(layer->timer, layer->channel);
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	7a1b      	ldrb	r3, [r3, #8]
 8001018:	4619      	mov	r1, r3
 800101a:	4610      	mov	r0, r2
 800101c:	f002 f92a 	bl	8003274 <HAL_TIM_PWM_Stop_DMA>
 8001020:	e000      	b.n	8001024 <HAL_TIM_PWM_PulseFinishedCallback+0x178>
		return;
 8001022:	bf00      	nop
	}
}
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20007d90 	.word	0x20007d90
 8001030:	20007dd8 	.word	0x20007dd8
 8001034:	20007930 	.word	0x20007930
 8001038:	200079c0 	.word	0x200079c0
 800103c:	20007978 	.word	0x20007978
 8001040:	200081a8 	.word	0x200081a8
 8001044:	20007888 	.word	0x20007888
 8001048:	20008518 	.word	0x20008518

0800104c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001050:	b672      	cpsid	i
}
 8001052:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001054:	e7fe      	b.n	8001054 <Error_Handler+0x8>
	...

08001058 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <HAL_MspInit+0x4c>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <HAL_MspInit+0x4c>)
 8001068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106c:	6453      	str	r3, [r2, #68]	; 0x44
 800106e:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <HAL_MspInit+0x4c>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <HAL_MspInit+0x4c>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <HAL_MspInit+0x4c>)
 8001084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001088:	6413      	str	r3, [r2, #64]	; 0x40
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_MspInit+0x4c>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a8d      	ldr	r2, [pc, #564]	; (80012ec <HAL_TIM_Base_MspInit+0x244>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d13f      	bne.n	800113a <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	4b8c      	ldr	r3, [pc, #560]	; (80012f0 <HAL_TIM_Base_MspInit+0x248>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	4a8b      	ldr	r2, [pc, #556]	; (80012f0 <HAL_TIM_Base_MspInit+0x248>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ca:	4b89      	ldr	r3, [pc, #548]	; (80012f0 <HAL_TIM_Base_MspInit+0x248>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80010d6:	4b87      	ldr	r3, [pc, #540]	; (80012f4 <HAL_TIM_Base_MspInit+0x24c>)
 80010d8:	4a87      	ldr	r2, [pc, #540]	; (80012f8 <HAL_TIM_Base_MspInit+0x250>)
 80010da:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80010dc:	4b85      	ldr	r3, [pc, #532]	; (80012f4 <HAL_TIM_Base_MspInit+0x24c>)
 80010de:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80010e2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010e4:	4b83      	ldr	r3, [pc, #524]	; (80012f4 <HAL_TIM_Base_MspInit+0x24c>)
 80010e6:	2240      	movs	r2, #64	; 0x40
 80010e8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ea:	4b82      	ldr	r3, [pc, #520]	; (80012f4 <HAL_TIM_Base_MspInit+0x24c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80010f0:	4b80      	ldr	r3, [pc, #512]	; (80012f4 <HAL_TIM_Base_MspInit+0x24c>)
 80010f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010f8:	4b7e      	ldr	r3, [pc, #504]	; (80012f4 <HAL_TIM_Base_MspInit+0x24c>)
 80010fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010fe:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001100:	4b7c      	ldr	r3, [pc, #496]	; (80012f4 <HAL_TIM_Base_MspInit+0x24c>)
 8001102:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001106:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8001108:	4b7a      	ldr	r3, [pc, #488]	; (80012f4 <HAL_TIM_Base_MspInit+0x24c>)
 800110a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800110e:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001110:	4b78      	ldr	r3, [pc, #480]	; (80012f4 <HAL_TIM_Base_MspInit+0x24c>)
 8001112:	2200      	movs	r2, #0
 8001114:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001116:	4b77      	ldr	r3, [pc, #476]	; (80012f4 <HAL_TIM_Base_MspInit+0x24c>)
 8001118:	2200      	movs	r2, #0
 800111a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800111c:	4875      	ldr	r0, [pc, #468]	; (80012f4 <HAL_TIM_Base_MspInit+0x24c>)
 800111e:	f000 fcfb 	bl	8001b18 <HAL_DMA_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8001128:	f7ff ff90 	bl	800104c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a71      	ldr	r2, [pc, #452]	; (80012f4 <HAL_TIM_Base_MspInit+0x24c>)
 8001130:	625a      	str	r2, [r3, #36]	; 0x24
 8001132:	4a70      	ldr	r2, [pc, #448]	; (80012f4 <HAL_TIM_Base_MspInit+0x24c>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001138:	e0d3      	b.n	80012e2 <HAL_TIM_Base_MspInit+0x23a>
  else if(htim_base->Instance==TIM3)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a6f      	ldr	r2, [pc, #444]	; (80012fc <HAL_TIM_Base_MspInit+0x254>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d13f      	bne.n	80011c4 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	4b69      	ldr	r3, [pc, #420]	; (80012f0 <HAL_TIM_Base_MspInit+0x248>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	4a68      	ldr	r2, [pc, #416]	; (80012f0 <HAL_TIM_Base_MspInit+0x248>)
 800114e:	f043 0302 	orr.w	r3, r3, #2
 8001152:	6413      	str	r3, [r2, #64]	; 0x40
 8001154:	4b66      	ldr	r3, [pc, #408]	; (80012f0 <HAL_TIM_Base_MspInit+0x248>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 8001160:	4b67      	ldr	r3, [pc, #412]	; (8001300 <HAL_TIM_Base_MspInit+0x258>)
 8001162:	4a68      	ldr	r2, [pc, #416]	; (8001304 <HAL_TIM_Base_MspInit+0x25c>)
 8001164:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8001166:	4b66      	ldr	r3, [pc, #408]	; (8001300 <HAL_TIM_Base_MspInit+0x258>)
 8001168:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800116c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800116e:	4b64      	ldr	r3, [pc, #400]	; (8001300 <HAL_TIM_Base_MspInit+0x258>)
 8001170:	2240      	movs	r2, #64	; 0x40
 8001172:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001174:	4b62      	ldr	r3, [pc, #392]	; (8001300 <HAL_TIM_Base_MspInit+0x258>)
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800117a:	4b61      	ldr	r3, [pc, #388]	; (8001300 <HAL_TIM_Base_MspInit+0x258>)
 800117c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001180:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001182:	4b5f      	ldr	r3, [pc, #380]	; (8001300 <HAL_TIM_Base_MspInit+0x258>)
 8001184:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001188:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800118a:	4b5d      	ldr	r3, [pc, #372]	; (8001300 <HAL_TIM_Base_MspInit+0x258>)
 800118c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001190:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8001192:	4b5b      	ldr	r3, [pc, #364]	; (8001300 <HAL_TIM_Base_MspInit+0x258>)
 8001194:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001198:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800119a:	4b59      	ldr	r3, [pc, #356]	; (8001300 <HAL_TIM_Base_MspInit+0x258>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011a0:	4b57      	ldr	r3, [pc, #348]	; (8001300 <HAL_TIM_Base_MspInit+0x258>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80011a6:	4856      	ldr	r0, [pc, #344]	; (8001300 <HAL_TIM_Base_MspInit+0x258>)
 80011a8:	f000 fcb6 	bl	8001b18 <HAL_DMA_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_TIM_Base_MspInit+0x10e>
      Error_Handler();
 80011b2:	f7ff ff4b 	bl	800104c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a51      	ldr	r2, [pc, #324]	; (8001300 <HAL_TIM_Base_MspInit+0x258>)
 80011ba:	629a      	str	r2, [r3, #40]	; 0x28
 80011bc:	4a50      	ldr	r2, [pc, #320]	; (8001300 <HAL_TIM_Base_MspInit+0x258>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80011c2:	e08e      	b.n	80012e2 <HAL_TIM_Base_MspInit+0x23a>
  else if(htim_base->Instance==TIM4)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a4f      	ldr	r2, [pc, #316]	; (8001308 <HAL_TIM_Base_MspInit+0x260>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d13f      	bne.n	800124e <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b47      	ldr	r3, [pc, #284]	; (80012f0 <HAL_TIM_Base_MspInit+0x248>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	4a46      	ldr	r2, [pc, #280]	; (80012f0 <HAL_TIM_Base_MspInit+0x248>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6413      	str	r3, [r2, #64]	; 0x40
 80011de:	4b44      	ldr	r3, [pc, #272]	; (80012f0 <HAL_TIM_Base_MspInit+0x248>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 80011ea:	4b48      	ldr	r3, [pc, #288]	; (800130c <HAL_TIM_Base_MspInit+0x264>)
 80011ec:	4a48      	ldr	r2, [pc, #288]	; (8001310 <HAL_TIM_Base_MspInit+0x268>)
 80011ee:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 80011f0:	4b46      	ldr	r3, [pc, #280]	; (800130c <HAL_TIM_Base_MspInit+0x264>)
 80011f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011f6:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011f8:	4b44      	ldr	r3, [pc, #272]	; (800130c <HAL_TIM_Base_MspInit+0x264>)
 80011fa:	2240      	movs	r2, #64	; 0x40
 80011fc:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011fe:	4b43      	ldr	r3, [pc, #268]	; (800130c <HAL_TIM_Base_MspInit+0x264>)
 8001200:	2200      	movs	r2, #0
 8001202:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001204:	4b41      	ldr	r3, [pc, #260]	; (800130c <HAL_TIM_Base_MspInit+0x264>)
 8001206:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800120a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800120c:	4b3f      	ldr	r3, [pc, #252]	; (800130c <HAL_TIM_Base_MspInit+0x264>)
 800120e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001212:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001214:	4b3d      	ldr	r3, [pc, #244]	; (800130c <HAL_TIM_Base_MspInit+0x264>)
 8001216:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800121a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 800121c:	4b3b      	ldr	r3, [pc, #236]	; (800130c <HAL_TIM_Base_MspInit+0x264>)
 800121e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001222:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001224:	4b39      	ldr	r3, [pc, #228]	; (800130c <HAL_TIM_Base_MspInit+0x264>)
 8001226:	2200      	movs	r2, #0
 8001228:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800122a:	4b38      	ldr	r3, [pc, #224]	; (800130c <HAL_TIM_Base_MspInit+0x264>)
 800122c:	2200      	movs	r2, #0
 800122e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8001230:	4836      	ldr	r0, [pc, #216]	; (800130c <HAL_TIM_Base_MspInit+0x264>)
 8001232:	f000 fc71 	bl	8001b18 <HAL_DMA_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <HAL_TIM_Base_MspInit+0x198>
      Error_Handler();
 800123c:	f7ff ff06 	bl	800104c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a32      	ldr	r2, [pc, #200]	; (800130c <HAL_TIM_Base_MspInit+0x264>)
 8001244:	625a      	str	r2, [r3, #36]	; 0x24
 8001246:	4a31      	ldr	r2, [pc, #196]	; (800130c <HAL_TIM_Base_MspInit+0x264>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800124c:	e049      	b.n	80012e2 <HAL_TIM_Base_MspInit+0x23a>
  else if(htim_base->Instance==TIM5)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a30      	ldr	r2, [pc, #192]	; (8001314 <HAL_TIM_Base_MspInit+0x26c>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d144      	bne.n	80012e2 <HAL_TIM_Base_MspInit+0x23a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <HAL_TIM_Base_MspInit+0x248>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <HAL_TIM_Base_MspInit+0x248>)
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	6413      	str	r3, [r2, #64]	; 0x40
 8001268:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <HAL_TIM_Base_MspInit+0x248>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4_trig.Instance = DMA1_Stream1;
 8001274:	4b28      	ldr	r3, [pc, #160]	; (8001318 <HAL_TIM_Base_MspInit+0x270>)
 8001276:	4a29      	ldr	r2, [pc, #164]	; (800131c <HAL_TIM_Base_MspInit+0x274>)
 8001278:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 800127a:	4b27      	ldr	r3, [pc, #156]	; (8001318 <HAL_TIM_Base_MspInit+0x270>)
 800127c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001280:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001282:	4b25      	ldr	r3, [pc, #148]	; (8001318 <HAL_TIM_Base_MspInit+0x270>)
 8001284:	2240      	movs	r2, #64	; 0x40
 8001286:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001288:	4b23      	ldr	r3, [pc, #140]	; (8001318 <HAL_TIM_Base_MspInit+0x270>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 800128e:	4b22      	ldr	r3, [pc, #136]	; (8001318 <HAL_TIM_Base_MspInit+0x270>)
 8001290:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001294:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <HAL_TIM_Base_MspInit+0x270>)
 8001298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800129c:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800129e:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <HAL_TIM_Base_MspInit+0x270>)
 80012a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012a4:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Mode = DMA_CIRCULAR;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <HAL_TIM_Base_MspInit+0x270>)
 80012a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ac:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_LOW;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <HAL_TIM_Base_MspInit+0x270>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <HAL_TIM_Base_MspInit+0x270>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 80012ba:	4817      	ldr	r0, [pc, #92]	; (8001318 <HAL_TIM_Base_MspInit+0x270>)
 80012bc:	f000 fc2c 	bl	8001b18 <HAL_DMA_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_TIM_Base_MspInit+0x222>
      Error_Handler();
 80012c6:	f7ff fec1 	bl	800104c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a12      	ldr	r2, [pc, #72]	; (8001318 <HAL_TIM_Base_MspInit+0x270>)
 80012ce:	631a      	str	r2, [r3, #48]	; 0x30
 80012d0:	4a11      	ldr	r2, [pc, #68]	; (8001318 <HAL_TIM_Base_MspInit+0x270>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a0f      	ldr	r2, [pc, #60]	; (8001318 <HAL_TIM_Base_MspInit+0x270>)
 80012da:	639a      	str	r2, [r3, #56]	; 0x38
 80012dc:	4a0e      	ldr	r2, [pc, #56]	; (8001318 <HAL_TIM_Base_MspInit+0x270>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80012e2:	bf00      	nop
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40010000 	.word	0x40010000
 80012f0:	40023800 	.word	0x40023800
 80012f4:	20007828 	.word	0x20007828
 80012f8:	40026428 	.word	0x40026428
 80012fc:	40000400 	.word	0x40000400
 8001300:	20007d30 	.word	0x20007d30
 8001304:	40026088 	.word	0x40026088
 8001308:	40000800 	.word	0x40000800
 800130c:	20008148 	.word	0x20008148
 8001310:	40026010 	.word	0x40026010
 8001314:	40000c00 	.word	0x40000c00
 8001318:	200078d0 	.word	0x200078d0
 800131c:	40026028 	.word	0x40026028

08001320 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08c      	sub	sp, #48	; 0x30
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a48      	ldr	r2, [pc, #288]	; (8001460 <HAL_TIM_MspPostInit+0x140>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d11f      	bne.n	8001382 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
 8001346:	4b47      	ldr	r3, [pc, #284]	; (8001464 <HAL_TIM_MspPostInit+0x144>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a46      	ldr	r2, [pc, #280]	; (8001464 <HAL_TIM_MspPostInit+0x144>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b44      	ldr	r3, [pc, #272]	; (8001464 <HAL_TIM_MspPostInit+0x144>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	61bb      	str	r3, [r7, #24]
 800135c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800135e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001370:	2301      	movs	r3, #1
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4619      	mov	r1, r3
 800137a:	483b      	ldr	r0, [pc, #236]	; (8001468 <HAL_TIM_MspPostInit+0x148>)
 800137c:	f000 ff5e 	bl	800223c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001380:	e06a      	b.n	8001458 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM3)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a39      	ldr	r2, [pc, #228]	; (800146c <HAL_TIM_MspPostInit+0x14c>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d11e      	bne.n	80013ca <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	4b34      	ldr	r3, [pc, #208]	; (8001464 <HAL_TIM_MspPostInit+0x144>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	4a33      	ldr	r2, [pc, #204]	; (8001464 <HAL_TIM_MspPostInit+0x144>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6313      	str	r3, [r2, #48]	; 0x30
 800139c:	4b31      	ldr	r3, [pc, #196]	; (8001464 <HAL_TIM_MspPostInit+0x144>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013b8:	2302      	movs	r3, #2
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4619      	mov	r1, r3
 80013c2:	4829      	ldr	r0, [pc, #164]	; (8001468 <HAL_TIM_MspPostInit+0x148>)
 80013c4:	f000 ff3a 	bl	800223c <HAL_GPIO_Init>
}
 80013c8:	e046      	b.n	8001458 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM4)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a28      	ldr	r2, [pc, #160]	; (8001470 <HAL_TIM_MspPostInit+0x150>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d11e      	bne.n	8001412 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	4b22      	ldr	r3, [pc, #136]	; (8001464 <HAL_TIM_MspPostInit+0x144>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	4a21      	ldr	r2, [pc, #132]	; (8001464 <HAL_TIM_MspPostInit+0x144>)
 80013de:	f043 0302 	orr.w	r3, r3, #2
 80013e2:	6313      	str	r3, [r2, #48]	; 0x30
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <HAL_TIM_MspPostInit+0x144>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013f0:	2340      	movs	r3, #64	; 0x40
 80013f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001400:	2302      	movs	r3, #2
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	4619      	mov	r1, r3
 800140a:	481a      	ldr	r0, [pc, #104]	; (8001474 <HAL_TIM_MspPostInit+0x154>)
 800140c:	f000 ff16 	bl	800223c <HAL_GPIO_Init>
}
 8001410:	e022      	b.n	8001458 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM5)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a18      	ldr	r2, [pc, #96]	; (8001478 <HAL_TIM_MspPostInit+0x158>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d11d      	bne.n	8001458 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	4b10      	ldr	r3, [pc, #64]	; (8001464 <HAL_TIM_MspPostInit+0x144>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <HAL_TIM_MspPostInit+0x144>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6313      	str	r3, [r2, #48]	; 0x30
 800142c:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <HAL_TIM_MspPostInit+0x144>)
 800142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001438:	2308      	movs	r3, #8
 800143a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001448:	2302      	movs	r3, #2
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	4619      	mov	r1, r3
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <HAL_TIM_MspPostInit+0x148>)
 8001454:	f000 fef2 	bl	800223c <HAL_GPIO_Init>
}
 8001458:	bf00      	nop
 800145a:	3730      	adds	r7, #48	; 0x30
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40010000 	.word	0x40010000
 8001464:	40023800 	.word	0x40023800
 8001468:	40020000 	.word	0x40020000
 800146c:	40000400 	.word	0x40000400
 8001470:	40000800 	.word	0x40000800
 8001474:	40020400 	.word	0x40020400
 8001478:	40000c00 	.word	0x40000c00

0800147c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <NMI_Handler+0x4>

08001482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <HardFault_Handler+0x4>

08001488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <MemManage_Handler+0x4>

0800148e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001492:	e7fe      	b.n	8001492 <BusFault_Handler+0x4>

08001494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <UsageFault_Handler+0x4>

0800149a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c8:	f000 f9d0 	bl	800186c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <DMA1_Stream0_IRQHandler+0x10>)
 80014d6:	f000 fc47 	bl	8001d68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20008148 	.word	0x20008148

080014e4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <DMA1_Stream1_IRQHandler+0x10>)
 80014ea:	f000 fc3d 	bl	8001d68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200078d0 	.word	0x200078d0

080014f8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80014fc:	4802      	ldr	r0, [pc, #8]	; (8001508 <DMA1_Stream5_IRQHandler+0x10>)
 80014fe:	f000 fc33 	bl	8001d68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20007d30 	.word	0x20007d30

0800150c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <DMA2_Stream1_IRQHandler+0x10>)
 8001512:	f000 fc29 	bl	8001d68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20007828 	.word	0x20007828

08001520 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <SystemInit+0x20>)
 8001526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152a:	4a05      	ldr	r2, [pc, #20]	; (8001540 <SystemInit+0x20>)
 800152c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <scale8>:

#include "ws2812b.h"



static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	460a      	mov	r2, r1
 800154e:	71fb      	strb	r3, [r7, #7]
 8001550:	4613      	mov	r3, r2
 8001552:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	79ba      	ldrb	r2, [r7, #6]
 8001558:	fb02 f303 	mul.w	r3, r2, r3
 800155c:	121b      	asrs	r3, r3, #8
 800155e:	b2db      	uxtb	r3, r3
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(Layers *layer, uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	4608      	mov	r0, r1
 8001576:	4611      	mov	r1, r2
 8001578:	461a      	mov	r2, r3
 800157a:	4603      	mov	r3, r0
 800157c:	70fb      	strb	r3, [r7, #3]
 800157e:	460b      	mov	r3, r1
 8001580:	70bb      	strb	r3, [r7, #2]
 8001582:	4613      	mov	r3, r2
 8001584:	707b      	strb	r3, [r7, #1]
	layer->rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8001586:	78fa      	ldrb	r2, [r7, #3]
 8001588:	4613      	mov	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	189c      	adds	r4, r3, r2
 800158e:	787b      	ldrb	r3, [r7, #1]
 8001590:	21b0      	movs	r1, #176	; 0xb0
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff ffd6 	bl	8001544 <scale8>
 8001598:	4603      	mov	r3, r0
 800159a:	461a      	mov	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4423      	add	r3, r4
 80015a0:	725a      	strb	r2, [r3, #9]
	layer->rgb_arr[3 * index + 1] = r;
 80015a2:	78fa      	ldrb	r2, [r7, #3]
 80015a4:	4613      	mov	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	3301      	adds	r3, #1
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	4413      	add	r3, r2
 80015b0:	78ba      	ldrb	r2, [r7, #2]
 80015b2:	725a      	strb	r2, [r3, #9]
	layer->rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 80015b4:	78fa      	ldrb	r2, [r7, #3]
 80015b6:	4613      	mov	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	1c9c      	adds	r4, r3, #2
 80015be:	7e3b      	ldrb	r3, [r7, #24]
 80015c0:	21f0      	movs	r1, #240	; 0xf0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff ffbe 	bl	8001544 <scale8>
 80015c8:	4603      	mov	r3, r0
 80015ca:	461a      	mov	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4423      	add	r3, r4
 80015d0:	725a      	strb	r2, [r3, #9]
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd90      	pop	{r4, r7, pc}

080015da <led_render>:
void led_set_all_RGB(Layers *layer, uint8_t r, uint8_t g, uint8_t b) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGB(layer, i, r, g, b);
}

// Shuttle the data to the LEDs!
void led_render(Layers *layer) {
 80015da:	b580      	push	{r7, lr}
 80015dc:	b084      	sub	sp, #16
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  if(layer->wr_buf_p != 0 || layer->dma->State != HAL_DMA_STATE_READY) {
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f8d3 336c 	ldr.w	r3, [r3, #876]	; 0x36c
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d106      	bne.n	80015fa <led_render+0x20>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d01d      	beq.n	8001636 <led_render+0x5c>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) layer->wr_buf[i] = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	e00a      	b.n	8001616 <led_render+0x3c>
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4413      	add	r3, r2
 800160c:	2200      	movs	r2, #0
 800160e:	805a      	strh	r2, [r3, #2]
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	3301      	adds	r3, #1
 8001614:	73fb      	strb	r3, [r7, #15]
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	2b2f      	cmp	r3, #47	; 0x2f
 800161a:	d9f1      	bls.n	8001600 <led_render+0x26>
    layer->wr_buf_p = 0;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
    HAL_TIM_PWM_Stop_DMA(layer->timer, layer->channel);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	7a1b      	ldrb	r3, [r3, #8]
 800162c:	4619      	mov	r1, r3
 800162e:	4610      	mov	r0, r2
 8001630:	f001 fe20 	bl	8003274 <HAL_TIM_PWM_Stop_DMA>
    return;
 8001634:	e09b      	b.n	800176e <led_render+0x194>
  }
  // Ooh boi the first data buffer half (and the second!)
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	e085      	b.n	8001748 <led_render+0x16e>
	  layer->wr_buf[i     ] = PWM_LO << (((layer->rgb_arr[0] << i) & 0x80) > 0);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7a5b      	ldrb	r3, [r3, #9]
 8001640:	461a      	mov	r2, r3
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164c:	2b00      	cmp	r3, #0
 800164e:	dd01      	ble.n	8001654 <led_render+0x7a>
 8001650:	2142      	movs	r1, #66	; 0x42
 8001652:	e000      	b.n	8001656 <led_render+0x7c>
 8001654:	2121      	movs	r1, #33	; 0x21
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	460a      	mov	r2, r1
 8001664:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i +  8] = PWM_LO << (((layer->rgb_arr[1] << i) & 0x80) > 0);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	7a9b      	ldrb	r3, [r3, #10]
 800166a:	461a      	mov	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001676:	2b00      	cmp	r3, #0
 8001678:	dd01      	ble.n	800167e <led_render+0xa4>
 800167a:	2142      	movs	r1, #66	; 0x42
 800167c:	e000      	b.n	8001680 <led_render+0xa6>
 800167e:	2121      	movs	r1, #33	; 0x21
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	3308      	adds	r3, #8
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	4413      	add	r3, r2
 800168e:	460a      	mov	r2, r1
 8001690:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i + 16] = PWM_LO << (((layer->rgb_arr[2] << i) & 0x80) > 0);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	7adb      	ldrb	r3, [r3, #11]
 8001696:	461a      	mov	r2, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	dd01      	ble.n	80016aa <led_render+0xd0>
 80016a6:	2142      	movs	r1, #66	; 0x42
 80016a8:	e000      	b.n	80016ac <led_render+0xd2>
 80016aa:	2121      	movs	r1, #33	; 0x21
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	3310      	adds	r3, #16
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	4413      	add	r3, r2
 80016ba:	460a      	mov	r2, r1
 80016bc:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i + 24] = PWM_LO << (((layer->rgb_arr[3] << i) & 0x80) > 0);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	7b1b      	ldrb	r3, [r3, #12]
 80016c2:	461a      	mov	r2, r3
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	dd01      	ble.n	80016d6 <led_render+0xfc>
 80016d2:	2142      	movs	r1, #66	; 0x42
 80016d4:	e000      	b.n	80016d8 <led_render+0xfe>
 80016d6:	2121      	movs	r1, #33	; 0x21
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	3318      	adds	r3, #24
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	460a      	mov	r2, r1
 80016e8:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i + 32] = PWM_LO << (((layer->rgb_arr[4] << i) & 0x80) > 0);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	7b5b      	ldrb	r3, [r3, #13]
 80016ee:	461a      	mov	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	dd01      	ble.n	8001702 <led_render+0x128>
 80016fe:	2142      	movs	r1, #66	; 0x42
 8001700:	e000      	b.n	8001704 <led_render+0x12a>
 8001702:	2121      	movs	r1, #33	; 0x21
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	3320      	adds	r3, #32
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	4413      	add	r3, r2
 8001712:	460a      	mov	r2, r1
 8001714:	805a      	strh	r2, [r3, #2]
	  layer->wr_buf[i + 40] = PWM_LO << (((layer->rgb_arr[5] << i) & 0x80) > 0);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	7b9b      	ldrb	r3, [r3, #14]
 800171a:	461a      	mov	r2, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001726:	2b00      	cmp	r3, #0
 8001728:	dd01      	ble.n	800172e <led_render+0x154>
 800172a:	2142      	movs	r1, #66	; 0x42
 800172c:	e000      	b.n	8001730 <led_render+0x156>
 800172e:	2121      	movs	r1, #33	; 0x21
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	3328      	adds	r3, #40	; 0x28
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	460a      	mov	r2, r1
 8001740:	805a      	strh	r2, [r3, #2]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	3301      	adds	r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	2b07      	cmp	r3, #7
 800174c:	f67f af76 	bls.w	800163c <led_render+0x62>
  }
  HAL_TIM_PWM_Start_DMA(layer->timer, layer->channel, (uint32_t *)layer->wr_buf, WR_BUF_LEN);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7a1b      	ldrb	r3, [r3, #8]
 8001758:	4619      	mov	r1, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f203 320a 	addw	r2, r3, #778	; 0x30a
 8001760:	2330      	movs	r3, #48	; 0x30
 8001762:	f001 fbd7 	bl	8002f14 <HAL_TIM_PWM_Start_DMA>
  layer->wr_buf_p = 2; // Since we're ready for the next buffer
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2202      	movs	r2, #2
 800176a:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
}
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001778:	480d      	ldr	r0, [pc, #52]	; (80017b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800177a:	490e      	ldr	r1, [pc, #56]	; (80017b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800177c:	4a0e      	ldr	r2, [pc, #56]	; (80017b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001780:	e002      	b.n	8001788 <LoopCopyDataInit>

08001782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001786:	3304      	adds	r3, #4

08001788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800178c:	d3f9      	bcc.n	8001782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178e:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001790:	4c0b      	ldr	r4, [pc, #44]	; (80017c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001794:	e001      	b.n	800179a <LoopFillZerobss>

08001796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001798:	3204      	adds	r2, #4

0800179a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800179c:	d3fb      	bcc.n	8001796 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800179e:	f7ff febf 	bl	8001520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017a2:	f002 fc1d 	bl	8003fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017a6:	f7fe fe91 	bl	80004cc <main>
  bx  lr    
 80017aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b4:	2000780c 	.word	0x2000780c
  ldr r2, =_sidata
 80017b8:	08004078 	.word	0x08004078
  ldr r2, =_sbss
 80017bc:	2000780c 	.word	0x2000780c
  ldr r4, =_ebss
 80017c0:	2000888c 	.word	0x2000888c

080017c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c4:	e7fe      	b.n	80017c4 <ADC_IRQHandler>
	...

080017c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017cc:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <HAL_Init+0x40>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0d      	ldr	r2, [pc, #52]	; (8001808 <HAL_Init+0x40>)
 80017d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <HAL_Init+0x40>)
 80017de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a07      	ldr	r2, [pc, #28]	; (8001808 <HAL_Init+0x40>)
 80017ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f0:	2003      	movs	r0, #3
 80017f2:	f000 f94f 	bl	8001a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f000 f808 	bl	800180c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017fc:	f7ff fc2c 	bl	8001058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023c00 	.word	0x40023c00

0800180c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_InitTick+0x54>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_InitTick+0x58>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001822:	fbb3 f3f1 	udiv	r3, r3, r1
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f967 	bl	8001afe <HAL_SYSTICK_Config>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e00e      	b.n	8001858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b0f      	cmp	r3, #15
 800183e:	d80a      	bhi.n	8001856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001840:	2200      	movs	r2, #0
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f000 f92f 	bl	8001aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800184c:	4a06      	ldr	r2, [pc, #24]	; (8001868 <HAL_InitTick+0x5c>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20007800 	.word	0x20007800
 8001864:	20007808 	.word	0x20007808
 8001868:	20007804 	.word	0x20007804

0800186c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_IncTick+0x20>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_IncTick+0x24>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <HAL_IncTick+0x24>)
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20007808 	.word	0x20007808
 8001890:	20008888 	.word	0x20008888

08001894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <HAL_GetTick+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20008888 	.word	0x20008888

080018ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b4:	f7ff ffee 	bl	8001894 <HAL_GetTick>
 80018b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c4:	d005      	beq.n	80018d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_Delay+0x44>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018d2:	bf00      	nop
 80018d4:	f7ff ffde 	bl	8001894 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d8f7      	bhi.n	80018d4 <HAL_Delay+0x28>
  {
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20007808 	.word	0x20007808

080018f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001910:	4013      	ands	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800191c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001926:	4a04      	ldr	r2, [pc, #16]	; (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	60d3      	str	r3, [r2, #12]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <__NVIC_GetPriorityGrouping+0x18>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 0307 	and.w	r3, r3, #7
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	2b00      	cmp	r3, #0
 8001968:	db0b      	blt.n	8001982 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	f003 021f 	and.w	r2, r3, #31
 8001970:	4907      	ldr	r1, [pc, #28]	; (8001990 <__NVIC_EnableIRQ+0x38>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	2001      	movs	r0, #1
 800197a:	fa00 f202 	lsl.w	r2, r0, r2
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000e100 	.word	0xe000e100

08001994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db0a      	blt.n	80019be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	490c      	ldr	r1, [pc, #48]	; (80019e0 <__NVIC_SetPriority+0x4c>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	0112      	lsls	r2, r2, #4
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	440b      	add	r3, r1
 80019b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019bc:	e00a      	b.n	80019d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4908      	ldr	r1, [pc, #32]	; (80019e4 <__NVIC_SetPriority+0x50>)
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3b04      	subs	r3, #4
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	440b      	add	r3, r1
 80019d2:	761a      	strb	r2, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f1c3 0307 	rsb	r3, r3, #7
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	bf28      	it	cs
 8001a06:	2304      	movcs	r3, #4
 8001a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d902      	bls.n	8001a18 <NVIC_EncodePriority+0x30>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b03      	subs	r3, #3
 8001a16:	e000      	b.n	8001a1a <NVIC_EncodePriority+0x32>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a30:	f04f 31ff 	mov.w	r1, #4294967295
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43d9      	mvns	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	4313      	orrs	r3, r2
         );
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3724      	adds	r7, #36	; 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a60:	d301      	bcc.n	8001a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00f      	b.n	8001a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <SysTick_Config+0x40>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6e:	210f      	movs	r1, #15
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f7ff ff8e 	bl	8001994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <SysTick_Config+0x40>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7e:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <SysTick_Config+0x40>)
 8001a80:	2207      	movs	r2, #7
 8001a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	e000e010 	.word	0xe000e010

08001a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ff29 	bl	80018f4 <__NVIC_SetPriorityGrouping>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001abc:	f7ff ff3e 	bl	800193c <__NVIC_GetPriorityGrouping>
 8001ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	6978      	ldr	r0, [r7, #20]
 8001ac8:	f7ff ff8e 	bl	80019e8 <NVIC_EncodePriority>
 8001acc:	4602      	mov	r2, r0
 8001ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff5d 	bl	8001994 <__NVIC_SetPriority>
}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff31 	bl	8001958 <__NVIC_EnableIRQ>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ffa2 	bl	8001a50 <SysTick_Config>
 8001b0c:	4603      	mov	r3, r0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b24:	f7ff feb6 	bl	8001894 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e099      	b.n	8001c68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0201 	bic.w	r2, r2, #1
 8001b52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b54:	e00f      	b.n	8001b76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b56:	f7ff fe9d 	bl	8001894 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b05      	cmp	r3, #5
 8001b62:	d908      	bls.n	8001b76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2220      	movs	r2, #32
 8001b68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e078      	b.n	8001c68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1e8      	bne.n	8001b56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	4b38      	ldr	r3, [pc, #224]	; (8001c70 <HAL_DMA_Init+0x158>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ba2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d107      	bne.n	8001be0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f023 0307 	bic.w	r3, r3, #7
 8001bf6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d117      	bne.n	8001c3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d00e      	beq.n	8001c3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 fa91 	bl	8002144 <DMA_CheckFifoParam>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d008      	beq.n	8001c3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2240      	movs	r2, #64	; 0x40
 8001c2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c36:	2301      	movs	r3, #1
 8001c38:	e016      	b.n	8001c68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 fa48 	bl	80020d8 <DMA_CalcBaseAndBitshift>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c50:	223f      	movs	r2, #63	; 0x3f
 8001c52:	409a      	lsls	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	f010803f 	.word	0xf010803f

08001c74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d101      	bne.n	8001c9a <HAL_DMA_Start_IT+0x26>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e040      	b.n	8001d1c <HAL_DMA_Start_IT+0xa8>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d12f      	bne.n	8001d0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f000 f9da 	bl	800207c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ccc:	223f      	movs	r2, #63	; 0x3f
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0216 	orr.w	r2, r2, #22
 8001ce2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d007      	beq.n	8001cfc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0208 	orr.w	r2, r2, #8
 8001cfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	e005      	b.n	8001d1a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d16:	2302      	movs	r3, #2
 8001d18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d004      	beq.n	8001d42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2280      	movs	r2, #128	; 0x80
 8001d3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00c      	b.n	8001d5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2205      	movs	r2, #5
 8001d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0201 	bic.w	r2, r2, #1
 8001d58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d74:	4b92      	ldr	r3, [pc, #584]	; (8001fc0 <HAL_DMA_IRQHandler+0x258>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a92      	ldr	r2, [pc, #584]	; (8001fc4 <HAL_DMA_IRQHandler+0x25c>)
 8001d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7e:	0a9b      	lsrs	r3, r3, #10
 8001d80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d92:	2208      	movs	r2, #8
 8001d94:	409a      	lsls	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d01a      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d013      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 0204 	bic.w	r2, r2, #4
 8001dba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc0:	2208      	movs	r2, #8
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dcc:	f043 0201 	orr.w	r2, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd8:	2201      	movs	r2, #1
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d012      	beq.n	8001e0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00b      	beq.n	8001e0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df6:	2201      	movs	r2, #1
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e02:	f043 0202 	orr.w	r2, r3, #2
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0e:	2204      	movs	r2, #4
 8001e10:	409a      	lsls	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d012      	beq.n	8001e40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00b      	beq.n	8001e40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e38:	f043 0204 	orr.w	r2, r3, #4
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e44:	2210      	movs	r2, #16
 8001e46:	409a      	lsls	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d043      	beq.n	8001ed8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d03c      	beq.n	8001ed8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e62:	2210      	movs	r2, #16
 8001e64:	409a      	lsls	r2, r3
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d018      	beq.n	8001eaa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d108      	bne.n	8001e98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d024      	beq.n	8001ed8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	4798      	blx	r3
 8001e96:	e01f      	b.n	8001ed8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d01b      	beq.n	8001ed8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	4798      	blx	r3
 8001ea8:	e016      	b.n	8001ed8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d107      	bne.n	8001ec8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0208 	bic.w	r2, r2, #8
 8001ec6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001edc:	2220      	movs	r2, #32
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 808e 	beq.w	8002006 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0310 	and.w	r3, r3, #16
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 8086 	beq.w	8002006 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efe:	2220      	movs	r2, #32
 8001f00:	409a      	lsls	r2, r3
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b05      	cmp	r3, #5
 8001f10:	d136      	bne.n	8001f80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0216 	bic.w	r2, r2, #22
 8001f20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695a      	ldr	r2, [r3, #20]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d103      	bne.n	8001f42 <HAL_DMA_IRQHandler+0x1da>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d007      	beq.n	8001f52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0208 	bic.w	r2, r2, #8
 8001f50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f56:	223f      	movs	r2, #63	; 0x3f
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d07d      	beq.n	8002072 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	4798      	blx	r3
        }
        return;
 8001f7e:	e078      	b.n	8002072 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d01c      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d108      	bne.n	8001fae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d030      	beq.n	8002006 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	4798      	blx	r3
 8001fac:	e02b      	b.n	8002006 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d027      	beq.n	8002006 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	4798      	blx	r3
 8001fbe:	e022      	b.n	8002006 <HAL_DMA_IRQHandler+0x29e>
 8001fc0:	20007800 	.word	0x20007800
 8001fc4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10f      	bne.n	8001ff6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0210 	bic.w	r2, r2, #16
 8001fe4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200a:	2b00      	cmp	r3, #0
 800200c:	d032      	beq.n	8002074 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d022      	beq.n	8002060 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2205      	movs	r2, #5
 800201e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0201 	bic.w	r2, r2, #1
 8002030:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	3301      	adds	r3, #1
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	429a      	cmp	r2, r3
 800203c:	d307      	bcc.n	800204e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f2      	bne.n	8002032 <HAL_DMA_IRQHandler+0x2ca>
 800204c:	e000      	b.n	8002050 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800204e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	4798      	blx	r3
 8002070:	e000      	b.n	8002074 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002072:	bf00      	nop
    }
  }
}
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop

0800207c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
 8002088:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002098:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b40      	cmp	r3, #64	; 0x40
 80020a8:	d108      	bne.n	80020bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020ba:	e007      	b.n	80020cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	60da      	str	r2, [r3, #12]
}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	3b10      	subs	r3, #16
 80020e8:	4a14      	ldr	r2, [pc, #80]	; (800213c <DMA_CalcBaseAndBitshift+0x64>)
 80020ea:	fba2 2303 	umull	r2, r3, r2, r3
 80020ee:	091b      	lsrs	r3, r3, #4
 80020f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020f2:	4a13      	ldr	r2, [pc, #76]	; (8002140 <DMA_CalcBaseAndBitshift+0x68>)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4413      	add	r3, r2
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b03      	cmp	r3, #3
 8002104:	d909      	bls.n	800211a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800210e:	f023 0303 	bic.w	r3, r3, #3
 8002112:	1d1a      	adds	r2, r3, #4
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	659a      	str	r2, [r3, #88]	; 0x58
 8002118:	e007      	b.n	800212a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002122:	f023 0303 	bic.w	r3, r3, #3
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	aaaaaaab 	.word	0xaaaaaaab
 8002140:	08004060 	.word	0x08004060

08002144 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002154:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d11f      	bne.n	800219e <DMA_CheckFifoParam+0x5a>
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2b03      	cmp	r3, #3
 8002162:	d856      	bhi.n	8002212 <DMA_CheckFifoParam+0xce>
 8002164:	a201      	add	r2, pc, #4	; (adr r2, 800216c <DMA_CheckFifoParam+0x28>)
 8002166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216a:	bf00      	nop
 800216c:	0800217d 	.word	0x0800217d
 8002170:	0800218f 	.word	0x0800218f
 8002174:	0800217d 	.word	0x0800217d
 8002178:	08002213 	.word	0x08002213
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d046      	beq.n	8002216 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800218c:	e043      	b.n	8002216 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002192:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002196:	d140      	bne.n	800221a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800219c:	e03d      	b.n	800221a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021a6:	d121      	bne.n	80021ec <DMA_CheckFifoParam+0xa8>
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d837      	bhi.n	800221e <DMA_CheckFifoParam+0xda>
 80021ae:	a201      	add	r2, pc, #4	; (adr r2, 80021b4 <DMA_CheckFifoParam+0x70>)
 80021b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b4:	080021c5 	.word	0x080021c5
 80021b8:	080021cb 	.word	0x080021cb
 80021bc:	080021c5 	.word	0x080021c5
 80021c0:	080021dd 	.word	0x080021dd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
      break;
 80021c8:	e030      	b.n	800222c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d025      	beq.n	8002222 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021da:	e022      	b.n	8002222 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021e4:	d11f      	bne.n	8002226 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021ea:	e01c      	b.n	8002226 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d903      	bls.n	80021fa <DMA_CheckFifoParam+0xb6>
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d003      	beq.n	8002200 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021f8:	e018      	b.n	800222c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
      break;
 80021fe:	e015      	b.n	800222c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00e      	beq.n	800222a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
      break;
 8002210:	e00b      	b.n	800222a <DMA_CheckFifoParam+0xe6>
      break;
 8002212:	bf00      	nop
 8002214:	e00a      	b.n	800222c <DMA_CheckFifoParam+0xe8>
      break;
 8002216:	bf00      	nop
 8002218:	e008      	b.n	800222c <DMA_CheckFifoParam+0xe8>
      break;
 800221a:	bf00      	nop
 800221c:	e006      	b.n	800222c <DMA_CheckFifoParam+0xe8>
      break;
 800221e:	bf00      	nop
 8002220:	e004      	b.n	800222c <DMA_CheckFifoParam+0xe8>
      break;
 8002222:	bf00      	nop
 8002224:	e002      	b.n	800222c <DMA_CheckFifoParam+0xe8>
      break;   
 8002226:	bf00      	nop
 8002228:	e000      	b.n	800222c <DMA_CheckFifoParam+0xe8>
      break;
 800222a:	bf00      	nop
    }
  } 
  
  return status; 
 800222c:	7bfb      	ldrb	r3, [r7, #15]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop

0800223c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800223c:	b480      	push	{r7}
 800223e:	b089      	sub	sp, #36	; 0x24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800224e:	2300      	movs	r3, #0
 8002250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
 8002256:	e159      	b.n	800250c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002258:	2201      	movs	r2, #1
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	429a      	cmp	r2, r3
 8002272:	f040 8148 	bne.w	8002506 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	2b01      	cmp	r3, #1
 8002280:	d005      	beq.n	800228e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800228a:	2b02      	cmp	r3, #2
 800228c:	d130      	bne.n	80022f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	2203      	movs	r2, #3
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022c4:	2201      	movs	r2, #1
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f003 0201 	and.w	r2, r3, #1
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 0303 	and.w	r3, r3, #3
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d017      	beq.n	800232c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	2203      	movs	r2, #3
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d123      	bne.n	8002380 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	08da      	lsrs	r2, r3, #3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3208      	adds	r2, #8
 8002340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	220f      	movs	r2, #15
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	08da      	lsrs	r2, r3, #3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3208      	adds	r2, #8
 800237a:	69b9      	ldr	r1, [r7, #24]
 800237c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	2203      	movs	r2, #3
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0203 	and.w	r2, r3, #3
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 80a2 	beq.w	8002506 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	4b57      	ldr	r3, [pc, #348]	; (8002524 <HAL_GPIO_Init+0x2e8>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	4a56      	ldr	r2, [pc, #344]	; (8002524 <HAL_GPIO_Init+0x2e8>)
 80023cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023d0:	6453      	str	r3, [r2, #68]	; 0x44
 80023d2:	4b54      	ldr	r3, [pc, #336]	; (8002524 <HAL_GPIO_Init+0x2e8>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023de:	4a52      	ldr	r2, [pc, #328]	; (8002528 <HAL_GPIO_Init+0x2ec>)
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	089b      	lsrs	r3, r3, #2
 80023e4:	3302      	adds	r3, #2
 80023e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	220f      	movs	r2, #15
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4013      	ands	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a49      	ldr	r2, [pc, #292]	; (800252c <HAL_GPIO_Init+0x2f0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d019      	beq.n	800243e <HAL_GPIO_Init+0x202>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a48      	ldr	r2, [pc, #288]	; (8002530 <HAL_GPIO_Init+0x2f4>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d013      	beq.n	800243a <HAL_GPIO_Init+0x1fe>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a47      	ldr	r2, [pc, #284]	; (8002534 <HAL_GPIO_Init+0x2f8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00d      	beq.n	8002436 <HAL_GPIO_Init+0x1fa>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a46      	ldr	r2, [pc, #280]	; (8002538 <HAL_GPIO_Init+0x2fc>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d007      	beq.n	8002432 <HAL_GPIO_Init+0x1f6>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a45      	ldr	r2, [pc, #276]	; (800253c <HAL_GPIO_Init+0x300>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d101      	bne.n	800242e <HAL_GPIO_Init+0x1f2>
 800242a:	2304      	movs	r3, #4
 800242c:	e008      	b.n	8002440 <HAL_GPIO_Init+0x204>
 800242e:	2307      	movs	r3, #7
 8002430:	e006      	b.n	8002440 <HAL_GPIO_Init+0x204>
 8002432:	2303      	movs	r3, #3
 8002434:	e004      	b.n	8002440 <HAL_GPIO_Init+0x204>
 8002436:	2302      	movs	r3, #2
 8002438:	e002      	b.n	8002440 <HAL_GPIO_Init+0x204>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <HAL_GPIO_Init+0x204>
 800243e:	2300      	movs	r3, #0
 8002440:	69fa      	ldr	r2, [r7, #28]
 8002442:	f002 0203 	and.w	r2, r2, #3
 8002446:	0092      	lsls	r2, r2, #2
 8002448:	4093      	lsls	r3, r2
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002450:	4935      	ldr	r1, [pc, #212]	; (8002528 <HAL_GPIO_Init+0x2ec>)
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	089b      	lsrs	r3, r3, #2
 8002456:	3302      	adds	r3, #2
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800245e:	4b38      	ldr	r3, [pc, #224]	; (8002540 <HAL_GPIO_Init+0x304>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002482:	4a2f      	ldr	r2, [pc, #188]	; (8002540 <HAL_GPIO_Init+0x304>)
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002488:	4b2d      	ldr	r3, [pc, #180]	; (8002540 <HAL_GPIO_Init+0x304>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ac:	4a24      	ldr	r2, [pc, #144]	; (8002540 <HAL_GPIO_Init+0x304>)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024b2:	4b23      	ldr	r3, [pc, #140]	; (8002540 <HAL_GPIO_Init+0x304>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024d6:	4a1a      	ldr	r2, [pc, #104]	; (8002540 <HAL_GPIO_Init+0x304>)
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024dc:	4b18      	ldr	r3, [pc, #96]	; (8002540 <HAL_GPIO_Init+0x304>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002500:	4a0f      	ldr	r2, [pc, #60]	; (8002540 <HAL_GPIO_Init+0x304>)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3301      	adds	r3, #1
 800250a:	61fb      	str	r3, [r7, #28]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	2b0f      	cmp	r3, #15
 8002510:	f67f aea2 	bls.w	8002258 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002514:	bf00      	nop
 8002516:	bf00      	nop
 8002518:	3724      	adds	r7, #36	; 0x24
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40023800 	.word	0x40023800
 8002528:	40013800 	.word	0x40013800
 800252c:	40020000 	.word	0x40020000
 8002530:	40020400 	.word	0x40020400
 8002534:	40020800 	.word	0x40020800
 8002538:	40020c00 	.word	0x40020c00
 800253c:	40021000 	.word	0x40021000
 8002540:	40013c00 	.word	0x40013c00

08002544 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e264      	b.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d075      	beq.n	800264e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002562:	4ba3      	ldr	r3, [pc, #652]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 030c 	and.w	r3, r3, #12
 800256a:	2b04      	cmp	r3, #4
 800256c:	d00c      	beq.n	8002588 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800256e:	4ba0      	ldr	r3, [pc, #640]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002576:	2b08      	cmp	r3, #8
 8002578:	d112      	bne.n	80025a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800257a:	4b9d      	ldr	r3, [pc, #628]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002586:	d10b      	bne.n	80025a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002588:	4b99      	ldr	r3, [pc, #612]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d05b      	beq.n	800264c <HAL_RCC_OscConfig+0x108>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d157      	bne.n	800264c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e23f      	b.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a8:	d106      	bne.n	80025b8 <HAL_RCC_OscConfig+0x74>
 80025aa:	4b91      	ldr	r3, [pc, #580]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a90      	ldr	r2, [pc, #576]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e01d      	b.n	80025f4 <HAL_RCC_OscConfig+0xb0>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025c0:	d10c      	bne.n	80025dc <HAL_RCC_OscConfig+0x98>
 80025c2:	4b8b      	ldr	r3, [pc, #556]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a8a      	ldr	r2, [pc, #552]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 80025c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	4b88      	ldr	r3, [pc, #544]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a87      	ldr	r2, [pc, #540]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 80025d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	e00b      	b.n	80025f4 <HAL_RCC_OscConfig+0xb0>
 80025dc:	4b84      	ldr	r3, [pc, #528]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a83      	ldr	r2, [pc, #524]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 80025e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e6:	6013      	str	r3, [r2, #0]
 80025e8:	4b81      	ldr	r3, [pc, #516]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a80      	ldr	r2, [pc, #512]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 80025ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d013      	beq.n	8002624 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7ff f94a 	bl	8001894 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002604:	f7ff f946 	bl	8001894 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b64      	cmp	r3, #100	; 0x64
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e204      	b.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002616:	4b76      	ldr	r3, [pc, #472]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f0      	beq.n	8002604 <HAL_RCC_OscConfig+0xc0>
 8002622:	e014      	b.n	800264e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002624:	f7ff f936 	bl	8001894 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800262c:	f7ff f932 	bl	8001894 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b64      	cmp	r3, #100	; 0x64
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e1f0      	b.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800263e:	4b6c      	ldr	r3, [pc, #432]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0xe8>
 800264a:	e000      	b.n	800264e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d063      	beq.n	8002722 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800265a:	4b65      	ldr	r3, [pc, #404]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00b      	beq.n	800267e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002666:	4b62      	ldr	r3, [pc, #392]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800266e:	2b08      	cmp	r3, #8
 8002670:	d11c      	bne.n	80026ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002672:	4b5f      	ldr	r3, [pc, #380]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d116      	bne.n	80026ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267e:	4b5c      	ldr	r3, [pc, #368]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d005      	beq.n	8002696 <HAL_RCC_OscConfig+0x152>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d001      	beq.n	8002696 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e1c4      	b.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002696:	4b56      	ldr	r3, [pc, #344]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4952      	ldr	r1, [pc, #328]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026aa:	e03a      	b.n	8002722 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d020      	beq.n	80026f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026b4:	4b4f      	ldr	r3, [pc, #316]	; (80027f4 <HAL_RCC_OscConfig+0x2b0>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ba:	f7ff f8eb 	bl	8001894 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026c2:	f7ff f8e7 	bl	8001894 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e1a5      	b.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d4:	4b46      	ldr	r3, [pc, #280]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e0:	4b43      	ldr	r3, [pc, #268]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4940      	ldr	r1, [pc, #256]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	600b      	str	r3, [r1, #0]
 80026f4:	e015      	b.n	8002722 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026f6:	4b3f      	ldr	r3, [pc, #252]	; (80027f4 <HAL_RCC_OscConfig+0x2b0>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fc:	f7ff f8ca 	bl	8001894 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002704:	f7ff f8c6 	bl	8001894 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e184      	b.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002716:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d030      	beq.n	8002790 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d016      	beq.n	8002764 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002736:	4b30      	ldr	r3, [pc, #192]	; (80027f8 <HAL_RCC_OscConfig+0x2b4>)
 8002738:	2201      	movs	r2, #1
 800273a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273c:	f7ff f8aa 	bl	8001894 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002744:	f7ff f8a6 	bl	8001894 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e164      	b.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002756:	4b26      	ldr	r3, [pc, #152]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 8002758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0x200>
 8002762:	e015      	b.n	8002790 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002764:	4b24      	ldr	r3, [pc, #144]	; (80027f8 <HAL_RCC_OscConfig+0x2b4>)
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276a:	f7ff f893 	bl	8001894 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002772:	f7ff f88f 	bl	8001894 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e14d      	b.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002784:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 8002786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1f0      	bne.n	8002772 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80a0 	beq.w	80028de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279e:	2300      	movs	r3, #0
 80027a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a2:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10f      	bne.n	80027ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	4a0e      	ldr	r2, [pc, #56]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027bc:	6413      	str	r3, [r2, #64]	; 0x40
 80027be:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <HAL_RCC_OscConfig+0x2ac>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ca:	2301      	movs	r3, #1
 80027cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ce:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <HAL_RCC_OscConfig+0x2b8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d121      	bne.n	800281e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027da:	4b08      	ldr	r3, [pc, #32]	; (80027fc <HAL_RCC_OscConfig+0x2b8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a07      	ldr	r2, [pc, #28]	; (80027fc <HAL_RCC_OscConfig+0x2b8>)
 80027e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e6:	f7ff f855 	bl	8001894 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ec:	e011      	b.n	8002812 <HAL_RCC_OscConfig+0x2ce>
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800
 80027f4:	42470000 	.word	0x42470000
 80027f8:	42470e80 	.word	0x42470e80
 80027fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002800:	f7ff f848 	bl	8001894 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e106      	b.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002812:	4b85      	ldr	r3, [pc, #532]	; (8002a28 <HAL_RCC_OscConfig+0x4e4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d106      	bne.n	8002834 <HAL_RCC_OscConfig+0x2f0>
 8002826:	4b81      	ldr	r3, [pc, #516]	; (8002a2c <HAL_RCC_OscConfig+0x4e8>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282a:	4a80      	ldr	r2, [pc, #512]	; (8002a2c <HAL_RCC_OscConfig+0x4e8>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	6713      	str	r3, [r2, #112]	; 0x70
 8002832:	e01c      	b.n	800286e <HAL_RCC_OscConfig+0x32a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b05      	cmp	r3, #5
 800283a:	d10c      	bne.n	8002856 <HAL_RCC_OscConfig+0x312>
 800283c:	4b7b      	ldr	r3, [pc, #492]	; (8002a2c <HAL_RCC_OscConfig+0x4e8>)
 800283e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002840:	4a7a      	ldr	r2, [pc, #488]	; (8002a2c <HAL_RCC_OscConfig+0x4e8>)
 8002842:	f043 0304 	orr.w	r3, r3, #4
 8002846:	6713      	str	r3, [r2, #112]	; 0x70
 8002848:	4b78      	ldr	r3, [pc, #480]	; (8002a2c <HAL_RCC_OscConfig+0x4e8>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284c:	4a77      	ldr	r2, [pc, #476]	; (8002a2c <HAL_RCC_OscConfig+0x4e8>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	6713      	str	r3, [r2, #112]	; 0x70
 8002854:	e00b      	b.n	800286e <HAL_RCC_OscConfig+0x32a>
 8002856:	4b75      	ldr	r3, [pc, #468]	; (8002a2c <HAL_RCC_OscConfig+0x4e8>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285a:	4a74      	ldr	r2, [pc, #464]	; (8002a2c <HAL_RCC_OscConfig+0x4e8>)
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	6713      	str	r3, [r2, #112]	; 0x70
 8002862:	4b72      	ldr	r3, [pc, #456]	; (8002a2c <HAL_RCC_OscConfig+0x4e8>)
 8002864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002866:	4a71      	ldr	r2, [pc, #452]	; (8002a2c <HAL_RCC_OscConfig+0x4e8>)
 8002868:	f023 0304 	bic.w	r3, r3, #4
 800286c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d015      	beq.n	80028a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002876:	f7ff f80d 	bl	8001894 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287c:	e00a      	b.n	8002894 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800287e:	f7ff f809 	bl	8001894 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	f241 3288 	movw	r2, #5000	; 0x1388
 800288c:	4293      	cmp	r3, r2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e0c5      	b.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002894:	4b65      	ldr	r3, [pc, #404]	; (8002a2c <HAL_RCC_OscConfig+0x4e8>)
 8002896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0ee      	beq.n	800287e <HAL_RCC_OscConfig+0x33a>
 80028a0:	e014      	b.n	80028cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a2:	f7fe fff7 	bl	8001894 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a8:	e00a      	b.n	80028c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028aa:	f7fe fff3 	bl	8001894 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e0af      	b.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c0:	4b5a      	ldr	r3, [pc, #360]	; (8002a2c <HAL_RCC_OscConfig+0x4e8>)
 80028c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1ee      	bne.n	80028aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028cc:	7dfb      	ldrb	r3, [r7, #23]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d105      	bne.n	80028de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d2:	4b56      	ldr	r3, [pc, #344]	; (8002a2c <HAL_RCC_OscConfig+0x4e8>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	4a55      	ldr	r2, [pc, #340]	; (8002a2c <HAL_RCC_OscConfig+0x4e8>)
 80028d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 809b 	beq.w	8002a1e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028e8:	4b50      	ldr	r3, [pc, #320]	; (8002a2c <HAL_RCC_OscConfig+0x4e8>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 030c 	and.w	r3, r3, #12
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d05c      	beq.n	80029ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d141      	bne.n	8002980 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fc:	4b4c      	ldr	r3, [pc, #304]	; (8002a30 <HAL_RCC_OscConfig+0x4ec>)
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002902:	f7fe ffc7 	bl	8001894 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290a:	f7fe ffc3 	bl	8001894 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e081      	b.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291c:	4b43      	ldr	r3, [pc, #268]	; (8002a2c <HAL_RCC_OscConfig+0x4e8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1f0      	bne.n	800290a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69da      	ldr	r2, [r3, #28]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	431a      	orrs	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	019b      	lsls	r3, r3, #6
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293e:	085b      	lsrs	r3, r3, #1
 8002940:	3b01      	subs	r3, #1
 8002942:	041b      	lsls	r3, r3, #16
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294a:	061b      	lsls	r3, r3, #24
 800294c:	4937      	ldr	r1, [pc, #220]	; (8002a2c <HAL_RCC_OscConfig+0x4e8>)
 800294e:	4313      	orrs	r3, r2
 8002950:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002952:	4b37      	ldr	r3, [pc, #220]	; (8002a30 <HAL_RCC_OscConfig+0x4ec>)
 8002954:	2201      	movs	r2, #1
 8002956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002958:	f7fe ff9c 	bl	8001894 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002960:	f7fe ff98 	bl	8001894 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e056      	b.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002972:	4b2e      	ldr	r3, [pc, #184]	; (8002a2c <HAL_RCC_OscConfig+0x4e8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0x41c>
 800297e:	e04e      	b.n	8002a1e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002980:	4b2b      	ldr	r3, [pc, #172]	; (8002a30 <HAL_RCC_OscConfig+0x4ec>)
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002986:	f7fe ff85 	bl	8001894 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800298e:	f7fe ff81 	bl	8001894 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e03f      	b.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a0:	4b22      	ldr	r3, [pc, #136]	; (8002a2c <HAL_RCC_OscConfig+0x4e8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f0      	bne.n	800298e <HAL_RCC_OscConfig+0x44a>
 80029ac:	e037      	b.n	8002a1e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e032      	b.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029ba:	4b1c      	ldr	r3, [pc, #112]	; (8002a2c <HAL_RCC_OscConfig+0x4e8>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d028      	beq.n	8002a1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d121      	bne.n	8002a1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d11a      	bne.n	8002a1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029ea:	4013      	ands	r3, r2
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d111      	bne.n	8002a1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	085b      	lsrs	r3, r3, #1
 8002a02:	3b01      	subs	r3, #1
 8002a04:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d107      	bne.n	8002a1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d001      	beq.n	8002a1e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40007000 	.word	0x40007000
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	42470060 	.word	0x42470060

08002a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0cc      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a48:	4b68      	ldr	r3, [pc, #416]	; (8002bec <HAL_RCC_ClockConfig+0x1b8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d90c      	bls.n	8002a70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a56:	4b65      	ldr	r3, [pc, #404]	; (8002bec <HAL_RCC_ClockConfig+0x1b8>)
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5e:	4b63      	ldr	r3, [pc, #396]	; (8002bec <HAL_RCC_ClockConfig+0x1b8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0b8      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d020      	beq.n	8002abe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a88:	4b59      	ldr	r3, [pc, #356]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	4a58      	ldr	r2, [pc, #352]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0308 	and.w	r3, r3, #8
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aa0:	4b53      	ldr	r3, [pc, #332]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	4a52      	ldr	r2, [pc, #328]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aac:	4b50      	ldr	r3, [pc, #320]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	494d      	ldr	r1, [pc, #308]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d044      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d107      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad2:	4b47      	ldr	r3, [pc, #284]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d119      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e07f      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d003      	beq.n	8002af2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d107      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af2:	4b3f      	ldr	r3, [pc, #252]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e06f      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b02:	4b3b      	ldr	r3, [pc, #236]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e067      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b12:	4b37      	ldr	r3, [pc, #220]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f023 0203 	bic.w	r2, r3, #3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	4934      	ldr	r1, [pc, #208]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b24:	f7fe feb6 	bl	8001894 <HAL_GetTick>
 8002b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2a:	e00a      	b.n	8002b42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b2c:	f7fe feb2 	bl	8001894 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e04f      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b42:	4b2b      	ldr	r3, [pc, #172]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 020c 	and.w	r2, r3, #12
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d1eb      	bne.n	8002b2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b54:	4b25      	ldr	r3, [pc, #148]	; (8002bec <HAL_RCC_ClockConfig+0x1b8>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d20c      	bcs.n	8002b7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b62:	4b22      	ldr	r3, [pc, #136]	; (8002bec <HAL_RCC_ClockConfig+0x1b8>)
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6a:	4b20      	ldr	r3, [pc, #128]	; (8002bec <HAL_RCC_ClockConfig+0x1b8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e032      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b88:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4916      	ldr	r1, [pc, #88]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ba6:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	490e      	ldr	r1, [pc, #56]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bba:	f000 f821 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	490a      	ldr	r1, [pc, #40]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8002bcc:	5ccb      	ldrb	r3, [r1, r3]
 8002bce:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd2:	4a09      	ldr	r2, [pc, #36]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe fe16 	bl	800180c <HAL_InitTick>

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40023c00 	.word	0x40023c00
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	08004050 	.word	0x08004050
 8002bf8:	20007800 	.word	0x20007800
 8002bfc:	20007804 	.word	0x20007804

08002c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c04:	b084      	sub	sp, #16
 8002c06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	607b      	str	r3, [r7, #4]
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	2300      	movs	r3, #0
 8002c12:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c18:	4b67      	ldr	r3, [pc, #412]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 030c 	and.w	r3, r3, #12
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d00d      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0x40>
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	f200 80bd 	bhi.w	8002da4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d002      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0x34>
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d003      	beq.n	8002c3a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c32:	e0b7      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c34:	4b61      	ldr	r3, [pc, #388]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c36:	60bb      	str	r3, [r7, #8]
       break;
 8002c38:	e0b7      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c3a:	4b61      	ldr	r3, [pc, #388]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002c3c:	60bb      	str	r3, [r7, #8]
      break;
 8002c3e:	e0b4      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c40:	4b5d      	ldr	r3, [pc, #372]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c48:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c4a:	4b5b      	ldr	r3, [pc, #364]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d04d      	beq.n	8002cf2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c56:	4b58      	ldr	r3, [pc, #352]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	099b      	lsrs	r3, r3, #6
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c66:	f04f 0100 	mov.w	r1, #0
 8002c6a:	ea02 0800 	and.w	r8, r2, r0
 8002c6e:	ea03 0901 	and.w	r9, r3, r1
 8002c72:	4640      	mov	r0, r8
 8002c74:	4649      	mov	r1, r9
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	014b      	lsls	r3, r1, #5
 8002c80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c84:	0142      	lsls	r2, r0, #5
 8002c86:	4610      	mov	r0, r2
 8002c88:	4619      	mov	r1, r3
 8002c8a:	ebb0 0008 	subs.w	r0, r0, r8
 8002c8e:	eb61 0109 	sbc.w	r1, r1, r9
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	018b      	lsls	r3, r1, #6
 8002c9c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ca0:	0182      	lsls	r2, r0, #6
 8002ca2:	1a12      	subs	r2, r2, r0
 8002ca4:	eb63 0301 	sbc.w	r3, r3, r1
 8002ca8:	f04f 0000 	mov.w	r0, #0
 8002cac:	f04f 0100 	mov.w	r1, #0
 8002cb0:	00d9      	lsls	r1, r3, #3
 8002cb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cb6:	00d0      	lsls	r0, r2, #3
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	eb12 0208 	adds.w	r2, r2, r8
 8002cc0:	eb43 0309 	adc.w	r3, r3, r9
 8002cc4:	f04f 0000 	mov.w	r0, #0
 8002cc8:	f04f 0100 	mov.w	r1, #0
 8002ccc:	0259      	lsls	r1, r3, #9
 8002cce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002cd2:	0250      	lsls	r0, r2, #9
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	f7fd fa76 	bl	80001d4 <__aeabi_uldivmod>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4613      	mov	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	e04a      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf2:	4b31      	ldr	r3, [pc, #196]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	099b      	lsrs	r3, r3, #6
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d02:	f04f 0100 	mov.w	r1, #0
 8002d06:	ea02 0400 	and.w	r4, r2, r0
 8002d0a:	ea03 0501 	and.w	r5, r3, r1
 8002d0e:	4620      	mov	r0, r4
 8002d10:	4629      	mov	r1, r5
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	014b      	lsls	r3, r1, #5
 8002d1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d20:	0142      	lsls	r2, r0, #5
 8002d22:	4610      	mov	r0, r2
 8002d24:	4619      	mov	r1, r3
 8002d26:	1b00      	subs	r0, r0, r4
 8002d28:	eb61 0105 	sbc.w	r1, r1, r5
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	018b      	lsls	r3, r1, #6
 8002d36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d3a:	0182      	lsls	r2, r0, #6
 8002d3c:	1a12      	subs	r2, r2, r0
 8002d3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d42:	f04f 0000 	mov.w	r0, #0
 8002d46:	f04f 0100 	mov.w	r1, #0
 8002d4a:	00d9      	lsls	r1, r3, #3
 8002d4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d50:	00d0      	lsls	r0, r2, #3
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	1912      	adds	r2, r2, r4
 8002d58:	eb45 0303 	adc.w	r3, r5, r3
 8002d5c:	f04f 0000 	mov.w	r0, #0
 8002d60:	f04f 0100 	mov.w	r1, #0
 8002d64:	0299      	lsls	r1, r3, #10
 8002d66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d6a:	0290      	lsls	r0, r2, #10
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4610      	mov	r0, r2
 8002d72:	4619      	mov	r1, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	461a      	mov	r2, r3
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	f7fd fa2a 	bl	80001d4 <__aeabi_uldivmod>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4613      	mov	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d88:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	0c1b      	lsrs	r3, r3, #16
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	3301      	adds	r3, #1
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da0:	60bb      	str	r3, [r7, #8]
      break;
 8002da2:	e002      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002da6:	60bb      	str	r3, [r7, #8]
      break;
 8002da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002daa:	68bb      	ldr	r3, [r7, #8]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	00f42400 	.word	0x00f42400
 8002dc0:	007a1200 	.word	0x007a1200

08002dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e041      	b.n	8002e5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d106      	bne.n	8002df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7fe f95c 	bl	80010a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	4619      	mov	r1, r3
 8002e02:	4610      	mov	r0, r2
 8002e04:	f000 fd60 	bl	80038c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e041      	b.n	8002ef8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d106      	bne.n	8002e8e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f839 	bl	8002f00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2202      	movs	r2, #2
 8002e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	f000 fd11 	bl	80038c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d109      	bne.n	8002f40 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	bf0c      	ite	eq
 8002f38:	2301      	moveq	r3, #1
 8002f3a:	2300      	movne	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	e022      	b.n	8002f86 <HAL_TIM_PWM_Start_DMA+0x72>
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d109      	bne.n	8002f5a <HAL_TIM_PWM_Start_DMA+0x46>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	bf0c      	ite	eq
 8002f52:	2301      	moveq	r3, #1
 8002f54:	2300      	movne	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	e015      	b.n	8002f86 <HAL_TIM_PWM_Start_DMA+0x72>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d109      	bne.n	8002f74 <HAL_TIM_PWM_Start_DMA+0x60>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	e008      	b.n	8002f86 <HAL_TIM_PWM_Start_DMA+0x72>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	bf0c      	ite	eq
 8002f80:	2301      	moveq	r3, #1
 8002f82:	2300      	movne	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e15d      	b.n	800324a <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d109      	bne.n	8002fa8 <HAL_TIM_PWM_Start_DMA+0x94>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	e022      	b.n	8002fee <HAL_TIM_PWM_Start_DMA+0xda>
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d109      	bne.n	8002fc2 <HAL_TIM_PWM_Start_DMA+0xae>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	bf0c      	ite	eq
 8002fba:	2301      	moveq	r3, #1
 8002fbc:	2300      	movne	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	e015      	b.n	8002fee <HAL_TIM_PWM_Start_DMA+0xda>
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d109      	bne.n	8002fdc <HAL_TIM_PWM_Start_DMA+0xc8>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2301      	moveq	r3, #1
 8002fd6:	2300      	movne	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	e008      	b.n	8002fee <HAL_TIM_PWM_Start_DMA+0xda>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d024      	beq.n	800303c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d104      	bne.n	8003002 <HAL_TIM_PWM_Start_DMA+0xee>
 8002ff8:	887b      	ldrh	r3, [r7, #2]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e123      	b.n	800324a <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d104      	bne.n	8003012 <HAL_TIM_PWM_Start_DMA+0xfe>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003010:	e016      	b.n	8003040 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b04      	cmp	r3, #4
 8003016:	d104      	bne.n	8003022 <HAL_TIM_PWM_Start_DMA+0x10e>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003020:	e00e      	b.n	8003040 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b08      	cmp	r3, #8
 8003026:	d104      	bne.n	8003032 <HAL_TIM_PWM_Start_DMA+0x11e>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003030:	e006      	b.n	8003040 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2202      	movs	r2, #2
 8003036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800303a:	e001      	b.n	8003040 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e104      	b.n	800324a <HAL_TIM_PWM_Start_DMA+0x336>
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b0c      	cmp	r3, #12
 8003044:	f200 80ae 	bhi.w	80031a4 <HAL_TIM_PWM_Start_DMA+0x290>
 8003048:	a201      	add	r2, pc, #4	; (adr r2, 8003050 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800304a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304e:	bf00      	nop
 8003050:	08003085 	.word	0x08003085
 8003054:	080031a5 	.word	0x080031a5
 8003058:	080031a5 	.word	0x080031a5
 800305c:	080031a5 	.word	0x080031a5
 8003060:	080030cd 	.word	0x080030cd
 8003064:	080031a5 	.word	0x080031a5
 8003068:	080031a5 	.word	0x080031a5
 800306c:	080031a5 	.word	0x080031a5
 8003070:	08003115 	.word	0x08003115
 8003074:	080031a5 	.word	0x080031a5
 8003078:	080031a5 	.word	0x080031a5
 800307c:	080031a5 	.word	0x080031a5
 8003080:	0800315d 	.word	0x0800315d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	4a72      	ldr	r2, [pc, #456]	; (8003254 <HAL_TIM_PWM_Start_DMA+0x340>)
 800308a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	4a71      	ldr	r2, [pc, #452]	; (8003258 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003092:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	4a70      	ldr	r2, [pc, #448]	; (800325c <HAL_TIM_PWM_Start_DMA+0x348>)
 800309a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3334      	adds	r3, #52	; 0x34
 80030a8:	461a      	mov	r2, r3
 80030aa:	887b      	ldrh	r3, [r7, #2]
 80030ac:	f7fe fde2 	bl	8001c74 <HAL_DMA_Start_IT>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e0c7      	b.n	800324a <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030c8:	60da      	str	r2, [r3, #12]
      break;
 80030ca:	e06e      	b.n	80031aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	4a60      	ldr	r2, [pc, #384]	; (8003254 <HAL_TIM_PWM_Start_DMA+0x340>)
 80030d2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	4a5f      	ldr	r2, [pc, #380]	; (8003258 <HAL_TIM_PWM_Start_DMA+0x344>)
 80030da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	4a5e      	ldr	r2, [pc, #376]	; (800325c <HAL_TIM_PWM_Start_DMA+0x348>)
 80030e2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	3338      	adds	r3, #56	; 0x38
 80030f0:	461a      	mov	r2, r3
 80030f2:	887b      	ldrh	r3, [r7, #2]
 80030f4:	f7fe fdbe 	bl	8001c74 <HAL_DMA_Start_IT>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e0a3      	b.n	800324a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003110:	60da      	str	r2, [r3, #12]
      break;
 8003112:	e04a      	b.n	80031aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	4a4e      	ldr	r2, [pc, #312]	; (8003254 <HAL_TIM_PWM_Start_DMA+0x340>)
 800311a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	4a4d      	ldr	r2, [pc, #308]	; (8003258 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003122:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	4a4c      	ldr	r2, [pc, #304]	; (800325c <HAL_TIM_PWM_Start_DMA+0x348>)
 800312a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	333c      	adds	r3, #60	; 0x3c
 8003138:	461a      	mov	r2, r3
 800313a:	887b      	ldrh	r3, [r7, #2]
 800313c:	f7fe fd9a 	bl	8001c74 <HAL_DMA_Start_IT>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e07f      	b.n	800324a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003158:	60da      	str	r2, [r3, #12]
      break;
 800315a:	e026      	b.n	80031aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003160:	4a3c      	ldr	r2, [pc, #240]	; (8003254 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003162:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	4a3b      	ldr	r2, [pc, #236]	; (8003258 <HAL_TIM_PWM_Start_DMA+0x344>)
 800316a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	4a3a      	ldr	r2, [pc, #232]	; (800325c <HAL_TIM_PWM_Start_DMA+0x348>)
 8003172:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	3340      	adds	r3, #64	; 0x40
 8003180:	461a      	mov	r2, r3
 8003182:	887b      	ldrh	r3, [r7, #2]
 8003184:	f7fe fd76 	bl	8001c74 <HAL_DMA_Start_IT>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e05b      	b.n	800324a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031a0:	60da      	str	r2, [r3, #12]
      break;
 80031a2:	e002      	b.n	80031aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	75fb      	strb	r3, [r7, #23]
      break;
 80031a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80031aa:	7dfb      	ldrb	r3, [r7, #23]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d14b      	bne.n	8003248 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2201      	movs	r2, #1
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fe2b 	bl	8003e14 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a27      	ldr	r2, [pc, #156]	; (8003260 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d107      	bne.n	80031d8 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031d6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a20      	ldr	r2, [pc, #128]	; (8003260 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d018      	beq.n	8003214 <HAL_TIM_PWM_Start_DMA+0x300>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ea:	d013      	beq.n	8003214 <HAL_TIM_PWM_Start_DMA+0x300>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a1c      	ldr	r2, [pc, #112]	; (8003264 <HAL_TIM_PWM_Start_DMA+0x350>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d00e      	beq.n	8003214 <HAL_TIM_PWM_Start_DMA+0x300>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a1b      	ldr	r2, [pc, #108]	; (8003268 <HAL_TIM_PWM_Start_DMA+0x354>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d009      	beq.n	8003214 <HAL_TIM_PWM_Start_DMA+0x300>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a19      	ldr	r2, [pc, #100]	; (800326c <HAL_TIM_PWM_Start_DMA+0x358>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d004      	beq.n	8003214 <HAL_TIM_PWM_Start_DMA+0x300>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a18      	ldr	r2, [pc, #96]	; (8003270 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d111      	bne.n	8003238 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	2b06      	cmp	r3, #6
 8003224:	d010      	beq.n	8003248 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0201 	orr.w	r2, r2, #1
 8003234:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003236:	e007      	b.n	8003248 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003248:	7dfb      	ldrb	r3, [r7, #23]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	080037b9 	.word	0x080037b9
 8003258:	08003861 	.word	0x08003861
 800325c:	08003727 	.word	0x08003727
 8003260:	40010000 	.word	0x40010000
 8003264:	40000400 	.word	0x40000400
 8003268:	40000800 	.word	0x40000800
 800326c:	40000c00 	.word	0x40000c00
 8003270:	40014000 	.word	0x40014000

08003274 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	73fb      	strb	r3, [r7, #15]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b0c      	cmp	r3, #12
 8003286:	d855      	bhi.n	8003334 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003288:	a201      	add	r2, pc, #4	; (adr r2, 8003290 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800328a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328e:	bf00      	nop
 8003290:	080032c5 	.word	0x080032c5
 8003294:	08003335 	.word	0x08003335
 8003298:	08003335 	.word	0x08003335
 800329c:	08003335 	.word	0x08003335
 80032a0:	080032e1 	.word	0x080032e1
 80032a4:	08003335 	.word	0x08003335
 80032a8:	08003335 	.word	0x08003335
 80032ac:	08003335 	.word	0x08003335
 80032b0:	080032fd 	.word	0x080032fd
 80032b4:	08003335 	.word	0x08003335
 80032b8:	08003335 	.word	0x08003335
 80032bc:	08003335 	.word	0x08003335
 80032c0:	08003319 	.word	0x08003319
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fe fd23 	bl	8001d24 <HAL_DMA_Abort_IT>
      break;
 80032de:	e02c      	b.n	800333a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fe fd15 	bl	8001d24 <HAL_DMA_Abort_IT>
      break;
 80032fa:	e01e      	b.n	800333a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800330a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	4618      	mov	r0, r3
 8003312:	f7fe fd07 	bl	8001d24 <HAL_DMA_Abort_IT>
      break;
 8003316:	e010      	b.n	800333a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003326:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	4618      	mov	r0, r3
 800332e:	f7fe fcf9 	bl	8001d24 <HAL_DMA_Abort_IT>
      break;
 8003332:	e002      	b.n	800333a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	73fb      	strb	r3, [r7, #15]
      break;
 8003338:	bf00      	nop
  }

  if (status == HAL_OK)
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d157      	bne.n	80033f0 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2200      	movs	r2, #0
 8003346:	6839      	ldr	r1, [r7, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fd63 	bl	8003e14 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a2a      	ldr	r2, [pc, #168]	; (80033fc <HAL_TIM_PWM_Stop_DMA+0x188>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d117      	bne.n	8003388 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6a1a      	ldr	r2, [r3, #32]
 800335e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10f      	bne.n	8003388 <HAL_TIM_PWM_Stop_DMA+0x114>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6a1a      	ldr	r2, [r3, #32]
 800336e:	f240 4344 	movw	r3, #1092	; 0x444
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d107      	bne.n	8003388 <HAL_TIM_PWM_Stop_DMA+0x114>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003386:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6a1a      	ldr	r2, [r3, #32]
 800338e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10f      	bne.n	80033b8 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6a1a      	ldr	r2, [r3, #32]
 800339e:	f240 4344 	movw	r3, #1092	; 0x444
 80033a2:	4013      	ands	r3, r2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d107      	bne.n	80033b8 <HAL_TIM_PWM_Stop_DMA+0x144>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0201 	bic.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d104      	bne.n	80033c8 <HAL_TIM_PWM_Stop_DMA+0x154>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033c6:	e013      	b.n	80033f0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d104      	bne.n	80033d8 <HAL_TIM_PWM_Stop_DMA+0x164>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033d6:	e00b      	b.n	80033f0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d104      	bne.n	80033e8 <HAL_TIM_PWM_Stop_DMA+0x174>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033e6:	e003      	b.n	80033f0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40010000 	.word	0x40010000

08003400 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800340c:	2300      	movs	r3, #0
 800340e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800341a:	2302      	movs	r3, #2
 800341c:	e0ae      	b.n	800357c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b0c      	cmp	r3, #12
 800342a:	f200 809f 	bhi.w	800356c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800342e:	a201      	add	r2, pc, #4	; (adr r2, 8003434 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003434:	08003469 	.word	0x08003469
 8003438:	0800356d 	.word	0x0800356d
 800343c:	0800356d 	.word	0x0800356d
 8003440:	0800356d 	.word	0x0800356d
 8003444:	080034a9 	.word	0x080034a9
 8003448:	0800356d 	.word	0x0800356d
 800344c:	0800356d 	.word	0x0800356d
 8003450:	0800356d 	.word	0x0800356d
 8003454:	080034eb 	.word	0x080034eb
 8003458:	0800356d 	.word	0x0800356d
 800345c:	0800356d 	.word	0x0800356d
 8003460:	0800356d 	.word	0x0800356d
 8003464:	0800352b 	.word	0x0800352b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68b9      	ldr	r1, [r7, #8]
 800346e:	4618      	mov	r0, r3
 8003470:	f000 faaa 	bl	80039c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0208 	orr.w	r2, r2, #8
 8003482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699a      	ldr	r2, [r3, #24]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0204 	bic.w	r2, r2, #4
 8003492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6999      	ldr	r1, [r3, #24]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	691a      	ldr	r2, [r3, #16]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	619a      	str	r2, [r3, #24]
      break;
 80034a6:	e064      	b.n	8003572 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 faf0 	bl	8003a94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699a      	ldr	r2, [r3, #24]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699a      	ldr	r2, [r3, #24]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6999      	ldr	r1, [r3, #24]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	021a      	lsls	r2, r3, #8
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	619a      	str	r2, [r3, #24]
      break;
 80034e8:	e043      	b.n	8003572 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68b9      	ldr	r1, [r7, #8]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fb3b 	bl	8003b6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f042 0208 	orr.w	r2, r2, #8
 8003504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69da      	ldr	r2, [r3, #28]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0204 	bic.w	r2, r2, #4
 8003514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	69d9      	ldr	r1, [r3, #28]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	61da      	str	r2, [r3, #28]
      break;
 8003528:	e023      	b.n	8003572 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68b9      	ldr	r1, [r7, #8]
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fb85 	bl	8003c40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69da      	ldr	r2, [r3, #28]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	69da      	ldr	r2, [r3, #28]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	69d9      	ldr	r1, [r3, #28]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	021a      	lsls	r2, r3, #8
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	61da      	str	r2, [r3, #28]
      break;
 800356a:	e002      	b.n	8003572 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	75fb      	strb	r3, [r7, #23]
      break;
 8003570:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800357a:	7dfb      	ldrb	r3, [r7, #23]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003598:	2b01      	cmp	r3, #1
 800359a:	d101      	bne.n	80035a0 <HAL_TIM_ConfigClockSource+0x1c>
 800359c:	2302      	movs	r3, #2
 800359e:	e0b4      	b.n	800370a <HAL_TIM_ConfigClockSource+0x186>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d8:	d03e      	beq.n	8003658 <HAL_TIM_ConfigClockSource+0xd4>
 80035da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035de:	f200 8087 	bhi.w	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
 80035e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e6:	f000 8086 	beq.w	80036f6 <HAL_TIM_ConfigClockSource+0x172>
 80035ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ee:	d87f      	bhi.n	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
 80035f0:	2b70      	cmp	r3, #112	; 0x70
 80035f2:	d01a      	beq.n	800362a <HAL_TIM_ConfigClockSource+0xa6>
 80035f4:	2b70      	cmp	r3, #112	; 0x70
 80035f6:	d87b      	bhi.n	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
 80035f8:	2b60      	cmp	r3, #96	; 0x60
 80035fa:	d050      	beq.n	800369e <HAL_TIM_ConfigClockSource+0x11a>
 80035fc:	2b60      	cmp	r3, #96	; 0x60
 80035fe:	d877      	bhi.n	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003600:	2b50      	cmp	r3, #80	; 0x50
 8003602:	d03c      	beq.n	800367e <HAL_TIM_ConfigClockSource+0xfa>
 8003604:	2b50      	cmp	r3, #80	; 0x50
 8003606:	d873      	bhi.n	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003608:	2b40      	cmp	r3, #64	; 0x40
 800360a:	d058      	beq.n	80036be <HAL_TIM_ConfigClockSource+0x13a>
 800360c:	2b40      	cmp	r3, #64	; 0x40
 800360e:	d86f      	bhi.n	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003610:	2b30      	cmp	r3, #48	; 0x30
 8003612:	d064      	beq.n	80036de <HAL_TIM_ConfigClockSource+0x15a>
 8003614:	2b30      	cmp	r3, #48	; 0x30
 8003616:	d86b      	bhi.n	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003618:	2b20      	cmp	r3, #32
 800361a:	d060      	beq.n	80036de <HAL_TIM_ConfigClockSource+0x15a>
 800361c:	2b20      	cmp	r3, #32
 800361e:	d867      	bhi.n	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003620:	2b00      	cmp	r3, #0
 8003622:	d05c      	beq.n	80036de <HAL_TIM_ConfigClockSource+0x15a>
 8003624:	2b10      	cmp	r3, #16
 8003626:	d05a      	beq.n	80036de <HAL_TIM_ConfigClockSource+0x15a>
 8003628:	e062      	b.n	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	6899      	ldr	r1, [r3, #8]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	f000 fbcb 	bl	8003dd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800364c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	609a      	str	r2, [r3, #8]
      break;
 8003656:	e04f      	b.n	80036f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6818      	ldr	r0, [r3, #0]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	6899      	ldr	r1, [r3, #8]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f000 fbb4 	bl	8003dd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800367a:	609a      	str	r2, [r3, #8]
      break;
 800367c:	e03c      	b.n	80036f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	6859      	ldr	r1, [r3, #4]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	461a      	mov	r2, r3
 800368c:	f000 fb28 	bl	8003ce0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2150      	movs	r1, #80	; 0x50
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fb81 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 800369c:	e02c      	b.n	80036f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	6859      	ldr	r1, [r3, #4]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	461a      	mov	r2, r3
 80036ac:	f000 fb47 	bl	8003d3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2160      	movs	r1, #96	; 0x60
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fb71 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 80036bc:	e01c      	b.n	80036f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	6859      	ldr	r1, [r3, #4]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	461a      	mov	r2, r3
 80036cc:	f000 fb08 	bl	8003ce0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2140      	movs	r1, #64	; 0x40
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fb61 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 80036dc:	e00c      	b.n	80036f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4619      	mov	r1, r3
 80036e8:	4610      	mov	r0, r2
 80036ea:	f000 fb58 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 80036ee:	e003      	b.n	80036f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	73fb      	strb	r3, [r7, #15]
      break;
 80036f4:	e000      	b.n	80036f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003708:	7bfb      	ldrb	r3, [r7, #15]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003732:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	429a      	cmp	r2, r3
 800373c:	d107      	bne.n	800374e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800374c:	e02a      	b.n	80037a4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	429a      	cmp	r2, r3
 8003756:	d107      	bne.n	8003768 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2202      	movs	r2, #2
 800375c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003766:	e01d      	b.n	80037a4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	429a      	cmp	r2, r3
 8003770:	d107      	bne.n	8003782 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2204      	movs	r2, #4
 8003776:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003780:	e010      	b.n	80037a4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	429a      	cmp	r2, r3
 800378a:	d107      	bne.n	800379c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2208      	movs	r2, #8
 8003790:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800379a:	e003      	b.n	80037a4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f7ff ffb4 	bl	8003712 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	771a      	strb	r2, [r3, #28]
}
 80037b0:	bf00      	nop
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d10b      	bne.n	80037e8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d136      	bne.n	800384c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037e6:	e031      	b.n	800384c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d10b      	bne.n	800380a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2202      	movs	r2, #2
 80037f6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d125      	bne.n	800384c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003808:	e020      	b.n	800384c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	429a      	cmp	r2, r3
 8003812:	d10b      	bne.n	800382c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2204      	movs	r2, #4
 8003818:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d114      	bne.n	800384c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800382a:	e00f      	b.n	800384c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	429a      	cmp	r2, r3
 8003834:	d10a      	bne.n	800384c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2208      	movs	r2, #8
 800383a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d103      	bne.n	800384c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f7fd fb2d 	bl	8000eac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	771a      	strb	r2, [r3, #28]
}
 8003858:	bf00      	nop
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	429a      	cmp	r2, r3
 8003876:	d103      	bne.n	8003880 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2201      	movs	r2, #1
 800387c:	771a      	strb	r2, [r3, #28]
 800387e:	e019      	b.n	80038b4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	429a      	cmp	r2, r3
 8003888:	d103      	bne.n	8003892 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2202      	movs	r2, #2
 800388e:	771a      	strb	r2, [r3, #28]
 8003890:	e010      	b.n	80038b4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	429a      	cmp	r2, r3
 800389a:	d103      	bne.n	80038a4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2204      	movs	r2, #4
 80038a0:	771a      	strb	r2, [r3, #28]
 80038a2:	e007      	b.n	80038b4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d102      	bne.n	80038b4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2208      	movs	r2, #8
 80038b2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f7fd fa35 	bl	8000d24 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	771a      	strb	r2, [r3, #28]
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a34      	ldr	r2, [pc, #208]	; (80039ac <TIM_Base_SetConfig+0xe4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00f      	beq.n	8003900 <TIM_Base_SetConfig+0x38>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e6:	d00b      	beq.n	8003900 <TIM_Base_SetConfig+0x38>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a31      	ldr	r2, [pc, #196]	; (80039b0 <TIM_Base_SetConfig+0xe8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d007      	beq.n	8003900 <TIM_Base_SetConfig+0x38>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a30      	ldr	r2, [pc, #192]	; (80039b4 <TIM_Base_SetConfig+0xec>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d003      	beq.n	8003900 <TIM_Base_SetConfig+0x38>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a2f      	ldr	r2, [pc, #188]	; (80039b8 <TIM_Base_SetConfig+0xf0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d108      	bne.n	8003912 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a25      	ldr	r2, [pc, #148]	; (80039ac <TIM_Base_SetConfig+0xe4>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d01b      	beq.n	8003952 <TIM_Base_SetConfig+0x8a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003920:	d017      	beq.n	8003952 <TIM_Base_SetConfig+0x8a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a22      	ldr	r2, [pc, #136]	; (80039b0 <TIM_Base_SetConfig+0xe8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d013      	beq.n	8003952 <TIM_Base_SetConfig+0x8a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a21      	ldr	r2, [pc, #132]	; (80039b4 <TIM_Base_SetConfig+0xec>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00f      	beq.n	8003952 <TIM_Base_SetConfig+0x8a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a20      	ldr	r2, [pc, #128]	; (80039b8 <TIM_Base_SetConfig+0xf0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00b      	beq.n	8003952 <TIM_Base_SetConfig+0x8a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a1f      	ldr	r2, [pc, #124]	; (80039bc <TIM_Base_SetConfig+0xf4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d007      	beq.n	8003952 <TIM_Base_SetConfig+0x8a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a1e      	ldr	r2, [pc, #120]	; (80039c0 <TIM_Base_SetConfig+0xf8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d003      	beq.n	8003952 <TIM_Base_SetConfig+0x8a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a1d      	ldr	r2, [pc, #116]	; (80039c4 <TIM_Base_SetConfig+0xfc>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d108      	bne.n	8003964 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	4313      	orrs	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	4313      	orrs	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a08      	ldr	r2, [pc, #32]	; (80039ac <TIM_Base_SetConfig+0xe4>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d103      	bne.n	8003998 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	615a      	str	r2, [r3, #20]
}
 800399e:	bf00      	nop
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40010000 	.word	0x40010000
 80039b0:	40000400 	.word	0x40000400
 80039b4:	40000800 	.word	0x40000800
 80039b8:	40000c00 	.word	0x40000c00
 80039bc:	40014000 	.word	0x40014000
 80039c0:	40014400 	.word	0x40014400
 80039c4:	40014800 	.word	0x40014800

080039c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	f023 0201 	bic.w	r2, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0303 	bic.w	r3, r3, #3
 80039fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f023 0302 	bic.w	r3, r3, #2
 8003a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a1c      	ldr	r2, [pc, #112]	; (8003a90 <TIM_OC1_SetConfig+0xc8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d10c      	bne.n	8003a3e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f023 0308 	bic.w	r3, r3, #8
 8003a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f023 0304 	bic.w	r3, r3, #4
 8003a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a13      	ldr	r2, [pc, #76]	; (8003a90 <TIM_OC1_SetConfig+0xc8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d111      	bne.n	8003a6a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	621a      	str	r2, [r3, #32]
}
 8003a84:	bf00      	nop
 8003a86:	371c      	adds	r7, #28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	40010000 	.word	0x40010000

08003a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	f023 0210 	bic.w	r2, r3, #16
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	021b      	lsls	r3, r3, #8
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f023 0320 	bic.w	r3, r3, #32
 8003ade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a1e      	ldr	r2, [pc, #120]	; (8003b68 <TIM_OC2_SetConfig+0xd4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d10d      	bne.n	8003b10 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a15      	ldr	r2, [pc, #84]	; (8003b68 <TIM_OC2_SetConfig+0xd4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d113      	bne.n	8003b40 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	621a      	str	r2, [r3, #32]
}
 8003b5a:	bf00      	nop
 8003b5c:	371c      	adds	r7, #28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40010000 	.word	0x40010000

08003b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0303 	bic.w	r3, r3, #3
 8003ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	021b      	lsls	r3, r3, #8
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a1d      	ldr	r2, [pc, #116]	; (8003c3c <TIM_OC3_SetConfig+0xd0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d10d      	bne.n	8003be6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	021b      	lsls	r3, r3, #8
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a14      	ldr	r2, [pc, #80]	; (8003c3c <TIM_OC3_SetConfig+0xd0>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d113      	bne.n	8003c16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	621a      	str	r2, [r3, #32]
}
 8003c30:	bf00      	nop
 8003c32:	371c      	adds	r7, #28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	40010000 	.word	0x40010000

08003c40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	021b      	lsls	r3, r3, #8
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	031b      	lsls	r3, r3, #12
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a10      	ldr	r2, [pc, #64]	; (8003cdc <TIM_OC4_SetConfig+0x9c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d109      	bne.n	8003cb4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ca6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	019b      	lsls	r3, r3, #6
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	621a      	str	r2, [r3, #32]
}
 8003cce:	bf00      	nop
 8003cd0:	371c      	adds	r7, #28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40010000 	.word	0x40010000

08003ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f023 0201 	bic.w	r2, r3, #1
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f023 030a 	bic.w	r3, r3, #10
 8003d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	621a      	str	r2, [r3, #32]
}
 8003d32:	bf00      	nop
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b087      	sub	sp, #28
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	f023 0210 	bic.w	r2, r3, #16
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	031b      	lsls	r3, r3, #12
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	621a      	str	r2, [r3, #32]
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b085      	sub	sp, #20
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f043 0307 	orr.w	r3, r3, #7
 8003dc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	609a      	str	r2, [r3, #8]
}
 8003dc8:	bf00      	nop
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	021a      	lsls	r2, r3, #8
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	609a      	str	r2, [r3, #8]
}
 8003e08:	bf00      	nop
 8003e0a:	371c      	adds	r7, #28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f003 031f 	and.w	r3, r3, #31
 8003e26:	2201      	movs	r2, #1
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a1a      	ldr	r2, [r3, #32]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	43db      	mvns	r3, r3
 8003e36:	401a      	ands	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a1a      	ldr	r2, [r3, #32]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f003 031f 	and.w	r3, r3, #31
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	621a      	str	r2, [r3, #32]
}
 8003e52:	bf00      	nop
 8003e54:	371c      	adds	r7, #28
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
	...

08003e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e050      	b.n	8003f1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a1c      	ldr	r2, [pc, #112]	; (8003f28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d018      	beq.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec4:	d013      	beq.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a18      	ldr	r2, [pc, #96]	; (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00e      	beq.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a16      	ldr	r2, [pc, #88]	; (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d009      	beq.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a15      	ldr	r2, [pc, #84]	; (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d004      	beq.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a13      	ldr	r2, [pc, #76]	; (8003f38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d10c      	bne.n	8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ef4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40010000 	.word	0x40010000
 8003f2c:	40000400 	.word	0x40000400
 8003f30:	40000800 	.word	0x40000800
 8003f34:	40000c00 	.word	0x40000c00
 8003f38:	40014000 	.word	0x40014000

08003f3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e03d      	b.n	8003fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <__libc_init_array>:
 8003fe0:	b570      	push	{r4, r5, r6, lr}
 8003fe2:	4d0d      	ldr	r5, [pc, #52]	; (8004018 <__libc_init_array+0x38>)
 8003fe4:	4c0d      	ldr	r4, [pc, #52]	; (800401c <__libc_init_array+0x3c>)
 8003fe6:	1b64      	subs	r4, r4, r5
 8003fe8:	10a4      	asrs	r4, r4, #2
 8003fea:	2600      	movs	r6, #0
 8003fec:	42a6      	cmp	r6, r4
 8003fee:	d109      	bne.n	8004004 <__libc_init_array+0x24>
 8003ff0:	4d0b      	ldr	r5, [pc, #44]	; (8004020 <__libc_init_array+0x40>)
 8003ff2:	4c0c      	ldr	r4, [pc, #48]	; (8004024 <__libc_init_array+0x44>)
 8003ff4:	f000 f820 	bl	8004038 <_init>
 8003ff8:	1b64      	subs	r4, r4, r5
 8003ffa:	10a4      	asrs	r4, r4, #2
 8003ffc:	2600      	movs	r6, #0
 8003ffe:	42a6      	cmp	r6, r4
 8004000:	d105      	bne.n	800400e <__libc_init_array+0x2e>
 8004002:	bd70      	pop	{r4, r5, r6, pc}
 8004004:	f855 3b04 	ldr.w	r3, [r5], #4
 8004008:	4798      	blx	r3
 800400a:	3601      	adds	r6, #1
 800400c:	e7ee      	b.n	8003fec <__libc_init_array+0xc>
 800400e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004012:	4798      	blx	r3
 8004014:	3601      	adds	r6, #1
 8004016:	e7f2      	b.n	8003ffe <__libc_init_array+0x1e>
 8004018:	08004070 	.word	0x08004070
 800401c:	08004070 	.word	0x08004070
 8004020:	08004070 	.word	0x08004070
 8004024:	08004074 	.word	0x08004074

08004028 <memset>:
 8004028:	4402      	add	r2, r0
 800402a:	4603      	mov	r3, r0
 800402c:	4293      	cmp	r3, r2
 800402e:	d100      	bne.n	8004032 <memset+0xa>
 8004030:	4770      	bx	lr
 8004032:	f803 1b01 	strb.w	r1, [r3], #1
 8004036:	e7f9      	b.n	800402c <memset+0x4>

08004038 <_init>:
 8004038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403a:	bf00      	nop
 800403c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800403e:	bc08      	pop	{r3}
 8004040:	469e      	mov	lr, r3
 8004042:	4770      	bx	lr

08004044 <_fini>:
 8004044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004046:	bf00      	nop
 8004048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404a:	bc08      	pop	{r3}
 800404c:	469e      	mov	lr, r3
 800404e:	4770      	bx	lr
